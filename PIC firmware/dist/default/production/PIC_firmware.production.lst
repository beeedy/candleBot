

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Thu May  7 10:06:01 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F97J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    66                           	psect	pa_nodes,global,class=CODE,delta=1
    67  0000                     tblptru	equ	0xFF8
    68                           tblptrh	equ	0xFF7
    69                           tblptrl	equ	0xFF6
    70                           tablat	equ	0xFF5
    71                           prodh	equ	0xFF4
    72                           prodl	equ	0xFF3
    73                           intcon	equ	0xFF2
    74                           intcon2	equ	0xFF1
    75                           intcon3	equ	0xFF0
    76                           indf0	equ	0xFEF
    77                           fsr0h	equ	0xFEA
    78                           fsr0l	equ	0xFE9
    79                           wreg	equ	0xFE8
    80                           indf1	equ	0xFE7
    81                           postinc1	equ	0xFE6
    82                           fsr1h	equ	0xFE2
    83                           fsr1l	equ	0xFE1
    84                           indf2	equ	0xFDF
    85                           postinc2	equ	0xFDE
    86                           postdec2	equ	0xFDD
    87                           fsr2h	equ	0xFDA
    88                           fsr2l	equ	0xFD9
    89                           status	equ	0xFD8
    90                           
    91                           	psect	idataBANK0
    92  011528                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for PS2_readGamepad@F16091
    96  011528  01                 	db	1
    97  011529  42                 	db	66
    98  01152A  00                 	db	0
    99  01152B  00                 	db	0
   100  01152C  00                 	db	0
   101  01152D  00                 	db	0
   102  01152E  00                 	db	0
   103  01152F  00                 	db	0
   104  011530  00                 	db	0
   105                           
   106                           ;initializer for _type_read
   107  011531  01                 	db	1
   108  011532  45                 	db	69
   109  011533  00                 	db	0
   110  011534  5A                 	db	90
   111  011535  5A                 	db	90
   112  011536  5A                 	db	90
   113  011537  5A                 	db	90
   114  011538  5A                 	db	90
   115  011539  5A                 	db	90
   116                           
   117                           ;initializer for _exit_config
   118  01153A  01                 	db	1
   119  01153B  43                 	db	67
   120  01153C  00                 	db	0
   121  01153D  00                 	db	0
   122  01153E  5A                 	db	90
   123  01153F  5A                 	db	90
   124  011540  5A                 	db	90
   125  011541  5A                 	db	90
   126  011542  5A                 	db	90
   127                           
   128                           ;initializer for _set_mode
   129  011543  01                 	db	1
   130  011544  44                 	db	68
   131  011545  00                 	db	0
   132  011546  01                 	db	1
   133  011547  03                 	db	3
   134  011548  00                 	db	0
   135  011549  00                 	db	0
   136  01154A  00                 	db	0
   137  01154B  00                 	db	0
   138                           
   139                           ;initializer for _enter_config
   140  01154C  01                 	db	1
   141  01154D  43                 	db	67
   142  01154E  00                 	db	0
   143  01154F  01                 	db	1
   144  011550  00                 	db	0
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           prodh	equ	0xFF4
   150                           prodl	equ	0xFF3
   151                           intcon	equ	0xFF2
   152                           intcon2	equ	0xFF1
   153                           intcon3	equ	0xFF0
   154                           indf0	equ	0xFEF
   155                           fsr0h	equ	0xFEA
   156                           fsr0l	equ	0xFE9
   157                           wreg	equ	0xFE8
   158                           indf1	equ	0xFE7
   159                           postinc1	equ	0xFE6
   160                           fsr1h	equ	0xFE2
   161                           fsr1l	equ	0xFE1
   162                           indf2	equ	0xFDF
   163                           postinc2	equ	0xFDE
   164                           postdec2	equ	0xFDD
   165                           fsr2h	equ	0xFDA
   166                           fsr2l	equ	0xFD9
   167                           status	equ	0xFD8
   168                           
   169                           	psect	mediumconst
   170  00FEC4                     __pmediumconst:
   171                           	opt stack 0
   172  00FEC4  00                 	db	0
   173  00FEC5                     _dpowers:
   174                           	opt stack 0
   175  00FEC5  0001               	dw	1
   176  00FEC7  000A               	dw	10
   177  00FEC9  0064               	dw	100
   178  00FECB  03E8               	dw	1000
   179  00FECD  2710               	dw	10000
   180  00FECF                     __end_of_dpowers:
   181                           	opt stack 0
   182  00FECF  3C                 	db	60
   183  00FED0  04                 	db	4
   184  00FED1  42                 	db	66
   185  00FED2  9F                 	db	159
   186  00FED3  6A                 	db	106
   187  00FED4  42                 	db	66
   188  00FED5  90                 	db	144
   189  00FED6  01                 	db	1
   190  00FED7  42                 	db	66
   191  00FED8  4D                 	db	77
   192  00FED9  BB                 	db	187
   193  00FEDA  40                 	db	64
   194  00FEDB  EC                 	db	236
   195  00FEDC  47                 	db	71
   196  00FEDD  3E                 	db	62
   197  00FEDE  8E                 	db	142
   198  00FEDF  1F                 	db	31
   199  00FEE0  BB                 	db	187
   200  00FEE1                     __end_ofatan@coeff_a:
   201                           	opt stack 0
   202  00FEE1  3C                 	db	60
   203  00FEE2  04                 	db	4
   204  00FEE3  42                 	db	66
   205  00FEE4  5A                 	db	90
   206  00FEE5  8B                 	db	139
   207  00FEE6  42                 	db	66
   208  00FEE7  04                 	db	4
   209  00FEE8  44                 	db	68
   210  00FEE9  42                 	db	66
   211  00FEEA  9C                 	db	156
   212  00FEEB  4F                 	db	79
   213  00FEEC  41                 	db	65
   214  00FEED  00                 	db	0
   215  00FEEE  80                 	db	128
   216  00FEEF  3F                 	db	63
   217  00FEF0                     __end_ofatan@coeff_b:
   218                           	opt stack 0
   219  0000                     _ADCBUF0	set	4034
   220  0000                     _ADCBUF0Hbits	set	4035
   221  0000                     _ADCBUF0Lbits	set	4034
   222  0000                     _ADCHS0H	set	3719
   223  0000                     _ADCHS0L	set	3718
   224  0000                     _ADCON1Hbits	set	4033
   225  0000                     _ADCON3L	set	3722
   226  0000                     _ANCON1	set	3655
   227  0000                     _ANCON2	set	3654
   228  0000                     _ANCON3	set	3653
   229  0000                     _BAUDCON1bits	set	3943
   230  0000                     _BAUDCON2bits	set	3889
   231  0000                     _BAUDCON3bits	set	3885
   232  0000                     _BAUDCON4bits	set	3837
   233  0000                     _CCP1CON	set	4025
   234  0000                     _CCP3CON	set	3913
   235  0000                     _CCPR1L	set	4026
   236  0000                     _CCPR3L	set	3914
   237  0000                     _CCPTMRS0	set	3894
   238  0000                     _CM1CONbits	set	3923
   239  0000                     _INTCON2bits	set	4081
   240  0000                     _INTCON3bits	set	4080
   241  0000                     _INTCONbits	set	4082
   242  0000                     _LCDCONbits	set	3801
   243  0000                     _MEMCONbits	set	3811
   244  0000                     _PADCFG1	set	3924
   245  0000                     _PADCFG1bits	set	3924
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR3bits	set	4004
   248  0000                     _PIR6bits	set	4006
   249  0000                     _PORTBbits	set	3969
   250  0000                     _PORTDbits	set	3971
   251  0000                     _PORTEbits	set	3972
   252  0000                     _PORTFbits	set	3973
   253  0000                     _PORTGbits	set	3974
   254  0000                     _PORTHbits	set	3975
   255  0000                     _PORTJbits	set	3976
   256  0000                     _PORTKbits	set	3815
   257  0000                     _PORTLbits	set	3812
   258  0000                     _PR2	set	4043
   259  0000                     _PR4	set	3845
   260  0000                     _PR6	set	3902
   261  0000                     _PR8	set	3899
   262  0000                     _PSPCONbits	set	4007
   263  0000                     _RCREG1	set	4014
   264  0000                     _RCREG3	set	3882
   265  0000                     _RCREG4	set	3834
   266  0000                     _RCSTA1bits	set	4011
   267  0000                     _RCSTA2bits	set	3891
   268  0000                     _RCSTA3bits	set	3887
   269  0000                     _RCSTA4bits	set	3839
   270  0000                     _RPINR0_1	set	3626
   271  0000                     _RPINR26_27	set	3639
   272  0000                     _RPINR28_29	set	3640
   273  0000                     _RPINR4_5	set	3628
   274  0000                     _RPINR6_7	set	3629
   275  0000                     _RPOR10_11	set	3607
   276  0000                     _RPOR12_13	set	3608
   277  0000                     _RPOR22_23	set	3613
   278  0000                     _RPOR30_31	set	3617
   279  0000                     _RPOR34_35	set	3619
   280  0000                     _SPBRG1	set	4015
   281  0000                     _SPBRG2	set	3871
   282  0000                     _SPBRG3	set	3883
   283  0000                     _SPBRG4	set	3835
   284  0000                     _SPBRGH1	set	3888
   285  0000                     _SPBRGH2	set	3872
   286  0000                     _SPBRGH3	set	3884
   287  0000                     _SPBRGH4	set	3836
   288  0000                     _SSP1ADD	set	4040
   289  0000                     _SSP1BUF	set	4041
   290  0000                     _SSP1CON1	set	4038
   291  0000                     _SSP1CON1bits	set	4038
   292  0000                     _SSP1CON2	set	4037
   293  0000                     _SSP1CON2bits	set	4037
   294  0000                     _SSP1CON3	set	3945
   295  0000                     _SSP1STAT	set	4039
   296  0000                     _SSP1STATbits	set	4039
   297  0000                     _SSP2ADD	set	3842
   298  0000                     _SSP2BUF	set	3843
   299  0000                     _SSP2CON1	set	3865
   300  0000                     _SSP2CON1bits	set	3865
   301  0000                     _SSP2CON2bits	set	3864
   302  0000                     _SSP2CON3	set	3897
   303  0000                     _SSP2STAT	set	3866
   304  0000                     _SSP2STATbits	set	3866
   305  0000                     _T0CON	set	4053
   306  0000                     _T2CONbits	set	4042
   307  0000                     _T4CONbits	set	3844
   308  0000                     _T6CONbits	set	3901
   309  0000                     _T8CONbits	set	3898
   310  0000                     _TMR0L	set	4054
   311  0000                     _TMR3H	set	4019
   312  0000                     _TMR3L	set	4018
   313  0000                     _TRISBbits	set	3987
   314  0000                     _TRISCbits	set	3988
   315  0000                     _TRISDbits	set	3989
   316  0000                     _TRISEbits	set	3990
   317  0000                     _TRISFbits	set	3991
   318  0000                     _TRISGbits	set	3992
   319  0000                     _TRISHbits	set	3993
   320  0000                     _TRISJbits	set	3994
   321  0000                     _TRISLbits	set	3814
   322  0000                     _TXREG1	set	4013
   323  0000                     _TXREG2	set	3869
   324  0000                     _TXREG4	set	3833
   325  0000                     _TXSTA1bits	set	4012
   326  0000                     _TXSTA2bits	set	3890
   327  0000                     _TXSTA3bits	set	3886
   328  0000                     _TXSTA4bits	set	3838
   329  0000                     _ADON	set	32271
   330  0000                     _ANSEL10	set	29234
   331  0000                     _ANSEL11	set	29235
   332  0000                     _ANSEL14	set	29238
   333  0000                     _ANSEL16	set	29224
   334  0000                     _ANSEL17	set	29225
   335  0000                     _ANSEL18	set	29226
   336  0000                     _ANSEL19	set	29227
   337  0000                     _ANSEL21	set	29229
   338  0000                     _ANSEL6	set	29246
   339  0000                     _ANSEL9	set	29233
   340  0000                     _CPEN	set	30407
   341  0000                     _DONE	set	32256
   342  0000                     _GIE	set	32663
   343  0000                     _INT1IF	set	32640
   344  0000                     _INT3IF	set	32642
   345  0000                     _IOLOCK	set	31542
   346  0000                     _IPEN	set	32391
   347  0000                     _LCDA	set	30421
   348  0000                     _LCDMD	set	30603
   349  0000                     _NVCFG0	set	29805
   350  0000                     _PVCFG0	set	29806
   351  0000                     _PVCFG1	set	29807
   352  0000                     _RC1IE	set	31981
   353  0000                     _RC2IE	set	32029
   354  0000                     _RC3IE	set	31501
   355  0000                     _RC4IE	set	31503
   356  0000                     _RD163	set	32143
   357  0000                     _RG0	set	31792
   358  0000                     _RG1	set	31793
   359  0000                     _RG2	set	31794
   360  0000                     _RG3	set	31795
   361  0000                     _RG4	set	31796
   362  0000                     _RL1	set	30497
   363  0000                     _RL2	set	30498
   364  0000                     _RL3	set	30499
   365  0000                     _SAMP	set	32257
   366  0000                     _T3CKPS0	set	32140
   367  0000                     _T3CKPS1	set	32141
   368  0000                     _T4CKPS1	set	30753
   369  0000                     _T6CKPS1	set	31209
   370  0000                     _TMR0IE	set	32661
   371  0000                     _TMR0IF	set	32658
   372  0000                     _TMR0IP	set	32650
   373  0000                     _TMR3CS0	set	32142
   374  0000                     _TMR3CS1	set	32143
   375  0000                     _TMR3IE	set	32001
   376  0000                     _TMR3ON	set	32136
   377  0000                     _TMR4ON	set	30754
   378  0000                     _TMR6ON	set	31210
   379  0000                     _TRISE0	set	31920
   380  0000                     _TRISE1	set	31921
   381  0000                     _TRISE2	set	31922
   382  0000                     _TRISE3	set	31923
   383  0000                     _TRISE4	set	31924
   384  0000                     _TRISE5	set	31925
   385  0000                     _TRISE6	set	31926
   386  0000                     _TRISE7	set	31927
   387  0000                     _TRISG7	set	31943
   388  0000                     _TRISH0	set	31944
   389  0000                     _TRISH1	set	31945
   390  0000                     _TRISH2	set	31946
   391  0000                     _TRISH3	set	31947
   392  0000                     _TRISK1	set	30537
   393  0000                     _TRISL0	set	30512
   394  0000                     _TX1IE	set	31980
   395  0000                     _TX2IE	set	32028
   396  0000                     _TX3IE	set	31500
   397  0000                     _TX4IE	set	31502
   398  00FEF0                     __stringdata:
   399                           	opt stack 0
   400  00FEF0  4D                 	db	77	;'M'
   401  00FEF1  45                 	db	69	;'E'
   402  00FEF2  53                 	db	83	;'S'
   403  00FEF3  53                 	db	83	;'S'
   404  00FEF4  41                 	db	65	;'A'
   405  00FEF5  47                 	db	71	;'G'
   406  00FEF6  45                 	db	69	;'E'
   407  00FEF7  5F                 	db	95	;'_'
   408  00FEF8  47                 	db	71	;'G'
   409  00FEF9  4F                 	db	79	;'O'
   410  00FEFA  45                 	db	69	;'E'
   411  00FEFB  53                 	db	83	;'S'
   412  00FEFC  5F                 	db	95	;'_'
   413  00FEFD  48                 	db	72	;'H'
   414  00FEFE  45                 	db	69	;'E'
   415  00FEFF  52                 	db	82	;'R'
   416  00FF00  45                 	db	69	;'E'
   417  00FF01  0D                 	db	13
   418  00FF02  0A                 	db	10
   419  00FF03  00                 	db	0
   420  00FF04                     STR_7:
   421  00FF04  52                 	db	82	;'R'
   422  00FF05  43                 	db	67	;'C'
   423  00FF06  20                 	db	32
   424  00FF07  4D                 	db	77	;'M'
   425  00FF08  6F                 	db	111	;'o'
   426  00FF09  64                 	db	100	;'d'
   427  00FF0A  65                 	db	101	;'e'
   428  00FF0B  0A                 	db	10
   429  00FF0C  45                 	db	69	;'E'
   430  00FF0D  52                 	db	82	;'R'
   431  00FF0E  52                 	db	82	;'R'
   432  00FF0F  3A                 	db	58	;':'
   433  00FF10  20                 	db	32
   434  00FF11  25                 	db	37
   435  00FF12  69                 	db	105	;'i'
   436  00FF13  20                 	db	32
   437  00FF14  20                 	db	32
   438  00FF15  00                 	db	0
   439  00FF16                     STR_4:
   440  00FF16  57                 	db	87	;'W'
   441  00FF17  61                 	db	97	;'a'
   442  00FF18  6E                 	db	110	;'n'
   443  00FF19  64                 	db	100	;'d'
   444  00FF1A  65                 	db	101	;'e'
   445  00FF1B  72                 	db	114	;'r'
   446  00FF1C  69                 	db	105	;'i'
   447  00FF1D  6E                 	db	110	;'n'
   448  00FF1E  0A                 	db	10
   449  00FF1F  2D                 	db	45
   450  00FF20  2D                 	db	45
   451  00FF21  2D                 	db	45
   452  00FF22  2E                 	db	46
   453  00FF23  2E                 	db	46
   454  00FF24  2D                 	db	45
   455  00FF25  2D                 	db	45
   456  00FF26  2D                 	db	45
   457  00FF27  00                 	db	0
   458  00FF28                     STR_12:
   459  00FF28  53                 	db	83	;'S'
   460  00FF29  65                 	db	101	;'e'
   461  00FF2A  6C                 	db	108	;'l'
   462  00FF2B  65                 	db	101	;'e'
   463  00FF2C  63                 	db	99	;'c'
   464  00FF2D  74                 	db	116	;'t'
   465  00FF2E  65                 	db	101	;'e'
   466  00FF2F  64                 	db	100	;'d'
   467  00FF30  0A                 	db	10
   468  00FF31  53                 	db	83	;'S'
   469  00FF32  65                 	db	101	;'e'
   470  00FF33  6C                 	db	108	;'l'
   471  00FF34  66                 	db	102	;'f'
   472  00FF35  54                 	db	84	;'T'
   473  00FF36  65                 	db	101	;'e'
   474  00FF37  73                 	db	115	;'s'
   475  00FF38  74                 	db	116	;'t'
   476  00FF39  00                 	db	0
   477  00FF3A                     STR_3:
   478  00FF3A  53                 	db	83	;'S'
   479  00FF3B  65                 	db	101	;'e'
   480  00FF3C  6C                 	db	108	;'l'
   481  00FF3D  66                 	db	102	;'f'
   482  00FF3E  20                 	db	32
   483  00FF3F  43                 	db	67	;'C'
   484  00FF40  61                 	db	97	;'a'
   485  00FF41  6C                 	db	108	;'l'
   486  00FF42  0A                 	db	10
   487  00FF43  57                 	db	87	;'W'
   488  00FF44  61                 	db	97	;'a'
   489  00FF45  69                 	db	105	;'i'
   490  00FF46  74                 	db	116	;'t'
   491  00FF47  20                 	db	32
   492  00FF48  50                 	db	80	;'P'
   493  00FF49  6C                 	db	108	;'l'
   494  00FF4A  7A                 	db	122	;'z'
   495  00FF4B  00                 	db	0
   496  00FF4C                     STR_6:
   497  00FF4C  52                 	db	82	;'R'
   498  00FF4D  43                 	db	67	;'C'
   499  00FF4E  20                 	db	32
   500  00FF4F  4D                 	db	77	;'M'
   501  00FF50  6F                 	db	111	;'o'
   502  00FF51  64                 	db	100	;'d'
   503  00FF52  65                 	db	101	;'e'
   504  00FF53  0A                 	db	10
   505  00FF54  53                 	db	83	;'S'
   506  00FF55  65                 	db	101	;'e'
   507  00FF56  61                 	db	97	;'a'
   508  00FF57  72                 	db	114	;'r'
   509  00FF58  63                 	db	99	;'c'
   510  00FF59  68                 	db	104	;'h'
   511  00FF5A  2E                 	db	46
   512  00FF5B  2E                 	db	46
   513  00FF5C  00                 	db	0
   514  00FF5D                     STR_9:
   515  00FF5D  53                 	db	83	;'S'
   516  00FF5E  65                 	db	101	;'e'
   517  00FF5F  6C                 	db	108	;'l'
   518  00FF60  65                 	db	101	;'e'
   519  00FF61  63                 	db	99	;'c'
   520  00FF62  74                 	db	116	;'t'
   521  00FF63  65                 	db	101	;'e'
   522  00FF64  64                 	db	100	;'d'
   523  00FF65  0A                 	db	10
   524  00FF66  52                 	db	82	;'R'
   525  00FF67  43                 	db	67	;'C'
   526  00FF68  20                 	db	32
   527  00FF69  4D                 	db	77	;'M'
   528  00FF6A  6F                 	db	111	;'o'
   529  00FF6B  64                 	db	100	;'d'
   530  00FF6C  65                 	db	101	;'e'
   531  00FF6D  00                 	db	0
   532  00FF6E                     STR_14:
   533  00FF6E  53                 	db	83	;'S'
   534  00FF6F  65                 	db	101	;'e'
   535  00FF70  6C                 	db	108	;'l'
   536  00FF71  65                 	db	101	;'e'
   537  00FF72  63                 	db	99	;'c'
   538  00FF73  74                 	db	116	;'t'
   539  00FF74  65                 	db	101	;'e'
   540  00FF75  64                 	db	100	;'d'
   541  00FF76  0A                 	db	10
   542  00FF77  55                 	db	85	;'U'
   543  00FF78  6E                 	db	110	;'n'
   544  00FF79  6B                 	db	107	;'k'
   545  00FF7A  6E                 	db	110	;'n'
   546  00FF7B  6F                 	db	111	;'o'
   547  00FF7C  77                 	db	119	;'w'
   548  00FF7D  6E                 	db	110	;'n'
   549  00FF7E  00                 	db	0
   550  00FF7F                     STR_5:
   551  00FF7F  57                 	db	87	;'W'
   552  00FF80  65                 	db	101	;'e'
   553  00FF81  20                 	db	32
   554  00FF82  61                 	db	97	;'a'
   555  00FF83  72                 	db	114	;'r'
   556  00FF84  65                 	db	101	;'e'
   557  00FF85  0A                 	db	10
   558  00FF86  77                 	db	119	;'w'
   559  00FF87  69                 	db	105	;'i'
   560  00FF88  6E                 	db	110	;'n'
   561  00FF89  6E                 	db	110	;'n'
   562  00FF8A  69                 	db	105	;'i'
   563  00FF8B  6E                 	db	110	;'n'
   564  00FF8C  67                 	db	103	;'g'
   565  00FF8D  21                 	db	33
   566  00FF8E  00                 	db	0
   567  00FF8F                     STR_11:
   568  00FF8F  53                 	db	83	;'S'
   569  00FF90  65                 	db	101	;'e'
   570  00FF91  6C                 	db	108	;'l'
   571  00FF92  65                 	db	101	;'e'
   572  00FF93  63                 	db	99	;'c'
   573  00FF94  74                 	db	116	;'t'
   574  00FF95  65                 	db	101	;'e'
   575  00FF96  64                 	db	100	;'d'
   576  00FF97  0A                 	db	10
   577  00FF98  57                 	db	87	;'W'
   578  00FF99  61                 	db	97	;'a'
   579  00FF9A  6E                 	db	110	;'n'
   580  00FF9B  64                 	db	100	;'d'
   581  00FF9C  65                 	db	101	;'e'
   582  00FF9D  72                 	db	114	;'r'
   583  00FF9E  00                 	db	0
   584  00FF9F                     STR_13:
   585  00FF9F  53                 	db	83	;'S'
   586  00FFA0  65                 	db	101	;'e'
   587  00FFA1  6C                 	db	108	;'l'
   588  00FFA2  65                 	db	101	;'e'
   589  00FFA3  63                 	db	99	;'c'
   590  00FFA4  74                 	db	116	;'t'
   591  00FFA5  65                 	db	101	;'e'
   592  00FFA6  64                 	db	100	;'d'
   593  00FFA7  0A                 	db	10
   594  00FFA8  44                 	db	68	;'D'
   595  00FFA9  65                 	db	101	;'e'
   596  00FFAA  62                 	db	98	;'b'
   597  00FFAB  75                 	db	117	;'u'
   598  00FFAC  67                 	db	103	;'g'
   599  00FFAD  00                 	db	0
   600  00FFAE                     STR_10:
   601  00FFAE  53                 	db	83	;'S'
   602  00FFAF  65                 	db	101	;'e'
   603  00FFB0  6C                 	db	108	;'l'
   604  00FFB1  65                 	db	101	;'e'
   605  00FFB2  63                 	db	99	;'c'
   606  00FFB3  74                 	db	116	;'t'
   607  00FFB4  65                 	db	101	;'e'
   608  00FFB5  64                 	db	100	;'d'
   609  00FFB6  0A                 	db	10
   610  00FFB7  4D                 	db	77	;'M'
   611  00FFB8  61                 	db	97	;'a'
   612  00FFB9  74                 	db	116	;'t'
   613  00FFBA  63                 	db	99	;'c'
   614  00FFBB  68                 	db	104	;'h'
   615  00FFBC  00                 	db	0
   616  00FFBD                     STR_8:
   617  00FFBD  61                 	db	97	;'a'
   618  00FFBE  6E                 	db	110	;'n'
   619  00FFBF  61                 	db	97	;'a'
   620  00FFC0  3A                 	db	58	;':'
   621  00FFC1  25                 	db	37
   622  00FFC2  69                 	db	105	;'i'
   623  00FFC3  0A                 	db	10
   624  00FFC4  74                 	db	116	;'t'
   625  00FFC5  79                 	db	121	;'y'
   626  00FFC6  70                 	db	112	;'p'
   627  00FFC7  65                 	db	101	;'e'
   628  00FFC8  20                 	db	32
   629  00FFC9  25                 	db	37
   630  00FFCA  69                 	db	105	;'i'
   631  00FFCB  00                 	db	0
   632  00FFCC                     STR_21:
   633  00FFCC  53                 	db	83	;'S'
   634  00FFCD  74                 	db	116	;'t'
   635  00FFCE  61                 	db	97	;'a'
   636  00FFCF  72                 	db	114	;'r'
   637  00FFD0  74                 	db	116	;'t'
   638  00FFD1  69                 	db	105	;'i'
   639  00FFD2  6E                 	db	110	;'n'
   640  00FFD3  67                 	db	103	;'g'
   641  00FFD4  0A                 	db	10
   642  00FFD5  46                 	db	70	;'F'
   643  00FFD6  48                 	db	72	;'H'
   644  00FFD7  54                 	db	84	;'T'
   645  00FFD8  00                 	db	0
   646  00FFD9  41                 	db	65	;'A'
   647  00FFDA  54                 	db	84	;'T'
   648  00FFDB  2B                 	db	43
   649  00FFDC  43                 	db	67	;'C'
   650  00FFDD  4D                 	db	77	;'M'
   651  00FFDE  47                 	db	71	;'G'
   652  00FFDF  46                 	db	70	;'F'
   653  00FFE0  3D                 	db	61	;'='
   654  00FFE1  31                 	db	49	;'1'
   655  00FFE2  00                 	db	0
   656  00FFE3  41                 	db	65	;'A'
   657  00FFE4  54                 	db	84	;'T'
   658  00FFE5  2B                 	db	43
   659  00FFE6  43                 	db	67	;'C'
   660  00FFE7  53                 	db	83	;'S'
   661  00FFE8  51                 	db	81	;'Q'
   662  00FFE9  0D                 	db	13
   663  00FFEA  0A                 	db	10
   664  00FFEB  00                 	db	0
   665  00FFEC  41                 	db	65	;'A'
   666  00FFED  54                 	db	84	;'T'
   667  00FFEE  2B                 	db	43
   668  00FFEF  43                 	db	67	;'C'
   669  00FFF0  4D                 	db	77	;'M'
   670  00FFF1  47                 	db	71	;'G'
   671  00FFF2  53                 	db	83	;'S'
   672  00FFF3  3D                 	db	61	;'='
   673  00FFF4  00                 	db	0
   674  00FFF5                     STR_22:
   675  00FFF5  41                 	db	65	;'A'
   676  00FFF6  6E                 	db	110	;'n'
   677  00FFF7  61                 	db	97	;'a'
   678  00FFF8  3A                 	db	58	;':'
   679  00FFF9  25                 	db	37
   680  00FFFA  69                 	db	105	;'i'
   681  00FFFB  00                 	db	0
   682  00FFFC                     STR_1:
   683  00FFFC  25                 	db	37
   684  00FFFD  00                 	db	0
   685  00FFFE                     __end_of__stringdata:
   686                           	opt stack 0
   687                           
   688                           ; #config settings
   689  00FFFE  00                 	db	0	; dummy byte at the end
   690  0000                     tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           prodh	equ	0xFF4
   695                           prodl	equ	0xFF3
   696                           intcon	equ	0xFF2
   697                           intcon2	equ	0xFF1
   698                           intcon3	equ	0xFF0
   699                           indf0	equ	0xFEF
   700                           fsr0h	equ	0xFEA
   701                           fsr0l	equ	0xFE9
   702                           wreg	equ	0xFE8
   703                           indf1	equ	0xFE7
   704                           postinc1	equ	0xFE6
   705                           fsr1h	equ	0xFE2
   706                           fsr1l	equ	0xFE1
   707                           indf2	equ	0xFDF
   708                           postinc2	equ	0xFDE
   709                           postdec2	equ	0xFDD
   710                           fsr2h	equ	0xFDA
   711                           fsr2l	equ	0xFD9
   712                           status	equ	0xFD8
   713                           
   714                           	psect	cinit
   715  0111A4                     __pcinit:
   716                           	opt stack 0
   717  0111A4                     start_initialization:
   718                           	opt stack 0
   719  0111A4                     __initialization:
   720                           	opt stack 0
   721                           
   722                           ; Clear objects allocated to BIGRAM (1000 bytes)
   723  0111A4  EE02  F080         	lfsr	0,__pbssBIGRAM
   724  0111A8  EE13 F0E8          	lfsr	1,1000
   725  0111AC                     clear_0:
   726  0111AC  6AEE               	clrf	postinc0,c
   727  0111AE  50E5               	movf	postdec1,w,c
   728  0111B0  50E1               	movf	fsr1l,w,c
   729  0111B2  E1FC               	bnz	clear_0
   730  0111B4  50E2               	movf	fsr1h,w,c
   731  0111B6  E1FA               	bnz	clear_0
   732                           
   733                           ; Clear objects allocated to BANK2 (128 bytes)
   734  0111B8  EE02  F000         	lfsr	0,__pbssBANK2
   735  0111BC  0E80               	movlw	128
   736  0111BE                     clear_1:
   737  0111BE  6AEE               	clrf	postinc0,c
   738  0111C0  06E8               	decf	wreg,f,c
   739  0111C2  E1FD               	bnz	clear_1
   740                           
   741                           ; Clear objects allocated to BANK1 (228 bytes)
   742  0111C4  EE01  F000         	lfsr	0,__pbssBANK1
   743  0111C8  0EE4               	movlw	228
   744  0111CA                     clear_2:
   745  0111CA  6AEE               	clrf	postinc0,c
   746  0111CC  06E8               	decf	wreg,f,c
   747  0111CE  E1FD               	bnz	clear_2
   748                           
   749                           ; Clear objects allocated to BANK0 (46 bytes)
   750  0111D0  EE00  F098         	lfsr	0,__pbssBANK0
   751  0111D4  0E2E               	movlw	46
   752  0111D6                     clear_3:
   753  0111D6  6AEE               	clrf	postinc0,c
   754  0111D8  06E8               	decf	wreg,f,c
   755  0111DA  E1FD               	bnz	clear_3
   756                           
   757                           ; Clear objects allocated to COMRAM (7 bytes)
   758  0111DC  EE00  F053         	lfsr	0,__pbssCOMRAM
   759  0111E0  0E07               	movlw	7
   760  0111E2                     clear_4:
   761  0111E2  6AEE               	clrf	postinc0,c
   762  0111E4  06E8               	decf	wreg,f,c
   763  0111E6  E1FD               	bnz	clear_4
   764                           
   765                           ; Initialize objects allocated to BANK0 (41 bytes)
   766                           ; load TBLPTR registers with __pidataBANK0
   767  0111E8  0E28               	movlw	low __pidataBANK0
   768  0111EA  6EF6               	movwf	tblptrl,c
   769  0111EC  0E15               	movlw	high __pidataBANK0
   770  0111EE  6EF7               	movwf	tblptrh,c
   771  0111F0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   772  0111F2  6EF8               	movwf	tblptru,c
   773  0111F4  EE00  F0C6         	lfsr	0,__pdataBANK0
   774  0111F8  EE10 F029          	lfsr	1,41
   775  0111FC                     copy_data0:
   776  0111FC  0009               	tblrd		*+
   777  0111FE  CFF5 FFEE          	movff	tablat,postinc0
   778  011202  50E5               	movf	postdec1,w,c
   779  011204  50E1               	movf	fsr1l,w,c
   780  011206  E1FA               	bnz	copy_data0
   781  011208                     end_of_initialization:
   782                           	opt stack 0
   783  011208                     __end_of__initialization:
   784                           	opt stack 0
   785  011208  0100               	movlb	0
   786  01120A  EF98  F085         	goto	_main	;jump to C main() function
   787                           tblptru	equ	0xFF8
   788                           tblptrh	equ	0xFF7
   789                           tblptrl	equ	0xFF6
   790                           tablat	equ	0xFF5
   791                           prodh	equ	0xFF4
   792                           prodl	equ	0xFF3
   793                           intcon	equ	0xFF2
   794                           intcon2	equ	0xFF1
   795                           intcon3	equ	0xFF0
   796                           indf0	equ	0xFEF
   797                           postinc0	equ	0xFEE
   798                           fsr0h	equ	0xFEA
   799                           fsr0l	equ	0xFE9
   800                           wreg	equ	0xFE8
   801                           indf1	equ	0xFE7
   802                           postinc1	equ	0xFE6
   803                           postdec1	equ	0xFE5
   804                           fsr1h	equ	0xFE2
   805                           fsr1l	equ	0xFE1
   806                           indf2	equ	0xFDF
   807                           postinc2	equ	0xFDE
   808                           postdec2	equ	0xFDD
   809                           fsr2h	equ	0xFDA
   810                           fsr2l	equ	0xFD9
   811                           status	equ	0xFD8
   812                           
   813                           	psect	bssCOMRAM
   814  000053                     __pbssCOMRAM:
   815                           	opt stack 0
   816  000053                     _FONA_INDEX:
   817                           	opt stack 0
   818  000053                     	ds	1
   819  000054                     _PIXY_INDEX:
   820                           	opt stack 0
   821  000054                     	ds	1
   822  000055                     _UART4_INDEX:
   823                           	opt stack 0
   824  000055                     	ds	1
   825  000056                     _USB_INDEX:
   826                           	opt stack 0
   827  000056                     	ds	1
   828  000057                     _controller_type:
   829                           	opt stack 0
   830  000057                     	ds	1
   831  000058                     _mode:
   832                           	opt stack 0
   833  000058                     	ds	1
   834  000059                     _read_delay:
   835                           	opt stack 0
   836  000059                     	ds	1
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           prodh	equ	0xFF4
   842                           prodl	equ	0xFF3
   843                           intcon	equ	0xFF2
   844                           intcon2	equ	0xFF1
   845                           intcon3	equ	0xFF0
   846                           indf0	equ	0xFEF
   847                           postinc0	equ	0xFEE
   848                           fsr0h	equ	0xFEA
   849                           fsr0l	equ	0xFE9
   850                           wreg	equ	0xFE8
   851                           indf1	equ	0xFE7
   852                           postinc1	equ	0xFE6
   853                           postdec1	equ	0xFE5
   854                           fsr1h	equ	0xFE2
   855                           fsr1l	equ	0xFE1
   856                           indf2	equ	0xFDF
   857                           postinc2	equ	0xFDE
   858                           postdec2	equ	0xFDD
   859                           fsr2h	equ	0xFDA
   860                           fsr2l	equ	0xFD9
   861                           status	equ	0xFD8
   862                           
   863                           	psect	bssBANK0
   864  000098                     __pbssBANK0:
   865                           	opt stack 0
   866  000098                     _PS2data:
   867                           	opt stack 0
   868  000098                     	ds	21
   869  0000AD                     _last_read:
   870                           	opt stack 0
   871  0000AD                     	ds	4
   872  0000B1                     _left_count:
   873                           	opt stack 0
   874  0000B1                     	ds	4
   875  0000B5                     _millisCount:
   876                           	opt stack 0
   877  0000B5                     	ds	4
   878  0000B9                     _right_count:
   879                           	opt stack 0
   880  0000B9                     	ds	4
   881  0000BD                     _buttons:
   882                           	opt stack 0
   883  0000BD                     	ds	2
   884  0000BF                     _last_buttons:
   885                           	opt stack 0
   886  0000BF                     	ds	2
   887  0000C1                     _spbrg:
   888                           	opt stack 0
   889  0000C1                     	ds	2
   890  0000C3                     delay_init@config:
   891                           	opt stack 0
   892  0000C3                     	ds	2
   893  0000C5                     _config:
   894                           	opt stack 0
   895  0000C5                     	ds	1
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           prodh	equ	0xFF4
   901                           prodl	equ	0xFF3
   902                           intcon	equ	0xFF2
   903                           intcon2	equ	0xFF1
   904                           intcon3	equ	0xFF0
   905                           indf0	equ	0xFEF
   906                           postinc0	equ	0xFEE
   907                           fsr0h	equ	0xFEA
   908                           fsr0l	equ	0xFE9
   909                           wreg	equ	0xFE8
   910                           indf1	equ	0xFE7
   911                           postinc1	equ	0xFE6
   912                           postdec1	equ	0xFE5
   913                           fsr1h	equ	0xFE2
   914                           fsr1l	equ	0xFE1
   915                           indf2	equ	0xFDF
   916                           postinc2	equ	0xFDE
   917                           postdec2	equ	0xFDD
   918                           fsr2h	equ	0xFDA
   919                           fsr2l	equ	0xFD9
   920                           status	equ	0xFD8
   921                           
   922                           	psect	dataBANK0
   923  0000C6                     __pdataBANK0:
   924                           	opt stack 0
   925  0000C6                     PS2_readGamepad@F16091:
   926                           	opt stack 0
   927  0000C6                     	ds	9
   928  0000CF                     _type_read:
   929                           	opt stack 0
   930  0000CF                     	ds	9
   931  0000D8                     _exit_config:
   932                           	opt stack 0
   933  0000D8                     	ds	9
   934  0000E1                     _set_mode:
   935                           	opt stack 0
   936  0000E1                     	ds	9
   937  0000EA                     _enter_config:
   938                           	opt stack 0
   939  0000EA                     	ds	5
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           prodh	equ	0xFF4
   945                           prodl	equ	0xFF3
   946                           intcon	equ	0xFF2
   947                           intcon2	equ	0xFF1
   948                           intcon3	equ	0xFF0
   949                           indf0	equ	0xFEF
   950                           postinc0	equ	0xFEE
   951                           fsr0h	equ	0xFEA
   952                           fsr0l	equ	0xFE9
   953                           wreg	equ	0xFE8
   954                           indf1	equ	0xFE7
   955                           postinc1	equ	0xFE6
   956                           postdec1	equ	0xFE5
   957                           fsr1h	equ	0xFE2
   958                           fsr1l	equ	0xFE1
   959                           indf2	equ	0xFDF
   960                           postinc2	equ	0xFDE
   961                           postdec2	equ	0xFDD
   962                           fsr2h	equ	0xFDA
   963                           fsr2l	equ	0xFD9
   964                           status	equ	0xFD8
   965                           
   966                           	psect	bssBANK1
   967  000100                     __pbssBANK1:
   968                           	opt stack 0
   969  000100                     _FONA_BUFF:
   970                           	opt stack 0
   971  000100                     	ds	50
   972  000132                     _USART4_BUFF:
   973                           	opt stack 0
   974  000132                     	ds	50
   975  000164                     _imaginaryNumbers:
   976                           	opt stack 0
   977  000164                     	ds	128
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           intcon	equ	0xFF2
   985                           intcon2	equ	0xFF1
   986                           intcon3	equ	0xFF0
   987                           indf0	equ	0xFEF
   988                           postinc0	equ	0xFEE
   989                           fsr0h	equ	0xFEA
   990                           fsr0l	equ	0xFE9
   991                           wreg	equ	0xFE8
   992                           indf1	equ	0xFE7
   993                           postinc1	equ	0xFE6
   994                           postdec1	equ	0xFE5
   995                           fsr1h	equ	0xFE2
   996                           fsr1l	equ	0xFE1
   997                           indf2	equ	0xFDF
   998                           postinc2	equ	0xFDE
   999                           postdec2	equ	0xFDD
  1000                           fsr2h	equ	0xFDA
  1001                           fsr2l	equ	0xFD9
  1002                           status	equ	0xFD8
  1003                           
  1004                           	psect	bssBANK2
  1005  000200                     __pbssBANK2:
  1006                           	opt stack 0
  1007  000200                     _realNumbers:
  1008                           	opt stack 0
  1009  000200                     	ds	128
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           prodh	equ	0xFF4
  1015                           prodl	equ	0xFF3
  1016                           intcon	equ	0xFF2
  1017                           intcon2	equ	0xFF1
  1018                           intcon3	equ	0xFF0
  1019                           indf0	equ	0xFEF
  1020                           postinc0	equ	0xFEE
  1021                           fsr0h	equ	0xFEA
  1022                           fsr0l	equ	0xFE9
  1023                           wreg	equ	0xFE8
  1024                           indf1	equ	0xFE7
  1025                           postinc1	equ	0xFE6
  1026                           postdec1	equ	0xFE5
  1027                           fsr1h	equ	0xFE2
  1028                           fsr1l	equ	0xFE1
  1029                           indf2	equ	0xFDF
  1030                           postinc2	equ	0xFDE
  1031                           postdec2	equ	0xFDD
  1032                           fsr2h	equ	0xFDA
  1033                           fsr2l	equ	0xFD9
  1034                           status	equ	0xFD8
  1035                           
  1036                           	psect	bssBIGRAM
  1037  000280                     __pbssBIGRAM:
  1038                           	opt stack 0
  1039  000280                     _PIXY_BUFF:
  1040                           	opt stack 0
  1041  000280                     	ds	500
  1042  000474                     _USB_BUFF:
  1043                           	opt stack 0
  1044  000474                     	ds	500
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           prodh	equ	0xFF4
  1050                           prodl	equ	0xFF3
  1051                           intcon	equ	0xFF2
  1052                           intcon2	equ	0xFF1
  1053                           intcon3	equ	0xFF0
  1054                           indf0	equ	0xFEF
  1055                           postinc0	equ	0xFEE
  1056                           fsr0h	equ	0xFEA
  1057                           fsr0l	equ	0xFE9
  1058                           wreg	equ	0xFE8
  1059                           indf1	equ	0xFE7
  1060                           postinc1	equ	0xFE6
  1061                           postdec1	equ	0xFE5
  1062                           fsr1h	equ	0xFE2
  1063                           fsr1l	equ	0xFE1
  1064                           indf2	equ	0xFDF
  1065                           postinc2	equ	0xFDE
  1066                           postdec2	equ	0xFDD
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071                           	psect	cstackBANK0
  1072  000060                     __pcstackBANK0:
  1073                           	opt stack 0
  1074  000060                     LCD_printString@tempString:
  1075                           	opt stack 0
  1076                           
  1077                           ; 20 bytes @ 0x0
  1078  000060                     	ds	20
  1079  000074                     LCD_printString@string:
  1080                           	opt stack 0
  1081                           
  1082                           ; 20 bytes @ 0x14
  1083  000074                     	ds	20
  1084  000088                     LCD_printString@x:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x28
  1088  000088                     	ds	1
  1089  000089                     LCD_printString@val:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x29
  1093  000089                     	ds	2
  1094  00008B                     LCD_printString@tempString_590:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x2B
  1098  00008B                     	ds	2
  1099  00008D                     LCD_printString@aptr:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x2D
  1103  00008D                     	ds	1
  1104  00008E                     LCD_printString@i:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x2E
  1108  00008E                     	ds	2
  1109  000090                     LCD_printString@i_591:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x30
  1113  000090                     	ds	2
  1114  000092                     RCMode@left_speed:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x32
  1118  000092                     	ds	2
  1119  000094                     RCMode@right_speed:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x34
  1123  000094                     	ds	2
  1124  000096                     RCMode@type:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x36
  1128  000096                     	ds	1
  1129  000097                     RCMode@done:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x37
  1133  000097                     	ds	1
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           prodh	equ	0xFF4
  1139                           prodl	equ	0xFF3
  1140                           intcon	equ	0xFF2
  1141                           intcon2	equ	0xFF1
  1142                           intcon3	equ	0xFF0
  1143                           indf0	equ	0xFEF
  1144                           postinc0	equ	0xFEE
  1145                           fsr0h	equ	0xFEA
  1146                           fsr0l	equ	0xFE9
  1147                           wreg	equ	0xFE8
  1148                           indf1	equ	0xFE7
  1149                           postinc1	equ	0xFE6
  1150                           postdec1	equ	0xFE5
  1151                           fsr1h	equ	0xFE2
  1152                           fsr1l	equ	0xFE1
  1153                           indf2	equ	0xFDF
  1154                           postinc2	equ	0xFDE
  1155                           postdec2	equ	0xFDD
  1156                           fsr2h	equ	0xFDA
  1157                           fsr2l	equ	0xFD9
  1158                           status	equ	0xFD8
  1159                           
  1160                           	psect	cstackCOMRAM
  1161  000001                     __pcstackCOMRAM:
  1162                           	opt stack 0
  1163  000001                     ??_encoderInterrupt:
  1164  000001                     
  1165                           ; 1 bytes @ 0x0
  1166  000001                     	ds	3
  1167  000004                     ??_communicationInterruptHandler:
  1168                           
  1169                           ; 0 bytes @ 0x3
  1170  000004                     	ds	2
  1171  000006                     ?___wmul:
  1172                           	opt stack 0
  1173  000006                     ?___lwdiv:
  1174                           	opt stack 0
  1175  000006                     ?_millis:
  1176                           	opt stack 0
  1177  000006                     settings_readButton@t:
  1178                           	opt stack 0
  1179  000006                     settings_auto@t:
  1180                           	opt stack 0
  1181  000006                     settings_wander@t:
  1182                           	opt stack 0
  1183  000006                     settings_selfTest@t:
  1184                           	opt stack 0
  1185  000006                     PS2_analog@button:
  1186                           	opt stack 0
  1187  000006                     OpenEPWM1@timer_source:
  1188                           	opt stack 0
  1189  000006                     SetOutputEPWM1@outputmode:
  1190                           	opt stack 0
  1191  000006                     OpenEPWM3@timer_source:
  1192                           	opt stack 0
  1193  000006                     SetOutputEPWM3@outputmode:
  1194                           	opt stack 0
  1195  000006                     SetDCEPWM1@dutycycle:
  1196                           	opt stack 0
  1197  000006                     SetDCEPWM3@dutycycle:
  1198                           	opt stack 0
  1199  000006                     ___wmul@multiplier:
  1200                           	opt stack 0
  1201  000006                     ___lwdiv@dividend:
  1202                           	opt stack 0
  1203  000006                     strcat@to:
  1204                           	opt stack 0
  1205  000006                     delay_us@x:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0x5
  1209  000006                     	ds	1
  1210  000007                     ??_OpenEPWM1:
  1211  000007                     ??_SetOutputEPWM1:
  1212  000007                     ??_OpenEPWM3:
  1213  000007                     ??_SetOutputEPWM3:
  1214                           
  1215                           ; 0 bytes @ 0x6
  1216  000007                     	ds	1
  1217  000008                     ??_SetDCEPWM1:
  1218  000008                     ??_SetDCEPWM3:
  1219  000008                     OpenEPWM1@period:
  1220                           	opt stack 0
  1221  000008                     SetOutputEPWM1@eccpmx:
  1222                           	opt stack 0
  1223  000008                     OpenEPWM3@period:
  1224                           	opt stack 0
  1225  000008                     SetOutputEPWM3@eccpmx:
  1226                           	opt stack 0
  1227  000008                     ___wmul@multiplicand:
  1228                           	opt stack 0
  1229  000008                     ___lwdiv@divisor:
  1230                           	opt stack 0
  1231  000008                     strcat@from:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x7
  1235  000008                     	ds	1
  1236  000009                     SetOutputEPWM1@outputconfig:
  1237                           	opt stack 0
  1238  000009                     SetOutputEPWM3@outputconfig:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x8
  1242  000009                     	ds	1
  1243  00000A                     ??_PS2_shiftInOut:
  1244  00000A                     ___lwdiv@counter:
  1245                           	opt stack 0
  1246  00000A                     SetDCEPWM1@DCycle:
  1247                           	opt stack 0
  1248  00000A                     SetDCEPWM3@DCycle:
  1249                           	opt stack 0
  1250  00000A                     ___wmul@product:
  1251                           	opt stack 0
  1252  00000A                     strcat@cp:
  1253                           	opt stack 0
  1254  00000A                     delay_ms@x:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x9
  1258  00000A                     	ds	1
  1259  00000B                     ___lwdiv@quotient:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0xA
  1263  00000B                     	ds	1
  1264  00000C                     ?___awdiv:
  1265                           	opt stack 0
  1266  00000C                     PS2_shiftInOut@byte:
  1267                           	opt stack 0
  1268  00000C                     ___awdiv@dividend:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0xB
  1272  00000C                     	ds	1
  1273  00000D                     ?___lwmod:
  1274                           	opt stack 0
  1275  00000D                     PS2_shiftInOut@tmp:
  1276                           	opt stack 0
  1277  00000D                     ___lwmod@dividend:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0xC
  1281  00000D                     	ds	1
  1282  00000E                     ??_delay_ms:
  1283  00000E                     PS2_shiftInOut@i:
  1284                           	opt stack 0
  1285  00000E                     ___awdiv@divisor:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0xD
  1289  00000E                     	ds	1
  1290  00000F                     ___lwmod@divisor:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0xE
  1294  00000F                     	ds	1
  1295  000010                     ___awdiv@counter:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0xF
  1299  000010                     	ds	1
  1300  000011                     ___awdiv@sign:
  1301                           	opt stack 0
  1302  000011                     ___lwmod@counter:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x10
  1306  000011                     	ds	1
  1307  000012                     ?_sprintf:
  1308                           	opt stack 0
  1309  000012                     sprintf@f:
  1310                           	opt stack 0
  1311  000012                     ___awdiv@quotient:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x11
  1315  000012                     	ds	2
  1316  000014                     motorDrive_setSpeeds@rSpeed:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x13
  1320  000014                     	ds	1
  1321  000015                     ??_motorDrive_setSpeeds:
  1322                           
  1323                           ; 0 bytes @ 0x14
  1324  000015                     	ds	1
  1325  000016                     ??_sprintf:
  1326  000016                     delay_ms@time:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x15
  1330  000016                     	ds	1
  1331  000017                     motorDrive_setSpeeds@templ:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x16
  1335  000017                     	ds	1
  1336  000018                     sprintf@ap:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x17
  1340  000018                     	ds	1
  1341  000019                     sprintf@flag:
  1342                           	opt stack 0
  1343  000019                     motorDrive_setSpeeds@tempr:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x18
  1347  000019                     	ds	1
  1348  00001A                     LCD_placeCursor@y:
  1349                           	opt stack 0
  1350  00001A                     PS2_sendCommandString@len:
  1351                           	opt stack 0
  1352  00001A                     sprintf@prec:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x19
  1356  00001A                     	ds	1
  1357  00001B                     ??_PS2_sendCommandString:
  1358  00001B                     ??_LCD_placeCursor:
  1359  00001B                     _motorDrive_setSpeeds$2402:
  1360                           	opt stack 0
  1361  00001B                     sprintf@_val:
  1362                           	opt stack 0
  1363                           
  1364                           ; 5 bytes @ 0x1A
  1365  00001B                     	ds	2
  1366  00001D                     LCD_placeCursor@x:
  1367                           	opt stack 0
  1368  00001D                     _motorDrive_setSpeeds$2403:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x1C
  1372  00001D                     	ds	1
  1373  00001E                     LCD_placeCursor@address:
  1374                           	opt stack 0
  1375  00001E                     PS2_sendCommandString@y:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x1D
  1379  00001E                     	ds	1
  1380  00001F                     _motorDrive_setSpeeds$2404:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x1E
  1384  00001F                     	ds	1
  1385  000020                     PS2_sendCommandString@string:
  1386                           	opt stack 0
  1387  000020                     sprintf@sp:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x1F
  1391  000020                     	ds	1
  1392  000021                     ??_PS2_readGamepad:
  1393  000021                     sprintf@c:
  1394                           	opt stack 0
  1395  000021                     _motorDrive_setSpeeds$2405:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x20
  1399  000021                     	ds	1
  1400  000022                     ?_LCD_printString:
  1401                           	opt stack 0
  1402  000022                     LCD_printString@y:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x21
  1406  000022                     	ds	1
  1407  000023                     LCD_printString@input:
  1408                           	opt stack 0
  1409  000023                     _motorDrive_setSpeeds$2406:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x22
  1413  000023                     	ds	2
  1414  000025                     _motorDrive_setSpeeds$2407:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x24
  1418  000025                     	ds	1
  1419  000026                     PS2_readGamepad@dword2:
  1420                           	opt stack 0
  1421                           
  1422                           ; 12 bytes @ 0x25
  1423  000026                     	ds	1
  1424  000027                     _motorDrive_setSpeeds$2408:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x26
  1428  000027                     	ds	2
  1429  000029                     ??_LCD_printString:
  1430  000029                     motorDrive_setSpeeds@lSpeed:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x28
  1434  000029                     	ds	1
  1435  00002A                     
  1436                           ; 0 bytes @ 0x29
  1437  00002A                     	ds	1
  1438  00002B                     ??_selfTest:
  1439  00002B                     
  1440                           ; 0 bytes @ 0x2A
  1441  00002B                     	ds	7
  1442  000032                     PS2_readGamepad@dword:
  1443                           	opt stack 0
  1444                           
  1445                           ; 9 bytes @ 0x31
  1446  000032                     	ds	9
  1447  00003B                     PS2_readGamepad@temp:
  1448                           	opt stack 0
  1449                           
  1450                           ; 4 bytes @ 0x3A
  1451  00003B                     	ds	4
  1452  00003F                     PS2_readGamepad@i:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x3E
  1456  00003F                     	ds	2
  1457  000041                     PS2_readGamepad@i_2534:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x40
  1461  000041                     	ds	2
  1462  000043                     PS2_init@temp:
  1463                           	opt stack 0
  1464                           
  1465                           ; 9 bytes @ 0x42
  1466  000043                     	ds	9
  1467  00004C                     PS2_init@y:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x4B
  1471  00004C                     	ds	2
  1472  00004E                     PS2_init@i:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x4D
  1476  00004E                     	ds	2
  1477  000050                     ??_main:
  1478                           
  1479                           ; 0 bytes @ 0x4F
  1480  000050                     	ds	2
  1481  000052                     main@mode:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x51
  1485  000052                     	ds	1
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           prodh	equ	0xFF4
  1491                           prodl	equ	0xFF3
  1492                           intcon	equ	0xFF2
  1493                           intcon2	equ	0xFF1
  1494                           intcon3	equ	0xFF0
  1495                           indf0	equ	0xFEF
  1496                           postinc0	equ	0xFEE
  1497                           fsr0h	equ	0xFEA
  1498                           fsr0l	equ	0xFE9
  1499                           wreg	equ	0xFE8
  1500                           indf1	equ	0xFE7
  1501                           postinc1	equ	0xFE6
  1502                           postdec1	equ	0xFE5
  1503                           fsr1h	equ	0xFE2
  1504                           fsr1l	equ	0xFE1
  1505                           indf2	equ	0xFDF
  1506                           postinc2	equ	0xFDE
  1507                           postdec2	equ	0xFDD
  1508                           fsr2h	equ	0xFDA
  1509                           fsr2l	equ	0xFD9
  1510                           status	equ	0xFD8
  1511                           
  1512 ;;
  1513 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1514 ;;
  1515 ;; *************** function _main *****************
  1516 ;; Defined at:
  1517 ;;		line 108 in file "main.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  mode            1   81[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;		None               void
  1524 ;; Registers used:
  1525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;Total ram usage:        3 bytes
  1536 ;; Hardware stack levels required when called:   10
  1537 ;; This function calls:
  1538 ;;		_LCD_printString
  1539 ;;		_RCMode
  1540 ;;		_competitionMode
  1541 ;;		_debug
  1542 ;;		_delay_ms
  1543 ;;		_init
  1544 ;;		_selfTest
  1545 ;;		_settings_auto
  1546 ;;		_settings_readButton
  1547 ;;		_settings_selfTest
  1548 ;;		_settings_wander
  1549 ;;		_wanderMode
  1550 ;; This function is called by:
  1551 ;;		Startup code after reset
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text0
  1556  010B30                     __ptext0:
  1557                           	opt stack 0
  1558  010B30                     _main:
  1559                           	opt stack 21
  1560                           
  1561                           ;main.c: 132: IPEN = 1;
  1562                           
  1563                           ;incstack = 0
  1564  010B30  8ED0               	bsf	4048,7,c	;volatile
  1565                           
  1566                           ;main.c: 133: GIE = 1;
  1567  010B32  8EF2               	bsf	intcon,7,c	;volatile
  1568                           
  1569                           ;main.c: 134: init();
  1570  010B34  EC04  F08B         	call	_init	;wreg free
  1571  010B38                     l5343:
  1572                           
  1573                           ;main.c: 141: {
  1574                           ;main.c: 143: mode = (settings_selfTest() << 2) + (settings_wander() << 1) + settings_au
      +                          to();
  1575  010B38  EC42  F08B         	call	_settings_auto	;wreg free
  1576  010B3C  6E50               	movwf	??_main& (0+255),c
  1577  010B3E  EC5E  F08B         	call	_settings_wander	;wreg free
  1578  010B42  0D02               	mullw	2
  1579  010B44  CFF3 F051          	movff	prodl,??_main+1
  1580  010B48  EC64  F08B         	call	_settings_selfTest	;wreg free
  1581  010B4C  0D04               	mullw	4
  1582  010B4E  50F3               	movf	prodl,w,c
  1583  010B50  2451               	addwf	??_main+1,w,c
  1584  010B52  2450               	addwf	??_main,w,c
  1585  010B54  6E52               	movwf	main@mode,c
  1586                           
  1587                           ;main.c: 145: switch(mode)
  1588  010B56  D036               	goto	l5359
  1589  010B58                     l5345:
  1590                           
  1591                           ;main.c: 148: LCD_printString(0, 0, "Selected\nRC Mode");
  1592  010B58  6A22               	clrf	LCD_printString@y,c
  1593  010B5A  0EFF               	movlw	high STR_9
  1594  010B5C  6E24               	movwf	LCD_printString@input+1,c
  1595  010B5E  0E5D               	movlw	low STR_9
  1596  010B60  6E23               	movwf	LCD_printString@input,c
  1597  010B62  0E00               	movlw	0
  1598  010B64  EC00  F080         	call	_LCD_printString
  1599                           
  1600                           ;main.c: 149: break;
  1601  010B68  D038               	goto	l5361
  1602  010B6A                     l5347:
  1603                           
  1604                           ;main.c: 152: LCD_printString(0, 0, "Selected\nMatch");
  1605  010B6A  6A22               	clrf	LCD_printString@y,c
  1606  010B6C  0EFF               	movlw	high STR_10
  1607  010B6E  6E24               	movwf	LCD_printString@input+1,c
  1608  010B70  0EAE               	movlw	low STR_10
  1609  010B72  6E23               	movwf	LCD_printString@input,c
  1610  010B74  0E00               	movlw	0
  1611  010B76  EC00  F080         	call	_LCD_printString
  1612                           
  1613                           ;main.c: 153: break;
  1614  010B7A  D02F               	goto	l5361
  1615  010B7C                     l5349:
  1616                           
  1617                           ;main.c: 156: LCD_printString(0, 0, "Selected\nWander");
  1618  010B7C  6A22               	clrf	LCD_printString@y,c
  1619  010B7E  0EFF               	movlw	high STR_11
  1620  010B80  6E24               	movwf	LCD_printString@input+1,c
  1621  010B82  0E8F               	movlw	low STR_11
  1622  010B84  6E23               	movwf	LCD_printString@input,c
  1623  010B86  0E00               	movlw	0
  1624  010B88  EC00  F080         	call	_LCD_printString
  1625                           
  1626                           ;main.c: 157: break;
  1627  010B8C  D026               	goto	l5361
  1628  010B8E                     l5351:
  1629                           
  1630                           ;main.c: 160: LCD_printString(0, 0, "Selected\nSelfTest");
  1631  010B8E  6A22               	clrf	LCD_printString@y,c
  1632  010B90  0EFF               	movlw	high STR_12
  1633  010B92  6E24               	movwf	LCD_printString@input+1,c
  1634  010B94  0E28               	movlw	low STR_12
  1635  010B96  6E23               	movwf	LCD_printString@input,c
  1636  010B98  0E00               	movlw	0
  1637  010B9A  EC00  F080         	call	_LCD_printString
  1638                           
  1639                           ;main.c: 161: break;
  1640  010B9E  D01D               	goto	l5361
  1641  010BA0                     l5353:
  1642                           
  1643                           ;main.c: 164: LCD_printString(0, 0, "Selected\nDebug");
  1644  010BA0  6A22               	clrf	LCD_printString@y,c
  1645  010BA2  0EFF               	movlw	high STR_13
  1646  010BA4  6E24               	movwf	LCD_printString@input+1,c
  1647  010BA6  0E9F               	movlw	low STR_13
  1648  010BA8  6E23               	movwf	LCD_printString@input,c
  1649  010BAA  0E00               	movlw	0
  1650  010BAC  EC00  F080         	call	_LCD_printString
  1651                           
  1652                           ;main.c: 165: break;
  1653  010BB0  D014               	goto	l5361
  1654  010BB2                     l5355:
  1655                           
  1656                           ;main.c: 168: LCD_printString(0, 0, "Selected\nUnknown");
  1657  010BB2  6A22               	clrf	LCD_printString@y,c
  1658  010BB4  0EFF               	movlw	high STR_14
  1659  010BB6  6E24               	movwf	LCD_printString@input+1,c
  1660  010BB8  0E6E               	movlw	low STR_14
  1661  010BBA  6E23               	movwf	LCD_printString@input,c
  1662  010BBC  0E00               	movlw	0
  1663  010BBE  EC00  F080         	call	_LCD_printString
  1664                           
  1665                           ;main.c: 169: break;
  1666  010BC2  D00B               	goto	l5361
  1667  010BC4                     l5359:
  1668  010BC4  5052               	movf	main@mode,w,c
  1669                           
  1670                           ; Switch size 1, requested type "space"
  1671                           ; Number of cases is 5, Range of values is 0 to 5
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte           16     9 (average)
  1675                           ;	Chosen strategy is simple_byte
  1676  010BC6  E0C8               	bz	l5345
  1677  010BC8  0A01               	xorlw	1	; case 1
  1678  010BCA  E0CF               	bz	l5347
  1679  010BCC  0A03               	xorlw	3	; case 2
  1680  010BCE  E0D6               	bz	l5349
  1681  010BD0  0A06               	xorlw	6	; case 4
  1682  010BD2  E0DD               	bz	l5351
  1683  010BD4  0A01               	xorlw	1	; case 5
  1684  010BD6  E0E4               	bz	l5353
  1685  010BD8  D7EC               	goto	l5355
  1686  010BDA                     l5361:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 172: delay_ms(50);
  1690  010BDA  EC59  F084         	call	PL10	;call to abstracted procedure
  1691  010BDE  EC95  F089         	call	_delay_ms	;wreg free
  1692                           
  1693                           ;main.c: 173: }while(settings_readButton() == 1 || mode > 5);
  1694  010BE2  EC49  F08B         	call	_settings_readButton	;wreg free
  1695  010BE6  6E50               	movwf	??_main& (0+255),c
  1696  010BE8  0450               	decf	??_main,w,c
  1697  010BEA  E0A6               	bz	l5343
  1698  010BEC  0E06               	movlw	6
  1699  010BEE  5C52               	subwf	main@mode,w,c
  1700  010BF0  E310               	bnc	l5377
  1701  010BF2  D7A2               	goto	l5343
  1702  010BF4                     l5365:
  1703                           
  1704                           ;main.c: 178: RCMode();
  1705  010BF4  EC7E  F086         	call	_RCMode	;wreg free
  1706                           
  1707                           ;main.c: 179: break;
  1708  010BF8  D79F               	goto	l5343
  1709  010BFA                     l5367:
  1710                           
  1711                           ;main.c: 182: competitionMode();
  1712  010BFA  EC28  F08B         	call	_competitionMode	;wreg free
  1713                           
  1714                           ;main.c: 183: break;
  1715  010BFE  D79C               	goto	l5343
  1716  010C00                     l5369:
  1717                           
  1718                           ;main.c: 186: wanderMode();
  1719  010C00  EC1F  F08B         	call	_wanderMode	;wreg free
  1720                           
  1721                           ;main.c: 187: break;
  1722  010C04  D799               	goto	l5343
  1723  010C06                     l5371:
  1724                           
  1725                           ;main.c: 190: selfTest();
  1726  010C06  ECA9  F08A         	call	_selfTest	;wreg free
  1727                           
  1728                           ;main.c: 191: break;
  1729  010C0A  D796               	goto	l5343
  1730  010C0C                     l5373:
  1731                           
  1732                           ;main.c: 194: debug();
  1733  010C0C  EC6A  F08B         	call	_debug	;wreg free
  1734                           
  1735                           ;main.c: 195: break;
  1736  010C10  D793               	goto	l5343
  1737  010C12                     l5377:
  1738  010C12  5052               	movf	main@mode,w,c
  1739                           
  1740                           ; Switch size 1, requested type "space"
  1741                           ; Number of cases is 5, Range of values is 0 to 5
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte           16     9 (average)
  1745                           ;	Chosen strategy is simple_byte
  1746  010C14  E0EF               	bz	l5365
  1747  010C16  0A01               	xorlw	1	; case 1
  1748  010C18  E0F0               	bz	l5367
  1749  010C1A  0A03               	xorlw	3	; case 2
  1750  010C1C  E0F1               	bz	l5369
  1751  010C1E  0A06               	xorlw	6	; case 4
  1752  010C20  E0F2               	bz	l5371
  1753  010C22  0A01               	xorlw	1	; case 5
  1754  010C24  E0F3               	bz	l5373
  1755  010C26  D788               	goto	l5343
  1756  010C28                     __end_of_main:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           intcon2	equ	0xFF1
  1766                           intcon3	equ	0xFF0
  1767                           indf0	equ	0xFEF
  1768                           postinc0	equ	0xFEE
  1769                           fsr0h	equ	0xFEA
  1770                           fsr0l	equ	0xFE9
  1771                           wreg	equ	0xFE8
  1772                           indf1	equ	0xFE7
  1773                           postinc1	equ	0xFE6
  1774                           postdec1	equ	0xFE5
  1775                           fsr1h	equ	0xFE2
  1776                           fsr1l	equ	0xFE1
  1777                           indf2	equ	0xFDF
  1778                           postinc2	equ	0xFDE
  1779                           postdec2	equ	0xFDD
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _wanderMode *****************
  1785 ;; Defined at:
  1786 ;;		line 59 in file "main.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;		None               void
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    7
  1807 ;; This function calls:
  1808 ;;		_LCD_printString
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text1
  1815  01163E                     __ptext1:
  1816                           	opt stack 0
  1817  01163E                     _wanderMode:
  1818                           	opt stack 23
  1819                           
  1820                           ;main.c: 61: LCD_printString(0,0, "Wanderin\n---..---");
  1821                           
  1822                           ;incstack = 0
  1823  01163E  6A22               	clrf	LCD_printString@y,c
  1824  011640  0EFF               	movlw	high STR_4
  1825  011642  6E24               	movwf	LCD_printString@input+1,c
  1826  011644  0E16               	movlw	low STR_4
  1827  011646  6E23               	movwf	LCD_printString@input,c
  1828  011648  0E00               	movlw	0
  1829  01164A  EC00  F080         	call	_LCD_printString
  1830  01164E                     l236:
  1831                           
  1832                           ;main.c: 63: {
  1833  01164E  D7FF               	goto	l236
  1834  011650                     __end_of_wanderMode:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           intcon3	equ	0xFF0
  1845                           indf0	equ	0xFEF
  1846                           postinc0	equ	0xFEE
  1847                           fsr0h	equ	0xFEA
  1848                           fsr0l	equ	0xFE9
  1849                           wreg	equ	0xFE8
  1850                           indf1	equ	0xFE7
  1851                           postinc1	equ	0xFE6
  1852                           postdec1	equ	0xFE5
  1853                           fsr1h	equ	0xFE2
  1854                           fsr1l	equ	0xFE1
  1855                           indf2	equ	0xFDF
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function _settings_wander *****************
  1863 ;; Defined at:
  1864 ;;		line 80 in file "settings.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  t               1    5[COMRAM] unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      unsigned char 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1882 ;;Total ram usage:        1 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    3
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text2
  1893  0116BC                     __ptext2:
  1894                           	opt stack 0
  1895  0116BC                     _settings_wander:
  1896                           	opt stack 27
  1897                           
  1898                           ;settings.c: 82: char t = RG2;
  1899                           
  1900                           ;incstack = 0
  1901  0116BC  0E00               	movlw	0
  1902  0116BE  B486               	btfsc	3974,2,c	;volatile
  1903  0116C0  0E01               	movlw	1
  1904  0116C2  6E06               	movwf	settings_wander@t,c
  1905                           
  1906                           ;settings.c: 83: return t;
  1907  0116C4  5006               	movf	settings_wander@t,w,c
  1908  0116C6  0012               	return	
  1909  0116C8                     __end_of_settings_wander:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           intcon	equ	0xFF2
  1918                           intcon2	equ	0xFF1
  1919                           intcon3	equ	0xFF0
  1920                           indf0	equ	0xFEF
  1921                           postinc0	equ	0xFEE
  1922                           fsr0h	equ	0xFEA
  1923                           fsr0l	equ	0xFE9
  1924                           wreg	equ	0xFE8
  1925                           indf1	equ	0xFE7
  1926                           postinc1	equ	0xFE6
  1927                           postdec1	equ	0xFE5
  1928                           fsr1h	equ	0xFE2
  1929                           fsr1l	equ	0xFE1
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _settings_selfTest *****************
  1938 ;; Defined at:
  1939 ;;		line 94 in file "settings.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  t               1    5[COMRAM] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      unsigned char 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1957 ;;Total ram usage:        1 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    3
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text3
  1968  0116C8                     __ptext3:
  1969                           	opt stack 0
  1970  0116C8                     _settings_selfTest:
  1971                           	opt stack 27
  1972                           
  1973                           ;settings.c: 96: char t = RG0;
  1974                           
  1975                           ;incstack = 0
  1976  0116C8  0E00               	movlw	0
  1977  0116CA  B086               	btfsc	3974,0,c	;volatile
  1978  0116CC  0E01               	movlw	1
  1979  0116CE  6E06               	movwf	settings_selfTest@t,c
  1980                           
  1981                           ;settings.c: 97: return t;
  1982  0116D0  5006               	movf	settings_selfTest@t,w,c
  1983  0116D2  0012               	return	
  1984  0116D4                     __end_of_settings_selfTest:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           prodh	equ	0xFF4
  1991                           prodl	equ	0xFF3
  1992                           intcon	equ	0xFF2
  1993                           intcon2	equ	0xFF1
  1994                           intcon3	equ	0xFF0
  1995                           indf0	equ	0xFEF
  1996                           postinc0	equ	0xFEE
  1997                           fsr0h	equ	0xFEA
  1998                           fsr0l	equ	0xFE9
  1999                           wreg	equ	0xFE8
  2000                           indf1	equ	0xFE7
  2001                           postinc1	equ	0xFE6
  2002                           postdec1	equ	0xFE5
  2003                           fsr1h	equ	0xFE2
  2004                           fsr1l	equ	0xFE1
  2005                           indf2	equ	0xFDF
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           fsr2h	equ	0xFDA
  2009                           fsr2l	equ	0xFD9
  2010                           status	equ	0xFD8
  2011                           
  2012 ;; *************** function _settings_auto *****************
  2013 ;; Defined at:
  2014 ;;		line 66 in file "settings.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  t               1    5[COMRAM] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      unsigned char 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2032 ;;Total ram usage:        1 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    3
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text4
  2043  011684                     __ptext4:
  2044                           	opt stack 0
  2045  011684                     _settings_auto:
  2046                           	opt stack 27
  2047                           
  2048                           ;settings.c: 68: char t = RL1;
  2049                           
  2050                           ;incstack = 0
  2051  011684  010E               	movlb	14
  2052  011686  0E00               	movlw	0
  2053  011688  B3E4               	btfsc	228,1,b	;volatile
  2054  01168A  0E01               	movlw	1
  2055  01168C  6E06               	movwf	settings_auto@t,c
  2056                           
  2057                           ;settings.c: 69: return t;
  2058  01168E  5006               	movf	settings_auto@t,w,c
  2059  011690  0012               	return	
  2060  011692                     __end_of_settings_auto:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           intcon	equ	0xFF2
  2069                           intcon2	equ	0xFF1
  2070                           intcon3	equ	0xFF0
  2071                           indf0	equ	0xFEF
  2072                           postinc0	equ	0xFEE
  2073                           fsr0h	equ	0xFEA
  2074                           fsr0l	equ	0xFE9
  2075                           wreg	equ	0xFE8
  2076                           indf1	equ	0xFE7
  2077                           postinc1	equ	0xFE6
  2078                           postdec1	equ	0xFE5
  2079                           fsr1h	equ	0xFE2
  2080                           fsr1l	equ	0xFE1
  2081                           indf2	equ	0xFDF
  2082                           postinc2	equ	0xFDE
  2083                           postdec2	equ	0xFDD
  2084                           fsr2h	equ	0xFDA
  2085                           fsr2l	equ	0xFD9
  2086                           status	equ	0xFD8
  2087                           
  2088 ;; *************** function _selfTest *****************
  2089 ;; Defined at:
  2090 ;;		line 49 in file "main.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;		None               void
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:        1 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    7
  2111 ;; This function calls:
  2112 ;;		_LCD_printString
  2113 ;;		_settings_readButton
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text5
  2120  011552                     __ptext5:
  2121                           	opt stack 0
  2122  011552                     _selfTest:
  2123                           	opt stack 23
  2124                           
  2125                           ;main.c: 53: LCD_printString(0,0, "Self Cal\nWait Plz");
  2126                           
  2127                           ;incstack = 0
  2128  011552  6A22               	clrf	LCD_printString@y,c
  2129  011554  0EFF               	movlw	high STR_3
  2130  011556  6E24               	movwf	LCD_printString@input+1,c
  2131  011558  0E3A               	movlw	low STR_3
  2132  01155A  6E23               	movwf	LCD_printString@input,c
  2133  01155C  0E00               	movlw	0
  2134  01155E  EC00  F080         	call	_LCD_printString
  2135  011562                     l5305:
  2136  011562  EC49  F08B         	call	_settings_readButton	;wreg free
  2137  011566  0900               	iorlw	0
  2138  011568  E0FC               	bz	l5305
  2139  01156A                     l5307:
  2140  01156A  EC49  F08B         	call	_settings_readButton	;wreg free
  2141  01156E  6E2B               	movwf	??_selfTest& (0+255),c
  2142  011570  042B               	decf	??_selfTest,w,c
  2143  011572  A4D8               	btfss	status,2,c
  2144  011574  0012               	return	
  2145  011576  D7F9               	goto	l5307
  2146  011578                     __end_of_selfTest:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           intcon3	equ	0xFF0
  2157                           indf0	equ	0xFEF
  2158                           postinc0	equ	0xFEE
  2159                           fsr0h	equ	0xFEA
  2160                           fsr0l	equ	0xFE9
  2161                           wreg	equ	0xFE8
  2162                           indf1	equ	0xFE7
  2163                           postinc1	equ	0xFE6
  2164                           postdec1	equ	0xFE5
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           indf2	equ	0xFDF
  2168                           postinc2	equ	0xFDE
  2169                           postdec2	equ	0xFDD
  2170                           fsr2h	equ	0xFDA
  2171                           fsr2l	equ	0xFD9
  2172                           status	equ	0xFD8
  2173                           
  2174 ;; *************** function _settings_readButton *****************
  2175 ;; Defined at:
  2176 ;;		line 45 in file "settings.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;		None
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  t               1    5[COMRAM] unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  1    wreg      unsigned char 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;Total ram usage:        1 bytes
  2195 ;; Hardware stack levels used:    1
  2196 ;; Hardware stack levels required when called:    3
  2197 ;; This function calls:
  2198 ;;		Nothing
  2199 ;; This function is called by:
  2200 ;;		_selfTest
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text6
  2206  011692                     __ptext6:
  2207                           	opt stack 0
  2208  011692                     _settings_readButton:
  2209                           	opt stack 27
  2210                           
  2211                           ;settings.c: 47: char t = RL3;
  2212                           
  2213                           ;incstack = 0
  2214  011692  010E               	movlb	14
  2215  011694  0E00               	movlw	0
  2216  011696  B7E4               	btfsc	228,3,b	;volatile
  2217  011698  0E01               	movlw	1
  2218  01169A  6E06               	movwf	settings_readButton@t,c
  2219                           
  2220                           ;settings.c: 48: return t;
  2221  01169C  5006               	movf	settings_readButton@t,w,c
  2222  01169E  0012               	return	
  2223  0116A0                     __end_of_settings_readButton:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           intcon	equ	0xFF2
  2232                           intcon2	equ	0xFF1
  2233                           intcon3	equ	0xFF0
  2234                           indf0	equ	0xFEF
  2235                           postinc0	equ	0xFEE
  2236                           fsr0h	equ	0xFEA
  2237                           fsr0l	equ	0xFE9
  2238                           wreg	equ	0xFE8
  2239                           indf1	equ	0xFE7
  2240                           postinc1	equ	0xFE6
  2241                           postdec1	equ	0xFE5
  2242                           fsr1h	equ	0xFE2
  2243                           fsr1l	equ	0xFE1
  2244                           indf2	equ	0xFDF
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _init *****************
  2252 ;; Defined at:
  2253 ;;		line 30 in file "main.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;		None               void
  2260 ;; Registers used:
  2261 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : F/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    8
  2274 ;; This function calls:
  2275 ;;		_LCD_init4bit
  2276 ;;		_UART_init
  2277 ;;		_clearMillis
  2278 ;;		_encoders_init
  2279 ;;		_fft_init
  2280 ;;		_motorDrive_init
  2281 ;;		_settings_init
  2282 ;; This function is called by:
  2283 ;;		_main
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text7
  2288  011608                     __ptext7:
  2289                           	opt stack 0
  2290  011608                     _init:
  2291                           	opt stack 22
  2292                           
  2293                           ;main.c: 32: settings_init();
  2294                           
  2295                           ;incstack = 0
  2296  011608  ECE2  F08A         	call	_settings_init	;wreg free
  2297                           
  2298                           ; BSR set to: 15
  2299                           ;main.c: 33: motorDrive_init();
  2300  01160C  EC65  F088         	call	_motorDrive_init	;wreg free
  2301                           
  2302                           ; BSR set to: 15
  2303                           ;main.c: 34: LCD_init4bit();
  2304  011610  EC8E  F083         	call	_LCD_init4bit	;wreg free
  2305                           
  2306                           ;main.c: 35: UART_init();
  2307  011614  ECE3  F086         	call	_UART_init	;wreg free
  2308                           
  2309                           ; BSR set to: 14
  2310                           ;main.c: 36: encoders_init();
  2311  011618  ECBC  F08A         	call	_encoders_init	;wreg free
  2312                           
  2313                           ; BSR set to: 14
  2314                           ;main.c: 37: fft_init();
  2315  01161C  EC3A  F089         	call	_fft_init	;wreg free
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;main.c: 41: clearMillis();
  2319  011620  EF50  F08B         	goto	_clearMillis	;wreg free
  2320  011624                     __end_of_init:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           intcon2	equ	0xFF1
  2330                           intcon3	equ	0xFF0
  2331                           indf0	equ	0xFEF
  2332                           postinc0	equ	0xFEE
  2333                           fsr0h	equ	0xFEA
  2334                           fsr0l	equ	0xFE9
  2335                           wreg	equ	0xFE8
  2336                           indf1	equ	0xFE7
  2337                           postinc1	equ	0xFE6
  2338                           postdec1	equ	0xFE5
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _settings_init *****************
  2349 ;; Defined at:
  2350 ;;		line 16 in file "settings.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, status,2
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : F/F
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;Total ram usage:        0 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    3
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_init
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text8
  2379  0115C4                     __ptext8:
  2380                           	opt stack 0
  2381  0115C4                     _settings_init:
  2382                           	opt stack 26
  2383                           
  2384                           ;settings.c: 18: CM1CONbits.CON = 0;
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;incstack = 0
  2388  0115C4  010F               	movlb	15	; () banked
  2389  0115C6  9F53               	bcf	83,7,b	;volatile
  2390                           
  2391                           ;settings.c: 19: ANCON1 = 0;
  2392  0115C8  010E               	movlb	14	; () banked
  2393  0115CA  6B47               	clrf	71,b	;volatile
  2394                           
  2395                           ;settings.c: 20: ANCON2 = 0;
  2396  0115CC  6B46               	clrf	70,b	;volatile
  2397                           
  2398                           ;settings.c: 22: TRISGbits.TRISG0 = 1;
  2399  0115CE  8098               	bsf	3992,0,c	;volatile
  2400                           
  2401                           ;settings.c: 23: TRISGbits.TRISG1 = 1;
  2402  0115D0  8298               	bsf	3992,1,c	;volatile
  2403                           
  2404                           ;settings.c: 24: TRISGbits.TRISG2 = 1;
  2405  0115D2  8498               	bsf	3992,2,c	;volatile
  2406                           
  2407                           ;settings.c: 25: TRISGbits.TRISG3 = 1;
  2408  0115D4  8698               	bsf	3992,3,c	;volatile
  2409                           
  2410                           ;settings.c: 26: TRISGbits.TRISG4 = 1;
  2411  0115D6  8898               	bsf	3992,4,c	;volatile
  2412                           
  2413                           ;settings.c: 27: TRISLbits.TRISL1 = 1;
  2414  0115D8  83E6               	bsf	230,1,b	;volatile
  2415                           
  2416                           ;settings.c: 28: TRISLbits.TRISL2 = 1;
  2417  0115DA  85E6               	bsf	230,2,b	;volatile
  2418                           
  2419                           ;settings.c: 29: TRISLbits.TRISL3 = 1;
  2420  0115DC  87E6               	bsf	230,3,b	;volatile
  2421                           
  2422                           ; BSR set to: 14
  2423                           ;settings.c: 32: PADCFG1 = 0b00010001;
  2424  0115DE  0E11               	movlw	17
  2425  0115E0  010F               	movlb	15	; () banked
  2426  0115E2  6F54               	movwf	84,b	;volatile
  2427                           
  2428                           ; BSR set to: 15
  2429  0115E4  0C11               	retlw	17
  2430  0115E6                     __end_of_settings_init:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           intcon	equ	0xFF2
  2439                           intcon2	equ	0xFF1
  2440                           intcon3	equ	0xFF0
  2441                           indf0	equ	0xFEF
  2442                           postinc0	equ	0xFEE
  2443                           fsr0h	equ	0xFEA
  2444                           fsr0l	equ	0xFE9
  2445                           wreg	equ	0xFE8
  2446                           indf1	equ	0xFE7
  2447                           postinc1	equ	0xFE6
  2448                           postdec1	equ	0xFE5
  2449                           fsr1h	equ	0xFE2
  2450                           fsr1l	equ	0xFE1
  2451                           indf2	equ	0xFDF
  2452                           postinc2	equ	0xFDE
  2453                           postdec2	equ	0xFDD
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _motorDrive_init *****************
  2459 ;; Defined at:
  2460 ;;		line 15 in file "motorDrive.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;		None               void
  2467 ;; Registers used:
  2468 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : F/F
  2471 ;;		On exit  : F/F
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		_OpenEPWM1
  2483 ;;		_OpenEPWM3
  2484 ;;		_SetDCEPWM1
  2485 ;;		_SetDCEPWM3
  2486 ;;		_SetOutputEPWM1
  2487 ;;		_SetOutputEPWM3
  2488 ;;		_motorDrive_setSpeeds
  2489 ;; This function is called by:
  2490 ;;		_init
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text9
  2495  0110CA                     __ptext9:
  2496                           	opt stack 0
  2497  0110CA                     _motorDrive_init:
  2498                           	opt stack 24
  2499                           
  2500                           ; BSR set to: 15
  2501                           ;motorDrive.c: 22: IOLOCK = 0;
  2502                           
  2503                           ; BSR set to: 15
  2504                           ;incstack = 0
  2505  0110CA  9C66               	bcf	3942,6,c	;volatile
  2506                           
  2507                           ; BSR set to: 15
  2508                           ;motorDrive.c: 24: RPOR34_35 |= 0xF8;
  2509  0110CC  0EF8               	movlw	248
  2510  0110CE  010E               	movlb	14	; () banked
  2511  0110D0  1323               	iorwf	35,f,b	;volatile
  2512                           
  2513                           ; BSR set to: 14
  2514                           ;motorDrive.c: 25: TRISE6 = 0;
  2515  0110D2  9C96               	bcf	3990,6,c	;volatile
  2516                           
  2517                           ;motorDrive.c: 29: RPOR30_31 |= 0x4F;
  2518  0110D4  0E4F               	movlw	79
  2519  0110D6  1321               	iorwf	33,f,b	;volatile
  2520                           
  2521                           ; BSR set to: 14
  2522                           ;motorDrive.c: 30: TRISE7 = 0;
  2523  0110D8  9E96               	bcf	3990,7,c	;volatile
  2524                           
  2525                           ; BSR set to: 14
  2526                           ;motorDrive.c: 32: IOLOCK = 1;
  2527  0110DA  8C66               	bsf	3942,6,c	;volatile
  2528                           
  2529                           ; BSR set to: 14
  2530                           ;motorDrive.c: 38: TRISL0 = 0;
  2531  0110DC  91E6               	bcf	230,0,b	;volatile
  2532                           
  2533                           ; BSR set to: 14
  2534                           ;motorDrive.c: 39: TRISK1 = 0;
  2535  0110DE  93E9               	bcf	233,1,b	;volatile
  2536                           
  2537                           ; BSR set to: 14
  2538                           ;motorDrive.c: 43: TMR4ON = 1;
  2539  0110E0  010F               	movlb	15	; () banked
  2540  0110E2  8504               	bsf	4,2,b	;volatile
  2541                           
  2542                           ; BSR set to: 15
  2543                           ;motorDrive.c: 44: T4CKPS1 = 1;
  2544  0110E4  8304               	bsf	4,1,b	;volatile
  2545                           
  2546                           ; BSR set to: 15
  2547                           ;motorDrive.c: 46: TMR6ON = 1;
  2548  0110E6  853D               	bsf	61,2,b	;volatile
  2549                           
  2550                           ; BSR set to: 15
  2551                           ;motorDrive.c: 47: T6CKPS1 = 1;
  2552  0110E8  833D               	bsf	61,1,b	;volatile
  2553                           
  2554                           ; BSR set to: 15
  2555                           ;motorDrive.c: 50: OpenEPWM1(0x33, 0b10101111);
  2556  0110EA  0EAF               	movlw	175
  2557  0110EC  6E06               	movwf	OpenEPWM1@timer_source,c
  2558  0110EE  0E33               	movlw	51
  2559  0110F0  EC2C  F088         	call	_OpenEPWM1
  2560                           
  2561                           ; BSR set to: 15
  2562                           ;motorDrive.c: 51: SetDCEPWM1(0x0);
  2563  0110F4  0E00               	movlw	0
  2564  0110F6  6A07               	clrf	SetDCEPWM1@dutycycle+1,c
  2565  0110F8  6A06               	clrf	SetDCEPWM1@dutycycle,c
  2566  0110FA  EC44  F08A         	call	_SetDCEPWM1	;wreg free
  2567                           
  2568                           ;motorDrive.c: 52: SetOutputEPWM1( 0b00111111, 0b11111100);
  2569  0110FE  0EFC               	movlw	252
  2570  011100  6E06               	movwf	SetOutputEPWM1@outputmode,c
  2571  011102  0E3F               	movlw	63
  2572  011104  ECF3  F087         	call	_SetOutputEPWM1
  2573                           
  2574                           ;motorDrive.c: 55: CCP1CON = 0b00001100;
  2575  011108  0E0C               	movlw	12
  2576  01110A  6EB9               	movwf	4025,c	;volatile
  2577                           
  2578                           ;motorDrive.c: 56: CCPTMRS0 = 0b01001001;
  2579  01110C  0E49               	movlw	73
  2580  01110E  010F               	movlb	15	; () banked
  2581  011110  6F36               	movwf	54,b	;volatile
  2582                           
  2583                           ; BSR set to: 15
  2584                           ;motorDrive.c: 60: OpenEPWM3(0x33, 0b11101111);
  2585  011112  0EEF               	movlw	239
  2586  011114  6E06               	movwf	OpenEPWM3@timer_source,c
  2587  011116  0E33               	movlw	51
  2588  011118  EC7D  F087         	call	_OpenEPWM3
  2589                           
  2590                           ; BSR set to: 15
  2591                           ;motorDrive.c: 61: SetDCEPWM3(0x0);
  2592  01111C  0E00               	movlw	0
  2593  01111E  6A07               	clrf	SetDCEPWM3@dutycycle+1,c
  2594  011120  6A06               	clrf	SetDCEPWM3@dutycycle,c
  2595  011122  EC26  F08A         	call	_SetDCEPWM3	;wreg free
  2596                           
  2597                           ; BSR set to: 15
  2598                           ;motorDrive.c: 62: SetOutputEPWM3( 0b00111111, 0b11111100);
  2599  011126  0EFC               	movlw	252
  2600  011128  6E06               	movwf	SetOutputEPWM3@outputmode,c
  2601  01112A  0E3F               	movlw	63
  2602  01112C  ECBA  F087         	call	_SetOutputEPWM3
  2603                           
  2604                           ; BSR set to: 15
  2605                           ;motorDrive.c: 64: motorDrive_setSpeeds(0,0);
  2606  011130  0E00               	movlw	0
  2607  011132  6A14               	clrf	motorDrive_setSpeeds@rSpeed,c
  2608  011134  EFC2  F081         	goto	_motorDrive_setSpeeds
  2609  011138                     __end_of_motorDrive_init:
  2610                           	opt stack 0
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           prodh	equ	0xFF4
  2616                           prodl	equ	0xFF3
  2617                           intcon	equ	0xFF2
  2618                           intcon2	equ	0xFF1
  2619                           intcon3	equ	0xFF0
  2620                           indf0	equ	0xFEF
  2621                           postinc0	equ	0xFEE
  2622                           fsr0h	equ	0xFEA
  2623                           fsr0l	equ	0xFE9
  2624                           wreg	equ	0xFE8
  2625                           indf1	equ	0xFE7
  2626                           postinc1	equ	0xFE6
  2627                           postdec1	equ	0xFE5
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           postinc2	equ	0xFDE
  2632                           postdec2	equ	0xFDD
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _SetOutputEPWM3 *****************
  2638 ;; Defined at:
  2639 ;;		line 17 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setoc.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  outputconfig    1    wreg     unsigned char 
  2642 ;;  outputmode      1    5[COMRAM] unsigned char 
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2645 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;		None               void
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2650 ;; Tracked objects:
  2651 ;;		On entry : F/F
  2652 ;;		On exit  : F/F
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2655 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;Total ram usage:        4 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    3
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_motorDrive_init
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text10
  2670  010F74                     __ptext10:
  2671                           	opt stack 0
  2672  010F74                     _SetOutputEPWM3:
  2673                           	opt stack 25
  2674                           
  2675                           ; BSR set to: 15
  2676                           ;incstack = 0
  2677                           ;SetOutputEPWM3@outputconfig stored from wreg
  2678  010F74  6E09               	movwf	SetOutputEPWM3@outputconfig,c
  2679                           
  2680                           ; BSR set to: 15
  2681                           
  2682                           ; BSR set to: 15
  2683  010F76  0E3F               	movlw	63
  2684  010F78  1209               	iorwf	SetOutputEPWM3@outputconfig,f,c
  2685  010F7A  0EFC               	movlw	252
  2686  010F7C  1206               	iorwf	SetOutputEPWM3@outputmode,f,c
  2687  010F7E  5149               	movf	73,w,b	;volatile
  2688  010F80  09C0               	iorlw	192
  2689  010F82  1409               	andwf	SetOutputEPWM3@outputconfig,w,c
  2690  010F84  6F49               	movwf	73,b	;volatile
  2691  010F86  5149               	movf	73,w,b	;volatile
  2692  010F88  090F               	iorlw	15
  2693  010F8A  1406               	andwf	SetOutputEPWM3@outputmode,w,c
  2694  010F8C  6F49               	movwf	73,b	;volatile
  2695                           
  2696                           ; BSR set to: 15
  2697  010F8E  0E05               	movlw	5
  2698  010F90  6EF6               	movwf	tblptrl,c
  2699  010F92                     	if	1	;There is more than 1 active tblptr byte
  2700  010F92  6AF7               	clrf	tblptrh,c
  2701  010F94                     	endif
  2702  010F94                     	if	1	;There are 3 active tblptr bytes
  2703  010F94  0E30               	movlw	48
  2704  010F96  6EF8               	movwf	tblptru,c
  2705  010F98                     	endif
  2706  010F98  0008               	tblrd		*
  2707  010F9A  CFF5 F007          	movff	tablat,??_SetOutputEPWM3
  2708  010F9E  A207               	btfss	??_SetOutputEPWM3,1,c
  2709  010FA0  D002               	goto	l1243
  2710                           
  2711                           ; BSR set to: 15
  2712  010FA2  6808               	setf	SetOutputEPWM3@eccpmx,c
  2713  010FA4  D001               	goto	l2519
  2714  010FA6                     l1243:
  2715                           
  2716                           ; BSR set to: 15
  2717  010FA6  6A08               	clrf	SetOutputEPWM3@eccpmx,c
  2718  010FA8                     l2519:
  2719                           
  2720                           ; BSR set to: 15
  2721  010FA8  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2722  010FAA  0A3F               	xorlw	63
  2723  010FAC  E102               	bnz	l2523
  2724                           
  2725                           ; BSR set to: 15
  2726  010FAE  9098               	bcf	3992,0,c	;volatile
  2727  010FB0  0012               	return	
  2728  010FB2                     l2523:
  2729                           
  2730                           ; BSR set to: 15
  2731  010FB2  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2732  010FB4  0ABF               	xorlw	191
  2733  010FB6  E107               	bnz	l2531
  2734                           
  2735                           ; BSR set to: 15
  2736  010FB8  9098               	bcf	3992,0,c	;volatile
  2737                           
  2738                           ; BSR set to: 15
  2739  010FBA  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2740  010FBC  E002               	bz	l1248
  2741                           
  2742                           ; BSR set to: 15
  2743  010FBE  9896               	bcf	3990,4,c	;volatile
  2744  010FC0  0012               	return	
  2745  010FC2                     l1248:
  2746                           
  2747                           ; BSR set to: 15
  2748  010FC2  9A99               	bcf	3993,5,c	;volatile
  2749  010FC4  0012               	return	
  2750  010FC6                     l2531:
  2751                           
  2752                           ; BSR set to: 15
  2753  010FC6  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2754  010FC8  0A7F               	xorlw	127
  2755  010FCA  E003               	bz	l1253
  2756                           
  2757                           ; BSR set to: 15
  2758  010FCC  2809               	incf	SetOutputEPWM3@outputconfig,w,c
  2759  010FCE  A4D8               	btfss	status,2,c
  2760  010FD0  0012               	return	
  2761  010FD2                     l1253:
  2762                           
  2763                           ; BSR set to: 15
  2764  010FD2  9098               	bcf	3992,0,c	;volatile
  2765                           
  2766                           ; BSR set to: 15
  2767  010FD4  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2768  010FD6  E003               	bz	l1254
  2769                           
  2770                           ; BSR set to: 15
  2771  010FD8  9896               	bcf	3990,4,c	;volatile
  2772  010FDA  9696               	bcf	3990,3,c	;volatile
  2773  010FDC  D002               	goto	l1255
  2774  010FDE                     l1254:
  2775                           
  2776                           ; BSR set to: 15
  2777  010FDE  9A99               	bcf	3993,5,c	;volatile
  2778  010FE0  9899               	bcf	3993,4,c	;volatile
  2779  010FE2                     l1255:
  2780                           
  2781                           ; BSR set to: 15
  2782  010FE2  9698               	bcf	3992,3,c	;volatile
  2783                           
  2784                           ; BSR set to: 15
  2785  010FE4  0012               	return	
  2786  010FE6                     __end_of_SetOutputEPWM3:
  2787                           	opt stack 0
  2788                           tblptru	equ	0xFF8
  2789                           tblptrh	equ	0xFF7
  2790                           tblptrl	equ	0xFF6
  2791                           tablat	equ	0xFF5
  2792                           prodh	equ	0xFF4
  2793                           prodl	equ	0xFF3
  2794                           intcon	equ	0xFF2
  2795                           intcon2	equ	0xFF1
  2796                           intcon3	equ	0xFF0
  2797                           indf0	equ	0xFEF
  2798                           postinc0	equ	0xFEE
  2799                           fsr0h	equ	0xFEA
  2800                           fsr0l	equ	0xFE9
  2801                           wreg	equ	0xFE8
  2802                           indf1	equ	0xFE7
  2803                           postinc1	equ	0xFE6
  2804                           postdec1	equ	0xFE5
  2805                           fsr1h	equ	0xFE2
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _SetOutputEPWM1 *****************
  2815 ;; Defined at:
  2816 ;;		line 50 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setoc.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  outputconfig    1    wreg     unsigned char 
  2819 ;;  outputmode      1    5[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2822 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;		None               void
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/F
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2832 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2836 ;;Total ram usage:        4 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    3
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_motorDrive_init
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text11
  2847  010FE6                     __ptext11:
  2848                           	opt stack 0
  2849  010FE6                     _SetOutputEPWM1:
  2850                           	opt stack 25
  2851                           
  2852                           ; BSR set to: 15
  2853                           ;incstack = 0
  2854                           ;SetOutputEPWM1@outputconfig stored from wreg
  2855  010FE6  6E09               	movwf	SetOutputEPWM1@outputconfig,c
  2856  010FE8  0E3F               	movlw	63
  2857  010FEA  1209               	iorwf	SetOutputEPWM1@outputconfig,f,c
  2858  010FEC  0EFC               	movlw	252
  2859  010FEE  1206               	iorwf	SetOutputEPWM1@outputmode,f,c
  2860  010FF0  50B9               	movf	4025,w,c	;volatile
  2861  010FF2  09C0               	iorlw	192
  2862  010FF4  1409               	andwf	SetOutputEPWM1@outputconfig,w,c
  2863  010FF6  6EB9               	movwf	4025,c	;volatile
  2864  010FF8  50B9               	movf	4025,w,c	;volatile
  2865  010FFA  090F               	iorlw	15
  2866  010FFC  1406               	andwf	SetOutputEPWM1@outputmode,w,c
  2867  010FFE  6EB9               	movwf	4025,c	;volatile
  2868  011000  0E05               	movlw	5
  2869  011002  6EF6               	movwf	tblptrl,c
  2870  011004                     	if	1	;There is more than 1 active tblptr byte
  2871  011004  6AF7               	clrf	tblptrh,c
  2872  011006                     	endif
  2873  011006                     	if	1	;There are 3 active tblptr bytes
  2874  011006  0E30               	movlw	48
  2875  011008  6EF8               	movwf	tblptru,c
  2876  01100A                     	endif
  2877  01100A  0008               	tblrd		*
  2878  01100C  CFF5 F007          	movff	tablat,??_SetOutputEPWM1
  2879  011010  A207               	btfss	??_SetOutputEPWM1,1,c
  2880  011012  D002               	goto	l1182
  2881  011014  6808               	setf	SetOutputEPWM1@eccpmx,c
  2882  011016  D001               	goto	l2469
  2883  011018                     l1182:
  2884  011018  6A08               	clrf	SetOutputEPWM1@eccpmx,c
  2885  01101A                     l2469:
  2886  01101A  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2887  01101C  0A3F               	xorlw	63
  2888  01101E  E102               	bnz	l2473
  2889  011020  9494               	bcf	3988,2,c	;volatile
  2890  011022  0012               	return	
  2891  011024                     l2473:
  2892  011024  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2893  011026  0ABF               	xorlw	191
  2894  011028  E107               	bnz	l2481
  2895  01102A  9494               	bcf	3988,2,c	;volatile
  2896  01102C  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2897  01102E  E002               	bz	l1187
  2898  011030  9C96               	bcf	3990,6,c	;volatile
  2899  011032  0012               	return	
  2900  011034                     l1187:
  2901  011034  9E99               	bcf	3993,7,c	;volatile
  2902  011036  0012               	return	
  2903  011038                     l2481:
  2904  011038  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2905  01103A  0A7F               	xorlw	127
  2906  01103C  E003               	bz	l1192
  2907  01103E  2809               	incf	SetOutputEPWM1@outputconfig,w,c
  2908  011040  A4D8               	btfss	status,2,c
  2909  011042  0012               	return	
  2910  011044                     l1192:
  2911  011044  9494               	bcf	3988,2,c	;volatile
  2912  011046  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2913  011048  E003               	bz	l1193
  2914  01104A  9C96               	bcf	3990,6,c	;volatile
  2915  01104C  9A96               	bcf	3990,5,c	;volatile
  2916  01104E  D002               	goto	l1194
  2917  011050                     l1193:
  2918  011050  9E99               	bcf	3993,7,c	;volatile
  2919  011052  9C99               	bcf	3993,6,c	;volatile
  2920  011054                     l1194:
  2921  011054  9898               	bcf	3992,4,c	;volatile
  2922  011056  0012               	return	
  2923  011058                     __end_of_SetOutputEPWM1:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           intcon3	equ	0xFF0
  2934                           indf0	equ	0xFEF
  2935                           postinc0	equ	0xFEE
  2936                           fsr0h	equ	0xFEA
  2937                           fsr0l	equ	0xFE9
  2938                           wreg	equ	0xFE8
  2939                           indf1	equ	0xFE7
  2940                           postinc1	equ	0xFE6
  2941                           postdec1	equ	0xFE5
  2942                           fsr1h	equ	0xFE2
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _OpenEPWM3 *****************
  2952 ;; Defined at:
  2953 ;;		line 14 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3open.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  period          1    wreg     unsigned char 
  2956 ;;  timer_source    1    5[COMRAM] unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  period          1    7[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0
  2963 ;; Tracked objects:
  2964 ;;		On entry : F/F
  2965 ;;		On exit  : F/F
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2968 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;Total ram usage:        3 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    3
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_motorDrive_init
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text12
  2983  010EFA                     __ptext12:
  2984                           	opt stack 0
  2985  010EFA                     _OpenEPWM3:
  2986                           	opt stack 25
  2987                           
  2988                           ;incstack = 0
  2989                           ;OpenEPWM3@period stored from wreg
  2990  010EFA  6E08               	movwf	OpenEPWM3@period,c
  2991                           
  2992                           ; BSR set to: 15
  2993  010EFC  0E0C               	movlw	12
  2994  010EFE  6F49               	movwf	73,b	;volatile
  2995                           
  2996                           ; BSR set to: 15
  2997  010F00  0E3F               	movlw	63
  2998  010F02  1736               	andwf	54,f,b	;volatile
  2999                           
  3000                           ; BSR set to: 15
  3001  010F04  C006  F007         	movff	OpenEPWM3@timer_source,??_OpenEPWM3
  3002  010F08  0E30               	movlw	48
  3003  010F0A  1607               	andwf	??_OpenEPWM3,f,c
  3004  010F0C  90D8               	bcf	status,0,c
  3005  010F0E  3607               	rlcf	??_OpenEPWM3,f,c
  3006  010F10  90D8               	bcf	status,0,c
  3007  010F12  3407               	rlcf	??_OpenEPWM3,w,c
  3008  010F14  1336               	iorwf	54,f,b	;volatile
  3009                           
  3010                           ; BSR set to: 15
  3011  010F16  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3012  010F1A  0EC0               	movlw	192
  3013  010F1C  1607               	andwf	??_OpenEPWM3,f,c
  3014  010F1E  E105               	bnz	l2499
  3015                           
  3016                           ; BSR set to: 15
  3017  010F20  94CA               	bcf	4042,2,c	;volatile
  3018  010F22  C008  FFCB         	movff	OpenEPWM3@period,4043	;volatile
  3019  010F26  84CA               	bsf	4042,2,c	;volatile
  3020  010F28  0CC0               	retlw	192
  3021  010F2A                     l2499:
  3022                           
  3023                           ; BSR set to: 15
  3024  010F2A  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3025  010F2E  0EC0               	movlw	192
  3026  010F30  1607               	andwf	??_OpenEPWM3,f,c
  3027  010F32  5007               	movf	??_OpenEPWM3,w,c
  3028  010F34  0A40               	xorlw	64
  3029  010F36  E105               	bnz	l2503
  3030                           
  3031                           ; BSR set to: 15
  3032  010F38  9504               	bcf	4,2,b	;volatile
  3033  010F3A  C008  FF05         	movff	OpenEPWM3@period,3845	;volatile
  3034  010F3E  8504               	bsf	4,2,b	;volatile
  3035  010F40  0012               	return	
  3036  010F42                     l2503:
  3037                           
  3038                           ; BSR set to: 15
  3039  010F42  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3040  010F46  0EC0               	movlw	192
  3041  010F48  1607               	andwf	??_OpenEPWM3,f,c
  3042  010F4A  5007               	movf	??_OpenEPWM3,w,c
  3043  010F4C  0A80               	xorlw	128
  3044  010F4E  E105               	bnz	l2507
  3045                           
  3046                           ; BSR set to: 15
  3047  010F50  953D               	bcf	61,2,b	;volatile
  3048  010F52  C008  FF3E         	movff	OpenEPWM3@period,3902	;volatile
  3049  010F56  853D               	bsf	61,2,b	;volatile
  3050  010F58  0012               	return	
  3051  010F5A                     l2507:
  3052                           
  3053                           ; BSR set to: 15
  3054  010F5A  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3055  010F5E  0EC0               	movlw	192
  3056  010F60  1607               	andwf	??_OpenEPWM3,f,c
  3057  010F62  5007               	movf	??_OpenEPWM3,w,c
  3058  010F64  0AC0               	xorlw	192
  3059  010F66  A4D8               	btfss	status,2,c
  3060  010F68  0012               	return	
  3061                           
  3062                           ; BSR set to: 15
  3063  010F6A  953A               	bcf	58,2,b	;volatile
  3064  010F6C  C008  FF3B         	movff	OpenEPWM3@period,3899	;volatile
  3065  010F70  853A               	bsf	58,2,b	;volatile
  3066  010F72  0012               	return	
  3067  010F74                     __end_of_OpenEPWM3:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           intcon	equ	0xFF2
  3076                           intcon2	equ	0xFF1
  3077                           intcon3	equ	0xFF0
  3078                           indf0	equ	0xFEF
  3079                           postinc0	equ	0xFEE
  3080                           fsr0h	equ	0xFEA
  3081                           fsr0l	equ	0xFE9
  3082                           wreg	equ	0xFE8
  3083                           indf1	equ	0xFE7
  3084                           postinc1	equ	0xFE6
  3085                           postdec1	equ	0xFE5
  3086                           fsr1h	equ	0xFE2
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _OpenEPWM1 *****************
  3096 ;; Defined at:
  3097 ;;		line 26 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1open.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  period          1    wreg     unsigned char 
  3100 ;;  timer_source    1    5[COMRAM] unsigned char 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  period          1    7[COMRAM] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : F/F
  3109 ;;		On exit  : F/F
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3115 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3116 ;;Total ram usage:        3 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    3
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_motorDrive_init
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text13
  3127  011058                     __ptext13:
  3128                           	opt stack 0
  3129  011058                     _OpenEPWM1:
  3130                           	opt stack 25
  3131                           
  3132                           ; BSR set to: 15
  3133                           ;incstack = 0
  3134                           ;OpenEPWM1@period stored from wreg
  3135  011058  6E08               	movwf	OpenEPWM1@period,c
  3136                           
  3137                           ; BSR set to: 15
  3138  01105A  0E0C               	movlw	12
  3139  01105C  6EB9               	movwf	4025,c	;volatile
  3140                           
  3141                           ; BSR set to: 15
  3142  01105E  0EFC               	movlw	252
  3143  011060  1736               	andwf	54,f,b	;volatile
  3144                           
  3145                           ; BSR set to: 15
  3146  011062  3806               	swapf	OpenEPWM1@timer_source,w,c
  3147  011064  46E8               	rlncf	wreg,f,c
  3148  011066  0B1F               	andlw	31
  3149  011068  0B03               	andlw	3
  3150  01106A  1336               	iorwf	54,f,b	;volatile
  3151                           
  3152                           ; BSR set to: 15
  3153  01106C  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3154  011070  0E07               	movlw	7
  3155  011072  1607               	andwf	??_OpenEPWM1,f,c
  3156  011074  E105               	bnz	l2449
  3157                           
  3158                           ; BSR set to: 15
  3159  011076  94CA               	bcf	4042,2,c	;volatile
  3160  011078  C008  FFCB         	movff	OpenEPWM1@period,4043	;volatile
  3161  01107C  84CA               	bsf	4042,2,c	;volatile
  3162  01107E  0C07               	retlw	7
  3163  011080                     l2449:
  3164                           
  3165                           ; BSR set to: 15
  3166  011080  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3167  011084  0E07               	movlw	7
  3168  011086  1607               	andwf	??_OpenEPWM1,f,c
  3169  011088  5007               	movf	??_OpenEPWM1,w,c
  3170  01108A  0A01               	xorlw	1
  3171  01108C  E105               	bnz	l2453
  3172                           
  3173                           ; BSR set to: 15
  3174  01108E  9504               	bcf	4,2,b	;volatile
  3175  011090  C008  FF05         	movff	OpenEPWM1@period,3845	;volatile
  3176  011094  8504               	bsf	4,2,b	;volatile
  3177  011096  0012               	return	
  3178  011098                     l2453:
  3179                           
  3180                           ; BSR set to: 15
  3181  011098  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3182  01109C  0E07               	movlw	7
  3183  01109E  1607               	andwf	??_OpenEPWM1,f,c
  3184  0110A0  5007               	movf	??_OpenEPWM1,w,c
  3185  0110A2  0A02               	xorlw	2
  3186  0110A4  E105               	bnz	l2457
  3187                           
  3188                           ; BSR set to: 15
  3189  0110A6  953D               	bcf	61,2,b	;volatile
  3190  0110A8  C008  FF3E         	movff	OpenEPWM1@period,3902	;volatile
  3191  0110AC  853D               	bsf	61,2,b	;volatile
  3192  0110AE  0012               	return	
  3193  0110B0                     l2457:
  3194                           
  3195                           ; BSR set to: 15
  3196  0110B0  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3197  0110B4  0E07               	movlw	7
  3198  0110B6  1607               	andwf	??_OpenEPWM1,f,c
  3199  0110B8  5007               	movf	??_OpenEPWM1,w,c
  3200  0110BA  0A03               	xorlw	3
  3201  0110BC  A4D8               	btfss	status,2,c
  3202  0110BE  0012               	return	
  3203                           
  3204                           ; BSR set to: 15
  3205  0110C0  953A               	bcf	58,2,b	;volatile
  3206  0110C2  C008  FF3B         	movff	OpenEPWM1@period,3899	;volatile
  3207  0110C6  853A               	bsf	58,2,b	;volatile
  3208  0110C8  0012               	return	
  3209  0110CA                     __end_of_OpenEPWM1:
  3210                           	opt stack 0
  3211                           tblptru	equ	0xFF8
  3212                           tblptrh	equ	0xFF7
  3213                           tblptrl	equ	0xFF6
  3214                           tablat	equ	0xFF5
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           intcon	equ	0xFF2
  3218                           intcon2	equ	0xFF1
  3219                           intcon3	equ	0xFF0
  3220                           indf0	equ	0xFEF
  3221                           postinc0	equ	0xFEE
  3222                           fsr0h	equ	0xFEA
  3223                           fsr0l	equ	0xFE9
  3224                           wreg	equ	0xFE8
  3225                           indf1	equ	0xFE7
  3226                           postinc1	equ	0xFE6
  3227                           postdec1	equ	0xFE5
  3228                           fsr1h	equ	0xFE2
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _fft_init *****************
  3238 ;; Defined at:
  3239 ;;		line 9 in file "fft.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;		None
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;		None               void
  3246 ;; Registers used:
  3247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : F/E
  3250 ;;		On exit  : F/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;Total ram usage:        0 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    7
  3260 ;; This function calls:
  3261 ;;		_LCD_printString
  3262 ;;		_delay_us
  3263 ;; This function is called by:
  3264 ;;		_init
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text14
  3269  011274                     __ptext14:
  3270                           	opt stack 0
  3271  011274                     _fft_init:
  3272                           	opt stack 22
  3273                           
  3274                           ; BSR set to: 14
  3275                           ;fft.c: 12: ANCON3 = 0b00100000;
  3276                           
  3277                           ; BSR set to: 15
  3278                           ;incstack = 0
  3279  011274  0E20               	movlw	32
  3280  011276  6F45               	movwf	69,b	;volatile
  3281                           
  3282                           ; BSR set to: 14
  3283                           ;fft.c: 15: ADCON1Hbits.MODE12 = 1;
  3284  011278  84C1               	bsf	4033,2,c	;volatile
  3285                           
  3286                           ; BSR set to: 14
  3287                           ;fft.c: 18: PVCFG0 = 0;
  3288  01127A  010E               	movlb	14	; () banked
  3289  01127C  9D8D               	bcf	141,6,b	;volatile
  3290                           
  3291                           ; BSR set to: 14
  3292                           ;fft.c: 19: PVCFG1 = 0;
  3293  01127E  9F8D               	bcf	141,7,b	;volatile
  3294                           
  3295                           ; BSR set to: 14
  3296                           ;fft.c: 20: NVCFG0 = 0;
  3297  011280  9B8D               	bcf	141,5,b	;volatile
  3298                           
  3299                           ;fft.c: 23: ADCON3L = 0x3F;
  3300  011282  0E3F               	movlw	63
  3301  011284  6F8A               	movwf	138,b	;volatile
  3302                           
  3303                           ; BSR set to: 14
  3304                           ;fft.c: 26: ANSEL14 = 1;
  3305  011286  8D46               	bsf	70,6,b	;volatile
  3306                           
  3307                           ; BSR set to: 14
  3308                           ;fft.c: 27: TRISHbits.TRISH6 = 1;
  3309  011288  8C99               	bsf	3993,6,c	;volatile
  3310                           
  3311                           ;fft.c: 28: ADCHS0L = 0x0E;
  3312  01128A  0E0E               	movlw	14
  3313  01128C  6F86               	movwf	134,b	;volatile
  3314                           
  3315                           ;fft.c: 29: ADCHS0H = 0x0E;
  3316  01128E  6F87               	movwf	135,b	;volatile
  3317                           
  3318                           ; BSR set to: 14
  3319                           ;fft.c: 32: ADON = 1;
  3320  011290  8EC1               	bsf	4033,7,c	;volatile
  3321                           
  3322                           ; BSR set to: 14
  3323                           ;fft.c: 35: delay_us(50);
  3324  011292  0E32               	movlw	50
  3325  011294  6E06               	movwf	delay_us@x,c
  3326  011296  0E00               	movlw	0
  3327  011298  6A07               	clrf	delay_us@x+1,c
  3328  01129A  6A08               	clrf	delay_us@x+2,c
  3329  01129C  6A09               	clrf	delay_us@x+3,c
  3330  01129E  EC61  F08A         	call	_delay_us	;wreg free
  3331                           
  3332                           ;fft.c: 37: LCD_printString(0,0, "Starting\nFHT");
  3333  0112A2  6A22               	clrf	LCD_printString@y,c
  3334  0112A4  0EFF               	movlw	high STR_21
  3335  0112A6  6E24               	movwf	LCD_printString@input+1,c
  3336  0112A8  0ECC               	movlw	low STR_21
  3337  0112AA  6E23               	movwf	LCD_printString@input,c
  3338  0112AC  0E00               	movlw	0
  3339  0112AE  EC00  F080         	call	_LCD_printString
  3340  0112B2                     l5187:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;fft.c: 40: {
  3344                           ;fft.c: 41: SAMP = 1;
  3345  0112B2  82C0               	bsf	4032,1,c	;volatile
  3346  0112B4                     l717:
  3347  0112B4  A0C0               	btfss	4032,0,c	;volatile
  3348  0112B6  D7FE               	goto	l717
  3349                           
  3350                           ;fft.c: 43: LCD_printString(0,0, "Ana:%i",ADCBUF0);
  3351  0112B8  6A22               	clrf	LCD_printString@y,c
  3352  0112BA  0EFF               	movlw	high STR_22
  3353  0112BC  6E24               	movwf	LCD_printString@input+1,c
  3354  0112BE  0EF5               	movlw	low STR_22
  3355  0112C0  6E23               	movwf	LCD_printString@input,c
  3356  0112C2  CFC2 F025          	movff	4034,?_LCD_printString+3	;volatile
  3357  0112C6  CFC3 F026          	movff	4035,?_LCD_printString+4	;volatile
  3358  0112CA  0E00               	movlw	0
  3359  0112CC  EC00  F080         	call	_LCD_printString
  3360  0112D0  D7F0               	goto	l5187
  3361  0112D2                     __end_of_fft_init:
  3362                           	opt stack 0
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           intcon2	equ	0xFF1
  3371                           intcon3	equ	0xFF0
  3372                           indf0	equ	0xFEF
  3373                           postinc0	equ	0xFEE
  3374                           fsr0h	equ	0xFEA
  3375                           fsr0l	equ	0xFE9
  3376                           wreg	equ	0xFE8
  3377                           indf1	equ	0xFE7
  3378                           postinc1	equ	0xFE6
  3379                           postdec1	equ	0xFE5
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _encoders_init *****************
  3390 ;; Defined at:
  3391 ;;		line 6 in file "encoders.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : F/E
  3402 ;;		On exit  : F/E
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    3
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_init
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text15
  3420  011578                     __ptext15:
  3421                           	opt stack 0
  3422  011578                     _encoders_init:
  3423                           	opt stack 26
  3424                           
  3425                           ; BSR set to: 14
  3426                           ;encoders.c: 9: TRISBbits.TRISB0 = 1;
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;incstack = 0
  3430  011578  8093               	bsf	3987,0,c	;volatile
  3431                           
  3432                           ;encoders.c: 10: TRISBbits.TRISB1 = 1;
  3433  01157A  8293               	bsf	3987,1,c	;volatile
  3434                           
  3435                           ;encoders.c: 11: TRISBbits.TRISB2 = 1;
  3436  01157C  8493               	bsf	3987,2,c	;volatile
  3437                           
  3438                           ;encoders.c: 12: TRISBbits.TRISB3 = 1;
  3439  01157E  8693               	bsf	3987,3,c	;volatile
  3440                           
  3441                           ;encoders.c: 21: IOLOCK = 0;
  3442  011580  9C66               	bcf	3942,6,c	;volatile
  3443                           
  3444                           ; BSR set to: 14
  3445                           ;encoders.c: 22: RPINR26_27 &= 0xF2;
  3446  011582  0EF2               	movlw	242
  3447  011584  1737               	andwf	55,f,b	;volatile
  3448                           
  3449                           ;encoders.c: 23: RPINR28_29 &= 0xF1;
  3450  011586  0EF1               	movlw	241
  3451  011588  1738               	andwf	56,f,b	;volatile
  3452                           
  3453                           ; BSR set to: 14
  3454                           ;encoders.c: 24: IOLOCK = 1;
  3455  01158A  8C66               	bsf	3942,6,c	;volatile
  3456                           
  3457                           ; BSR set to: 14
  3458                           ;encoders.c: 26: INTCON2bits.INTEDG1 = 1;
  3459  01158C  8AF1               	bsf	intcon2,5,c	;volatile
  3460                           
  3461                           ; BSR set to: 14
  3462                           ;encoders.c: 27: INTCON3bits.INT1IP = 0;
  3463  01158E  9CF0               	bcf	intcon3,6,c	;volatile
  3464                           
  3465                           ; BSR set to: 14
  3466                           ;encoders.c: 28: INTCON3bits.INT1IF = 0;
  3467  011590  90F0               	bcf	intcon3,0,c	;volatile
  3468                           
  3469                           ; BSR set to: 14
  3470                           ;encoders.c: 29: INTCON3bits.INT1IE = 1;
  3471  011592  86F0               	bsf	intcon3,3,c	;volatile
  3472                           
  3473                           ; BSR set to: 14
  3474                           ;encoders.c: 32: INTCON2bits.INTEDG3 = 1;
  3475  011594  86F1               	bsf	intcon2,3,c	;volatile
  3476                           
  3477                           ; BSR set to: 14
  3478                           ;encoders.c: 33: INTCON2bits.INT3IP = 0;
  3479  011596  92F1               	bcf	intcon2,1,c	;volatile
  3480                           
  3481                           ; BSR set to: 14
  3482                           ;encoders.c: 34: INTCON3bits.INT3IF = 0;
  3483  011598  94F0               	bcf	intcon3,2,c	;volatile
  3484                           
  3485                           ; BSR set to: 14
  3486                           ;encoders.c: 35: INTCON3bits.INT3IE = 1;
  3487  01159A  8AF0               	bsf	intcon3,5,c	;volatile
  3488                           
  3489                           ; BSR set to: 14
  3490  01159C  0CF1               	retlw	241
  3491  01159E                     __end_of_encoders_init:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           intcon2	equ	0xFF1
  3501                           intcon3	equ	0xFF0
  3502                           indf0	equ	0xFEF
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           indf1	equ	0xFE7
  3508                           postinc1	equ	0xFE6
  3509                           postdec1	equ	0xFE5
  3510                           fsr1h	equ	0xFE2
  3511                           fsr1l	equ	0xFE1
  3512                           indf2	equ	0xFDF
  3513                           postinc2	equ	0xFDE
  3514                           postdec2	equ	0xFDD
  3515                           fsr2h	equ	0xFDA
  3516                           fsr2l	equ	0xFD9
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _clearMillis *****************
  3520 ;; Defined at:
  3521 ;;		line 115 in file "delays.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;		None               void
  3528 ;; Registers used:
  3529 ;;		wreg, status,2
  3530 ;; Tracked objects:
  3531 ;;		On entry : F/0
  3532 ;;		On exit  : F/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    3
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_init
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text16
  3550  0116A0                     __ptext16:
  3551                           	opt stack 0
  3552  0116A0                     _clearMillis:
  3553                           	opt stack 26
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;delays.c: 117: TMR0L = 193;
  3557                           
  3558                           ; BSR set to: 14
  3559                           ;incstack = 0
  3560  0116A0  0EC1               	movlw	193
  3561  0116A2  6ED6               	movwf	4054,c	;volatile
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;delays.c: 118: millisCount = 0;
  3565  0116A4  6BB5               	clrf	_millisCount& (0+255),b
  3566  0116A6  6BB6               	clrf	(_millisCount+1)& (0+255),b
  3567  0116A8  6BB7               	clrf	(_millisCount+2)& (0+255),b
  3568  0116AA  6BB8               	clrf	(_millisCount+3)& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571  0116AC  0012               	return	
  3572  0116AE                     __end_of_clearMillis:
  3573                           	opt stack 0
  3574                           tblptru	equ	0xFF8
  3575                           tblptrh	equ	0xFF7
  3576                           tblptrl	equ	0xFF6
  3577                           tablat	equ	0xFF5
  3578                           prodh	equ	0xFF4
  3579                           prodl	equ	0xFF3
  3580                           intcon	equ	0xFF2
  3581                           intcon2	equ	0xFF1
  3582                           intcon3	equ	0xFF0
  3583                           indf0	equ	0xFEF
  3584                           postinc0	equ	0xFEE
  3585                           fsr0h	equ	0xFEA
  3586                           fsr0l	equ	0xFE9
  3587                           wreg	equ	0xFE8
  3588                           indf1	equ	0xFE7
  3589                           postinc1	equ	0xFE6
  3590                           postdec1	equ	0xFE5
  3591                           fsr1h	equ	0xFE2
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _UART_init *****************
  3601 ;; Defined at:
  3602 ;;		line 21 in file "UART.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/F
  3613 ;;		On exit  : F/E
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    3
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_init
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text17
  3631  010DC6                     __ptext17:
  3632                           	opt stack 0
  3633  010DC6                     _UART_init:
  3634                           	opt stack 26
  3635                           
  3636                           ;UART.c: 43: IOLOCK = 0;
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;incstack = 0
  3640  010DC6  9C66               	bcf	3942,6,c	;volatile
  3641                           
  3642                           ;UART.c: 45: RPINR6_7 &= 0xF6;
  3643  010DC8  0EF6               	movlw	246
  3644  010DCA  010E               	movlb	14	; () banked
  3645  010DCC  172D               	andwf	45,f,b	;volatile
  3646                           
  3647                           ;UART.c: 46: RPOR22_23 |= 0xF1;
  3648  010DCE  0EF1               	movlw	241
  3649  010DD0  131D               	iorwf	29,f,b	;volatile
  3650                           
  3651                           ;UART.c: 48: RPINR4_5 &= 0xF4;
  3652  010DD2  0EF4               	movlw	244
  3653  010DD4  172C               	andwf	44,f,b	;volatile
  3654                           
  3655                           ;UART.c: 49: RPOR10_11 |= 0x2F;
  3656  010DD6  0E2F               	movlw	47
  3657  010DD8  1317               	iorwf	23,f,b	;volatile
  3658                           
  3659                           ;UART.c: 51: RPINR0_1 &= 0xF6;
  3660  010DDA  0EF6               	movlw	246
  3661  010DDC  172A               	andwf	42,f,b	;volatile
  3662                           
  3663                           ;UART.c: 52: RPOR12_13 |= 0x3F;
  3664  010DDE  0E3F               	movlw	63
  3665  010DE0  1318               	iorwf	24,f,b	;volatile
  3666                           
  3667                           ; BSR set to: 14
  3668                           ;UART.c: 54: IOLOCK = 1;
  3669  010DE2  8C66               	bsf	3942,6,c	;volatile
  3670                           
  3671                           ; BSR set to: 14
  3672                           ;UART.c: 56: INTCONbits.GIE = 1;
  3673  010DE4  8EF2               	bsf	intcon,7,c	;volatile
  3674                           
  3675                           ; BSR set to: 14
  3676                           ;UART.c: 59: INTCONbits.PEIE = 1;
  3677  010DE6  8CF2               	bsf	intcon,6,c	;volatile
  3678                           
  3679                           ; BSR set to: 14
  3680                           ;UART.c: 69: SPBRG1 = 34;
  3681  010DE8  0E22               	movlw	34
  3682  010DEA  6EAF               	movwf	4015,c	;volatile
  3683                           
  3684                           ; BSR set to: 14
  3685                           ;UART.c: 70: SPBRGH1 = 0;
  3686  010DEC  010F               	movlb	15	; () banked
  3687  010DEE  6B30               	clrf	48,b	;volatile
  3688                           
  3689                           ; BSR set to: 15
  3690                           ;UART.c: 72: TXSTA1bits.BRGH = 0;
  3691  010DF0  94AC               	bcf	4012,2,c	;volatile
  3692                           
  3693                           ; BSR set to: 15
  3694                           ;UART.c: 74: BAUDCON1bits.ABDOVF = 0;
  3695  010DF2  9E67               	bcf	3943,7,c	;volatile
  3696                           
  3697                           ; BSR set to: 15
  3698                           ;UART.c: 75: BAUDCON1bits.BRG16 = 1;
  3699  010DF4  8667               	bsf	3943,3,c	;volatile
  3700                           
  3701                           ; BSR set to: 15
  3702                           ;UART.c: 76: BAUDCON1bits.RCIDL = 0;
  3703  010DF6  9C67               	bcf	3943,6,c	;volatile
  3704                           
  3705                           ; BSR set to: 15
  3706                           ;UART.c: 77: BAUDCON1bits.RXDTP = 0;
  3707  010DF8  9A67               	bcf	3943,5,c	;volatile
  3708                           
  3709                           ; BSR set to: 15
  3710                           ;UART.c: 79: TXSTA1bits.SYNC = 0;
  3711  010DFA  98AC               	bcf	4012,4,c	;volatile
  3712                           
  3713                           ; BSR set to: 15
  3714                           ;UART.c: 80: RCSTA1bits.SPEN = 1;
  3715  010DFC  8EAB               	bsf	4011,7,c	;volatile
  3716                           
  3717                           ; BSR set to: 15
  3718                           ;UART.c: 81: RCSTA1bits.RX9 = 0;
  3719  010DFE  9CAB               	bcf	4011,6,c	;volatile
  3720                           
  3721                           ; BSR set to: 15
  3722                           ;UART.c: 82: RCSTA1bits.CREN = 1;
  3723  010E00  88AB               	bsf	4011,4,c	;volatile
  3724                           
  3725                           ; BSR set to: 15
  3726                           ;UART.c: 84: TXSTA1bits.TXEN = 1;
  3727  010E02  8AAC               	bsf	4012,5,c	;volatile
  3728                           
  3729                           ; BSR set to: 15
  3730                           ;UART.c: 85: TXSTA1bits.TX9 = 0;
  3731  010E04  9CAC               	bcf	4012,6,c	;volatile
  3732                           
  3733                           ; BSR set to: 15
  3734                           ;UART.c: 88: TX1IE = 0;
  3735  010E06  989D               	bcf	3997,4,c	;volatile
  3736                           
  3737                           ; BSR set to: 15
  3738                           ;UART.c: 89: RC1IE = 1;
  3739  010E08  8A9D               	bsf	3997,5,c	;volatile
  3740                           
  3741                           ; BSR set to: 15
  3742                           ;UART.c: 99: SPBRG2 = 34;
  3743  010E0A  0E22               	movlw	34
  3744  010E0C  6F1F               	movwf	31,b	;volatile
  3745                           
  3746                           ; BSR set to: 15
  3747                           ;UART.c: 100: SPBRGH2 = 0;
  3748  010E0E  6B20               	clrf	32,b	;volatile
  3749                           
  3750                           ; BSR set to: 15
  3751                           ;UART.c: 102: TXSTA2bits.BRGH = 0;
  3752  010E10  9532               	bcf	50,2,b	;volatile
  3753                           
  3754                           ; BSR set to: 15
  3755                           ;UART.c: 104: BAUDCON2bits.ABDOVF = 0;
  3756  010E12  9F31               	bcf	49,7,b	;volatile
  3757                           
  3758                           ; BSR set to: 15
  3759                           ;UART.c: 105: BAUDCON2bits.BRG16 = 1;
  3760  010E14  8731               	bsf	49,3,b	;volatile
  3761                           
  3762                           ; BSR set to: 15
  3763                           ;UART.c: 106: BAUDCON2bits.RCIDL = 0;
  3764  010E16  9D31               	bcf	49,6,b	;volatile
  3765                           
  3766                           ; BSR set to: 15
  3767                           ;UART.c: 107: BAUDCON2bits.RXDTP = 0;
  3768  010E18  9B31               	bcf	49,5,b	;volatile
  3769                           
  3770                           ; BSR set to: 15
  3771                           ;UART.c: 109: TXSTA2bits.SYNC = 0;
  3772  010E1A  9932               	bcf	50,4,b	;volatile
  3773                           
  3774                           ; BSR set to: 15
  3775                           ;UART.c: 110: RCSTA2bits.SPEN = 1;
  3776  010E1C  8F33               	bsf	51,7,b	;volatile
  3777                           
  3778                           ; BSR set to: 15
  3779                           ;UART.c: 111: RCSTA2bits.RX9 = 0;
  3780  010E1E  9D33               	bcf	51,6,b	;volatile
  3781                           
  3782                           ; BSR set to: 15
  3783                           ;UART.c: 112: RCSTA2bits.CREN = 1;
  3784  010E20  8933               	bsf	51,4,b	;volatile
  3785                           
  3786                           ; BSR set to: 15
  3787                           ;UART.c: 114: TXSTA2bits.TXEN = 1;
  3788  010E22  8B32               	bsf	50,5,b	;volatile
  3789                           
  3790                           ; BSR set to: 15
  3791                           ;UART.c: 115: TXSTA2bits.TX9 = 0;
  3792  010E24  9D32               	bcf	50,6,b	;volatile
  3793                           
  3794                           ; BSR set to: 15
  3795                           ;UART.c: 118: TX2IE = 0;
  3796  010E26  98A3               	bcf	4003,4,c	;volatile
  3797                           
  3798                           ; BSR set to: 15
  3799                           ;UART.c: 119: RC2IE = 1;
  3800  010E28  8AA3               	bsf	4003,5,c	;volatile
  3801                           
  3802                           ; BSR set to: 15
  3803                           ;UART.c: 129: SPBRG3 = 34;
  3804  010E2A  0E22               	movlw	34
  3805  010E2C  6F2B               	movwf	43,b	;volatile
  3806                           
  3807                           ; BSR set to: 15
  3808                           ;UART.c: 130: SPBRGH3 = 0;
  3809  010E2E  6B2C               	clrf	44,b	;volatile
  3810                           
  3811                           ; BSR set to: 15
  3812                           ;UART.c: 132: TXSTA3bits.BRGH = 0;
  3813  010E30  952E               	bcf	46,2,b	;volatile
  3814                           
  3815                           ; BSR set to: 15
  3816                           ;UART.c: 134: BAUDCON3bits.ABDOVF = 0;
  3817  010E32  9F2D               	bcf	45,7,b	;volatile
  3818                           
  3819                           ; BSR set to: 15
  3820                           ;UART.c: 135: BAUDCON3bits.BRG16 = 1;
  3821  010E34  872D               	bsf	45,3,b	;volatile
  3822                           
  3823                           ; BSR set to: 15
  3824                           ;UART.c: 136: BAUDCON3bits.RCIDL = 0;
  3825  010E36  9D2D               	bcf	45,6,b	;volatile
  3826                           
  3827                           ; BSR set to: 15
  3828                           ;UART.c: 137: BAUDCON3bits.RXDTP = 0;
  3829  010E38  9B2D               	bcf	45,5,b	;volatile
  3830                           
  3831                           ; BSR set to: 15
  3832                           ;UART.c: 139: TXSTA3bits.SYNC = 0;
  3833  010E3A  992E               	bcf	46,4,b	;volatile
  3834                           
  3835                           ; BSR set to: 15
  3836                           ;UART.c: 140: RCSTA3bits.SPEN = 1;
  3837  010E3C  8F2F               	bsf	47,7,b	;volatile
  3838                           
  3839                           ; BSR set to: 15
  3840                           ;UART.c: 141: RCSTA3bits.RX9 = 0;
  3841  010E3E  9D2F               	bcf	47,6,b	;volatile
  3842                           
  3843                           ; BSR set to: 15
  3844                           ;UART.c: 142: RCSTA3bits.CREN = 1;
  3845  010E40  892F               	bsf	47,4,b	;volatile
  3846                           
  3847                           ; BSR set to: 15
  3848                           ;UART.c: 144: TXSTA3bits.TXEN = 1;
  3849  010E42  8B2E               	bsf	46,5,b	;volatile
  3850                           
  3851                           ; BSR set to: 15
  3852                           ;UART.c: 145: TXSTA3bits.TX9 = 0;
  3853  010E44  9D2E               	bcf	46,6,b	;volatile
  3854                           
  3855                           ; BSR set to: 15
  3856                           ;UART.c: 147: TX3IE = 0;
  3857  010E46  9861               	bcf	3937,4,c	;volatile
  3858                           
  3859                           ; BSR set to: 15
  3860                           ;UART.c: 148: RC3IE = 1;
  3861  010E48  8A61               	bsf	3937,5,c	;volatile
  3862                           
  3863                           ; BSR set to: 15
  3864                           ;UART.c: 158: TRISDbits.TRISD4 = 1;
  3865  010E4A  8895               	bsf	3989,4,c	;volatile
  3866                           
  3867                           ; BSR set to: 15
  3868                           ;UART.c: 159: TRISDbits.TRISD2 = 0;
  3869  010E4C  9495               	bcf	3989,2,c	;volatile
  3870                           
  3871                           ; BSR set to: 15
  3872                           ;UART.c: 162: SPBRG4 = 34;
  3873  010E4E  0E22               	movlw	34
  3874  010E50  010E               	movlb	14	; () banked
  3875  010E52  6FFB               	movwf	251,b	;volatile
  3876                           
  3877                           ; BSR set to: 14
  3878                           ;UART.c: 163: SPBRGH4 = 0;
  3879  010E54  6BFC               	clrf	252,b	;volatile
  3880                           
  3881                           ; BSR set to: 14
  3882                           ;UART.c: 165: TXSTA4bits.BRGH = 0;
  3883  010E56  95FE               	bcf	254,2,b	;volatile
  3884                           
  3885                           ; BSR set to: 14
  3886                           ;UART.c: 167: BAUDCON4bits.ABDOVF = 0;
  3887  010E58  9FFD               	bcf	253,7,b	;volatile
  3888                           
  3889                           ; BSR set to: 14
  3890                           ;UART.c: 168: BAUDCON4bits.BRG16 = 1;
  3891  010E5A  87FD               	bsf	253,3,b	;volatile
  3892                           
  3893                           ; BSR set to: 14
  3894                           ;UART.c: 169: BAUDCON4bits.RCIDL = 0;
  3895  010E5C  9DFD               	bcf	253,6,b	;volatile
  3896                           
  3897                           ; BSR set to: 14
  3898                           ;UART.c: 170: BAUDCON4bits.RXDTP = 0;
  3899  010E5E  9BFD               	bcf	253,5,b	;volatile
  3900                           
  3901                           ; BSR set to: 14
  3902                           ;UART.c: 172: TXSTA4bits.SYNC = 0;
  3903  010E60  99FE               	bcf	254,4,b	;volatile
  3904                           
  3905                           ; BSR set to: 14
  3906                           ;UART.c: 173: RCSTA4bits.SPEN = 1;
  3907  010E62  8FFF               	bsf	255,7,b	;volatile
  3908                           
  3909                           ; BSR set to: 14
  3910                           ;UART.c: 174: RCSTA4bits.RX9 = 0;
  3911  010E64  9DFF               	bcf	255,6,b	;volatile
  3912                           
  3913                           ; BSR set to: 14
  3914                           ;UART.c: 175: RCSTA4bits.CREN = 1;
  3915  010E66  89FF               	bsf	255,4,b	;volatile
  3916                           
  3917                           ; BSR set to: 14
  3918                           ;UART.c: 177: TXSTA4bits.TXEN = 1;
  3919  010E68  8BFE               	bsf	254,5,b	;volatile
  3920                           
  3921                           ; BSR set to: 14
  3922                           ;UART.c: 178: TXSTA4bits.TX9 = 0;
  3923  010E6A  9DFE               	bcf	254,6,b	;volatile
  3924                           
  3925                           ; BSR set to: 14
  3926                           ;UART.c: 181: TX4IE = 0;
  3927  010E6C  9C61               	bcf	3937,6,c	;volatile
  3928                           
  3929                           ; BSR set to: 14
  3930                           ;UART.c: 182: RC4IE = 1;
  3931  010E6E  8E61               	bsf	3937,7,c	;volatile
  3932                           
  3933                           ; BSR set to: 14
  3934  010E70  0012               	return	
  3935  010E72                     __end_of_UART_init:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           intcon2	equ	0xFF1
  3945                           intcon3	equ	0xFF0
  3946                           indf0	equ	0xFEF
  3947                           postinc0	equ	0xFEE
  3948                           fsr0h	equ	0xFEA
  3949                           fsr0l	equ	0xFE9
  3950                           wreg	equ	0xFE8
  3951                           indf1	equ	0xFE7
  3952                           postinc1	equ	0xFE6
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _LCD_init4bit *****************
  3964 ;; Defined at:
  3965 ;;		line 47 in file "LCD.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;		None               void
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : F/F
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3983 ;;Total ram usage:        0 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    5
  3986 ;; This function calls:
  3987 ;;		_delay_init
  3988 ;;		_delay_ms
  3989 ;;		_delay_us
  3990 ;; This function is called by:
  3991 ;;		_init
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text18
  3996  01071C                     __ptext18:
  3997                           	opt stack 0
  3998  01071C                     _LCD_init4bit:
  3999                           	opt stack 24
  4000                           
  4001                           ; BSR set to: 15
  4002                           ;LCD.c: 50: mode = 1;
  4003                           
  4004                           ; BSR set to: 14
  4005                           ;incstack = 0
  4006  01071C  0E01               	movlw	1
  4007  01071E  6E58               	movwf	_mode,c	;volatile
  4008                           
  4009                           ; BSR set to: 15
  4010                           ;LCD.c: 52: ANSEL21 = 0;
  4011  010720  010E               	movlb	14	; () banked
  4012  010722  9B45               	bcf	69,5,b	;volatile
  4013                           
  4014                           ; BSR set to: 14
  4015                           ;LCD.c: 53: ANSEL6 = 0;
  4016  010724  9D47               	bcf	71,6,b	;volatile
  4017                           
  4018                           ; BSR set to: 14
  4019                           ;LCD.c: 54: ANSEL11 = 0;
  4020  010726  9746               	bcf	70,3,b	;volatile
  4021                           
  4022                           ; BSR set to: 14
  4023                           ;LCD.c: 55: ANSEL10 = 0;
  4024  010728  9546               	bcf	70,2,b	;volatile
  4025                           
  4026                           ; BSR set to: 14
  4027                           ;LCD.c: 56: ANSEL9 = 0;
  4028  01072A  9346               	bcf	70,1,b	;volatile
  4029                           
  4030                           ; BSR set to: 14
  4031                           ;LCD.c: 58: MEMCONbits.EBDIS = 1;
  4032  01072C  8FE3               	bsf	227,7,b	;volatile
  4033                           
  4034                           ; BSR set to: 14
  4035                           ;LCD.c: 59: PSPCONbits.PSPMODE = 0;
  4036  01072E  98A7               	bcf	4007,4,c	;volatile
  4037                           
  4038                           ; BSR set to: 14
  4039                           ;LCD.c: 60: LCDMD = 0;
  4040  010730  97F1               	bcf	241,3,b	;volatile
  4041                           
  4042                           ; BSR set to: 14
  4043                           ;LCD.c: 61: LCDCONbits.WERR = 0;
  4044  010732  9BD9               	bcf	217,5,b	;volatile
  4045                           
  4046                           ; BSR set to: 14
  4047                           ;LCD.c: 62: CPEN = 0;
  4048  010734  9FD8               	bcf	216,7,b	;volatile
  4049                           
  4050                           ; BSR set to: 14
  4051                           ;LCD.c: 63: LCDA = 0;
  4052  010736  9BDA               	bcf	218,5,b	;volatile
  4053                           
  4054                           ; BSR set to: 14
  4055                           ;LCD.c: 65: PORTEbits.RE2 = 0;
  4056  010738  9484               	bcf	3972,2,c	;volatile
  4057                           
  4058                           ; BSR set to: 14
  4059                           ;LCD.c: 66: PORTEbits.RE0 = 0;
  4060  01073A  9084               	bcf	3972,0,c	;volatile
  4061                           
  4062                           ; BSR set to: 14
  4063                           ;LCD.c: 67: PORTEbits.RE1 = 0;
  4064  01073C  9284               	bcf	3972,1,c	;volatile
  4065                           
  4066                           ; BSR set to: 14
  4067                           ;LCD.c: 68: PORTHbits.RH5 = 0;
  4068  01073E  9A87               	bcf	3975,5,c	;volatile
  4069                           
  4070                           ; BSR set to: 14
  4071                           ;LCD.c: 70: PORTEbits.RE4 = 0;
  4072  010740  9884               	bcf	3972,4,c	;volatile
  4073                           
  4074                           ; BSR set to: 14
  4075                           ;LCD.c: 71: PORTDbits.RD0 = 0;
  4076  010742  9083               	bcf	3971,0,c	;volatile
  4077                           
  4078                           ; BSR set to: 14
  4079                           ;LCD.c: 72: PORTGbits.RG7 = 0;
  4080  010744  9E86               	bcf	3974,7,c	;volatile
  4081                           
  4082                           ; BSR set to: 14
  4083                           ;LCD.c: 76: TRISDbits.TRISD0 = 0;
  4084  010746  9095               	bcf	3989,0,c	;volatile
  4085                           
  4086                           ; BSR set to: 14
  4087                           ;LCD.c: 77: TRISEbits.TRISE0 = 0;
  4088  010748  9096               	bcf	3990,0,c	;volatile
  4089                           
  4090                           ; BSR set to: 14
  4091                           ;LCD.c: 78: TRISEbits.TRISE1 = 0;
  4092  01074A  9296               	bcf	3990,1,c	;volatile
  4093                           
  4094                           ; BSR set to: 14
  4095                           ;LCD.c: 79: TRISEbits.TRISE2 = 0;
  4096  01074C  9496               	bcf	3990,2,c	;volatile
  4097                           
  4098                           ; BSR set to: 14
  4099                           ;LCD.c: 80: TRISEbits.TRISE3 = 0;
  4100  01074E  9696               	bcf	3990,3,c	;volatile
  4101                           
  4102                           ; BSR set to: 14
  4103                           ;LCD.c: 81: TRISEbits.TRISE4 = 0;
  4104  010750  9896               	bcf	3990,4,c	;volatile
  4105                           
  4106                           ; BSR set to: 14
  4107                           ;LCD.c: 82: TRISHbits.TRISH5 = 0;
  4108  010752  9A99               	bcf	3993,5,c	;volatile
  4109                           
  4110                           ; BSR set to: 14
  4111                           ;LCD.c: 84: delay_init();
  4112  010754  EC7C  F08A         	call	_delay_init	;wreg free
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;LCD.c: 85: delay_ms(100);
  4116  010758  0E64               	movlw	100
  4117  01075A  6E0A               	movwf	delay_ms@x,c
  4118  01075C  0E00               	movlw	0
  4119  01075E  6A0B               	clrf	delay_ms@x+1,c
  4120  010760  6A0C               	clrf	delay_ms@x+2,c
  4121  010762  6A0D               	clrf	delay_ms@x+3,c
  4122  010764  EC95  F089         	call	_delay_ms	;wreg free
  4123                           
  4124                           ;LCD.c: 87: PORTDbits.RD0 = 0;
  4125  010768  9083               	bcf	3971,0,c	;volatile
  4126                           
  4127                           ;LCD.c: 88: PORTGbits.RG7 = 0;
  4128  01076A  9E86               	bcf	3974,7,c	;volatile
  4129                           
  4130                           ;LCD.c: 91: delay_us(40);;
  4131  01076C  D89C               	call	PL2	;call to abstracted procedure
  4132  01076E  EC61  F08A         	call	_delay_us	;wreg free
  4133                           
  4134                           ;LCD.c: 92: PORTEbits.RE4 = 1;
  4135  010772  8884               	bsf	3972,4,c	;volatile
  4136                           
  4137                           ;LCD.c: 93: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTEb
      +                          its.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4138  010774  9A87               	bcf	3975,5,c	;volatile
  4139  010776  9284               	bcf	3972,1,c	;volatile
  4140  010778  8084               	bsf	3972,0,c	;volatile
  4141  01077A  8484               	bsf	3972,2,c	;volatile
  4142                           
  4143                           ;LCD.c: 94: delay_us(40);;
  4144  01077C  D894               	call	PL2	;call to abstracted procedure
  4145  01077E  EC61  F08A         	call	_delay_us	;wreg free
  4146                           
  4147                           ;LCD.c: 95: PORTEbits.RE4 = 0;
  4148  010782  9884               	bcf	3972,4,c	;volatile
  4149                           
  4150                           ;LCD.c: 97: delay_ms(50);
  4151  010784  D896               	call	PL10	;call to abstracted procedure
  4152  010786  EC95  F089         	call	_delay_ms	;wreg free
  4153                           
  4154                           ;LCD.c: 100: delay_us(40);;
  4155  01078A  D88D               	call	PL2	;call to abstracted procedure
  4156  01078C  EC61  F08A         	call	_delay_us	;wreg free
  4157                           
  4158                           ;LCD.c: 101: PORTEbits.RE4 = 1;
  4159  010790  8884               	bsf	3972,4,c	;volatile
  4160                           
  4161                           ;LCD.c: 102: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4162  010792  9A87               	bcf	3975,5,c	;volatile
  4163  010794  9284               	bcf	3972,1,c	;volatile
  4164  010796  8084               	bsf	3972,0,c	;volatile
  4165  010798  8484               	bsf	3972,2,c	;volatile
  4166                           
  4167                           ;LCD.c: 103: delay_us(40);;
  4168  01079A  D885               	call	PL2	;call to abstracted procedure
  4169  01079C  EC61  F08A         	call	_delay_us	;wreg free
  4170                           
  4171                           ;LCD.c: 104: PORTEbits.RE4 = 0;
  4172  0107A0  9884               	bcf	3972,4,c	;volatile
  4173                           
  4174                           ;LCD.c: 106: delay_ms(50);
  4175  0107A2  D887               	call	PL10	;call to abstracted procedure
  4176  0107A4  EC95  F089         	call	_delay_ms	;wreg free
  4177                           
  4178                           ;LCD.c: 109: delay_us(40);;
  4179  0107A8  D87E               	call	PL2	;call to abstracted procedure
  4180  0107AA  EC61  F08A         	call	_delay_us	;wreg free
  4181                           
  4182                           ;LCD.c: 110: PORTEbits.RE4 = 1;
  4183  0107AE  8884               	bsf	3972,4,c	;volatile
  4184                           
  4185                           ;LCD.c: 111: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4186  0107B0  9A87               	bcf	3975,5,c	;volatile
  4187  0107B2  9284               	bcf	3972,1,c	;volatile
  4188  0107B4  8084               	bsf	3972,0,c	;volatile
  4189  0107B6  8484               	bsf	3972,2,c	;volatile
  4190                           
  4191                           ;LCD.c: 112: delay_us(40);;
  4192  0107B8  D876               	call	PL2	;call to abstracted procedure
  4193  0107BA  EC61  F08A         	call	_delay_us	;wreg free
  4194                           
  4195                           ;LCD.c: 113: PORTEbits.RE4 = 0;
  4196  0107BE  9884               	bcf	3972,4,c	;volatile
  4197                           
  4198                           ;LCD.c: 115: delay_ms(50);
  4199  0107C0  D878               	call	PL10	;call to abstracted procedure
  4200  0107C2  EC95  F089         	call	_delay_ms	;wreg free
  4201                           
  4202                           ;LCD.c: 118: delay_us(40);;
  4203  0107C6  D86F               	call	PL2	;call to abstracted procedure
  4204  0107C8  EC61  F08A         	call	_delay_us	;wreg free
  4205                           
  4206                           ;LCD.c: 119: PORTEbits.RE4 = 1;
  4207  0107CC  8884               	bsf	3972,4,c	;volatile
  4208                           
  4209                           ;LCD.c: 120: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4210  0107CE  9A87               	bcf	3975,5,c	;volatile
  4211  0107D0  9284               	bcf	3972,1,c	;volatile
  4212  0107D2  8084               	bsf	3972,0,c	;volatile
  4213  0107D4  9484               	bcf	3972,2,c	;volatile
  4214                           
  4215                           ;LCD.c: 121: delay_us(40);;
  4216  0107D6  D867               	call	PL2	;call to abstracted procedure
  4217  0107D8  EC61  F08A         	call	_delay_us	;wreg free
  4218                           
  4219                           ;LCD.c: 122: PORTEbits.RE4 = 0;
  4220  0107DC  9884               	bcf	3972,4,c	;volatile
  4221                           
  4222                           ;LCD.c: 124: delay_ms(50);
  4223  0107DE  D869               	call	PL10	;call to abstracted procedure
  4224  0107E0  EC95  F089         	call	_delay_ms	;wreg free
  4225                           
  4226                           ;LCD.c: 127: delay_us(40);;
  4227  0107E4  D860               	call	PL2	;call to abstracted procedure
  4228  0107E6  EC61  F08A         	call	_delay_us	;wreg free
  4229                           
  4230                           ;LCD.c: 128: PORTEbits.RE4 = 1;
  4231  0107EA  8884               	bsf	3972,4,c	;volatile
  4232                           
  4233                           ;LCD.c: 129: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4234  0107EC  9A87               	bcf	3975,5,c	;volatile
  4235  0107EE  9284               	bcf	3972,1,c	;volatile
  4236  0107F0  8084               	bsf	3972,0,c	;volatile
  4237  0107F2  9484               	bcf	3972,2,c	;volatile
  4238                           
  4239                           ;LCD.c: 130: delay_us(40);;
  4240  0107F4  D858               	call	PL2	;call to abstracted procedure
  4241  0107F6  EC61  F08A         	call	_delay_us	;wreg free
  4242                           
  4243                           ;LCD.c: 131: PORTEbits.RE4 = 0;
  4244  0107FA  9884               	bcf	3972,4,c	;volatile
  4245                           
  4246                           ;LCD.c: 133: delay_us(40);;
  4247  0107FC  D854               	call	PL2	;call to abstracted procedure
  4248  0107FE  EC61  F08A         	call	_delay_us	;wreg free
  4249                           
  4250                           ;LCD.c: 134: PORTEbits.RE4 = 1;
  4251  010802  8884               	bsf	3972,4,c	;volatile
  4252                           
  4253                           ;LCD.c: 135: { PORTHbits.RH5 = ((0x8 >> 3) & 1); PORTEbits.RE1 = ((0x8 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x8 >> 1) & 1); PORTEbits.RE2 = (0x8 & 1); };
  4254  010804  8A87               	bsf	3975,5,c	;volatile
  4255  010806  9284               	bcf	3972,1,c	;volatile
  4256  010808  9084               	bcf	3972,0,c	;volatile
  4257  01080A  9484               	bcf	3972,2,c	;volatile
  4258                           
  4259                           ;LCD.c: 136: delay_us(40);;
  4260  01080C  D84C               	call	PL2	;call to abstracted procedure
  4261  01080E  EC61  F08A         	call	_delay_us	;wreg free
  4262                           
  4263                           ;LCD.c: 137: PORTEbits.RE4 = 0;
  4264  010812  9884               	bcf	3972,4,c	;volatile
  4265                           
  4266                           ;LCD.c: 140: delay_us(40);;
  4267  010814  D848               	call	PL2	;call to abstracted procedure
  4268  010816  EC61  F08A         	call	_delay_us	;wreg free
  4269                           
  4270                           ;LCD.c: 141: PORTEbits.RE4 = 1;
  4271  01081A  8884               	bsf	3972,4,c	;volatile
  4272                           
  4273                           ;LCD.c: 142: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4274  01081C  9A87               	bcf	3975,5,c	;volatile
  4275  01081E  9284               	bcf	3972,1,c	;volatile
  4276  010820  9084               	bcf	3972,0,c	;volatile
  4277  010822  9484               	bcf	3972,2,c	;volatile
  4278                           
  4279                           ;LCD.c: 143: delay_us(40);;
  4280  010824  D840               	call	PL2	;call to abstracted procedure
  4281  010826  EC61  F08A         	call	_delay_us	;wreg free
  4282                           
  4283                           ;LCD.c: 144: PORTEbits.RE4 = 0;
  4284  01082A  9884               	bcf	3972,4,c	;volatile
  4285                           
  4286                           ;LCD.c: 146: delay_us(40);;
  4287  01082C  D83C               	call	PL2	;call to abstracted procedure
  4288  01082E  EC61  F08A         	call	_delay_us	;wreg free
  4289                           
  4290                           ;LCD.c: 147: PORTEbits.RE4 = 1;
  4291  010832  8884               	bsf	3972,4,c	;volatile
  4292                           
  4293                           ;LCD.c: 148: { PORTHbits.RH5 = ((0xF >> 3) & 1); PORTEbits.RE1 = ((0xF >> 2) & 1); PORTE
      +                          bits.RE0 = ((0xF >> 1) & 1); PORTEbits.RE2 = (0xF & 1); };
  4294  010834  8A87               	bsf	3975,5,c	;volatile
  4295  010836  8284               	bsf	3972,1,c	;volatile
  4296  010838  8084               	bsf	3972,0,c	;volatile
  4297  01083A  8484               	bsf	3972,2,c	;volatile
  4298                           
  4299                           ;LCD.c: 149: delay_us(40);;
  4300  01083C  D834               	call	PL2	;call to abstracted procedure
  4301  01083E  EC61  F08A         	call	_delay_us	;wreg free
  4302                           
  4303                           ;LCD.c: 150: PORTEbits.RE4 = 0;
  4304  010842  9884               	bcf	3972,4,c	;volatile
  4305                           
  4306                           ;LCD.c: 153: delay_us(40);;
  4307  010844  D830               	call	PL2	;call to abstracted procedure
  4308  010846  EC61  F08A         	call	_delay_us	;wreg free
  4309                           
  4310                           ;LCD.c: 154: PORTEbits.RE4 = 1;
  4311  01084A  8884               	bsf	3972,4,c	;volatile
  4312                           
  4313                           ;LCD.c: 155: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4314  01084C  9A87               	bcf	3975,5,c	;volatile
  4315  01084E  9284               	bcf	3972,1,c	;volatile
  4316  010850  9084               	bcf	3972,0,c	;volatile
  4317  010852  9484               	bcf	3972,2,c	;volatile
  4318                           
  4319                           ;LCD.c: 156: delay_us(40);;
  4320  010854  D828               	call	PL2	;call to abstracted procedure
  4321  010856  EC61  F08A         	call	_delay_us	;wreg free
  4322                           
  4323                           ;LCD.c: 157: PORTEbits.RE4 = 0;
  4324  01085A  9884               	bcf	3972,4,c	;volatile
  4325                           
  4326                           ;LCD.c: 159: delay_us(40);;
  4327  01085C  D824               	call	PL2	;call to abstracted procedure
  4328  01085E  EC61  F08A         	call	_delay_us	;wreg free
  4329                           
  4330                           ;LCD.c: 160: PORTEbits.RE4 = 1;
  4331  010862  8884               	bsf	3972,4,c	;volatile
  4332                           
  4333                           ;LCD.c: 161: { PORTHbits.RH5 = ((0x1 >> 3) & 1); PORTEbits.RE1 = ((0x1 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x1 >> 1) & 1); PORTEbits.RE2 = (0x1 & 1); };
  4334  010864  9A87               	bcf	3975,5,c	;volatile
  4335  010866  9284               	bcf	3972,1,c	;volatile
  4336  010868  9084               	bcf	3972,0,c	;volatile
  4337  01086A  8484               	bsf	3972,2,c	;volatile
  4338                           
  4339                           ;LCD.c: 162: delay_us(40);;
  4340  01086C  D81C               	call	PL2	;call to abstracted procedure
  4341  01086E  EC61  F08A         	call	_delay_us	;wreg free
  4342                           
  4343                           ;LCD.c: 163: PORTEbits.RE4 = 0;
  4344  010872  9884               	bcf	3972,4,c	;volatile
  4345                           
  4346                           ;LCD.c: 166: delay_us(40);;
  4347  010874  D818               	call	PL2	;call to abstracted procedure
  4348  010876  EC61  F08A         	call	_delay_us	;wreg free
  4349                           
  4350                           ;LCD.c: 167: PORTEbits.RE4 = 1;
  4351  01087A  8884               	bsf	3972,4,c	;volatile
  4352                           
  4353                           ;LCD.c: 168: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4354  01087C  9A87               	bcf	3975,5,c	;volatile
  4355  01087E  9284               	bcf	3972,1,c	;volatile
  4356  010880  9084               	bcf	3972,0,c	;volatile
  4357  010882  9484               	bcf	3972,2,c	;volatile
  4358                           
  4359                           ;LCD.c: 169: delay_us(40);;
  4360  010884  D810               	call	PL2	;call to abstracted procedure
  4361  010886  EC61  F08A         	call	_delay_us	;wreg free
  4362                           
  4363                           ;LCD.c: 170: PORTEbits.RE4 = 0;
  4364  01088A  9884               	bcf	3972,4,c	;volatile
  4365                           
  4366                           ;LCD.c: 172: delay_us(40);;
  4367  01088C  D80C               	call	PL2	;call to abstracted procedure
  4368  01088E  EC61  F08A         	call	_delay_us	;wreg free
  4369                           
  4370                           ;LCD.c: 173: PORTEbits.RE4 = 1;
  4371  010892  8884               	bsf	3972,4,c	;volatile
  4372                           
  4373                           ;LCD.c: 174: { PORTHbits.RH5 = ((0x6 >> 3) & 1); PORTEbits.RE1 = ((0x6 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x6 >> 1) & 1); PORTEbits.RE2 = (0x6 & 1); };
  4374  010894  9A87               	bcf	3975,5,c	;volatile
  4375  010896  8284               	bsf	3972,1,c	;volatile
  4376  010898  8084               	bsf	3972,0,c	;volatile
  4377  01089A  9484               	bcf	3972,2,c	;volatile
  4378                           
  4379                           ;LCD.c: 175: delay_us(40);;
  4380  01089C  D804               	call	PL2	;call to abstracted procedure
  4381  01089E  EC61  F08A         	call	_delay_us	;wreg free
  4382                           
  4383                           ;LCD.c: 176: PORTEbits.RE4 = 0;
  4384  0108A2  9884               	bcf	3972,4,c	;volatile
  4385  0108A4  0012               	return	
  4386  0108A6                     __end_of_LCD_init4bit:
  4387                           	opt stack 0
  4388  0108A6                     PL2:
  4389                           	opt stack 23
  4390  0108A6  0E28               	movlw	40
  4391  0108A8  6E06               	movwf	delay_us@x,c
  4392  0108AA  6A07               	clrf	delay_us@x+1,c
  4393  0108AC  6A08               	clrf	delay_us@x+2,c
  4394  0108AE  6A09               	clrf	delay_us@x+3,c
  4395  0108B0  0C00               	retlw	0
  4396  0108B2                     __end_ofPL2:
  4397                           	opt stack 0
  4398  0108B2                     PL10:
  4399                           	opt stack 24
  4400  0108B2  0E32               	movlw	50
  4401  0108B4  6E0A               	movwf	delay_ms@x,c
  4402  0108B6  6A0B               	clrf	delay_ms@x+1,c
  4403  0108B8  6A0C               	clrf	delay_ms@x+2,c
  4404  0108BA  6A0D               	clrf	delay_ms@x+3,c
  4405  0108BC  0C00               	retlw	0
  4406  0108BE                     __end_ofPL10:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           intcon2	equ	0xFF1
  4416                           intcon3	equ	0xFF0
  4417                           indf0	equ	0xFEF
  4418                           postinc0	equ	0xFEE
  4419                           fsr0h	equ	0xFEA
  4420                           fsr0l	equ	0xFE9
  4421                           wreg	equ	0xFE8
  4422                           indf1	equ	0xFE7
  4423                           postinc1	equ	0xFE6
  4424                           postdec1	equ	0xFE5
  4425                           fsr1h	equ	0xFE2
  4426                           fsr1l	equ	0xFE1
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _delay_init *****************
  4435 ;; Defined at:
  4436 ;;		line 7 in file "delays.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;		None
  4441 ;; Return value:  Size  Location     Type
  4442 ;;		None               void
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, status,0
  4445 ;; Tracked objects:
  4446 ;;		On entry : F/E
  4447 ;;		On exit  : F/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4454 ;;Total ram usage:        0 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_LCD_init4bit
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text19
  4465  0114F8                     __ptext19:
  4466                           	opt stack 0
  4467  0114F8                     _delay_init:
  4468                           	opt stack 25
  4469                           
  4470                           ; BSR set to: 14
  4471                           ;delays.c: 9: static int config = 0;
  4472                           ;delays.c: 12: if(config == 1)
  4473                           
  4474                           ;incstack = 0
  4475  0114F8  0100               	movlb	0	; () banked
  4476  0114FA  05C3               	decf	delay_init@config& (0+255),w,b
  4477  0114FC  11C4               	iorwf	(delay_init@config+1)& (0+255),w,b
  4478  0114FE  B4D8               	btfsc	status,2,c
  4479  011500  0012               	return	
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;delays.c: 15: }
  4483                           ;delays.c: 18: TMR3CS0 = 1;
  4484  011502  8CB1               	bsf	4017,6,c	;volatile
  4485                           
  4486                           ;delays.c: 19: TMR3CS1 = 1;
  4487  011504  8EB1               	bsf	4017,7,c	;volatile
  4488                           
  4489                           ;delays.c: 22: T3CKPS0 = 0;
  4490  011506  98B1               	bcf	4017,4,c	;volatile
  4491                           
  4492                           ;delays.c: 23: T3CKPS1 = 0;
  4493  011508  9AB1               	bcf	4017,5,c	;volatile
  4494                           
  4495                           ;delays.c: 26: RD163 = 1;
  4496  01150A  8EB1               	bsf	4017,7,c	;volatile
  4497                           
  4498                           ;delays.c: 29: TMR3IE = 0;
  4499  01150C  92A0               	bcf	4000,1,c	;volatile
  4500                           
  4501                           ;delays.c: 32: TMR3ON = 1;
  4502  01150E  80B1               	bsf	4017,0,c	;volatile
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;delays.c: 34: config = 1;
  4506  011510  0E00               	movlw	0
  4507  011512  6FC4               	movwf	(delay_init@config+1)& (0+255),b
  4508  011514  0E01               	movlw	1
  4509  011516  6FC3               	movwf	delay_init@config& (0+255),b
  4510                           
  4511                           ;delays.c: 42: T0CON = 0b11010111;
  4512  011518  0ED7               	movlw	215
  4513  01151A  6ED5               	movwf	4053,c	;volatile
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;delays.c: 43: TMR0IP = 1;
  4517  01151C  84F1               	bsf	intcon2,2,c	;volatile
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;delays.c: 44: TMR0IF = 0;
  4521  01151E  94F2               	bcf	intcon,2,c	;volatile
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;delays.c: 45: TMR0IE = 1;
  4525  011520  8AF2               	bsf	intcon,5,c	;volatile
  4526                           
  4527                           ;delays.c: 46: TMR0L = 193;
  4528  011522  0EC1               	movlw	193
  4529  011524  6ED6               	movwf	4054,c	;volatile
  4530                           
  4531                           ; BSR set to: 0
  4532  011526  0CC1               	retlw	193
  4533  011528                     __end_of_delay_init:
  4534                           	opt stack 0
  4535                           tblptru	equ	0xFF8
  4536                           tblptrh	equ	0xFF7
  4537                           tblptrl	equ	0xFF6
  4538                           tablat	equ	0xFF5
  4539                           prodh	equ	0xFF4
  4540                           prodl	equ	0xFF3
  4541                           intcon	equ	0xFF2
  4542                           intcon2	equ	0xFF1
  4543                           intcon3	equ	0xFF0
  4544                           indf0	equ	0xFEF
  4545                           postinc0	equ	0xFEE
  4546                           fsr0h	equ	0xFEA
  4547                           fsr0l	equ	0xFE9
  4548                           wreg	equ	0xFE8
  4549                           indf1	equ	0xFE7
  4550                           postinc1	equ	0xFE6
  4551                           postdec1	equ	0xFE5
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _debug *****************
  4562 ;; Defined at:
  4563 ;;		line 44 in file "main.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;		None               void
  4570 ;; Registers used:
  4571 ;;		None
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    3
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_main
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text20
  4592  0116D4                     __ptext20:
  4593                           	opt stack 0
  4594  0116D4                     _debug:
  4595                           	opt stack 27
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;incstack = 0
  4599  0116D4  0012               	return	
  4600  0116D6                     __end_of_debug:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon2	equ	0xFF1
  4610                           intcon3	equ	0xFF0
  4611                           indf0	equ	0xFEF
  4612                           postinc0	equ	0xFEE
  4613                           fsr0h	equ	0xFEA
  4614                           fsr0l	equ	0xFE9
  4615                           wreg	equ	0xFE8
  4616                           indf1	equ	0xFE7
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _competitionMode *****************
  4629 ;; Defined at:
  4630 ;;		line 68 in file "main.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;		None               void
  4637 ;; Registers used:
  4638 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;Total ram usage:        0 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    7
  4651 ;; This function calls:
  4652 ;;		_LCD_printString
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text21
  4659  011650                     __ptext21:
  4660                           	opt stack 0
  4661  011650                     _competitionMode:
  4662                           	opt stack 23
  4663                           
  4664                           ;main.c: 70: LCD_printString(0,0, "We are\nwinning!");
  4665                           
  4666                           ;incstack = 0
  4667  011650  6A22               	clrf	LCD_printString@y,c
  4668  011652  0EFF               	movlw	high STR_5
  4669  011654  6E24               	movwf	LCD_printString@input+1,c
  4670  011656  0E7F               	movlw	low STR_5
  4671  011658  6E23               	movwf	LCD_printString@input,c
  4672  01165A  0E00               	movlw	0
  4673  01165C  EC00  F080         	call	_LCD_printString
  4674  011660                     l242:
  4675                           
  4676                           ;main.c: 72: {
  4677  011660  D7FF               	goto	l242
  4678  011662                     __end_of_competitionMode:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           intcon2	equ	0xFF1
  4688                           intcon3	equ	0xFF0
  4689                           indf0	equ	0xFEF
  4690                           postinc0	equ	0xFEE
  4691                           fsr0h	equ	0xFEA
  4692                           fsr0l	equ	0xFE9
  4693                           wreg	equ	0xFE8
  4694                           indf1	equ	0xFE7
  4695                           postinc1	equ	0xFE6
  4696                           postdec1	equ	0xFE5
  4697                           fsr1h	equ	0xFE2
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _RCMode *****************
  4707 ;; Defined at:
  4708 ;;		line 77 in file "main.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  right_speed     2   52[BANK0 ] int 
  4713 ;;  left_speed      2   50[BANK0 ] int 
  4714 ;;  done            1   55[BANK0 ] unsigned char 
  4715 ;;  type            1   54[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;		None               void
  4718 ;; Registers used:
  4719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;Total ram usage:        6 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    9
  4732 ;; This function calls:
  4733 ;;		_LCD_printString
  4734 ;;		_PS2_analog
  4735 ;;		_PS2_init
  4736 ;;		_PS2_readGamepad
  4737 ;;		_PS2_readType
  4738 ;;		___awdiv
  4739 ;;		_delay_ms
  4740 ;;		_motorDrive_setSpeeds
  4741 ;; This function is called by:
  4742 ;;		_main
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text22
  4747  010CFC                     __ptext22:
  4748                           	opt stack 0
  4749  010CFC                     _RCMode:
  4750                           	opt stack 21
  4751                           
  4752                           ;main.c: 79: LCD_printString(0,0, "RC Mode\nSearch..");
  4753                           
  4754                           ;incstack = 0
  4755  010CFC  6A22               	clrf	LCD_printString@y,c
  4756  010CFE  0EFF               	movlw	high STR_6
  4757  010D00  6E24               	movwf	LCD_printString@input+1,c
  4758  010D02  0E4C               	movlw	low STR_6
  4759  010D04  6E23               	movwf	LCD_printString@input,c
  4760  010D06  0E00               	movlw	0
  4761  010D08  EC00  F080         	call	_LCD_printString
  4762  010D0C                     l5315:
  4763                           
  4764                           ;main.c: 80: char done = PS2_init();
  4765  010D0C  EC14  F086         	call	_PS2_init	;wreg free
  4766  010D10  6F97               	movwf	RCMode@done& (0+255),b
  4767                           
  4768                           ;main.c: 81: while( done != 0 )
  4769  010D12  D015               	goto	l5323
  4770  010D14                     l5317:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;main.c: 82: {
  4774                           ;main.c: 83: LCD_printString(0,0, "RC Mode\nERR: %i  ",done);
  4775  010D14  6A22               	clrf	LCD_printString@y,c
  4776  010D16  0EFF               	movlw	high STR_7
  4777  010D18  6E24               	movwf	LCD_printString@input+1,c
  4778  010D1A  0E04               	movlw	low STR_7
  4779  010D1C  6E23               	movwf	LCD_printString@input,c
  4780  010D1E  C097  F025         	movff	RCMode@done,?_LCD_printString+3
  4781  010D22  6A26               	clrf	?_LCD_printString+4,c
  4782  010D24  0E00               	movlw	0
  4783  010D26  EC00  F080         	call	_LCD_printString
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;main.c: 84: delay_ms(500);
  4787  010D2A  0EF4               	movlw	244
  4788  010D2C  6E0A               	movwf	delay_ms@x,c
  4789  010D2E  0E01               	movlw	1
  4790  010D30  6E0B               	movwf	delay_ms@x+1,c
  4791  010D32  0E00               	movlw	0
  4792  010D34  6A0C               	clrf	delay_ms@x+2,c
  4793  010D36  6A0D               	clrf	delay_ms@x+3,c
  4794  010D38  EC95  F089         	call	_delay_ms	;wreg free
  4795  010D3C  D7E7               	goto	l5315
  4796  010D3E                     l5323:
  4797                           
  4798                           ; BSR set to: 0
  4799  010D3E  6797               	tstfsz	RCMode@done& (0+255),b
  4800  010D40  D7E9               	goto	l5317
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;main.c: 86: }
  4804                           ;main.c: 88: char type = PS2_readType();
  4805  010D42  EC12  F08B         	call	_PS2_readType	;wreg free
  4806  010D46  6F96               	movwf	RCMode@type& (0+255),b
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;main.c: 90: LCD_printString(0,0, "ana:%i\ntype %i",PS2_analog(7),type);
  4810  010D48  6A22               	clrf	LCD_printString@y,c
  4811  010D4A  0EFF               	movlw	high STR_8
  4812  010D4C  6E24               	movwf	LCD_printString@input+1,c
  4813  010D4E  0EBD               	movlw	low STR_8
  4814  010D50  6E23               	movwf	LCD_printString@input,c
  4815  010D52  0E07               	movlw	7
  4816  010D54  EC3A  F08B         	call	_PS2_analog
  4817  010D58  6E25               	movwf	?_LCD_printString+3,c
  4818  010D5A  6A26               	clrf	?_LCD_printString+4,c
  4819  010D5C  C096  F027         	movff	RCMode@type,?_LCD_printString+5
  4820  010D60  6A28               	clrf	?_LCD_printString+6,c
  4821  010D62  0E00               	movlw	0
  4822  010D64  EC00  F080         	call	_LCD_printString
  4823  010D68                     l5329:
  4824                           
  4825                           ;main.c: 95: {
  4826                           ;main.c: 96: PS2_readGamepad();
  4827  010D68  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  4828                           
  4829                           ;main.c: 98: int left_speed = ((PS2_analog(8) * 120) / 255) - 60;
  4830  010D6C  0E08               	movlw	8
  4831  010D6E  EC3A  F08B         	call	_PS2_analog
  4832  010D72  D820               	call	PL32	;call to abstracted procedure
  4833  010D74  EC39  F087         	call	___awdiv	;wreg free
  4834  010D78  0EC4               	movlw	196
  4835  010D7A  240C               	addwf	?___awdiv,w,c
  4836  010D7C  0100               	movlb	0	; () banked
  4837  010D7E  6F92               	movwf	RCMode@left_speed& (0+255),b
  4838  010D80  0EFF               	movlw	255
  4839  010D82  200D               	addwfc	?___awdiv+1,w,c
  4840  010D84  6F93               	movwf	(RCMode@left_speed+1)& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;main.c: 99: int right_speed = ((PS2_analog(6) * 120) / 255) - 60;
  4844  010D86  0E06               	movlw	6
  4845  010D88  EC3A  F08B         	call	_PS2_analog
  4846  010D8C  D813               	call	PL32	;call to abstracted procedure
  4847  010D8E  EC39  F087         	call	___awdiv	;wreg free
  4848  010D92  0EC4               	movlw	196
  4849  010D94  240C               	addwf	?___awdiv,w,c
  4850  010D96  0100               	movlb	0	; () banked
  4851  010D98  6F94               	movwf	RCMode@right_speed& (0+255),b
  4852  010D9A  0EFF               	movlw	255
  4853  010D9C  200D               	addwfc	?___awdiv+1,w,c
  4854  010D9E  6F95               	movwf	(RCMode@right_speed+1)& (0+255),b
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;main.c: 103: motorDrive_setSpeeds(right_speed, left_speed);
  4858  010DA0  C092  F014         	movff	RCMode@left_speed,motorDrive_setSpeeds@rSpeed
  4859  010DA4  5194               	movf	RCMode@right_speed& (0+255),w,b
  4860  010DA6  ECC2  F081         	call	_motorDrive_setSpeeds
  4861                           
  4862                           ; BSR set to: 15
  4863                           ;main.c: 104: delay_ms(50);
  4864  010DAA  EC59  F084         	call	PL10	;call to abstracted procedure
  4865  010DAE  EC95  F089         	call	_delay_ms	;wreg free
  4866  010DB2  D7DA               	goto	l5329
  4867  010DB4                     __end_of_RCMode:
  4868                           	opt stack 0
  4869  010DB4                     PL32:
  4870                           	opt stack 21
  4871  010DB4  0D78               	mullw	120
  4872  010DB6  CFF3 F00C          	movff	prodl,___awdiv@dividend
  4873  010DBA  CFF4 F00D          	movff	prodh,___awdiv@dividend+1
  4874  010DBE  0E00               	movlw	0
  4875  010DC0  6A0F               	clrf	___awdiv@divisor+1,c
  4876  010DC2  680E               	setf	___awdiv@divisor,c
  4877  010DC4  0012               	return	
  4878  010DC6                     __end_ofPL32:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           intcon2	equ	0xFF1
  4888                           intcon3	equ	0xFF0
  4889                           indf0	equ	0xFEF
  4890                           postinc0	equ	0xFEE
  4891                           fsr0h	equ	0xFEA
  4892                           fsr0l	equ	0xFE9
  4893                           wreg	equ	0xFE8
  4894                           indf1	equ	0xFE7
  4895                           postinc1	equ	0xFE6
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _motorDrive_setSpeeds *****************
  4907 ;; Defined at:
  4908 ;;		line 68 in file "motorDrive.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  lSpeed          1    wreg     char 
  4911 ;;  rSpeed          1   19[COMRAM] char 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  lSpeed          1   40[COMRAM] char 
  4914 ;;  tempr           2   24[COMRAM] int 
  4915 ;;  templ           2   22[COMRAM] int 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/F
  4922 ;;		On exit  : F/F
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4925 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4928 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4929 ;;Total ram usage:       22 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    4
  4932 ;; This function calls:
  4933 ;;		_SetDCEPWM1
  4934 ;;		_SetDCEPWM3
  4935 ;;		___awdiv
  4936 ;;		___wmul
  4937 ;; This function is called by:
  4938 ;;		_RCMode
  4939 ;;		_motorDrive_init
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text23
  4944  010384                     __ptext23:
  4945                           	opt stack 0
  4946  010384                     _motorDrive_setSpeeds:
  4947                           	opt stack 24
  4948                           
  4949                           ;incstack = 0
  4950                           ;motorDrive_setSpeeds@lSpeed stored from wreg
  4951  010384  6E29               	movwf	motorDrive_setSpeeds@lSpeed,c
  4952                           
  4953                           ;motorDrive.c: 70: PORTLbits.RL0 = (lSpeed >> 7 ) & 0x1 ^ 0x1;
  4954  010386  D8E4               	call	PL42	;call to abstracted procedure
  4955  010388                     u2775:
  4956  010388  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  4957  01038A  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  4958  01038C  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  4959  01038E  D7FC               	goto	u2775
  4960  010390  0E01               	movlw	1
  4961  010392  1615               	andwf	??_motorDrive_setSpeeds,f,c
  4962  010394  1A15               	xorwf	??_motorDrive_setSpeeds,f,c
  4963  010396  010E               	movlb	14	; () banked
  4964  010398  51E4               	movf	228,w,b	;volatile
  4965  01039A  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4966  01039C  0BFE               	andlw	-2
  4967  01039E  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4968  0103A0  6FE4               	movwf	228,b	;volatile
  4969                           
  4970                           ;motorDrive.c: 71: PORTKbits.RK1 = (rSpeed >> 7 ) & 0x1;
  4971  0103A2  D8D1               	call	PL40	;call to abstracted procedure
  4972  0103A4                     u2785:
  4973  0103A4  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  4974  0103A6  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  4975  0103A8  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  4976  0103AA  D7FC               	goto	u2785
  4977  0103AC  0E01               	movlw	1
  4978  0103AE  1615               	andwf	??_motorDrive_setSpeeds,f,c
  4979  0103B0  4615               	rlncf	??_motorDrive_setSpeeds,f,c
  4980  0103B2  51E7               	movf	231,w,b	;volatile
  4981  0103B4  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4982  0103B6  0BFD               	andlw	-3
  4983  0103B8  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4984  0103BA  6FE7               	movwf	231,b	;volatile
  4985                           
  4986                           ;motorDrive.c: 73: lSpeed = ((lSpeed < 100) ? lSpeed : 100);
  4987  0103BC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  4988  0103BE  0A80               	xorlw	128
  4989  0103C0  0F1C               	addlw	-228
  4990  0103C2  E304               	bnc	l4811
  4991                           
  4992                           ; BSR set to: 14
  4993  0103C4  6A1C               	clrf	_motorDrive_setSpeeds$2402+1,c
  4994  0103C6  0E64               	movlw	100
  4995  0103C8  6E1B               	movwf	_motorDrive_setSpeeds$2402,c
  4996  0103CA  D005               	goto	l4813
  4997  0103CC                     l4811:
  4998                           
  4999                           ; BSR set to: 14
  5000  0103CC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5001  0103CE  6E1B               	movwf	_motorDrive_setSpeeds$2402,c
  5002  0103D0  6A1C               	clrf	_motorDrive_setSpeeds$2402+1,c
  5003  0103D2  BE1B               	btfsc	_motorDrive_setSpeeds$2402,7,c
  5004  0103D4  061C               	decf	_motorDrive_setSpeeds$2402+1,f,c
  5005  0103D6                     l4813:
  5006                           
  5007                           ; BSR set to: 14
  5008  0103D6  C01B  F029         	movff	_motorDrive_setSpeeds$2402,motorDrive_setSpeeds@lSpeed
  5009                           
  5010                           ; BSR set to: 14
  5011                           ;motorDrive.c: 74: rSpeed = ((rSpeed < 100) ? rSpeed : 100);
  5012  0103DA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5013  0103DC  0A80               	xorlw	128
  5014  0103DE  0F1C               	addlw	-228
  5015  0103E0  E304               	bnc	l4819
  5016                           
  5017                           ; BSR set to: 14
  5018  0103E2  6A1E               	clrf	_motorDrive_setSpeeds$2403+1,c
  5019  0103E4  0E64               	movlw	100
  5020  0103E6  6E1D               	movwf	_motorDrive_setSpeeds$2403,c
  5021  0103E8  D005               	goto	l4821
  5022  0103EA                     l4819:
  5023                           
  5024                           ; BSR set to: 14
  5025  0103EA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5026  0103EC  6E1D               	movwf	_motorDrive_setSpeeds$2403,c
  5027  0103EE  6A1E               	clrf	_motorDrive_setSpeeds$2403+1,c
  5028  0103F0  BE1D               	btfsc	_motorDrive_setSpeeds$2403,7,c
  5029  0103F2  061E               	decf	_motorDrive_setSpeeds$2403+1,f,c
  5030  0103F4                     l4821:
  5031                           
  5032                           ; BSR set to: 14
  5033  0103F4  C01D  F014         	movff	_motorDrive_setSpeeds$2403,motorDrive_setSpeeds@rSpeed
  5034                           
  5035                           ; BSR set to: 14
  5036                           ;motorDrive.c: 76: lSpeed = ((lSpeed > -100) ? lSpeed : -100);
  5037  0103F8  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5038  0103FA  0A80               	xorlw	128
  5039  0103FC  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  5040  0103FE  0E9D               	movlw	157
  5041  010400  0A80               	xorlw	128
  5042  010402  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  5043  010404  E204               	bc	l4827
  5044                           
  5045                           ; BSR set to: 14
  5046  010406  6820               	setf	_motorDrive_setSpeeds$2404+1,c
  5047  010408  0E9C               	movlw	156
  5048  01040A  6E1F               	movwf	_motorDrive_setSpeeds$2404,c
  5049  01040C  D005               	goto	l4829
  5050  01040E                     l4827:
  5051                           
  5052                           ; BSR set to: 14
  5053  01040E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5054  010410  6E1F               	movwf	_motorDrive_setSpeeds$2404,c
  5055  010412  6A20               	clrf	_motorDrive_setSpeeds$2404+1,c
  5056  010414  BE1F               	btfsc	_motorDrive_setSpeeds$2404,7,c
  5057  010416  0620               	decf	_motorDrive_setSpeeds$2404+1,f,c
  5058  010418                     l4829:
  5059                           
  5060                           ; BSR set to: 14
  5061  010418  C01F  F029         	movff	_motorDrive_setSpeeds$2404,motorDrive_setSpeeds@lSpeed
  5062                           
  5063                           ; BSR set to: 14
  5064                           ;motorDrive.c: 77: rSpeed = ((rSpeed > -100) ? rSpeed : -100);
  5065  01041C  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5066  01041E  0A80               	xorlw	128
  5067  010420  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  5068  010422  0E9D               	movlw	157
  5069  010424  0A80               	xorlw	128
  5070  010426  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  5071  010428  E204               	bc	l4835
  5072                           
  5073                           ; BSR set to: 14
  5074  01042A  6822               	setf	_motorDrive_setSpeeds$2405+1,c
  5075  01042C  0E9C               	movlw	156
  5076  01042E  6E21               	movwf	_motorDrive_setSpeeds$2405,c
  5077  010430  D005               	goto	l4837
  5078  010432                     l4835:
  5079                           
  5080                           ; BSR set to: 14
  5081  010432  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5082  010434  6E21               	movwf	_motorDrive_setSpeeds$2405,c
  5083  010436  6A22               	clrf	_motorDrive_setSpeeds$2405+1,c
  5084  010438  BE21               	btfsc	_motorDrive_setSpeeds$2405,7,c
  5085  01043A  0622               	decf	_motorDrive_setSpeeds$2405+1,f,c
  5086  01043C                     l4837:
  5087                           
  5088                           ; BSR set to: 14
  5089  01043C  C021  F014         	movff	_motorDrive_setSpeeds$2405,motorDrive_setSpeeds@rSpeed
  5090                           
  5091                           ; BSR set to: 14
  5092                           ;motorDrive.c: 79: lSpeed = ((lSpeed >> 7 ) & 0x1) ? ((lSpeed < 0) ? (lSpeed*-1) : lSpee
      +                          d) : 100-lSpeed;
  5093  010440  D887               	call	PL42	;call to abstracted procedure
  5094  010442                     u2835:
  5095  010442  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5096  010444  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5097  010446  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5098  010448  D7FC               	goto	u2835
  5099  01044A  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5100  01044C  D00E               	goto	l844
  5101                           
  5102                           ; BSR set to: 14
  5103  01044E  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5104  010452  6A16               	clrf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5105  010454  BE15               	btfsc	??_motorDrive_setSpeeds& (0+255),7,c
  5106  010456  0616               	decf	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5107  010458  5015               	movf	??_motorDrive_setSpeeds,w,c
  5108  01045A  0864               	sublw	100
  5109  01045C  6E23               	movwf	_motorDrive_setSpeeds$2406,c
  5110  01045E  5016               	movf	??_motorDrive_setSpeeds+1,w,c
  5111  010460  A0D8               	btfss	status,0,c
  5112  010462  2AE8               	incf	wreg,f,c
  5113  010464  0800               	sublw	0
  5114  010466  6E24               	movwf	_motorDrive_setSpeeds$2406+1,c
  5115  010468  D01E               	goto	l4849
  5116  01046A                     l844:
  5117                           
  5118                           ; BSR set to: 14
  5119  01046A  BE29               	btfsc	motorDrive_setSpeeds@lSpeed,7,c
  5120  01046C  D006               	goto	l4845
  5121                           
  5122                           ; BSR set to: 14
  5123  01046E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5124  010470  6E25               	movwf	_motorDrive_setSpeeds$2407,c
  5125  010472  6A26               	clrf	_motorDrive_setSpeeds$2407+1,c
  5126  010474  BE25               	btfsc	_motorDrive_setSpeeds$2407,7,c
  5127  010476  0626               	decf	_motorDrive_setSpeeds$2407+1,f,c
  5128  010478  D012               	goto	l4847
  5129  01047A                     l4845:
  5130                           
  5131                           ; BSR set to: 14
  5132  01047A  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5133  01047C  6E06               	movwf	___wmul@multiplier,c
  5134  01047E  6A07               	clrf	___wmul@multiplier+1,c
  5135  010480  BE06               	btfsc	___wmul@multiplier,7,c
  5136  010482  0607               	decf	___wmul@multiplier+1,f,c
  5137  010484  6A09               	clrf	___wmul@multiplicand+1,c
  5138  010486  0E01               	movlw	1
  5139  010488  6E08               	movwf	___wmul@multiplicand,c
  5140  01048A  ECCF  F08A         	call	___wmul	;wreg free
  5141  01048E  1E06               	comf	?___wmul,f,c
  5142  010490  1E07               	comf	?___wmul+1,f,c
  5143  010492  4A06               	infsnz	?___wmul,f,c
  5144  010494  2A07               	incf	?___wmul+1,f,c
  5145  010496  C006  F025         	movff	?___wmul,_motorDrive_setSpeeds$2407
  5146  01049A  C007  F026         	movff	?___wmul+1,_motorDrive_setSpeeds$2407+1
  5147  01049E                     l4847:
  5148  01049E  C025  F023         	movff	_motorDrive_setSpeeds$2407,_motorDrive_setSpeeds$2406
  5149  0104A2  C026  F024         	movff	_motorDrive_setSpeeds$2407+1,_motorDrive_setSpeeds$2406+1
  5150  0104A6                     l4849:
  5151  0104A6  C023  F029         	movff	_motorDrive_setSpeeds$2406,motorDrive_setSpeeds@lSpeed
  5152                           
  5153                           ;motorDrive.c: 80: rSpeed = ((rSpeed >> 7 ) & 0x1) ? 100 + rSpeed : rSpeed;
  5154  0104AA  D84D               	call	PL40	;call to abstracted procedure
  5155  0104AC                     u2865:
  5156  0104AC  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5157  0104AE  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5158  0104B0  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5159  0104B2  D7FC               	goto	u2865
  5160  0104B4  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5161  0104B6  D006               	goto	l4855
  5162  0104B8  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5163  0104BA  6E27               	movwf	_motorDrive_setSpeeds$2408,c
  5164  0104BC  6A28               	clrf	_motorDrive_setSpeeds$2408+1,c
  5165  0104BE  BE27               	btfsc	_motorDrive_setSpeeds$2408,7,c
  5166  0104C0  0628               	decf	_motorDrive_setSpeeds$2408+1,f,c
  5167  0104C2  D009               	goto	l4857
  5168  0104C4                     l4855:
  5169  0104C4  0E64               	movlw	100
  5170  0104C6  2414               	addwf	motorDrive_setSpeeds@rSpeed,w,c
  5171  0104C8  6E27               	movwf	_motorDrive_setSpeeds$2408,c
  5172  0104CA  6AE8               	clrf	wreg,c
  5173  0104CC  B0D8               	btfsc	status,0,c
  5174  0104CE  2AE8               	incf	wreg,f,c
  5175  0104D0  BE14               	btfsc	motorDrive_setSpeeds@rSpeed,7,c
  5176  0104D2  06E8               	decf	wreg,f,c
  5177  0104D4  6E28               	movwf	_motorDrive_setSpeeds$2408+1,c
  5178  0104D6                     l4857:
  5179  0104D6  C027  F014         	movff	_motorDrive_setSpeeds$2408,motorDrive_setSpeeds@rSpeed
  5180                           
  5181                           ;motorDrive.c: 82: int templ = ((0xD0 * lSpeed) / 100);
  5182  0104DA  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5183  0104DC  D82C               	call	PL36	;call to abstracted procedure
  5184  0104DE  ECCF  F08A         	call	___wmul	;wreg free
  5185  0104E2  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5186  0104E6  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5187  0104EA  6A0F               	clrf	___awdiv@divisor+1,c
  5188  0104EC  0E64               	movlw	100
  5189  0104EE  6E0E               	movwf	___awdiv@divisor,c
  5190  0104F0  EC39  F087         	call	___awdiv	;wreg free
  5191  0104F4  C00C  F017         	movff	?___awdiv,motorDrive_setSpeeds@templ
  5192  0104F8  C00D  F018         	movff	?___awdiv+1,motorDrive_setSpeeds@templ+1
  5193                           
  5194                           ;motorDrive.c: 83: int tempr = ((0xD0 * rSpeed) / 100);
  5195  0104FC  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5196  0104FE  D81B               	call	PL36	;call to abstracted procedure
  5197  010500  ECCF  F08A         	call	___wmul	;wreg free
  5198  010504  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5199  010508  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5200  01050C  6A0F               	clrf	___awdiv@divisor+1,c
  5201  01050E  0E64               	movlw	100
  5202  010510  6E0E               	movwf	___awdiv@divisor,c
  5203  010512  EC39  F087         	call	___awdiv	;wreg free
  5204  010516  C00C  F019         	movff	?___awdiv,motorDrive_setSpeeds@tempr
  5205  01051A  C00D  F01A         	movff	?___awdiv+1,motorDrive_setSpeeds@tempr+1
  5206                           
  5207                           ;motorDrive.c: 85: SetDCEPWM1(tempr);
  5208  01051E  C019  F006         	movff	motorDrive_setSpeeds@tempr,SetDCEPWM1@dutycycle
  5209  010522  C01A  F007         	movff	motorDrive_setSpeeds@tempr+1,SetDCEPWM1@dutycycle+1
  5210  010526  EC44  F08A         	call	_SetDCEPWM1	;wreg free
  5211                           
  5212                           ;motorDrive.c: 86: SetDCEPWM3(templ);
  5213  01052A  C017  F006         	movff	motorDrive_setSpeeds@templ,SetDCEPWM3@dutycycle
  5214  01052E  C018  F007         	movff	motorDrive_setSpeeds@templ+1,SetDCEPWM3@dutycycle+1
  5215  010532  EF26  F08A         	goto	_SetDCEPWM3	;wreg free
  5216  010536                     __end_of_motorDrive_setSpeeds:
  5217                           	opt stack 0
  5218  010536                     PL36:
  5219                           	opt stack 24
  5220  010536  6E06               	movwf	___wmul@multiplier,c
  5221  010538  6A07               	clrf	___wmul@multiplier+1,c
  5222  01053A  BE06               	btfsc	___wmul@multiplier,7,c
  5223  01053C  0607               	decf	___wmul@multiplier+1,f,c
  5224  01053E  6A09               	clrf	___wmul@multiplicand+1,c
  5225  010540  0ED0               	movlw	208
  5226  010542  6E08               	movwf	___wmul@multiplicand,c
  5227  010544  0CD0               	retlw	208
  5228  010546                     __end_ofPL36:
  5229                           	opt stack 0
  5230  010546                     PL40:
  5231                           	opt stack 24
  5232  010546  C014  F015         	movff	motorDrive_setSpeeds@rSpeed,??_motorDrive_setSpeeds
  5233  01054A  0E07               	movlw	7
  5234  01054C  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5235  01054E  0C07               	retlw	7
  5236  010550                     __end_ofPL40:
  5237                           	opt stack 0
  5238  010550                     PL42:
  5239                           	opt stack 24
  5240  010550  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5241  010554  0E07               	movlw	7
  5242  010556  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5243  010558  0C07               	retlw	7
  5244  01055A                     __end_ofPL42:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           intcon2	equ	0xFF1
  5254                           intcon3	equ	0xFF0
  5255                           indf0	equ	0xFEF
  5256                           postinc0	equ	0xFEE
  5257                           fsr0h	equ	0xFEA
  5258                           fsr0l	equ	0xFE9
  5259                           wreg	equ	0xFE8
  5260                           indf1	equ	0xFE7
  5261                           postinc1	equ	0xFE6
  5262                           postdec1	equ	0xFE5
  5263                           fsr1h	equ	0xFE2
  5264                           fsr1l	equ	0xFE1
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function ___wmul *****************
  5273 ;; Defined at:
  5274 ;;		line 15 in file "/Applications/microchip/xc8/v1.33/sources/common/Umul16.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  multiplier      2    5[COMRAM] unsigned int 
  5277 ;;  multiplicand    2    7[COMRAM] unsigned int 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  product         2    9[COMRAM] unsigned int 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  2    5[COMRAM] unsigned int 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0, prodl, prodh
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/E
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5289 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;Total ram usage:        6 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    3
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_motorDrive_setSpeeds
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text24
  5304  01159E                     __ptext24:
  5305                           	opt stack 0
  5306  01159E                     ___wmul:
  5307                           	opt stack 24
  5308                           
  5309                           ; BSR set to: 15
  5310                           ;incstack = 0
  5311  01159E  5006               	movf	___wmul@multiplier,w,c
  5312  0115A0  0208               	mulwf	___wmul@multiplicand,c
  5313  0115A2  CFF3 F00A          	movff	prodl,___wmul@product
  5314  0115A6  CFF4 F00B          	movff	prodh,___wmul@product+1
  5315  0115AA  5006               	movf	___wmul@multiplier,w,c
  5316  0115AC  0209               	mulwf	___wmul@multiplicand+1,c
  5317  0115AE  50F3               	movf	prodl,w,c
  5318  0115B0  260B               	addwf	___wmul@product+1,f,c
  5319  0115B2  5007               	movf	___wmul@multiplier+1,w,c
  5320  0115B4  0208               	mulwf	___wmul@multiplicand,c
  5321  0115B6  50F3               	movf	prodl,w,c
  5322  0115B8  260B               	addwf	___wmul@product+1,f,c
  5323  0115BA  C00A  F006         	movff	___wmul@product,?___wmul
  5324  0115BE  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  5325  0115C2  0012               	return	
  5326  0115C4                     __end_of___wmul:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           intcon2	equ	0xFF1
  5336                           intcon3	equ	0xFF0
  5337                           indf0	equ	0xFEF
  5338                           postinc0	equ	0xFEE
  5339                           fsr0h	equ	0xFEA
  5340                           fsr0l	equ	0xFE9
  5341                           wreg	equ	0xFE8
  5342                           indf1	equ	0xFE7
  5343                           postinc1	equ	0xFE6
  5344                           postdec1	equ	0xFE5
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function ___awdiv *****************
  5355 ;; Defined at:
  5356 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/awdiv.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  dividend        2   11[COMRAM] int 
  5359 ;;  divisor         2   13[COMRAM] int 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  quotient        2   17[COMRAM] int 
  5362 ;;  sign            1   16[COMRAM] unsigned char 
  5363 ;;  counter         1   15[COMRAM] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  2   11[COMRAM] int 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, prodl
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5374 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5376 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5377 ;;Total ram usage:        8 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    3
  5380 ;; This function calls:
  5381 ;;		Nothing
  5382 ;; This function is called by:
  5383 ;;		_RCMode
  5384 ;;		_motorDrive_setSpeeds
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text25
  5389  010E72                     __ptext25:
  5390                           	opt stack 0
  5391  010E72                     ___awdiv:
  5392                           	opt stack 24
  5393                           
  5394                           ;incstack = 0
  5395  010E72  6A11               	clrf	___awdiv@sign,c
  5396  010E74  500F               	movf	___awdiv@divisor+1,w,c
  5397  010E76  EC93  F085         	call	PL34	;call to abstracted procedure
  5398  010E7A  B4D8               	btfsc	status,2,c
  5399  010E7C  5C0E               	subwf	___awdiv@divisor,w,c
  5400  010E7E  E206               	bc	l4629
  5401  010E80  6C0E               	negf	___awdiv@divisor,c
  5402  010E82  1E0F               	comf	___awdiv@divisor+1,f,c
  5403  010E84  B0D8               	btfsc	status,0,c
  5404  010E86  2A0F               	incf	___awdiv@divisor+1,f,c
  5405  010E88  0E01               	movlw	1
  5406  010E8A  6E11               	movwf	___awdiv@sign,c
  5407  010E8C                     l4629:
  5408  010E8C  500D               	movf	___awdiv@dividend+1,w,c
  5409  010E8E  EC93  F085         	call	PL34	;call to abstracted procedure
  5410  010E92  B4D8               	btfsc	status,2,c
  5411  010E94  5C0C               	subwf	___awdiv@dividend,w,c
  5412  010E96  E206               	bc	l4635
  5413  010E98  6C0C               	negf	___awdiv@dividend,c
  5414  010E9A  1E0D               	comf	___awdiv@dividend+1,f,c
  5415  010E9C  B0D8               	btfsc	status,0,c
  5416  010E9E  2A0D               	incf	___awdiv@dividend+1,f,c
  5417  010EA0  0E01               	movlw	1
  5418  010EA2  1A11               	xorwf	___awdiv@sign,f,c
  5419  010EA4                     l4635:
  5420  010EA4  6A12               	clrf	___awdiv@quotient,c
  5421  010EA6  6A13               	clrf	___awdiv@quotient+1,c
  5422  010EA8  500F               	movf	___awdiv@divisor+1,w,c
  5423  010EAA  100E               	iorwf	___awdiv@divisor,w,c
  5424  010EAC  E01B               	bz	l4657
  5425  010EAE  0E01               	movlw	1
  5426  010EB0  6E10               	movwf	___awdiv@counter,c
  5427  010EB2  D004               	goto	l4643
  5428  010EB4                     l4641:
  5429  010EB4  90D8               	bcf	status,0,c
  5430  010EB6  360E               	rlcf	___awdiv@divisor,f,c
  5431  010EB8  360F               	rlcf	___awdiv@divisor+1,f,c
  5432  010EBA  2A10               	incf	___awdiv@counter,f,c
  5433  010EBC                     l4643:
  5434  010EBC  AE0F               	btfss	___awdiv@divisor+1,7,c
  5435  010EBE  D7FA               	goto	l4641
  5436  010EC0                     l4645:
  5437  010EC0  90D8               	bcf	status,0,c
  5438  010EC2  3612               	rlcf	___awdiv@quotient,f,c
  5439  010EC4  3613               	rlcf	___awdiv@quotient+1,f,c
  5440  010EC6  500E               	movf	___awdiv@divisor,w,c
  5441  010EC8  5C0C               	subwf	___awdiv@dividend,w,c
  5442  010ECA  500F               	movf	___awdiv@divisor+1,w,c
  5443  010ECC  580D               	subwfb	___awdiv@dividend+1,w,c
  5444  010ECE  E305               	bnc	l4653
  5445  010ED0  500E               	movf	___awdiv@divisor,w,c
  5446  010ED2  5E0C               	subwf	___awdiv@dividend,f,c
  5447  010ED4  500F               	movf	___awdiv@divisor+1,w,c
  5448  010ED6  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5449  010ED8  8012               	bsf	___awdiv@quotient,0,c
  5450  010EDA                     l4653:
  5451  010EDA  90D8               	bcf	status,0,c
  5452  010EDC  320F               	rrcf	___awdiv@divisor+1,f,c
  5453  010EDE  320E               	rrcf	___awdiv@divisor,f,c
  5454  010EE0  2E10               	decfsz	___awdiv@counter,f,c
  5455  010EE2  D7EE               	goto	l4645
  5456  010EE4                     l4657:
  5457  010EE4  5011               	movf	___awdiv@sign,w,c
  5458  010EE6  E004               	bz	l4661
  5459  010EE8  6C12               	negf	___awdiv@quotient,c
  5460  010EEA  1E13               	comf	___awdiv@quotient+1,f,c
  5461  010EEC  B0D8               	btfsc	status,0,c
  5462  010EEE  2A13               	incf	___awdiv@quotient+1,f,c
  5463  010EF0                     l4661:
  5464  010EF0  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5465  010EF4  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5466  010EF8  0012               	return	
  5467  010EFA                     __end_of___awdiv:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           intcon3	equ	0xFF0
  5478                           indf0	equ	0xFEF
  5479                           postinc0	equ	0xFEE
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           indf1	equ	0xFE7
  5484                           postinc1	equ	0xFE6
  5485                           postdec1	equ	0xFE5
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _SetDCEPWM3 *****************
  5496 ;; Defined at:
  5497 ;;		line 16 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setdc.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/F
  5508 ;;		On exit  : F/F
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5513 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;Total ram usage:        6 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    3
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_motorDrive_init
  5522 ;;		_motorDrive_setSpeeds
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text26
  5527  01144C                     __ptext26:
  5528                           	opt stack 0
  5529  01144C                     _SetDCEPWM3:
  5530                           	opt stack 24
  5531                           
  5532                           ;incstack = 0
  5533  01144C  C006  F008         	movff	SetDCEPWM3@dutycycle,??_SetDCEPWM3
  5534  011450  C007  F009         	movff	SetDCEPWM3@dutycycle+1,??_SetDCEPWM3+1
  5535  011454  0E06               	movlw	6
  5536  011456                     u2475:
  5537  011456  90D8               	bcf	status,0,c
  5538  011458  3608               	rlcf	??_SetDCEPWM3,f,c
  5539  01145A  3609               	rlcf	??_SetDCEPWM3+1,f,c
  5540  01145C  2EE8               	decfsz	wreg,f,c
  5541  01145E  D7FB               	goto	u2475
  5542  011460  C008  F00A         	movff	??_SetDCEPWM3,SetDCEPWM3@DCycle
  5543  011464  C009  F00B         	movff	??_SetDCEPWM3+1,SetDCEPWM3@DCycle+1
  5544  011468  C00B  FF4A         	movff	SetDCEPWM3@DCycle+1,3914	;volatile
  5545  01146C  C00A  F008         	movff	SetDCEPWM3@DCycle,??_SetDCEPWM3
  5546  011470  90D8               	bcf	status,0,c
  5547  011472  3208               	rrcf	??_SetDCEPWM3,f,c
  5548  011474  90D8               	bcf	status,0,c
  5549  011476  3208               	rrcf	??_SetDCEPWM3,f,c
  5550  011478  0E30               	movlw	48
  5551  01147A  1608               	andwf	??_SetDCEPWM3,f,c
  5552  01147C  010F               	movlb	15	; () banked
  5553  01147E  5149               	movf	73,w,b	;volatile
  5554  011480  0BCF               	andlw	207
  5555  011482  1008               	iorwf	??_SetDCEPWM3,w,c
  5556  011484  6F49               	movwf	73,b	;volatile
  5557                           
  5558                           ; BSR set to: 15
  5559  011486  0012               	return	
  5560  011488                     __end_of_SetDCEPWM3:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           intcon2	equ	0xFF1
  5570                           intcon3	equ	0xFF0
  5571                           indf0	equ	0xFEF
  5572                           postinc0	equ	0xFEE
  5573                           fsr0h	equ	0xFEA
  5574                           fsr0l	equ	0xFE9
  5575                           wreg	equ	0xFE8
  5576                           indf1	equ	0xFE7
  5577                           postinc1	equ	0xFE6
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function _SetDCEPWM1 *****************
  5589 ;; Defined at:
  5590 ;;		line 32 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setdc.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5595 ;; Return value:  Size  Location     Type
  5596 ;;		None               void
  5597 ;; Registers used:
  5598 ;;		wreg, status,2, status,0
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/F
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5608 ;;Total ram usage:        6 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    3
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_motorDrive_init
  5615 ;;		_motorDrive_setSpeeds
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text27
  5620  011488                     __ptext27:
  5621                           	opt stack 0
  5622  011488                     _SetDCEPWM1:
  5623                           	opt stack 24
  5624                           
  5625                           ; BSR set to: 15
  5626                           ;incstack = 0
  5627  011488  C006  F008         	movff	SetDCEPWM1@dutycycle,??_SetDCEPWM1
  5628  01148C  C007  F009         	movff	SetDCEPWM1@dutycycle+1,??_SetDCEPWM1+1
  5629  011490  0E06               	movlw	6
  5630  011492                     u2465:
  5631  011492  90D8               	bcf	status,0,c
  5632  011494  3608               	rlcf	??_SetDCEPWM1,f,c
  5633  011496  3609               	rlcf	??_SetDCEPWM1+1,f,c
  5634  011498  2EE8               	decfsz	wreg,f,c
  5635  01149A  D7FB               	goto	u2465
  5636  01149C  C008  F00A         	movff	??_SetDCEPWM1,SetDCEPWM1@DCycle
  5637  0114A0  C009  F00B         	movff	??_SetDCEPWM1+1,SetDCEPWM1@DCycle+1
  5638  0114A4  C00B  FFBA         	movff	SetDCEPWM1@DCycle+1,4026	;volatile
  5639  0114A8  C00A  F008         	movff	SetDCEPWM1@DCycle,??_SetDCEPWM1
  5640  0114AC  90D8               	bcf	status,0,c
  5641  0114AE  3208               	rrcf	??_SetDCEPWM1,f,c
  5642  0114B0  90D8               	bcf	status,0,c
  5643  0114B2  3208               	rrcf	??_SetDCEPWM1,f,c
  5644  0114B4  0E30               	movlw	48
  5645  0114B6  1608               	andwf	??_SetDCEPWM1,f,c
  5646  0114B8  50B9               	movf	4025,w,c	;volatile
  5647  0114BA  0BCF               	andlw	207
  5648  0114BC  1008               	iorwf	??_SetDCEPWM1,w,c
  5649  0114BE  6EB9               	movwf	4025,c	;volatile
  5650  0114C0  0012               	return	
  5651  0114C2                     __end_of_SetDCEPWM1:
  5652                           	opt stack 0
  5653                           tblptru	equ	0xFF8
  5654                           tblptrh	equ	0xFF7
  5655                           tblptrl	equ	0xFF6
  5656                           tablat	equ	0xFF5
  5657                           prodh	equ	0xFF4
  5658                           prodl	equ	0xFF3
  5659                           intcon	equ	0xFF2
  5660                           intcon2	equ	0xFF1
  5661                           intcon3	equ	0xFF0
  5662                           indf0	equ	0xFEF
  5663                           postinc0	equ	0xFEE
  5664                           fsr0h	equ	0xFEA
  5665                           fsr0l	equ	0xFE9
  5666                           wreg	equ	0xFE8
  5667                           indf1	equ	0xFE7
  5668                           postinc1	equ	0xFE6
  5669                           postdec1	equ	0xFE5
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _PS2_readType *****************
  5680 ;; Defined at:
  5681 ;;		line 172 in file "PS2.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      unsigned char 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0
  5690 ;; Tracked objects:
  5691 ;;		On entry : F/0
  5692 ;;		On exit  : F/0
  5693 ;;		Unchanged: F/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5699 ;;Total ram usage:        0 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    3
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_RCMode
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text28
  5710  011624                     __ptext28:
  5711                           	opt stack 0
  5712  011624                     _PS2_readType:
  5713                           	opt stack 26
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;PS2.c: 174: if(controller_type == 0x03)
  5717                           
  5718                           ;incstack = 0
  5719  011624  5057               	movf	_controller_type,w,c	;volatile
  5720  011626  0A03               	xorlw	3
  5721  011628  E101               	bnz	l5267
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;PS2.c: 175: return 1;
  5725  01162A  0C01               	retlw	1
  5726  01162C                     l5267:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;PS2.c: 176: else if(controller_type == 0x01)
  5730  01162C  0457               	decf	_controller_type,w,c	;volatile
  5731  01162E  E101               	bnz	l5275
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;PS2.c: 177: return 2;
  5735  011630  0C02               	retlw	2
  5736  011632                     l5275:
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;PS2.c: 178: else if(controller_type == 0x0C)
  5740  011632  5057               	movf	_controller_type,w,c	;volatile
  5741  011634  0A0C               	xorlw	12
  5742  011636  E101               	bnz	l5281
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;PS2.c: 179: return 3;
  5746  011638  0C03               	retlw	3
  5747  01163A                     l5281:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;PS2.c: 181: return controller_type;
  5751  01163A  5057               	movf	_controller_type,w,c	;volatile
  5752                           
  5753                           ; BSR set to: 0
  5754  01163C  0012               	return	
  5755  01163E                     __end_of_PS2_readType:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           intcon2	equ	0xFF1
  5765                           intcon3	equ	0xFF0
  5766                           indf0	equ	0xFEF
  5767                           postinc0	equ	0xFEE
  5768                           fsr0h	equ	0xFEA
  5769                           fsr0l	equ	0xFE9
  5770                           wreg	equ	0xFE8
  5771                           indf1	equ	0xFE7
  5772                           postinc1	equ	0xFE6
  5773                           postdec1	equ	0xFE5
  5774                           fsr1h	equ	0xFE2
  5775                           fsr1l	equ	0xFE1
  5776                           indf2	equ	0xFDF
  5777                           postinc2	equ	0xFDE
  5778                           postdec2	equ	0xFDD
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function _PS2_init *****************
  5784 ;; Defined at:
  5785 ;;		line 14 in file "PS2.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  i               2   77[COMRAM] int 
  5790 ;;  y               2   75[COMRAM] int 
  5791 ;;  temp            9   66[COMRAM] unsigned char [9]
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      unsigned char 
  5794 ;; Registers used:
  5795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : F/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5802 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;Total ram usage:       13 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    8
  5808 ;; This function calls:
  5809 ;;		_PS2_readGamepad
  5810 ;;		_PS2_sendCommandString
  5811 ;;		_PS2_shiftInOut
  5812 ;;		_delay_us
  5813 ;; This function is called by:
  5814 ;;		_RCMode
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text29
  5819  010C28                     __ptext29:
  5820                           	opt stack 0
  5821  010C28                     _PS2_init:
  5822                           	opt stack 21
  5823                           
  5824                           ;PS2.c: 16: char temp[sizeof(type_read)];
  5825                           ;PS2.c: 18: TRISFbits.TRISF2 = 0;
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;incstack = 0
  5829  010C28  9497               	bcf	3991,2,c	;volatile
  5830                           
  5831                           ;PS2.c: 19: TRISFbits.TRISF3 = 1;
  5832  010C2A  8697               	bsf	3991,3,c	;volatile
  5833                           
  5834                           ;PS2.c: 20: TRISFbits.TRISF5 = 0;
  5835  010C2C  9A97               	bcf	3991,5,c	;volatile
  5836                           
  5837                           ;PS2.c: 21: TRISFbits.TRISF6 = 0;
  5838  010C2E  9C97               	bcf	3991,6,c	;volatile
  5839                           
  5840                           ;PS2.c: 24: PORTFbits.RF2 = 1;
  5841  010C30  8485               	bsf	3973,2,c	;volatile
  5842                           
  5843                           ;PS2.c: 25: PORTFbits.RF5 = 1;
  5844  010C32  8A85               	bsf	3973,5,c	;volatile
  5845                           
  5846                           ;PS2.c: 27: PS2_readGamepad();
  5847  010C34  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5848                           
  5849                           ;PS2.c: 28: PS2_readGamepad();
  5850  010C38  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5851                           
  5852                           ;PS2.c: 30: if(PS2data[1] != 0x41 && PS2data[1] != 0x73 && PS2data[1] != 0x79)
  5853  010C3C  0100               	movlb	0	; () banked
  5854  010C3E  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5855  010C40  0A41               	xorlw	65
  5856  010C42  E007               	bz	l5205
  5857                           
  5858                           ; BSR set to: 0
  5859  010C44  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5860  010C46  0A73               	xorlw	115
  5861  010C48  E004               	bz	l5205
  5862                           
  5863                           ; BSR set to: 0
  5864  010C4A  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5865  010C4C  0A79               	xorlw	121
  5866  010C4E  E001               	bz	l5205
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;PS2.c: 31: {
  5870                           ;PS2.c: 32: return 1;
  5871  010C50  0C01               	retlw	1
  5872  010C52                     l5205:
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;PS2.c: 33: }
  5876                           ;PS2.c: 36: read_delay = 1;
  5877  010C52  0E01               	movlw	1
  5878  010C54  6E59               	movwf	_read_delay,c	;volatile
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;PS2.c: 38: for(int y = 0; y <= 10; y++)
  5882  010C56  6A4C               	clrf	PS2_init@y,c
  5883  010C58  6A4D               	clrf	PS2_init@y+1,c
  5884  010C5A                     l5213:
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;PS2.c: 39: {
  5888                           ;PS2.c: 40: PS2_sendCommandString(enter_config, sizeof(enter_config));
  5889  010C5A  0E05               	movlw	5
  5890  010C5C  6E1A               	movwf	PS2_sendCommandString@len,c
  5891  010C5E  0EEA               	movlw	_enter_config& (0+255)
  5892  010C60  ECE5  F089         	call	_PS2_sendCommandString
  5893                           
  5894                           ;PS2.c: 43: delay_us(4);
  5895  010C64  D845               	call	PL24	;call to abstracted procedure
  5896  010C66  EC61  F08A         	call	_delay_us	;wreg free
  5897                           
  5898                           ;PS2.c: 45: PORTFbits.RF2 = 1;
  5899  010C6A  8485               	bsf	3973,2,c	;volatile
  5900                           
  5901                           ;PS2.c: 46: PORTFbits.RF5 = 1;
  5902  010C6C  8A85               	bsf	3973,5,c	;volatile
  5903                           
  5904                           ;PS2.c: 47: PORTFbits.RF6 = 0;
  5905  010C6E  9C85               	bcf	3973,6,c	;volatile
  5906                           
  5907                           ;PS2.c: 49: delay_us(4);
  5908  010C70  D83F               	call	PL24	;call to abstracted procedure
  5909  010C72  EC61  F08A         	call	_delay_us	;wreg free
  5910                           
  5911                           ;PS2.c: 51: for (int i = 0; i<9; i++)
  5912  010C76  6A4E               	clrf	PS2_init@i,c
  5913  010C78  6A4F               	clrf	PS2_init@i+1,c
  5914  010C7A                     l5231:
  5915                           
  5916                           ;PS2.c: 52: {
  5917                           ;PS2.c: 53: temp[i] = PS2_shiftInOut(type_read[i]);
  5918  010C7A  504E               	movf	PS2_init@i,w,c
  5919  010C7C  0F43               	addlw	low PS2_init@temp
  5920  010C7E  6ED9               	movwf	fsr2l,c
  5921  010C80  6ADA               	clrf	fsr2h,c
  5922  010C82  504E               	movf	PS2_init@i,w,c
  5923  010C84  0100               	movlb	0	; () banked
  5924  010C86  0FCF               	addlw	low _type_read	;volatile
  5925  010C88  6EE1               	movwf	fsr1l,c
  5926  010C8A  6AE2               	clrf	fsr1h,c
  5927  010C8C  50E7               	movf	indf1,w,c
  5928  010C8E  EC9C  F088         	call	_PS2_shiftInOut
  5929  010C92  6EDF               	movwf	indf2,c
  5930  010C94  4A4E               	infsnz	PS2_init@i,f,c
  5931  010C96  2A4F               	incf	PS2_init@i+1,f,c
  5932  010C98  504F               	movf	PS2_init@i+1,w,c
  5933  010C9A  0A80               	xorlw	128
  5934  010C9C  0F80               	addlw	-128
  5935  010C9E  0E09               	movlw	9
  5936  010CA0  B4D8               	btfsc	status,2,c
  5937  010CA2  5C4E               	subwf	PS2_init@i,w,c
  5938  010CA4  E3EA               	bnc	l5231
  5939                           
  5940                           ;PS2.c: 54: }
  5941                           ;PS2.c: 56: PORTFbits.RF6 = 1;
  5942  010CA6  8C85               	bsf	3973,6,c	;volatile
  5943                           
  5944                           ;PS2.c: 58: controller_type = temp[3];
  5945  010CA8  C046  F057         	movff	PS2_init@temp+3,_controller_type	;volatile
  5946                           
  5947                           ;PS2.c: 60: PS2_sendCommandString(set_mode, sizeof(set_mode));
  5948  010CAC  0E09               	movlw	9
  5949  010CAE  6E1A               	movwf	PS2_sendCommandString@len,c
  5950  010CB0  0100               	movlb	0	; () banked
  5951  010CB2  0EE1               	movlw	_set_mode& (0+255)
  5952  010CB4  ECE5  F089         	call	_PS2_sendCommandString
  5953                           
  5954                           ;PS2.c: 62: PS2_sendCommandString(exit_config, sizeof(exit_config));
  5955  010CB8  0E09               	movlw	9
  5956  010CBA  6E1A               	movwf	PS2_sendCommandString@len,c
  5957  010CBC  0100               	movlb	0	; () banked
  5958  010CBE  0ED8               	movlw	_exit_config& (0+255)
  5959  010CC0  ECE5  F089         	call	_PS2_sendCommandString
  5960                           
  5961                           ;PS2.c: 64: PS2_readGamepad();
  5962  010CC4  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5963                           
  5964                           ;PS2.c: 66: if(PS2data[1] == 0x73)
  5965  010CC8  0100               	movlb	0	; () banked
  5966  010CCA  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5967  010CCC  0A73               	xorlw	115
  5968  010CCE  E00F               	bz	l5255
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;PS2.c: 69: if(y == 10)
  5972  010CD0  504C               	movf	PS2_init@y,w,c
  5973  010CD2  0A0A               	xorlw	10
  5974  010CD4  104D               	iorwf	PS2_init@y+1,w,c
  5975  010CD6  E101               	bnz	l5251
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;PS2.c: 70: {
  5979                           ;PS2.c: 71: return 2;
  5980  010CD8  0C02               	retlw	2
  5981  010CDA                     l5251:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;PS2.c: 72: }
  5985                           ;PS2.c: 73: read_delay += 1;
  5986  010CDA  2A59               	incf	_read_delay,f,c	;volatile
  5987  010CDC  4A4C               	infsnz	PS2_init@y,f,c
  5988  010CDE  2A4D               	incf	PS2_init@y+1,f,c
  5989                           
  5990                           ; BSR set to: 0
  5991  010CE0  504D               	movf	PS2_init@y+1,w,c
  5992  010CE2  0A80               	xorlw	128
  5993  010CE4  0F80               	addlw	-128
  5994  010CE6  0E0B               	movlw	11
  5995  010CE8  B4D8               	btfsc	status,2,c
  5996  010CEA  5C4C               	subwf	PS2_init@y,w,c
  5997  010CEC  E3B6               	bnc	l5213
  5998  010CEE                     l5255:
  5999                           
  6000                           ; BSR set to: 0
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;PS2.c: 74: }
  6004                           ;PS2.c: 75: return 0;
  6005  010CEE  0C00               	retlw	0
  6006  010CF0                     __end_of_PS2_init:
  6007                           	opt stack 0
  6008  010CF0                     PL24:
  6009                           	opt stack 21
  6010  010CF0  0E04               	movlw	4
  6011  010CF2  6E06               	movwf	delay_us@x,c
  6012  010CF4  6A07               	clrf	delay_us@x+1,c
  6013  010CF6  6A08               	clrf	delay_us@x+2,c
  6014  010CF8  6A09               	clrf	delay_us@x+3,c
  6015  010CFA  0C00               	retlw	0
  6016  010CFC                     __end_ofPL24:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           intcon2	equ	0xFF1
  6026                           intcon3	equ	0xFF0
  6027                           indf0	equ	0xFEF
  6028                           postinc0	equ	0xFEE
  6029                           fsr0h	equ	0xFEA
  6030                           fsr0l	equ	0xFE9
  6031                           wreg	equ	0xFE8
  6032                           indf1	equ	0xFE7
  6033                           postinc1	equ	0xFE6
  6034                           postdec1	equ	0xFE5
  6035                           fsr1h	equ	0xFE2
  6036                           fsr1l	equ	0xFE1
  6037                           indf2	equ	0xFDF
  6038                           postinc2	equ	0xFDE
  6039                           postdec2	equ	0xFDD
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _PS2_readGamepad *****************
  6045 ;; Defined at:
  6046 ;;		line 78 in file "PS2.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;		None
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  i               2   64[COMRAM] int 
  6051 ;;  i               2   62[COMRAM] int 
  6052 ;;  dword2         12   37[COMRAM] unsigned char [12]
  6053 ;;  dword           9   49[COMRAM] unsigned char [9]
  6054 ;;  temp            4   58[COMRAM] long 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;		None               void
  6057 ;; Registers used:
  6058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6065 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6066 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6067 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;Total ram usage:       34 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    7
  6071 ;; This function calls:
  6072 ;;		_PS2_reconfig
  6073 ;;		_PS2_shiftInOut
  6074 ;;		_delay_ms
  6075 ;;		_delay_us
  6076 ;;		_millis
  6077 ;; This function is called by:
  6078 ;;		_RCMode
  6079 ;;		_PS2_init
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text30
  6084  0108BE                     __ptext30:
  6085                           	opt stack 0
  6086  0108BE                     _PS2_readGamepad:
  6087                           	opt stack 22
  6088                           
  6089                           ;PS2.c: 80: long temp = millis() - last_read;
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;incstack = 0
  6093  0108BE  EC31  F08B         	call	_millis	;wreg free
  6094  0108C2  C006  F021         	movff	?_millis,??_PS2_readGamepad
  6095  0108C6  C007  F022         	movff	?_millis+1,??_PS2_readGamepad+1
  6096  0108CA  C008  F023         	movff	?_millis+2,??_PS2_readGamepad+2
  6097  0108CE  C009  F024         	movff	?_millis+3,??_PS2_readGamepad+3
  6098  0108D2  0100               	movlb	0	; () banked
  6099  0108D4  51AD               	movf	_last_read& (0+255),w,b	;volatile
  6100  0108D6  5C21               	subwf	??_PS2_readGamepad,w,c
  6101  0108D8  6E3B               	movwf	PS2_readGamepad@temp,c
  6102  0108DA  51AE               	movf	(_last_read+1)& (0+255),w,b	;volatile
  6103  0108DC  5822               	subwfb	??_PS2_readGamepad+1,w,c
  6104  0108DE  6E3C               	movwf	PS2_readGamepad@temp+1,c
  6105  0108E0  51AF               	movf	(_last_read+2)& (0+255),w,b	;volatile
  6106  0108E2  5823               	subwfb	??_PS2_readGamepad+2,w,c
  6107  0108E4  6E3D               	movwf	PS2_readGamepad@temp+2,c
  6108  0108E6  51B0               	movf	(_last_read+3)& (0+255),w,b	;volatile
  6109  0108E8  5824               	subwfb	??_PS2_readGamepad+3,w,c
  6110  0108EA  6E3E               	movwf	PS2_readGamepad@temp+3,c
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;PS2.c: 82: if (temp > 1500)
  6114  0108EC  503E               	movf	PS2_readGamepad@temp+3,w,c
  6115  0108EE  0A80               	xorlw	128
  6116  0108F0  0F80               	addlw	128
  6117  0108F2  E108               	bnz	u2705
  6118  0108F4  0E00               	movlw	0
  6119  0108F6  5C3D               	subwf	PS2_readGamepad@temp+2,w,c
  6120  0108F8  E105               	bnz	u2705
  6121  0108FA  0E05               	movlw	5
  6122  0108FC  5C3C               	subwf	PS2_readGamepad@temp+1,w,c
  6123  0108FE  E102               	bnz	u2705
  6124  010900  0EDD               	movlw	221
  6125  010902  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6126  010904                     u2705:
  6127  010904  B0D8               	btfsc	status,0,c
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;PS2.c: 83: {
  6131                           ;PS2.c: 84: PS2_reconfig();
  6132  010906  ECF3  F08A         	call	_PS2_reconfig	;wreg free
  6133                           
  6134                           ;PS2.c: 85: }
  6135                           ;PS2.c: 87: if(temp < read_delay)
  6136  01090A  C059  F021         	movff	_read_delay,??_PS2_readGamepad	;volatile
  6137  01090E  6A22               	clrf	(??_PS2_readGamepad+1)& (0+255),c
  6138  010910  6A23               	clrf	(??_PS2_readGamepad+2)& (0+255),c
  6139  010912  6A24               	clrf	(??_PS2_readGamepad+3)& (0+255),c
  6140  010914  503E               	movf	PS2_readGamepad@temp+3,w,c
  6141  010916  0A80               	xorlw	128
  6142  010918  6E25               	movwf	(??_PS2_readGamepad+4)& (0+255),c
  6143  01091A  5021               	movf	??_PS2_readGamepad,w,c
  6144  01091C  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6145  01091E  5022               	movf	??_PS2_readGamepad+1,w,c
  6146  010920  583C               	subwfb	PS2_readGamepad@temp+1,w,c
  6147  010922  5023               	movf	??_PS2_readGamepad+2,w,c
  6148  010924  583D               	subwfb	PS2_readGamepad@temp+2,w,c
  6149  010926  5024               	movf	??_PS2_readGamepad+3,w,c
  6150  010928  0A80               	xorlw	128
  6151  01092A  5825               	subwfb	(??_PS2_readGamepad+4)& (0+255),w,c
  6152  01092C  E20E               	bc	l4765
  6153                           
  6154                           ;PS2.c: 88: {
  6155                           ;PS2.c: 89: delay_ms(read_delay - temp);
  6156  01092E  503B               	movf	PS2_readGamepad@temp,w,c
  6157  010930  5C59               	subwf	_read_delay,w,c	;volatile
  6158  010932  6E0A               	movwf	delay_ms@x,c
  6159  010934  503C               	movf	PS2_readGamepad@temp+1,w,c
  6160  010936  6A0B               	clrf	delay_ms@x+1,c
  6161  010938  5A0B               	subwfb	delay_ms@x+1,f,c
  6162  01093A  503D               	movf	PS2_readGamepad@temp+2,w,c
  6163  01093C  6A0C               	clrf	delay_ms@x+2,c
  6164  01093E  5A0C               	subwfb	delay_ms@x+2,f,c
  6165  010940  503E               	movf	PS2_readGamepad@temp+3,w,c
  6166  010942  6A0D               	clrf	delay_ms@x+3,c
  6167  010944  5A0D               	subwfb	delay_ms@x+3,f,c
  6168  010946  EC95  F089         	call	_delay_ms	;wreg free
  6169  01094A                     l4765:
  6170                           
  6171                           ;PS2.c: 90: }
  6172                           ;PS2.c: 92: last_buttons = buttons;
  6173  01094A  C0BD  F0BF         	movff	_buttons,_last_buttons	;volatile
  6174  01094E  C0BE  F0C0         	movff	_buttons+1,_last_buttons+1	;volatile
  6175                           
  6176                           ;PS2.c: 94: PORTFbits.RF2 = 1;
  6177  010952  8485               	bsf	3973,2,c	;volatile
  6178                           
  6179                           ;PS2.c: 95: PORTFbits.RF5 = 1;
  6180  010954  8A85               	bsf	3973,5,c	;volatile
  6181                           
  6182                           ;PS2.c: 96: PORTFbits.RF6 = 0;
  6183  010956  9C85               	bcf	3973,6,c	;volatile
  6184                           
  6185                           ;PS2.c: 98: delay_us(4);
  6186  010958  EC78  F086         	call	PL24	;call to abstracted procedure
  6187  01095C  EC61  F08A         	call	_delay_us	;wreg free
  6188                           
  6189                           ;PS2.c: 101: char dword[9] = {0x01,0x42,0,0,0x00,0,0,0,0};
  6190  010960  EE20  F0C6         	lfsr	2,PS2_readGamepad@F16091
  6191  010964  EE10  F032         	lfsr	1,PS2_readGamepad@dword
  6192  010968  0E09               	movlw	9
  6193  01096A                     u2721:
  6194  01096A  CFDE FFE6          	movff	postinc2,postinc1
  6195  01096E  2EE8               	decfsz	wreg,f,c
  6196  010970  D7FC               	goto	u2721
  6197                           
  6198                           ;PS2.c: 102: char dword2[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  6199  010972  EE20  F026         	lfsr	2,PS2_readGamepad@dword2
  6200  010976  0E0C               	movlw	12
  6201  010978                     u2731:
  6202  010978  6ADE               	clrf	postinc2,c
  6203  01097A  2EE8               	decfsz	wreg,f,c
  6204  01097C  D7FD               	goto	u2731
  6205                           
  6206                           ;PS2.c: 105: for (int i = 0; i<9; i++)
  6207  01097E  6A3F               	clrf	PS2_readGamepad@i,c
  6208  010980  6A40               	clrf	PS2_readGamepad@i+1,c
  6209  010982                     l4783:
  6210                           
  6211                           ;PS2.c: 106: {
  6212                           ;PS2.c: 107: PS2data[i] = PS2_shiftInOut(dword[i]);
  6213  010982  503F               	movf	PS2_readGamepad@i,w,c
  6214  010984  0100               	movlb	0	; () banked
  6215  010986  0F98               	addlw	low _PS2data	;volatile
  6216  010988  6ED9               	movwf	fsr2l,c
  6217  01098A  6ADA               	clrf	fsr2h,c
  6218  01098C  503F               	movf	PS2_readGamepad@i,w,c
  6219  01098E  0F32               	addlw	low PS2_readGamepad@dword
  6220  010990  6EE1               	movwf	fsr1l,c
  6221  010992  6AE2               	clrf	fsr1h,c
  6222  010994  50E7               	movf	indf1,w,c
  6223  010996  EC9C  F088         	call	_PS2_shiftInOut
  6224  01099A  6EDF               	movwf	indf2,c
  6225  01099C  4A3F               	infsnz	PS2_readGamepad@i,f,c
  6226  01099E  2A40               	incf	PS2_readGamepad@i+1,f,c
  6227  0109A0  5040               	movf	PS2_readGamepad@i+1,w,c
  6228  0109A2  0A80               	xorlw	128
  6229  0109A4  0F80               	addlw	-128
  6230  0109A6  0E09               	movlw	9
  6231  0109A8  B4D8               	btfsc	status,2,c
  6232  0109AA  5C3F               	subwf	PS2_readGamepad@i,w,c
  6233  0109AC  E3EA               	bnc	l4783
  6234                           
  6235                           ;PS2.c: 108: }
  6236                           ;PS2.c: 110: if(PS2data[1] == 0x79)
  6237  0109AE  0100               	movlb	0	; () banked
  6238  0109B0  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6239  0109B2  0A79               	xorlw	121
  6240  0109B4  E118               	bnz	l916
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;PS2.c: 111: {
  6244                           ;PS2.c: 112: for (int i = 0; i<12; i++)
  6245  0109B6  6A41               	clrf	PS2_readGamepad@i_2534,c
  6246  0109B8  6A42               	clrf	PS2_readGamepad@i_2534+1,c
  6247  0109BA                     l4797:
  6248                           
  6249                           ;PS2.c: 113: {
  6250                           ;PS2.c: 114: PS2data[i+9] = PS2_shiftInOut(dword2[i]);
  6251  0109BA  5041               	movf	PS2_readGamepad@i_2534,w,c
  6252  0109BC  0100               	movlb	0	; () banked
  6253  0109BE  0FA1               	addlw	low (_PS2data+9)	;volatile
  6254  0109C0  6ED9               	movwf	fsr2l,c
  6255  0109C2  6ADA               	clrf	fsr2h,c
  6256  0109C4  5041               	movf	PS2_readGamepad@i_2534,w,c
  6257  0109C6  0F26               	addlw	low PS2_readGamepad@dword2
  6258  0109C8  6EE1               	movwf	fsr1l,c
  6259  0109CA  6AE2               	clrf	fsr1h,c
  6260  0109CC  50E7               	movf	indf1,w,c
  6261  0109CE  EC9C  F088         	call	_PS2_shiftInOut
  6262  0109D2  6EDF               	movwf	indf2,c
  6263  0109D4  4A41               	infsnz	PS2_readGamepad@i_2534,f,c
  6264  0109D6  2A42               	incf	PS2_readGamepad@i_2534+1,f,c
  6265  0109D8  5042               	movf	PS2_readGamepad@i_2534+1,w,c
  6266  0109DA  0A80               	xorlw	128
  6267  0109DC  0F80               	addlw	-128
  6268  0109DE  0E0C               	movlw	12
  6269  0109E0  B4D8               	btfsc	status,2,c
  6270  0109E2  5C41               	subwf	PS2_readGamepad@i_2534,w,c
  6271  0109E4  E3EA               	bnc	l4797
  6272  0109E6                     l916:
  6273                           
  6274                           ;PS2.c: 115: }
  6275                           ;PS2.c: 116: }
  6276                           ;PS2.c: 118: PORTFbits.RF6 = 1;
  6277  0109E6  8C85               	bsf	3973,6,c	;volatile
  6278                           
  6279                           ;PS2.c: 120: buttons = *(unsigned int*)(PS2data+3);
  6280  0109E8  0100               	movlb	0	; () banked
  6281  0109EA  EE20  F09B         	lfsr	2,_PS2data+3	;volatile
  6282  0109EE  CFDE F0BD          	movff	postinc2,_buttons	;volatile
  6283  0109F2  CFDD F0BE          	movff	postdec2,_buttons+1	;volatile
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;PS2.c: 121: last_read = millis();
  6287  0109F6  EC31  F08B         	call	_millis	;wreg free
  6288  0109FA  C006  F0AD         	movff	?_millis,_last_read	;volatile
  6289  0109FE  C007  F0AE         	movff	?_millis+1,_last_read+1	;volatile
  6290  010A02  C008  F0AF         	movff	?_millis+2,_last_read+2	;volatile
  6291  010A06  C009  F0B0         	movff	?_millis+3,_last_read+3	;volatile
  6292  010A0A  0012               	return	
  6293  010A0C                     __end_of_PS2_readGamepad:
  6294                           	opt stack 0
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           intcon2	equ	0xFF1
  6303                           intcon3	equ	0xFF0
  6304                           indf0	equ	0xFEF
  6305                           postinc0	equ	0xFEE
  6306                           fsr0h	equ	0xFEA
  6307                           fsr0l	equ	0xFE9
  6308                           wreg	equ	0xFE8
  6309                           indf1	equ	0xFE7
  6310                           postinc1	equ	0xFE6
  6311                           postdec1	equ	0xFE5
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _PS2_reconfig *****************
  6322 ;; Defined at:
  6323 ;;		line 124 in file "PS2.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;		None
  6328 ;; Return value:  Size  Location     Type
  6329 ;;		None               void
  6330 ;; Registers used:
  6331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : F/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6341 ;;Total ram usage:        0 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    6
  6344 ;; This function calls:
  6345 ;;		_PS2_sendCommandString
  6346 ;; This function is called by:
  6347 ;;		_PS2_readGamepad
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text31
  6352  0115E6                     __ptext31:
  6353                           	opt stack 0
  6354  0115E6                     _PS2_reconfig:
  6355                           	opt stack 22
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;PS2.c: 126: PS2_sendCommandString(enter_config, sizeof(enter_config));
  6359                           
  6360                           ;incstack = 0
  6361  0115E6  0E05               	movlw	5
  6362  0115E8  6E1A               	movwf	PS2_sendCommandString@len,c
  6363  0115EA  0EEA               	movlw	_enter_config& (0+255)
  6364  0115EC  ECE5  F089         	call	_PS2_sendCommandString
  6365                           
  6366                           ;PS2.c: 127: PS2_sendCommandString(set_mode, sizeof(set_mode));
  6367  0115F0  0E09               	movlw	9
  6368  0115F2  6E1A               	movwf	PS2_sendCommandString@len,c
  6369  0115F4  0100               	movlb	0	; () banked
  6370  0115F6  0EE1               	movlw	_set_mode& (0+255)
  6371  0115F8  ECE5  F089         	call	_PS2_sendCommandString
  6372                           
  6373                           ;PS2.c: 128: PS2_sendCommandString(exit_config, sizeof(exit_config));
  6374  0115FC  0E09               	movlw	9
  6375  0115FE  6E1A               	movwf	PS2_sendCommandString@len,c
  6376  011600  0100               	movlb	0	; () banked
  6377  011602  0ED8               	movlw	_exit_config& (0+255)
  6378  011604  EFE5  F089         	goto	_PS2_sendCommandString
  6379  011608                     __end_of_PS2_reconfig:
  6380                           	opt stack 0
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           intcon2	equ	0xFF1
  6389                           intcon3	equ	0xFF0
  6390                           indf0	equ	0xFEF
  6391                           postinc0	equ	0xFEE
  6392                           fsr0h	equ	0xFEA
  6393                           fsr0l	equ	0xFE9
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           postinc1	equ	0xFE6
  6397                           postdec1	equ	0xFE5
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _PS2_sendCommandString *****************
  6408 ;; Defined at:
  6409 ;;		line 131 in file "PS2.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  string          1    wreg     PTR unsigned char 
  6412 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6413 ;;  len             1   25[COMRAM] unsigned char 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  string          1   31[COMRAM] PTR unsigned char 
  6416 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6417 ;;  y               2   29[COMRAM] int 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;		None               void
  6420 ;; Registers used:
  6421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : F/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6427 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6428 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;Total ram usage:        7 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    5
  6434 ;; This function calls:
  6435 ;;		_PS2_shiftInOut
  6436 ;;		_delay_ms
  6437 ;; This function is called by:
  6438 ;;		_PS2_init
  6439 ;;		_PS2_reconfig
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text32
  6444  0113CA                     __ptext32:
  6445                           	opt stack 0
  6446  0113CA                     _PS2_sendCommandString:
  6447                           	opt stack 22
  6448                           
  6449                           ;incstack = 0
  6450                           ;PS2_sendCommandString@string stored from wreg
  6451  0113CA  6E20               	movwf	PS2_sendCommandString@string,c
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;PS2.c: 133: PORTFbits.RF6 = 0;
  6455  0113CC  9C85               	bcf	3973,6,c	;volatile
  6456                           
  6457                           ;PS2.c: 134: for (int y=0; y < len; y++)
  6458  0113CE  6A1E               	clrf	PS2_sendCommandString@y,c
  6459  0113D0  6A1F               	clrf	PS2_sendCommandString@y+1,c
  6460  0113D2  D009               	goto	l4455
  6461  0113D4                     l4451:
  6462                           
  6463                           ;PS2.c: 135: {
  6464                           ;PS2.c: 136: PS2_shiftInOut(string[y]);
  6465  0113D4  5020               	movf	PS2_sendCommandString@string,w,c
  6466  0113D6  241E               	addwf	PS2_sendCommandString@y,w,c
  6467  0113D8  6ED9               	movwf	fsr2l,c
  6468  0113DA  6ADA               	clrf	fsr2h,c
  6469  0113DC  50DF               	movf	indf2,w,c
  6470  0113DE  EC9C  F088         	call	_PS2_shiftInOut
  6471  0113E2  4A1E               	infsnz	PS2_sendCommandString@y,f,c
  6472  0113E4  2A1F               	incf	PS2_sendCommandString@y+1,f,c
  6473  0113E6                     l4455:
  6474  0113E6  501A               	movf	PS2_sendCommandString@len,w,c
  6475  0113E8  6E1B               	movwf	??_PS2_sendCommandString& (0+255),c
  6476  0113EA  6A1C               	clrf	(??_PS2_sendCommandString+1)& (0+255),c
  6477  0113EC  501F               	movf	PS2_sendCommandString@y+1,w,c
  6478  0113EE  0A80               	xorlw	128
  6479  0113F0  6E1D               	movwf	(??_PS2_sendCommandString+2)& (0+255),c
  6480  0113F2  501B               	movf	??_PS2_sendCommandString,w,c
  6481  0113F4  5C1E               	subwf	PS2_sendCommandString@y,w,c
  6482  0113F6  501C               	movf	??_PS2_sendCommandString+1,w,c
  6483  0113F8  0A80               	xorlw	128
  6484  0113FA  581D               	subwfb	(??_PS2_sendCommandString+2)& (0+255),w,c
  6485  0113FC  E3EB               	bnc	l4451
  6486                           
  6487                           ;PS2.c: 137: }
  6488                           ;PS2.c: 139: PORTFbits.RF6 = 1;
  6489  0113FE  8C85               	bsf	3973,6,c	;volatile
  6490                           
  6491                           ;PS2.c: 140: delay_ms(read_delay);
  6492  011400  5059               	movf	_read_delay,w,c	;volatile
  6493  011402  6E0A               	movwf	delay_ms@x,c
  6494  011404  6A0B               	clrf	delay_ms@x+1,c
  6495  011406  6A0C               	clrf	delay_ms@x+2,c
  6496  011408  6A0D               	clrf	delay_ms@x+3,c
  6497  01140A  EF95  F089         	goto	_delay_ms	;wreg free
  6498  01140E                     __end_of_PS2_sendCommandString:
  6499                           	opt stack 0
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           intcon2	equ	0xFF1
  6508                           intcon3	equ	0xFF0
  6509                           indf0	equ	0xFEF
  6510                           postinc0	equ	0xFEE
  6511                           fsr0h	equ	0xFEA
  6512                           fsr0l	equ	0xFE9
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           postinc1	equ	0xFE6
  6516                           postdec1	equ	0xFE5
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _PS2_shiftInOut *****************
  6527 ;; Defined at:
  6528 ;;		line 143 in file "PS2.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  byte            1    wreg     unsigned char 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  byte            1   11[COMRAM] unsigned char 
  6533 ;;  i               1   13[COMRAM] unsigned char 
  6534 ;;  tmp             1   12[COMRAM] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      unsigned char 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6545 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6547 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6548 ;;Total ram usage:        5 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    4
  6551 ;; This function calls:
  6552 ;;		_delay_us
  6553 ;; This function is called by:
  6554 ;;		_PS2_init
  6555 ;;		_PS2_readGamepad
  6556 ;;		_PS2_sendCommandString
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text33
  6561  011138                     __ptext33:
  6562                           	opt stack 0
  6563  011138                     _PS2_shiftInOut:
  6564                           	opt stack 24
  6565                           
  6566                           ;incstack = 0
  6567                           ;PS2_shiftInOut@byte stored from wreg
  6568  011138  6E0C               	movwf	PS2_shiftInOut@byte,c
  6569                           
  6570                           ;PS2.c: 145: unsigned char tmp = 0;
  6571  01113A  6A0D               	clrf	PS2_shiftInOut@tmp,c
  6572                           
  6573                           ;PS2.c: 146: for(unsigned char i = 0; i < 8; i++)
  6574  01113C  6A0E               	clrf	PS2_shiftInOut@i,c
  6575  01113E                     l4429:
  6576                           
  6577                           ;PS2.c: 147: {
  6578                           ;PS2.c: 148: if((byte & (1<<i)))
  6579  01113E  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6580  011142  0E01               	movlw	1
  6581  011144  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6582  011146  2A0A               	incf	??_PS2_shiftInOut,f,c
  6583  011148  D002               	goto	u2214
  6584  01114A                     u2215:
  6585  01114A  90D8               	bcf	status,0,c
  6586  01114C  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6587  01114E                     u2214:
  6588  01114E  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6589  011150  D7FC               	goto	u2215
  6590  011152  500B               	movf	??_PS2_shiftInOut+1,w,c
  6591  011154  140C               	andwf	PS2_shiftInOut@byte,w,c
  6592  011156  E002               	bz	l933
  6593                           
  6594                           ;PS2.c: 149: {
  6595                           ;PS2.c: 150: PORTFbits.RF2 = 1;
  6596  011158  8485               	bsf	3973,2,c	;volatile
  6597                           
  6598                           ;PS2.c: 151: }
  6599  01115A  D001               	goto	l934
  6600  01115C                     l933:
  6601                           
  6602                           ;PS2.c: 152: else
  6603                           ;PS2.c: 153: {
  6604                           ;PS2.c: 154: PORTFbits.RF2 = 0;
  6605  01115C  9485               	bcf	3973,2,c	;volatile
  6606  01115E                     l934:
  6607                           
  6608                           ;PS2.c: 155: }
  6609                           ;PS2.c: 157: PORTFbits.RF5 = 0;
  6610  01115E  9A85               	bcf	3973,5,c	;volatile
  6611                           
  6612                           ;PS2.c: 158: delay_us(5);
  6613  011160  0E05               	movlw	5
  6614  011162  6E06               	movwf	delay_us@x,c
  6615  011164  0E00               	movlw	0
  6616  011166  6A07               	clrf	delay_us@x+1,c
  6617  011168  6A08               	clrf	delay_us@x+2,c
  6618  01116A  6A09               	clrf	delay_us@x+3,c
  6619  01116C  EC61  F08A         	call	_delay_us	;wreg free
  6620                           
  6621                           ;PS2.c: 160: if(PORTFbits.RF3 == 1)
  6622  011170  A685               	btfss	3973,3,c	;volatile
  6623  011172  D00C               	goto	l4439
  6624                           
  6625                           ;PS2.c: 161: {
  6626                           ;PS2.c: 162: tmp |= (0x1 << i);;
  6627  011174  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6628  011178  0E01               	movlw	1
  6629  01117A  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6630  01117C  2A0A               	incf	??_PS2_shiftInOut,f,c
  6631  01117E  D002               	goto	u2244
  6632  011180                     u2245:
  6633  011180  90D8               	bcf	status,0,c
  6634  011182  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6635  011184                     u2244:
  6636  011184  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6637  011186  D7FC               	goto	u2245
  6638  011188  500B               	movf	??_PS2_shiftInOut+1,w,c
  6639  01118A  120D               	iorwf	PS2_shiftInOut@tmp,f,c
  6640  01118C                     l4439:
  6641                           
  6642                           ;PS2.c: 163: }
  6643                           ;PS2.c: 165: PORTFbits.RF5 = 1;
  6644  01118C  8A85               	bsf	3973,5,c	;volatile
  6645  01118E  2A0E               	incf	PS2_shiftInOut@i,f,c
  6646  011190  0E07               	movlw	7
  6647  011192  640E               	cpfsgt	PS2_shiftInOut@i,c
  6648  011194  D7D4               	goto	l4429
  6649                           
  6650                           ;PS2.c: 166: }
  6651                           ;PS2.c: 167: PORTFbits.RF2 = 1;
  6652  011196  8485               	bsf	3973,2,c	;volatile
  6653                           
  6654                           ;PS2.c: 168: delay_us(4);
  6655  011198  EC78  F086         	call	PL24	;call to abstracted procedure
  6656  01119C  EC61  F08A         	call	_delay_us	;wreg free
  6657                           
  6658                           ;PS2.c: 169: return tmp;
  6659  0111A0  500D               	movf	PS2_shiftInOut@tmp,w,c
  6660  0111A2  0012               	return	
  6661  0111A4                     __end_of_PS2_shiftInOut:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon2	equ	0xFF1
  6671                           intcon3	equ	0xFF0
  6672                           indf0	equ	0xFEF
  6673                           postinc0	equ	0xFEE
  6674                           fsr0h	equ	0xFEA
  6675                           fsr0l	equ	0xFE9
  6676                           wreg	equ	0xFE8
  6677                           indf1	equ	0xFE7
  6678                           postinc1	equ	0xFE6
  6679                           postdec1	equ	0xFE5
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _PS2_analog *****************
  6690 ;; Defined at:
  6691 ;;		line 242 in file "PS2.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  button          1    wreg     unsigned char 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  button          1    5[COMRAM] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      unsigned char 
  6698 ;; Registers used:
  6699 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : F/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6709 ;;Total ram usage:        1 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    3
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_RCMode
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text34
  6720  011674                     __ptext34:
  6721                           	opt stack 0
  6722  011674                     _PS2_analog:
  6723                           	opt stack 26
  6724                           
  6725                           ;incstack = 0
  6726                           ;PS2_analog@button stored from wreg
  6727  011674  6E06               	movwf	PS2_analog@button,c
  6728                           
  6729                           ;PS2.c: 244: return PS2data[button];
  6730  011676  5006               	movf	PS2_analog@button,w,c
  6731  011678  0100               	movlb	0	; () banked
  6732  01167A  0F98               	addlw	low _PS2data	;volatile
  6733  01167C  6ED9               	movwf	fsr2l,c
  6734  01167E  6ADA               	clrf	fsr2h,c
  6735  011680  50DF               	movf	indf2,w,c
  6736                           
  6737                           ; BSR set to: 0
  6738  011682  0012               	return	
  6739  011684                     __end_of_PS2_analog:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           intcon	equ	0xFF2
  6748                           intcon2	equ	0xFF1
  6749                           intcon3	equ	0xFF0
  6750                           indf0	equ	0xFEF
  6751                           postinc0	equ	0xFEE
  6752                           fsr0h	equ	0xFEA
  6753                           fsr0l	equ	0xFE9
  6754                           wreg	equ	0xFE8
  6755                           indf1	equ	0xFE7
  6756                           postinc1	equ	0xFE6
  6757                           postdec1	equ	0xFE5
  6758                           fsr1h	equ	0xFE2
  6759                           fsr1l	equ	0xFE1
  6760                           indf2	equ	0xFDF
  6761                           postinc2	equ	0xFDE
  6762                           postdec2	equ	0xFDD
  6763                           fsr2h	equ	0xFDA
  6764                           fsr2l	equ	0xFD9
  6765                           status	equ	0xFD8
  6766                           
  6767 ;; *************** function _LCD_printString *****************
  6768 ;; Defined at:
  6769 ;;		line 312 in file "LCD.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  x               1    wreg     unsigned char 
  6772 ;;  y               1   33[COMRAM] unsigned char 
  6773 ;;  input           2   34[COMRAM] PTR unsigned char 
  6774 ;;		 -> STR_22(7), STR_21(13), STR_14(17), STR_13(15), 
  6775 ;;		 -> STR_12(18), STR_11(16), STR_10(15), STR_9(17), 
  6776 ;;		 -> STR_8(15), STR_7(18), STR_6(17), STR_5(16), 
  6777 ;;		 -> STR_4(18), STR_3(18), LCD_printBin@string(9), LCD_printVal@temp(3), 
  6778 ;;		 -> LCD_printChar@string(2), 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  x               1   40[BANK0 ] unsigned char 
  6781 ;;  tempString     20    0[BANK0 ] unsigned char [20]
  6782 ;;  val             2   41[BANK0 ] int 
  6783 ;;  tempString      2   43[BANK0 ] unsigned char [2]
  6784 ;;  i               2   48[BANK0 ] int 
  6785 ;;  i               2   46[BANK0 ] int 
  6786 ;;  string         20   20[BANK0 ] unsigned char [20]
  6787 ;;  aptr            1   45[BANK0 ] PTR void [1]
  6788 ;;		 -> ?_LCD_printString(0), 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : F/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6798 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6799 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Totals:         9      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;Total ram usage:       59 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    6
  6805 ;; This function calls:
  6806 ;;		_LCD_placeCursor
  6807 ;;		_delay_ms
  6808 ;;		_delay_us
  6809 ;;		_sprintf
  6810 ;;		_strcat
  6811 ;; This function is called by:
  6812 ;;		_selfTest
  6813 ;;		_wanderMode
  6814 ;;		_competitionMode
  6815 ;;		_RCMode
  6816 ;;		_main
  6817 ;;		_fft_init
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text35
  6822  010000                     __ptext35:
  6823                           	opt stack 0
  6824  010000                     _LCD_printString:
  6825                           	opt stack 23
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;incstack = 0
  6829                           ;LCD_printString@x stored from wreg
  6830  010000  0100               	movlb	0	; () banked
  6831  010002  6F88               	movwf	LCD_printString@x& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;LCD.c: 314: char string[20] = "\0";
  6835  010004  EE20  F074         	lfsr	2,LCD_printString@string
  6836  010008  0E14               	movlw	20
  6837  01000A                     u2541:
  6838  01000A  6ADE               	clrf	postinc2,c
  6839  01000C  2EE8               	decfsz	wreg,f,c
  6840  01000E  D7FD               	goto	u2541
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;LCD.c: 316: va_list aptr;
  6844                           ;LCD.c: 317: *aptr = __va_start();
  6845  010010  0E25               	movlw	low (?_LCD_printString+3)
  6846  010012  6F8D               	movwf	LCD_printString@aptr& (0+255),b
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;LCD.c: 319: LCD_placeCursor(x,y);
  6850  010014  C022  F01A         	movff	LCD_printString@y,LCD_placeCursor@y
  6851  010018  5188               	movf	LCD_printString@x& (0+255),w,b
  6852  01001A  ECAD  F082         	call	_LCD_placeCursor
  6853                           
  6854                           ;LCD.c: 322: for(int i = 0; input[i] != '\0' && i < 200; i++)
  6855  01001E  0100               	movlb	0	; () banked
  6856  010020  6B8E               	clrf	LCD_printString@i& (0+255),b
  6857  010022  6B8F               	clrf	(LCD_printString@i+1)& (0+255),b
  6858  010024  D07B               	goto	l4697
  6859  010026                     l4673:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;LCD.c: 323: {
  6863                           ;LCD.c: 324: if(input[i] == '%')
  6864  010026  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6865  01002A  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6866  01002E  D998               	call	PL12	;call to abstracted procedure
  6867  010030  64F7               	cpfsgt	tblptrh,c
  6868  010032  D003               	bra	u2557
  6869  010034  0008               	tblrd		*
  6870  010036  50F5               	movf	tablat,w,c
  6871  010038  D005               	bra	u2550
  6872  01003A                     u2557:
  6873  01003A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6874  01003E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6875  010042  50EF               	movf	indf0,w,c
  6876  010044                     u2550:
  6877  010044  0A25               	xorlw	37
  6878  010046  E14C               	bnz	l4689
  6879                           
  6880                           ;LCD.c: 325: {
  6881                           ;LCD.c: 326: if(input[i+1] == '%')
  6882  010048  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6883  01004C  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6884  010050  0100               	movlb	0	; () banked
  6885  010052  518E               	movf	LCD_printString@i& (0+255),w,b
  6886  010054  2629               	addwf	??_LCD_printString,f,c
  6887  010056  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  6888  010058  222A               	addwfc	??_LCD_printString+1,f,c
  6889  01005A  2A29               	incf	??_LCD_printString,f,c
  6890  01005C  0E00               	movlw	0
  6891  01005E  222A               	addwfc	??_LCD_printString+1,f,c
  6892  010060  C029  FFF6         	movff	??_LCD_printString,tblptrl
  6893  010064  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  6894  010068  0E00               	movlw	low (__mediumconst shr (0+16))
  6895  01006A  6EF8               	movwf	tblptru,c
  6896  01006C  0E0D               	movlw	(high __ramtop+-1)
  6897  01006E  64F7               	cpfsgt	tblptrh,c
  6898  010070  D003               	bra	u2577
  6899  010072  0008               	tblrd		*
  6900  010074  50F5               	movf	tablat,w,c
  6901  010076  D005               	bra	u2570
  6902  010078                     u2577:
  6903  010078  CFF6 FFE9          	movff	tblptrl,fsr0l
  6904  01007C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6905  010080  50EF               	movf	indf0,w,c
  6906  010082                     u2570:
  6907  010082  0A25               	xorlw	37
  6908  010084  E10B               	bnz	l4679
  6909                           
  6910                           ;LCD.c: 327: {
  6911                           ;LCD.c: 328: strcat(string, "%");
  6912  010086  6A07               	clrf	strcat@to+1,c
  6913  010088  0100               	movlb	0	; () banked
  6914  01008A  0E74               	movlw	low LCD_printString@string
  6915  01008C  6E06               	movwf	strcat@to,c
  6916  01008E  0EFF               	movlw	high STR_1
  6917  010090  6E09               	movwf	strcat@from+1,c
  6918  010092  0EFC               	movlw	low STR_1
  6919  010094  6E08               	movwf	strcat@from,c
  6920  010096  EC69  F089         	call	_strcat	;wreg free
  6921                           
  6922                           ;LCD.c: 329: }
  6923  01009A  D01E               	goto	l4687
  6924  01009C                     l4679:
  6925                           
  6926                           ;LCD.c: 330: else
  6927                           ;LCD.c: 331: {
  6928                           ;LCD.c: 332: int val = (*(int *)__va_arg((*(int **)aptr), (int)0));
  6929  01009C  0100               	movlb	0	; () banked
  6930  01009E  518D               	movf	LCD_printString@aptr& (0+255),w,b
  6931  0100A0  6ED9               	movwf	fsr2l,c
  6932  0100A2  6ADA               	clrf	fsr2h,c
  6933  0100A4  CFDE F089          	movff	postinc2,LCD_printString@val
  6934  0100A8  CFDD F08A          	movff	postdec2,LCD_printString@val+1
  6935                           
  6936                           ; BSR set to: 0
  6937  0100AC  0E02               	movlw	2
  6938  0100AE  278D               	addwf	LCD_printString@aptr& (0+255),f,b
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;LCD.c: 333: char tempString[20];
  6942                           ;LCD.c: 334: sprintf(tempString,"%i",val);
  6943  0100B0  0EFF               	movlw	high (STR_8+12)
  6944  0100B2  6E13               	movwf	sprintf@f+1,c
  6945  0100B4  0EC9               	movlw	low (STR_8+12)
  6946  0100B6  6E12               	movwf	sprintf@f,c
  6947  0100B8  C089  F014         	movff	LCD_printString@val,?_sprintf+2
  6948  0100BC  C08A  F015         	movff	LCD_printString@val+1,?_sprintf+3
  6949  0100C0  0E60               	movlw	LCD_printString@tempString& (0+255)
  6950  0100C2  EC06  F085         	call	_sprintf
  6951                           
  6952                           ;LCD.c: 335: strcat(string, tempString);
  6953  0100C6  6A07               	clrf	strcat@to+1,c
  6954  0100C8  0100               	movlb	0	; () banked
  6955  0100CA  0E74               	movlw	low LCD_printString@string
  6956  0100CC  6E06               	movwf	strcat@to,c
  6957  0100CE  6A09               	clrf	strcat@from+1,c
  6958  0100D0  0E60               	movlw	low LCD_printString@tempString
  6959  0100D2  6E08               	movwf	strcat@from,c
  6960  0100D4  EC69  F089         	call	_strcat	;wreg free
  6961  0100D8                     l4687:
  6962                           
  6963                           ;LCD.c: 336: }
  6964                           ;LCD.c: 337: i++;
  6965  0100D8  0100               	movlb	0	; () banked
  6966  0100DA  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  6967  0100DC  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  6968                           
  6969                           ;LCD.c: 338: }
  6970  0100DE  D01B               	goto	l4695
  6971  0100E0                     l4689:
  6972                           
  6973                           ;LCD.c: 339: else
  6974                           ;LCD.c: 340: {
  6975                           ;LCD.c: 341: char tempString[2];
  6976                           ;LCD.c: 342: tempString[0] = input[i];
  6977  0100E0  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6978  0100E4  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6979  0100E8  0100               	movlb	0	; () banked
  6980  0100EA  D93A               	call	PL12	;call to abstracted procedure
  6981  0100EC  64F7               	cpfsgt	tblptrh,c
  6982  0100EE  D003               	bra	u2597
  6983  0100F0  0008               	tblrd		*
  6984  0100F2  50F5               	movf	tablat,w,c
  6985  0100F4  D005               	bra	u2590
  6986  0100F6                     u2597:
  6987  0100F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  6988  0100FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  6989  0100FE  50EF               	movf	indf0,w,c
  6990  010100                     u2590:
  6991  010100  0100               	movlb	0	; () banked
  6992  010102  6F8B               	movwf	LCD_printString@tempString_590& (0+255),b
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;LCD.c: 343: tempString[1] = '\0';
  6996  010104  6B8C               	clrf	(LCD_printString@tempString_590+1)& (0+255),b
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;LCD.c: 344: strcat(string,tempString);
  7000  010106  6A07               	clrf	strcat@to+1,c
  7001  010108  0E74               	movlw	low LCD_printString@string
  7002  01010A  6E06               	movwf	strcat@to,c
  7003  01010C  6A09               	clrf	strcat@from+1,c
  7004  01010E  0E8B               	movlw	low LCD_printString@tempString_590
  7005  010110  6E08               	movwf	strcat@from,c
  7006  010112  EC69  F089         	call	_strcat	;wreg free
  7007  010116                     l4695:
  7008  010116  0100               	movlb	0	; () banked
  7009  010118  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  7010  01011A  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  7011  01011C                     l4697:
  7012                           
  7013                           ; BSR set to: 0
  7014  01011C  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  7015  010120  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  7016  010124  D91D               	call	PL12	;call to abstracted procedure
  7017  010126  64F7               	cpfsgt	tblptrh,c
  7018  010128  D003               	bra	u2607
  7019  01012A  0008               	tblrd		*
  7020  01012C  50F5               	movf	tablat,w,c
  7021  01012E  D005               	bra	u2600
  7022  010130                     u2607:
  7023  010130  CFF6 FFE9          	movff	tblptrl,fsr0l
  7024  010134  CFF7 FFEA          	movff	tblptrh,fsr0h
  7025  010138  50EF               	movf	indf0,w,c
  7026  01013A                     u2600:
  7027  01013A  0900               	iorlw	0
  7028  01013C  E009               	bz	l108
  7029  01013E  0100               	movlb	0	; () banked
  7030  010140  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7031  010142  0A80               	xorlw	128
  7032  010144  0F80               	addlw	-128
  7033  010146  0EC8               	movlw	200
  7034  010148  B4D8               	btfsc	status,2,c
  7035  01014A  5D8E               	subwf	LCD_printString@i& (0+255),w,b
  7036  01014C  E201 D76B          	bnc	l4673
  7037  010150                     l108:
  7038                           
  7039                           ;LCD.c: 345: }
  7040                           ;LCD.c: 346: }
  7041                           ;LCD.c: 348: ;
  7042                           ;LCD.c: 351: for(int i = 0; string[i] != '\0' && i < 200; i++)
  7043  010150  0100               	movlb	0	; () banked
  7044  010152  6B90               	clrf	LCD_printString@i_591& (0+255),b
  7045  010154  6B91               	clrf	(LCD_printString@i_591+1)& (0+255),b
  7046  010156  D099               	goto	l4751
  7047  010158                     l4701:
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;LCD.c: 352: {
  7051                           ;LCD.c: 353: if(string[i] == '\n')
  7052  010158  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7053  01015A  0F74               	addlw	low LCD_printString@string
  7054  01015C  6ED9               	movwf	fsr2l,c
  7055  01015E  6ADA               	clrf	fsr2h,c
  7056  010160  0E0A               	movlw	10
  7057  010162  62DF               	cpfseq	indf2,c
  7058  010164  D006               	goto	l4705
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;LCD.c: 354: {
  7062                           ;LCD.c: 355: LCD_placeCursor(0,y+1);
  7063  010166  2822               	incf	LCD_printString@y,w,c
  7064  010168  6E1A               	movwf	LCD_placeCursor@y,c
  7065  01016A  0E00               	movlw	0
  7066  01016C  ECAD  F082         	call	_LCD_placeCursor
  7067                           
  7068                           ;LCD.c: 356: }
  7069  010170  D089               	goto	l4749
  7070  010172                     l4705:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;LCD.c: 357: else
  7074                           ;LCD.c: 358: {
  7075                           ;LCD.c: 359: delay_ms(2);
  7076  010172  D902               	call	PL38	;call to abstracted procedure
  7077  010174  EC95  F089         	call	_delay_ms	;wreg free
  7078                           
  7079                           ;LCD.c: 360: PORTDbits.RD0 = 1;
  7080  010178  8083               	bsf	3971,0,c	;volatile
  7081                           
  7082                           ;LCD.c: 362: switch(mode)
  7083  01017A  D07B               	goto	l4743
  7084  01017C                     l4709:
  7085                           
  7086                           ;LCD.c: 365: delay_us(40);;
  7087  01017C  EC53  F084         	call	PL2	;call to abstracted procedure
  7088  010180  EC61  F08A         	call	_delay_us	;wreg free
  7089                           
  7090                           ;LCD.c: 366: PORTEbits.RE4 = 1;
  7091  010184  8884               	bsf	3972,4,c	;volatile
  7092                           
  7093                           ;LCD.c: 367: { PORTHbits.RH5 = (((string[i] >> 4) >> 3) & 1); PORTEbits.RE1 = (((string[
      +                          i] >> 4) >> 2) & 1); PORTEbits.RE0 = (((string[i] >> 4) >> 1) & 1); PORTEbits.RE2 = ((st
      +                          ring[i] >> 4) & 1); };
  7094  010186  0100               	movlb	0	; () banked
  7095  010188  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7096  01018A  0F74               	addlw	low LCD_printString@string
  7097  01018C  6ED9               	movwf	fsr2l,c
  7098                           
  7099                           ; BSR set to: 0
  7100                           
  7101                           ; BSR set to: 0
  7102                           
  7103                           ; BSR set to: 0
  7104  01018E  D88D               	call	PL4	;call to abstracted procedure
  7105                           
  7106                           ;LCD.c: 368: delay_us(40);;
  7107  010190  EC53  F084         	call	PL2	;call to abstracted procedure
  7108  010194  EC61  F08A         	call	_delay_us	;wreg free
  7109                           
  7110                           ;LCD.c: 369: PORTEbits.RE4 = 0;
  7111  010198  9884               	bcf	3972,4,c	;volatile
  7112                           
  7113                           ;LCD.c: 371: delay_us(40);;
  7114  01019A  EC53  F084         	call	PL2	;call to abstracted procedure
  7115  01019E  EC61  F08A         	call	_delay_us	;wreg free
  7116                           
  7117                           ;LCD.c: 372: PORTEbits.RE4 = 1;
  7118  0101A2  8884               	bsf	3972,4,c	;volatile
  7119                           
  7120                           ;LCD.c: 373: { PORTHbits.RH5 = (((string[i] & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((strin
      +                          g[i] & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((string[i] & 0x0F) >> 1) & 1); PORTEbits.RE2 
      +                          = ((string[i] & 0x0F) & 1); };
  7121  0101A4  0100               	movlb	0	; () banked
  7122  0101A6  D8CB               	call	PL6	;call to abstracted procedure
  7123  0101A8  90D8               	bcf	status,0,c
  7124  0101AA  3229               	rrcf	??_LCD_printString,f,c
  7125  0101AC  90D8               	bcf	status,0,c
  7126  0101AE  3229               	rrcf	??_LCD_printString,f,c
  7127  0101B0  0E01               	movlw	1
  7128  0101B2  1629               	andwf	??_LCD_printString,f,c
  7129  0101B4  3A29               	swapf	??_LCD_printString,f,c
  7130  0101B6  4629               	rlncf	??_LCD_printString,f,c
  7131  0101B8  5087               	movf	3975,w,c	;volatile
  7132  0101BA  1829               	xorwf	??_LCD_printString,w,c
  7133  0101BC  0BDF               	andlw	-33
  7134  0101BE  1829               	xorwf	??_LCD_printString,w,c
  7135  0101C0  6E87               	movwf	3975,c	;volatile
  7136                           
  7137                           ; BSR set to: 0
  7138  0101C2  D8BD               	call	PL6	;call to abstracted procedure
  7139  0101C4  90D8               	bcf	status,0,c
  7140  0101C6  3229               	rrcf	??_LCD_printString,f,c
  7141  0101C8  0E01               	movlw	1
  7142  0101CA  1629               	andwf	??_LCD_printString,f,c
  7143  0101CC  4629               	rlncf	??_LCD_printString,f,c
  7144  0101CE  5084               	movf	3972,w,c	;volatile
  7145  0101D0  1829               	xorwf	??_LCD_printString,w,c
  7146  0101D2  0BFD               	andlw	-3
  7147  0101D4  1829               	xorwf	??_LCD_printString,w,c
  7148  0101D6  6E84               	movwf	3972,c	;volatile
  7149                           
  7150                           ; BSR set to: 0
  7151  0101D8  D8B2               	call	PL6	;call to abstracted procedure
  7152  0101DA  0E01               	movlw	1
  7153  0101DC  1629               	andwf	??_LCD_printString,f,c
  7154  0101DE  5084               	movf	3972,w,c	;volatile
  7155  0101E0  1829               	xorwf	??_LCD_printString,w,c
  7156  0101E2  0BFE               	andlw	-2
  7157  0101E4  1829               	xorwf	??_LCD_printString,w,c
  7158  0101E6  6E84               	movwf	3972,c	;volatile
  7159                           
  7160                           ; BSR set to: 0
  7161  0101E8  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7162  0101EA  D8B2               	call	PL8	;call to abstracted procedure
  7163  0101EC  4629               	rlncf	??_LCD_printString,f,c
  7164  0101EE  4629               	rlncf	??_LCD_printString,f,c
  7165  0101F0  5084               	movf	3972,w,c	;volatile
  7166  0101F2  1829               	xorwf	??_LCD_printString,w,c
  7167  0101F4  0BFB               	andlw	-5
  7168  0101F6  1829               	xorwf	??_LCD_printString,w,c
  7169  0101F8  6E84               	movwf	3972,c	;volatile
  7170                           
  7171                           ;LCD.c: 374: delay_us(40);;
  7172  0101FA  EC53  F084         	call	PL2	;call to abstracted procedure
  7173  0101FE  EC61  F08A         	call	_delay_us	;wreg free
  7174  010202  D035               	goto	L1
  7175  010204                     l116:
  7176  010204  F000               	nop		;# 
  7177                           
  7178                           ;LCD.c: 380: PORTEbits.RE4 = 1;
  7179  010206  8884               	bsf	3972,4,c	;volatile
  7180                           
  7181                           ;LCD.c: 381: { PORTHbits.RH5 = ((string[i] >> 7) & 1); PORTEbits.RE1 = ((string[i] >> 6)
      +                           & 1); PORTEbits.RE0 = ((string[i] >> 5) & 1); PORTEbits.RE2 = ((string[i] >> 4) & 1); P
      +                          ORTHbits.RH0 = ((string[i] >> 3) & 1); PORTHbits.RH1 = ((string[i] >> 2) & 1); PORTHbit
  7182  010208  0100               	movlb	0	; () banked
  7183  01020A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7184  01020C  0F74               	addlw	low LCD_printString@string
  7185  01020E  6ED9               	movwf	fsr2l,c
  7186  010210  D84C               	call	PL4	;call to abstracted procedure
  7187  010212  D895               	call	PL6	;call to abstracted procedure
  7188  010214  90D8               	bcf	status,0,c
  7189  010216  3229               	rrcf	??_LCD_printString,f,c
  7190  010218  90D8               	bcf	status,0,c
  7191  01021A  3229               	rrcf	??_LCD_printString,f,c
  7192  01021C  0E01               	movlw	1
  7193  01021E  1629               	andwf	??_LCD_printString,f,c
  7194  010220  5087               	movf	3975,w,c	;volatile
  7195  010222  1829               	xorwf	??_LCD_printString,w,c
  7196  010224  0BFE               	andlw	-2
  7197  010226  1829               	xorwf	??_LCD_printString,w,c
  7198  010228  6E87               	movwf	3975,c	;volatile
  7199  01022A  D889               	call	PL6	;call to abstracted procedure
  7200  01022C  90D8               	bcf	status,0,c
  7201  01022E  3229               	rrcf	??_LCD_printString,f,c
  7202  010230  0E01               	movlw	1
  7203  010232  1629               	andwf	??_LCD_printString,f,c
  7204  010234  4629               	rlncf	??_LCD_printString,f,c
  7205  010236  5087               	movf	3975,w,c	;volatile
  7206  010238  1829               	xorwf	??_LCD_printString,w,c
  7207  01023A  0BFD               	andlw	-3
  7208  01023C  1829               	xorwf	??_LCD_printString,w,c
  7209  01023E  6E87               	movwf	3975,c	;volatile
  7210  010240  D87E               	call	PL6	;call to abstracted procedure
  7211  010242  0E01               	movlw	1
  7212  010244  1629               	andwf	??_LCD_printString,f,c
  7213  010246  4629               	rlncf	??_LCD_printString,f,c
  7214  010248  4629               	rlncf	??_LCD_printString,f,c
  7215  01024A  5087               	movf	3975,w,c	;volatile
  7216  01024C  1829               	xorwf	??_LCD_printString,w,c
  7217  01024E  0BFB               	andlw	-5
  7218  010250  1829               	xorwf	??_LCD_printString,w,c
  7219  010252  6E87               	movwf	3975,c	;volatile
  7220  010254  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7221  010256  D87C               	call	PL8	;call to abstracted procedure
  7222  010258  3A29               	swapf	??_LCD_printString,f,c
  7223  01025A  4629               	rlncf	??_LCD_printString,f,c
  7224  01025C  5084               	movf	3972,w,c	;volatile
  7225  01025E  1829               	xorwf	??_LCD_printString,w,c
  7226  010260  0BDF               	andlw	-33
  7227  010262  1829               	xorwf	??_LCD_printString,w,c
  7228  010264  6E84               	movwf	3972,c	;volatile
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;LCD.c: 382: delay_us(40);;
  7232  010266  EC53  F084         	call	PL2	;call to abstracted procedure
  7233  01026A  EC61  F08A         	call	_delay_us	;wreg free
  7234  01026E                     L1:
  7235                           
  7236                           ;LCD.c: 383: PORTEbits.RE4 = 0;
  7237  01026E  9884               	bcf	3972,4,c	;volatile
  7238                           
  7239                           ;LCD.c: 384: break;
  7240  010270  D005               	goto	l4745
  7241  010272                     l4743:
  7242  010272  5058               	movf	_mode,w,c	;volatile
  7243                           
  7244                           ; Switch size 1, requested type "space"
  7245                           ; Number of cases is 2, Range of values is 1 to 2
  7246                           ; switch strategies available:
  7247                           ; Name         Instructions Cycles
  7248                           ; simple_byte            7     4 (average)
  7249                           ;	Chosen strategy is simple_byte
  7250  010274  0A01               	xorlw	1	; case 1
  7251  010276  E082               	bz	l4709
  7252  010278  0A03               	xorlw	3	; case 2
  7253  01027A  E0C4               	bz	l116
  7254  01027C                     l4745:
  7255                           
  7256                           ;LCD.c: 386: delay_ms(2);
  7257  01027C  D87D               	call	PL38	;call to abstracted procedure
  7258  01027E  EC95  F089         	call	_delay_ms	;wreg free
  7259                           
  7260                           ;LCD.c: 387: PORTDbits.RD0 = 0;
  7261  010282  9083               	bcf	3971,0,c	;volatile
  7262  010284                     l4749:
  7263  010284  0100               	movlb	0	; () banked
  7264  010286  4B90               	infsnz	LCD_printString@i_591& (0+255),f,b
  7265  010288  2B91               	incf	(LCD_printString@i_591+1)& (0+255),f,b
  7266  01028A                     l4751:
  7267                           
  7268                           ; BSR set to: 0
  7269  01028A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7270  01028C  0F74               	addlw	low LCD_printString@string
  7271  01028E  6ED9               	movwf	fsr2l,c
  7272  010290  6ADA               	clrf	fsr2h,c
  7273  010292  50DF               	movf	indf2,w,c
  7274  010294  B4D8               	btfsc	status,2,c
  7275  010296  0012               	return	
  7276                           
  7277                           ; BSR set to: 0
  7278  010298  5191               	movf	(LCD_printString@i_591+1)& (0+255),w,b
  7279  01029A  0A80               	xorlw	128
  7280  01029C  0F80               	addlw	-128
  7281  01029E  0EC8               	movlw	200
  7282  0102A0  B4D8               	btfsc	status,2,c
  7283  0102A2  5D90               	subwf	LCD_printString@i_591& (0+255),w,b
  7284  0102A4  B0D8               	btfsc	status,0,c
  7285  0102A6  0012               	return	
  7286  0102A8  D757               	goto	l4701
  7287  0102AA                     __end_of_LCD_printString:
  7288                           	opt stack 0
  7289  0102AA                     PL4:
  7290                           	opt stack 23
  7291  0102AA  6ADA               	clrf	fsr2h,c
  7292  0102AC  50DF               	movf	indf2,w,c
  7293  0102AE  6E29               	movwf	??_LCD_printString& (0+255),c
  7294  0102B0  0E00               	movlw	0
  7295  0102B2  BE29               	btfsc	??_LCD_printString,7,c
  7296  0102B4  0E01               	movlw	1
  7297  0102B6  6E29               	movwf	??_LCD_printString,c
  7298  0102B8  0E01               	movlw	1
  7299  0102BA  1629               	andwf	??_LCD_printString,f,c
  7300  0102BC  3A29               	swapf	??_LCD_printString,f,c
  7301  0102BE  4629               	rlncf	??_LCD_printString,f,c
  7302  0102C0  5087               	movf	3975,w,c	;volatile
  7303  0102C2  1829               	xorwf	??_LCD_printString,w,c
  7304  0102C4  0BDF               	andlw	-33
  7305  0102C6  1829               	xorwf	??_LCD_printString,w,c
  7306  0102C8  6E87               	movwf	3975,c	;volatile
  7307  0102CA  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7308  0102CC  0F74               	addlw	low LCD_printString@string
  7309  0102CE  6ED9               	movwf	fsr2l,c
  7310  0102D0  6ADA               	clrf	fsr2h,c
  7311  0102D2  50DF               	movf	indf2,w,c
  7312  0102D4  6E29               	movwf	??_LCD_printString& (0+255),c
  7313  0102D6  0E06               	movlw	6
  7314  0102D8  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7315  0102DA                     u2665:
  7316  0102DA  90D8               	bcf	status,0,c
  7317  0102DC  3229               	rrcf	??_LCD_printString,f,c
  7318  0102DE  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7319  0102E0  D7FC               	goto	u2665
  7320  0102E2  0E01               	movlw	1
  7321  0102E4  1629               	andwf	??_LCD_printString,f,c
  7322  0102E6  4629               	rlncf	??_LCD_printString,f,c
  7323  0102E8  5084               	movf	3972,w,c	;volatile
  7324  0102EA  1829               	xorwf	??_LCD_printString,w,c
  7325  0102EC  0BFD               	andlw	-3
  7326  0102EE  1829               	xorwf	??_LCD_printString,w,c
  7327  0102F0  6E84               	movwf	3972,c	;volatile
  7328  0102F2  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7329  0102F4  0F74               	addlw	low LCD_printString@string
  7330  0102F6  6ED9               	movwf	fsr2l,c
  7331  0102F8  6ADA               	clrf	fsr2h,c
  7332  0102FA  50DF               	movf	indf2,w,c
  7333  0102FC  6E29               	movwf	??_LCD_printString& (0+255),c
  7334  0102FE  0E05               	movlw	5
  7335  010300  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7336  010302                     u2675:
  7337  010302  90D8               	bcf	status,0,c
  7338  010304  3229               	rrcf	??_LCD_printString,f,c
  7339  010306  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7340  010308  D7FC               	goto	u2675
  7341  01030A  0E01               	movlw	1
  7342  01030C  1629               	andwf	??_LCD_printString,f,c
  7343  01030E  5084               	movf	3972,w,c	;volatile
  7344  010310  1829               	xorwf	??_LCD_printString,w,c
  7345  010312  0BFE               	andlw	-2
  7346  010314  1829               	xorwf	??_LCD_printString,w,c
  7347  010316  6E84               	movwf	3972,c	;volatile
  7348  010318  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7349  01031A  0F74               	addlw	low LCD_printString@string
  7350  01031C  6ED9               	movwf	fsr2l,c
  7351  01031E  6ADA               	clrf	fsr2h,c
  7352  010320  50DF               	movf	indf2,w,c
  7353  010322  6E29               	movwf	??_LCD_printString& (0+255),c
  7354  010324  3A29               	swapf	??_LCD_printString,f,c
  7355  010326  0E0F               	movlw	15
  7356  010328  1629               	andwf	??_LCD_printString,f,c
  7357  01032A  0E01               	movlw	1
  7358  01032C  1629               	andwf	??_LCD_printString,f,c
  7359  01032E  4629               	rlncf	??_LCD_printString,f,c
  7360  010330  4629               	rlncf	??_LCD_printString,f,c
  7361  010332  5084               	movf	3972,w,c	;volatile
  7362  010334  1829               	xorwf	??_LCD_printString,w,c
  7363  010336  0BFB               	andlw	-5
  7364  010338  1829               	xorwf	??_LCD_printString,w,c
  7365  01033A  6E84               	movwf	3972,c	;volatile
  7366  01033C  0012               	return	
  7367  01033E                     __end_ofPL4:
  7368                           	opt stack 0
  7369  01033E                     PL6:
  7370                           	opt stack 23
  7371  01033E  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7372  010340  0F74               	addlw	low LCD_printString@string
  7373  010342  6ED9               	movwf	fsr2l,c
  7374  010344  6ADA               	clrf	fsr2h,c
  7375  010346  50DF               	movf	indf2,w,c
  7376  010348  6E29               	movwf	??_LCD_printString& (0+255),c
  7377  01034A  90D8               	bcf	status,0,c
  7378  01034C  3229               	rrcf	??_LCD_printString,f,c
  7379  01034E  0012               	return	
  7380  010350                     __end_ofPL6:
  7381                           	opt stack 0
  7382  010350                     PL8:
  7383                           	opt stack 23
  7384  010350  0F74               	addlw	low LCD_printString@string
  7385  010352  6ED9               	movwf	fsr2l,c
  7386  010354  6ADA               	clrf	fsr2h,c
  7387  010356  50DF               	movf	indf2,w,c
  7388  010358  6E29               	movwf	??_LCD_printString& (0+255),c
  7389  01035A  0E01               	movlw	1
  7390  01035C  1629               	andwf	??_LCD_printString,f,c
  7391  01035E  0C01               	retlw	1
  7392  010360                     __end_ofPL8:
  7393                           	opt stack 0
  7394  010360                     PL12:
  7395                           	opt stack 23
  7396  010360  518E               	movf	LCD_printString@i& (0+255),w,b
  7397  010362  2629               	addwf	??_LCD_printString,f,c
  7398  010364  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7399  010366  222A               	addwfc	??_LCD_printString+1,f,c
  7400  010368  C029  FFF6         	movff	??_LCD_printString,tblptrl
  7401  01036C  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  7402  010370  0E00               	movlw	low (__mediumconst shr (0+16))
  7403  010372  6EF8               	movwf	tblptru,c
  7404  010374  0E0D               	movlw	(high __ramtop+-1)
  7405  010376  0012               	return	
  7406  010378                     __end_ofPL12:
  7407                           	opt stack 0
  7408  010378                     PL38:
  7409                           	opt stack 23
  7410  010378  0E02               	movlw	2
  7411  01037A  6E0A               	movwf	delay_ms@x,c
  7412  01037C  6A0B               	clrf	delay_ms@x+1,c
  7413  01037E  6A0C               	clrf	delay_ms@x+2,c
  7414  010380  6A0D               	clrf	delay_ms@x+3,c
  7415  010382  0C00               	retlw	0
  7416  010384                     __end_ofPL38:
  7417                           	opt stack 0
  7418                           tblptru	equ	0xFF8
  7419                           tblptrh	equ	0xFF7
  7420                           tblptrl	equ	0xFF6
  7421                           tablat	equ	0xFF5
  7422                           prodh	equ	0xFF4
  7423                           prodl	equ	0xFF3
  7424                           intcon	equ	0xFF2
  7425                           intcon2	equ	0xFF1
  7426                           intcon3	equ	0xFF0
  7427                           indf0	equ	0xFEF
  7428                           postinc0	equ	0xFEE
  7429                           fsr0h	equ	0xFEA
  7430                           fsr0l	equ	0xFE9
  7431                           wreg	equ	0xFE8
  7432                           indf1	equ	0xFE7
  7433                           postinc1	equ	0xFE6
  7434                           postdec1	equ	0xFE5
  7435                           fsr1h	equ	0xFE2
  7436                           fsr1l	equ	0xFE1
  7437                           indf2	equ	0xFDF
  7438                           postinc2	equ	0xFDE
  7439                           postdec2	equ	0xFDD
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _strcat *****************
  7445 ;; Defined at:
  7446 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcat.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  to              2    5[COMRAM] PTR unsigned char 
  7449 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7450 ;;  from            2    7[COMRAM] PTR const unsigned char 
  7451 ;;		 -> UART_transmitString@tempString_1922(2), UART_transmitString@tempString(20), STR_15(2), LCD_printString@tempStrin
      +g_590(2), 
  7452 ;;		 -> LCD_printString@tempString(20), STR_1(2), 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  cp              2    9[COMRAM] PTR unsigned char 
  7455 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  2    5[COMRAM] PTR unsigned char 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7460 ;; Tracked objects:
  7461 ;;		On entry : F/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;Total ram usage:        6 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    3
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_LCD_printString
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text36
  7480  0112D2                     __ptext36:
  7481                           	opt stack 0
  7482  0112D2                     _strcat:
  7483                           	opt stack 25
  7484                           
  7485                           ; BSR set to: 0
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;incstack = 0
  7489  0112D2  C007  F00B         	movff	strcat@to+1,strcat@cp+1
  7490  0112D6  C006  F00A         	movff	strcat@to,strcat@cp
  7491  0112DA  D002               	goto	l4541
  7492  0112DC                     l4539:
  7493                           
  7494                           ; BSR set to: 0
  7495  0112DC  4A0A               	infsnz	strcat@cp,f,c
  7496  0112DE  2A0B               	incf	strcat@cp+1,f,c
  7497  0112E0                     l4541:
  7498                           
  7499                           ; BSR set to: 0
  7500  0112E0  C00A  FFD9         	movff	strcat@cp,fsr2l
  7501  0112E4  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7502  0112E8  50DF               	movf	indf2,w,c
  7503  0112EA  E005               	bz	l4545
  7504  0112EC  D7F7               	goto	l4539
  7505  0112EE                     l4543:
  7506  0112EE  4A0A               	infsnz	strcat@cp,f,c
  7507  0112F0  2A0B               	incf	strcat@cp+1,f,c
  7508  0112F2  4A08               	infsnz	strcat@from,f,c
  7509  0112F4  2A09               	incf	strcat@from+1,f,c
  7510  0112F6                     l4545:
  7511  0112F6  C008  FFF6         	movff	strcat@from,tblptrl
  7512  0112FA  C009  FFF7         	movff	strcat@from+1,tblptrh
  7513  0112FE  0E00               	movlw	low (__mediumconst shr (0+16))
  7514  011300  6EF8               	movwf	tblptru,c
  7515  011302  C00A  FFD9         	movff	strcat@cp,fsr2l
  7516  011306  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7517  01130A  0E0D               	movlw	(high __ramtop+-1)
  7518  01130C  64F7               	cpfsgt	tblptrh,c
  7519  01130E  D003               	bra	u2377
  7520  011310  0008               	tblrd		*
  7521  011312  50F5               	movf	tablat,w,c
  7522  011314  D005               	bra	u2370
  7523  011316                     u2377:
  7524  011316  CFF6 FFE9          	movff	tblptrl,fsr0l
  7525  01131A  CFF7 FFEA          	movff	tblptrh,fsr0h
  7526  01131E  50EF               	movf	indf0,w,c
  7527  011320                     u2370:
  7528  011320  6EDF               	movwf	indf2,c
  7529  011322  50DF               	movf	indf2,w,c
  7530  011324  B4D8               	btfsc	status,2,c
  7531  011326  0012               	return	
  7532  011328  D7E2               	goto	l4543
  7533  01132A                     __end_of_strcat:
  7534                           	opt stack 0
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           intcon2	equ	0xFF1
  7543                           intcon3	equ	0xFF0
  7544                           indf0	equ	0xFEF
  7545                           postinc0	equ	0xFEE
  7546                           fsr0h	equ	0xFEA
  7547                           fsr0l	equ	0xFE9
  7548                           wreg	equ	0xFE8
  7549                           indf1	equ	0xFE7
  7550                           postinc1	equ	0xFE6
  7551                           postdec1	equ	0xFE5
  7552                           fsr1h	equ	0xFE2
  7553                           fsr1l	equ	0xFE1
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _sprintf *****************
  7562 ;; Defined at:
  7563 ;;		line 492 in file "/Applications/microchip/xc8/v1.33/sources/common/doprnt.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  sp              1    wreg     PTR unsigned char 
  7566 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7567 ;;  f               2   17[COMRAM] PTR const unsigned char 
  7568 ;;		 -> STR_16(3), STR_2(3), 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;  sp              1   31[COMRAM] PTR unsigned char 
  7571 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7572 ;;  _val            5   26[COMRAM] struct .
  7573 ;;  c               1   32[COMRAM] char 
  7574 ;;  prec            1   25[COMRAM] char 
  7575 ;;  flag            1   24[COMRAM] unsigned char 
  7576 ;;  ap              1   23[COMRAM] PTR void [1]
  7577 ;;		 -> ?_sprintf(2), 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  2   17[COMRAM] int 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : F/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7588 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7590 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7591 ;;Total ram usage:       16 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    4
  7594 ;; This function calls:
  7595 ;;		___lwdiv
  7596 ;;		___lwmod
  7597 ;; This function is called by:
  7598 ;;		_LCD_printString
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text37
  7603  010A0C                     __ptext37:
  7604                           	opt stack 0
  7605  010A0C                     _sprintf:
  7606                           	opt stack 24
  7607                           
  7608                           ;incstack = 0
  7609                           ;sprintf@sp stored from wreg
  7610  010A0C  6E20               	movwf	sprintf@sp,c
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;doprnt.c: 494: va_list ap;
  7614                           ;doprnt.c: 499: signed char c;
  7615                           ;doprnt.c: 506: signed char prec;
  7616                           ;doprnt.c: 508: unsigned char flag;
  7617                           ;doprnt.c: 527: union {
  7618                           ;doprnt.c: 528: unsigned int _val;
  7619                           ;doprnt.c: 529: struct {
  7620                           ;doprnt.c: 530: const char * _cp;
  7621                           ;doprnt.c: 531: unsigned _len;
  7622                           ;doprnt.c: 532: } _str;
  7623                           ;doprnt.c: 533: } _val;
  7624                           ;doprnt.c: 542: *ap = __va_start();
  7625  010A0E  0E14               	movlw	low (?_sprintf+2)
  7626  010A10  6E18               	movwf	sprintf@ap,c
  7627                           
  7628                           ;doprnt.c: 545: while(c = *f++) {
  7629  010A12  D068               	goto	l4599
  7630  010A14                     l4549:
  7631                           
  7632                           ;doprnt.c: 547: if(c != '%')
  7633  010A14  5021               	movf	sprintf@c,w,c
  7634  010A16  0A25               	xorlw	37
  7635  010A18  E007               	bz	l1115
  7636                           
  7637                           ;doprnt.c: 549: {
  7638                           ;doprnt.c: 550: ((*sp++ = (c)));
  7639  010A1A  5020               	movf	sprintf@sp,w,c
  7640  010A1C  6ED9               	movwf	fsr2l,c
  7641  010A1E  6ADA               	clrf	fsr2h,c
  7642  010A20  C021  FFDF         	movff	sprintf@c,indf2
  7643  010A24  2A20               	incf	sprintf@sp,f,c
  7644                           
  7645                           ;doprnt.c: 551: continue;
  7646  010A26  D05E               	goto	l4599
  7647  010A28                     l1115:
  7648                           
  7649                           ;doprnt.c: 552: }
  7650                           ;doprnt.c: 557: flag = 0;
  7651  010A28  6A19               	clrf	sprintf@flag,c
  7652                           
  7653                           ;doprnt.c: 644: switch(c = *f++) {
  7654  010A2A  D865               	call	PL26	;call to abstracted procedure
  7655  010A2C  5021               	movf	sprintf@c& (0+255),w,c
  7656                           
  7657                           ; Switch size 1, requested type "space"
  7658                           ; Number of cases is 3, Range of values is 0 to 105
  7659                           ; switch strategies available:
  7660                           ; Name         Instructions Cycles
  7661                           ; simple_byte           10     6 (average)
  7662                           ;	Chosen strategy is simple_byte
  7663  010A2E  E05D               	bz	l4601
  7664  010A30  0A64               	xorlw	100	; case 100
  7665  010A32  E002               	bz	l4559
  7666  010A34  0A0D               	xorlw	13	; case 105
  7667  010A36  E156               	bnz	l4599
  7668  010A38                     l4559:
  7669                           
  7670                           ;doprnt.c: 1262: {
  7671                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7672  010A38  5018               	movf	sprintf@ap,w,c
  7673  010A3A  6ED9               	movwf	fsr2l,c
  7674  010A3C  6ADA               	clrf	fsr2h,c
  7675  010A3E  CFDE F01B          	movff	postinc2,sprintf@_val
  7676  010A42  CFDD F01C          	movff	postdec2,sprintf@_val+1
  7677  010A46  0E02               	movlw	2
  7678  010A48  2618               	addwf	sprintf@ap,f,c
  7679                           
  7680                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  7681  010A4A  501C               	movf	sprintf@_val+1,w,c
  7682  010A4C  D86C               	call	PL34	;call to abstracted procedure
  7683  010A4E  B4D8               	btfsc	status,2,c
  7684  010A50  5C1B               	subwf	sprintf@_val,w,c
  7685  010A52  E206               	bc	l4569
  7686                           
  7687                           ;doprnt.c: 1271: flag |= 0x03;
  7688  010A54  0E03               	movlw	3
  7689  010A56  1219               	iorwf	sprintf@flag,f,c
  7690                           
  7691                           ;doprnt.c: 1272: _val._val = -_val._val;
  7692  010A58  6C1B               	negf	sprintf@_val,c
  7693  010A5A  1E1C               	comf	sprintf@_val+1,f,c
  7694  010A5C  B0D8               	btfsc	status,0,c
  7695  010A5E  2A1C               	incf	sprintf@_val+1,f,c
  7696  010A60                     l4569:
  7697                           
  7698                           ;doprnt.c: 1273: }
  7699                           ;doprnt.c: 1275: }
  7700                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7701  010A60  0E01               	movlw	1
  7702  010A62  6E21               	movwf	sprintf@c,c
  7703  010A64                     l4575:
  7704                           
  7705                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7706  010A64  5021               	movf	sprintf@c,w,c
  7707  010A66  D853               	call	PL28	;call to abstracted procedure
  7708  010A68  CFF5 F016          	movff	tablat,??_sprintf
  7709  010A6C  0009               	tblrd		*+
  7710  010A6E  CFF5 F017          	movff	tablat,??_sprintf+1
  7711  010A72  5016               	movf	??_sprintf,w,c
  7712  010A74  5C1B               	subwf	sprintf@_val,w,c
  7713  010A76  5017               	movf	??_sprintf+1,w,c
  7714  010A78  581C               	subwfb	sprintf@_val+1,w,c
  7715  010A7A  E304               	bnc	l4583
  7716  010A7C  2A21               	incf	sprintf@c,f,c
  7717  010A7E  5021               	movf	sprintf@c,w,c
  7718  010A80  0A05               	xorlw	5
  7719  010A82  E1F0               	bnz	l4575
  7720  010A84                     l4583:
  7721                           
  7722                           ;doprnt.c: 1431: {
  7723                           ;doprnt.c: 1447: if(flag & 0x03)
  7724  010A84  C019  F016         	movff	sprintf@flag,??_sprintf
  7725  010A88  0E03               	movlw	3
  7726  010A8A  1616               	andwf	??_sprintf,f,c
  7727  010A8C  E006               	bz	l4589
  7728                           
  7729                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  7730  010A8E  5020               	movf	sprintf@sp,w,c
  7731  010A90  6ED9               	movwf	fsr2l,c
  7732  010A92  6ADA               	clrf	fsr2h,c
  7733  010A94  0E2D               	movlw	45
  7734  010A96  6EDF               	movwf	indf2,c
  7735  010A98  2A20               	incf	sprintf@sp,f,c
  7736  010A9A                     l4589:
  7737                           
  7738                           ;doprnt.c: 1478: }
  7739                           ;doprnt.c: 1481: prec = c;
  7740  010A9A  C021  F01A         	movff	sprintf@c,sprintf@prec
  7741                           
  7742                           ;doprnt.c: 1483: while(prec--) {
  7743  010A9E  D01F               	goto	l4597
  7744  010AA0                     l4591:
  7745                           
  7746                           ;doprnt.c: 1487: {
  7747                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7748  010AA0  501A               	movf	sprintf@prec,w,c
  7749  010AA2  D835               	call	PL28	;call to abstracted procedure
  7750  010AA4  CFF5 F008          	movff	tablat,___lwdiv@divisor
  7751  010AA8  000A               	tblrd		*-
  7752  010AAA  CFF5 F009          	movff	tablat,___lwdiv@divisor+1
  7753  010AAE  C01B  F006         	movff	sprintf@_val,___lwdiv@dividend
  7754  010AB2  C01C  F007         	movff	sprintf@_val+1,___lwdiv@dividend+1
  7755  010AB6  ECC0  F089         	call	___lwdiv	;wreg free
  7756  010ABA  C006  F00D         	movff	?___lwdiv,___lwmod@dividend
  7757  010ABE  C007  F00E         	movff	?___lwdiv+1,___lwmod@dividend+1
  7758  010AC2  6A10               	clrf	___lwmod@divisor+1,c
  7759  010AC4  0E0A               	movlw	10
  7760  010AC6  6E0F               	movwf	___lwmod@divisor,c
  7761  010AC8  EC07  F08A         	call	___lwmod	;wreg free
  7762  010ACC  500D               	movf	?___lwmod,w,c
  7763  010ACE  0F30               	addlw	48
  7764  010AD0  6E21               	movwf	sprintf@c,c
  7765                           
  7766                           ;doprnt.c: 1532: }
  7767                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7768  010AD2  5020               	movf	sprintf@sp,w,c
  7769  010AD4  6ED9               	movwf	fsr2l,c
  7770  010AD6  6ADA               	clrf	fsr2h,c
  7771  010AD8  C021  FFDF         	movff	sprintf@c,indf2
  7772  010ADC  2A20               	incf	sprintf@sp,f,c
  7773  010ADE                     l4597:
  7774  010ADE  061A               	decf	sprintf@prec,f,c
  7775  010AE0  281A               	incf	sprintf@prec& (0+255),w,c
  7776  010AE2  E1DE               	bnz	l4591
  7777  010AE4                     l4599:
  7778  010AE4  D808               	call	PL26	;call to abstracted procedure
  7779  010AE6  6621               	tstfsz	sprintf@c& (0+255),c
  7780  010AE8  D795               	goto	l4549
  7781  010AEA                     l4601:
  7782                           
  7783                           ;doprnt.c: 1547: *sp = 0;
  7784  010AEA  5020               	movf	sprintf@sp,w,c
  7785  010AEC  6ED9               	movwf	fsr2l,c
  7786  010AEE  6ADA               	clrf	fsr2h,c
  7787  010AF0  0E00               	movlw	0
  7788  010AF2  6EDF               	movwf	indf2,c
  7789  010AF4  0C00               	retlw	0
  7790  010AF6                     __end_of_sprintf:
  7791                           	opt stack 0
  7792  010AF6                     PL26:
  7793                           	opt stack 24
  7794  010AF6  C012  FFF6         	movff	sprintf@f,tblptrl
  7795  010AFA  C013  FFF7         	movff	sprintf@f+1,tblptrh
  7796  010AFE  4A12               	infsnz	sprintf@f,f,c
  7797  010B00  2A13               	incf	sprintf@f+1,f,c
  7798  010B02                     	if	0	;tblptru may be non-zero
  7799  010B02                     	endif
  7800  010B02                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7801  010B02  0E00               	movlw	low (__mediumconst shr (0+16))
  7802  010B04  6EF8               	movwf	tblptru,c
  7803  010B06                     	endif
  7804  010B06  0008               	tblrd		*
  7805  010B08  CFF5 F021          	movff	tablat,sprintf@c
  7806  010B0C  0012               	return	
  7807  010B0E                     __end_ofPL26:
  7808                           	opt stack 0
  7809  010B0E                     PL28:
  7810                           	opt stack 24
  7811  010B0E  0D02               	mullw	2
  7812  010B10  0EC5               	movlw	low _dpowers
  7813  010B12  24F3               	addwf	prodl,w,c
  7814  010B14  6EF6               	movwf	tblptrl,c
  7815  010B16  0EFE               	movlw	high _dpowers
  7816  010B18  20F4               	addwfc	prodh,w,c
  7817  010B1A  6EF7               	movwf	tblptrh,c
  7818  010B1C                     	if	1	;There are 3 active tblptr bytes
  7819  010B1C  6AF8               	clrf	tblptru,c
  7820  010B1E  0E00               	movlw	low (__mediumconst shr (0+16))
  7821  010B20  22F8               	addwfc	tblptru,f,c
  7822  010B22                     	endif
  7823  010B22  0009               	tblrd		*+
  7824  010B24  0012               	return	
  7825  010B26                     __end_ofPL28:
  7826                           	opt stack 0
  7827  010B26                     PL34:
  7828                           	opt stack 24
  7829  010B26  0A80               	xorlw	128
  7830  010B28  6EF3               	movwf	prodl,c
  7831  010B2A  0E80               	movlw	128
  7832  010B2C  5CF3               	subwf	prodl,w,c
  7833  010B2E  0C00               	retlw	0
  7834  010B30                     __end_ofPL34:
  7835                           	opt stack 0
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon2	equ	0xFF1
  7844                           intcon3	equ	0xFF0
  7845                           indf0	equ	0xFEF
  7846                           postinc0	equ	0xFEE
  7847                           fsr0h	equ	0xFEA
  7848                           fsr0l	equ	0xFE9
  7849                           wreg	equ	0xFE8
  7850                           indf1	equ	0xFE7
  7851                           postinc1	equ	0xFE6
  7852                           postdec1	equ	0xFE5
  7853                           fsr1h	equ	0xFE2
  7854                           fsr1l	equ	0xFE1
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           postdec2	equ	0xFDD
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function ___lwmod *****************
  7863 ;; Defined at:
  7864 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwmod.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  dividend        2   12[COMRAM] unsigned int 
  7867 ;;  divisor         2   14[COMRAM] unsigned int 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  counter         1   16[COMRAM] unsigned char 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  2   12[COMRAM] unsigned int 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7882 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7883 ;;Total ram usage:        5 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    3
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_sprintf
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text38
  7894  01140E                     __ptext38:
  7895                           	opt stack 0
  7896  01140E                     ___lwmod:
  7897                           	opt stack 24
  7898                           
  7899                           ;incstack = 0
  7900  01140E  5010               	movf	___lwmod@divisor+1,w,c
  7901  011410  100F               	iorwf	___lwmod@divisor,w,c
  7902  011412  E017               	bz	l1830
  7903  011414  0E01               	movlw	1
  7904  011416  6E11               	movwf	___lwmod@counter,c
  7905  011418  D004               	goto	l4487
  7906  01141A                     l4485:
  7907  01141A  90D8               	bcf	status,0,c
  7908  01141C  360F               	rlcf	___lwmod@divisor,f,c
  7909  01141E  3610               	rlcf	___lwmod@divisor+1,f,c
  7910  011420  2A11               	incf	___lwmod@counter,f,c
  7911  011422                     l4487:
  7912  011422  AE10               	btfss	___lwmod@divisor+1,7,c
  7913  011424  D7FA               	goto	l4485
  7914  011426                     l4489:
  7915  011426  500F               	movf	___lwmod@divisor,w,c
  7916  011428  5C0D               	subwf	___lwmod@dividend,w,c
  7917  01142A  5010               	movf	___lwmod@divisor+1,w,c
  7918  01142C  580E               	subwfb	___lwmod@dividend+1,w,c
  7919  01142E  E304               	bnc	l4493
  7920  011430  500F               	movf	___lwmod@divisor,w,c
  7921  011432  5E0D               	subwf	___lwmod@dividend,f,c
  7922  011434  5010               	movf	___lwmod@divisor+1,w,c
  7923  011436  5A0E               	subwfb	___lwmod@dividend+1,f,c
  7924  011438                     l4493:
  7925  011438  90D8               	bcf	status,0,c
  7926  01143A  3210               	rrcf	___lwmod@divisor+1,f,c
  7927  01143C  320F               	rrcf	___lwmod@divisor,f,c
  7928  01143E  2E11               	decfsz	___lwmod@counter,f,c
  7929  011440  D7F2               	goto	l4489
  7930  011442                     l1830:
  7931  011442  C00D  F00D         	movff	___lwmod@dividend,?___lwmod
  7932  011446  C00E  F00E         	movff	___lwmod@dividend+1,?___lwmod+1
  7933  01144A  0012               	return	
  7934  01144C                     __end_of___lwmod:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           prodh	equ	0xFF4
  7941                           prodl	equ	0xFF3
  7942                           intcon	equ	0xFF2
  7943                           intcon2	equ	0xFF1
  7944                           intcon3	equ	0xFF0
  7945                           indf0	equ	0xFEF
  7946                           postinc0	equ	0xFEE
  7947                           fsr0h	equ	0xFEA
  7948                           fsr0l	equ	0xFE9
  7949                           wreg	equ	0xFE8
  7950                           indf1	equ	0xFE7
  7951                           postinc1	equ	0xFE6
  7952                           postdec1	equ	0xFE5
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function ___lwdiv *****************
  7963 ;; Defined at:
  7964 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwdiv.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;  dividend        2    5[COMRAM] unsigned int 
  7967 ;;  divisor         2    7[COMRAM] unsigned int 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  quotient        2   10[COMRAM] unsigned int 
  7970 ;;  counter         1    9[COMRAM] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  2    5[COMRAM] unsigned int 
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7983 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7984 ;;Total ram usage:        7 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    3
  7987 ;; This function calls:
  7988 ;;		Nothing
  7989 ;; This function is called by:
  7990 ;;		_sprintf
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           	psect	text39
  7995  011380                     __ptext39:
  7996                           	opt stack 0
  7997  011380                     ___lwdiv:
  7998                           	opt stack 24
  7999                           
  8000                           ;incstack = 0
  8001  011380  6A0B               	clrf	___lwdiv@quotient,c
  8002  011382  6A0C               	clrf	___lwdiv@quotient+1,c
  8003  011384  5009               	movf	___lwdiv@divisor+1,w,c
  8004  011386  1008               	iorwf	___lwdiv@divisor,w,c
  8005  011388  E01B               	bz	l1820
  8006  01138A  0E01               	movlw	1
  8007  01138C  6E0A               	movwf	___lwdiv@counter,c
  8008  01138E  D004               	goto	l4467
  8009  011390                     l4465:
  8010  011390  90D8               	bcf	status,0,c
  8011  011392  3608               	rlcf	___lwdiv@divisor,f,c
  8012  011394  3609               	rlcf	___lwdiv@divisor+1,f,c
  8013  011396  2A0A               	incf	___lwdiv@counter,f,c
  8014  011398                     l4467:
  8015  011398  AE09               	btfss	___lwdiv@divisor+1,7,c
  8016  01139A  D7FA               	goto	l4465
  8017  01139C                     l4469:
  8018  01139C  90D8               	bcf	status,0,c
  8019  01139E  360B               	rlcf	___lwdiv@quotient,f,c
  8020  0113A0  360C               	rlcf	___lwdiv@quotient+1,f,c
  8021  0113A2  5008               	movf	___lwdiv@divisor,w,c
  8022  0113A4  5C06               	subwf	___lwdiv@dividend,w,c
  8023  0113A6  5009               	movf	___lwdiv@divisor+1,w,c
  8024  0113A8  5807               	subwfb	___lwdiv@dividend+1,w,c
  8025  0113AA  E305               	bnc	l4477
  8026  0113AC  5008               	movf	___lwdiv@divisor,w,c
  8027  0113AE  5E06               	subwf	___lwdiv@dividend,f,c
  8028  0113B0  5009               	movf	___lwdiv@divisor+1,w,c
  8029  0113B2  5A07               	subwfb	___lwdiv@dividend+1,f,c
  8030  0113B4  800B               	bsf	___lwdiv@quotient,0,c
  8031  0113B6                     l4477:
  8032  0113B6  90D8               	bcf	status,0,c
  8033  0113B8  3209               	rrcf	___lwdiv@divisor+1,f,c
  8034  0113BA  3208               	rrcf	___lwdiv@divisor,f,c
  8035  0113BC  2E0A               	decfsz	___lwdiv@counter,f,c
  8036  0113BE  D7EE               	goto	l4469
  8037  0113C0                     l1820:
  8038  0113C0  C00B  F006         	movff	___lwdiv@quotient,?___lwdiv
  8039  0113C4  C00C  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8040  0113C8  0012               	return	
  8041  0113CA                     __end_of___lwdiv:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           intcon	equ	0xFF2
  8050                           intcon2	equ	0xFF1
  8051                           intcon3	equ	0xFF0
  8052                           indf0	equ	0xFEF
  8053                           postinc0	equ	0xFEE
  8054                           fsr0h	equ	0xFEA
  8055                           fsr0l	equ	0xFE9
  8056                           wreg	equ	0xFE8
  8057                           indf1	equ	0xFE7
  8058                           postinc1	equ	0xFE6
  8059                           postdec1	equ	0xFE5
  8060                           fsr1h	equ	0xFE2
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function _LCD_placeCursor *****************
  8070 ;; Defined at:
  8071 ;;		line 279 in file "LCD.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  x               1    wreg     unsigned char 
  8074 ;;  y               1   25[COMRAM] unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  x               1   28[COMRAM] unsigned char 
  8077 ;;  address         1   29[COMRAM] unsigned char 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;		None               void
  8080 ;; Registers used:
  8081 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : F/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8087 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8090 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8091 ;;Total ram usage:        5 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    5
  8094 ;; This function calls:
  8095 ;;		_delay_ms
  8096 ;;		_delay_us
  8097 ;; This function is called by:
  8098 ;;		_LCD_printString
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text40
  8103  01055A                     __ptext40:
  8104                           	opt stack 0
  8105  01055A                     _LCD_placeCursor:
  8106                           	opt stack 23
  8107                           
  8108                           ;incstack = 0
  8109                           ;LCD_placeCursor@x stored from wreg
  8110  01055A  6E1D               	movwf	LCD_placeCursor@x,c
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;LCD.c: 283: char address = 0x80 + x + (0x40 * y);
  8114  01055C  501A               	movf	LCD_placeCursor@y,w,c
  8115  01055E  0D40               	mullw	64
  8116  010560  50F3               	movf	prodl,w,c
  8117  010562  241D               	addwf	LCD_placeCursor@x,w,c
  8118  010564  0F80               	addlw	128
  8119  010566  6E1E               	movwf	LCD_placeCursor@address,c
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;LCD.c: 284: delay_ms(3);
  8123  010568  0E03               	movlw	3
  8124  01056A  6E0A               	movwf	delay_ms@x,c
  8125  01056C  0E00               	movlw	0
  8126  01056E  6A0B               	clrf	delay_ms@x+1,c
  8127  010570  6A0C               	clrf	delay_ms@x+2,c
  8128  010572  6A0D               	clrf	delay_ms@x+3,c
  8129  010574  EC95  F089         	call	_delay_ms	;wreg free
  8130                           
  8131                           ;LCD.c: 285: switch(mode)
  8132  010578  D093               	goto	l4535
  8133  01057A                     l4501:
  8134                           
  8135                           ;LCD.c: 288: delay_us(40);;
  8136  01057A  EC53  F084         	call	PL2	;call to abstracted procedure
  8137  01057E  EC61  F08A         	call	_delay_us	;wreg free
  8138                           
  8139                           ;LCD.c: 289: PORTEbits.RE4 = 1;
  8140  010582  8884               	bsf	3972,4,c	;volatile
  8141                           
  8142                           ;LCD.c: 290: { PORTHbits.RH5 = ((0x80 + (address >> 4) >> 3) & 1); PORTEbits.RE1 = ((0x8
      +                          0 + (address >> 4) >> 2) & 1); PORTEbits.RE0 = ((0x80 + (address >> 4) >> 1) & 1); PORTE
      +                          bits.RE2 = (0x80 + (address >> 4) & 1); };
  8143  010584  D8A1               	call	PL16	;call to abstracted procedure
  8144  010586  90D8               	bcf	status,0,c
  8145  010588  321B               	rrcf	??_LCD_placeCursor,f,c
  8146  01058A  90D8               	bcf	status,0,c
  8147  01058C  321B               	rrcf	??_LCD_placeCursor,f,c
  8148  01058E  90D8               	bcf	status,0,c
  8149  010590  321B               	rrcf	??_LCD_placeCursor,f,c
  8150  010592  D88E               	call	PL14	;call to abstracted procedure
  8151  010594  3A1B               	swapf	??_LCD_placeCursor,f,c
  8152  010596  0E0F               	movlw	15
  8153  010598  161B               	andwf	??_LCD_placeCursor,f,c
  8154  01059A  0E80               	movlw	128
  8155  01059C  261B               	addwf	??_LCD_placeCursor,f,c
  8156  01059E  90D8               	bcf	status,0,c
  8157  0105A0  321B               	rrcf	??_LCD_placeCursor,f,c
  8158  0105A2  90D8               	bcf	status,0,c
  8159  0105A4  321B               	rrcf	??_LCD_placeCursor,f,c
  8160  0105A6  0E01               	movlw	1
  8161  0105A8  D897               	call	PL18	;call to abstracted procedure
  8162  0105AA  D88E               	call	PL16	;call to abstracted procedure
  8163  0105AC  90D8               	bcf	status,0,c
  8164  0105AE  321B               	rrcf	??_LCD_placeCursor,f,c
  8165  0105B0  0E01               	movlw	1
  8166  0105B2  D8A4               	call	PL22	;call to abstracted procedure
  8167  0105B4  D889               	call	PL16	;call to abstracted procedure
  8168  0105B6  D898               	call	PL20	;call to abstracted procedure
  8169                           
  8170                           ;LCD.c: 291: delay_us(40);;
  8171  0105B8  EC53  F084         	call	PL2	;call to abstracted procedure
  8172  0105BC  EC61  F08A         	call	_delay_us	;wreg free
  8173                           
  8174                           ;LCD.c: 292: PORTEbits.RE4 = 0;
  8175  0105C0  9884               	bcf	3972,4,c	;volatile
  8176                           
  8177                           ;LCD.c: 294: delay_us(40);;
  8178  0105C2  EC53  F084         	call	PL2	;call to abstracted procedure
  8179  0105C6  EC61  F08A         	call	_delay_us	;wreg free
  8180                           
  8181                           ;LCD.c: 295: PORTEbits.RE4 = 1;
  8182  0105CA  8884               	bsf	3972,4,c	;volatile
  8183                           
  8184                           ;LCD.c: 296: { PORTHbits.RH5 = (((address & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((address
      +                           & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((address & 0x0F) >> 1) & 1); PORTEbits.RE2 = ((ad
      +                          dress & 0x0F) & 1); };
  8185  0105CC  D89E               	call	PL30	;call to abstracted procedure
  8186  0105CE  D870               	call	PL14	;call to abstracted procedure
  8187  0105D0  90D8               	bcf	status,0,c
  8188  0105D2  321B               	rrcf	??_LCD_placeCursor,f,c
  8189  0105D4  90D8               	bcf	status,0,c
  8190  0105D6  321B               	rrcf	??_LCD_placeCursor,f,c
  8191  0105D8  0E01               	movlw	1
  8192  0105DA  D87E               	call	PL18	;call to abstracted procedure
  8193  0105DC  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8194  0105E0  90D8               	bcf	status,0,c
  8195  0105E2  321B               	rrcf	??_LCD_placeCursor,f,c
  8196  0105E4  0E01               	movlw	1
  8197  0105E6  D88A               	call	PL22	;call to abstracted procedure
  8198  0105E8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8199  0105EC  D87D               	call	PL20	;call to abstracted procedure
  8200                           
  8201                           ;LCD.c: 297: delay_us(40);;
  8202  0105EE  EC53  F084         	call	PL2	;call to abstracted procedure
  8203  0105F2  EC61  F08A         	call	_delay_us	;wreg free
  8204                           
  8205                           ;LCD.c: 298: PORTEbits.RE4 = 0;
  8206  0105F6  9884               	bcf	3972,4,c	;volatile
  8207                           
  8208                           ;LCD.c: 299: break;
  8209  0105F8  0012               	return	
  8210  0105FA                     l94:
  8211  0105FA  F000               	nop		;# 
  8212                           
  8213                           ;LCD.c: 303: PORTEbits.RE4 = 1;
  8214  0105FC  8884               	bsf	3972,4,c	;volatile
  8215                           
  8216                           ;LCD.c: 304: { PORTHbits.RH5 = ((address >> 7) & 1); PORTEbits.RE1 = ((address >> 6) & 1
      +                          ); PORTEbits.RE0 = ((address >> 5) & 1); PORTEbits.RE2 = ((address >> 4) & 1); PORTHbits
      +                          .RH0 = ((address >> 3) & 1); PORTHbits.RH1 = ((address >> 2) & 1); PORTHbits.RH2 = ((ad
  8217  0105FE  6A1B               	clrf	??_LCD_placeCursor& (0+255),c
  8218  010600  AE1E               	btfss	LCD_placeCursor@address,7,c
  8219  010602  D001               	bra	u2335
  8220  010604  2A1B               	incf	??_LCD_placeCursor& (0+255),f,c
  8221  010606                     u2335:
  8222  010606  D854               	call	PL14	;call to abstracted procedure
  8223  010608  0E06               	movlw	6
  8224  01060A  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8225  01060C                     u2345:
  8226  01060C  90D8               	bcf	status,0,c
  8227  01060E  321B               	rrcf	??_LCD_placeCursor,f,c
  8228  010610  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8229  010612  D7FC               	goto	u2345
  8230  010614  0E01               	movlw	1
  8231  010616  D860               	call	PL18	;call to abstracted procedure
  8232  010618  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8233  01061C  0E05               	movlw	5
  8234  01061E  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8235  010620                     u2355:
  8236  010620  90D8               	bcf	status,0,c
  8237  010622  321B               	rrcf	??_LCD_placeCursor,f,c
  8238  010624  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8239  010626  D7FC               	goto	u2355
  8240  010628  0E01               	movlw	1
  8241  01062A  D868               	call	PL22	;call to abstracted procedure
  8242  01062C  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8243  010630  3A1B               	swapf	??_LCD_placeCursor,f,c
  8244  010632  0E0F               	movlw	15
  8245  010634  161B               	andwf	??_LCD_placeCursor,f,c
  8246  010636  D858               	call	PL20	;call to abstracted procedure
  8247  010638  D868               	call	PL30	;call to abstracted procedure
  8248  01063A  0E01               	movlw	1
  8249  01063C  161B               	andwf	??_LCD_placeCursor,f,c
  8250  01063E  5087               	movf	3975,w,c	;volatile
  8251  010640  181B               	xorwf	??_LCD_placeCursor,w,c
  8252  010642  0BFE               	andlw	-2
  8253  010644  181B               	xorwf	??_LCD_placeCursor,w,c
  8254  010646  6E87               	movwf	3975,c	;volatile
  8255  010648  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8256  01064C  90D8               	bcf	status,0,c
  8257  01064E  321B               	rrcf	??_LCD_placeCursor,f,c
  8258  010650  90D8               	bcf	status,0,c
  8259  010652  321B               	rrcf	??_LCD_placeCursor,f,c
  8260  010654  0E01               	movlw	1
  8261  010656  161B               	andwf	??_LCD_placeCursor,f,c
  8262  010658  461B               	rlncf	??_LCD_placeCursor,f,c
  8263  01065A  5087               	movf	3975,w,c	;volatile
  8264  01065C  181B               	xorwf	??_LCD_placeCursor,w,c
  8265  01065E  0BFD               	andlw	-3
  8266  010660  181B               	xorwf	??_LCD_placeCursor,w,c
  8267  010662  6E87               	movwf	3975,c	;volatile
  8268  010664  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8269  010668  90D8               	bcf	status,0,c
  8270  01066A  321B               	rrcf	??_LCD_placeCursor,f,c
  8271  01066C  0E01               	movlw	1
  8272  01066E  161B               	andwf	??_LCD_placeCursor,f,c
  8273  010670  461B               	rlncf	??_LCD_placeCursor,f,c
  8274  010672  461B               	rlncf	??_LCD_placeCursor,f,c
  8275  010674  5087               	movf	3975,w,c	;volatile
  8276  010676  181B               	xorwf	??_LCD_placeCursor,w,c
  8277  010678  0BFB               	andlw	-5
  8278  01067A  181B               	xorwf	??_LCD_placeCursor,w,c
  8279  01067C  6E87               	movwf	3975,c	;volatile
  8280  01067E  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8281  010682  0E01               	movlw	1
  8282  010684  161B               	andwf	??_LCD_placeCursor,f,c
  8283  010686  3A1B               	swapf	??_LCD_placeCursor,f,c
  8284  010688  461B               	rlncf	??_LCD_placeCursor,f,c
  8285  01068A  5084               	movf	3972,w,c	;volatile
  8286  01068C  181B               	xorwf	??_LCD_placeCursor,w,c
  8287  01068E  0BDF               	andlw	-33
  8288  010690  181B               	xorwf	??_LCD_placeCursor,w,c
  8289  010692  6E84               	movwf	3972,c	;volatile
  8290                           
  8291                           ;LCD.c: 305: delay_us(40);;
  8292  010694  EC53  F084         	call	PL2	;call to abstracted procedure
  8293  010698  EC61  F08A         	call	_delay_us	;wreg free
  8294                           
  8295                           ;LCD.c: 306: PORTEbits.RE4 = 0;
  8296  01069C  9884               	bcf	3972,4,c	;volatile
  8297                           
  8298                           ;LCD.c: 307: break;
  8299  01069E  0012               	return	
  8300  0106A0                     l4535:
  8301  0106A0  5058               	movf	_mode,w,c	;volatile
  8302                           
  8303                           ; Switch size 1, requested type "space"
  8304                           ; Number of cases is 2, Range of values is 1 to 2
  8305                           ; switch strategies available:
  8306                           ; Name         Instructions Cycles
  8307                           ; simple_byte            7     4 (average)
  8308                           ;	Chosen strategy is simple_byte
  8309  0106A2  0A01               	xorlw	1	; case 1
  8310  0106A4  E101 D769          	bz	l4501
  8311  0106A8  0A03               	xorlw	3	; case 2
  8312  0106AA  A4D8               	btfss	status,2,c
  8313  0106AC  0012               	return	
  8314  0106AE  D7A5               	goto	l94
  8315  0106B0                     __end_of_LCD_placeCursor:
  8316                           	opt stack 0
  8317  0106B0                     PL14:
  8318                           	opt stack 23
  8319  0106B0  0E01               	movlw	1
  8320  0106B2  161B               	andwf	??_LCD_placeCursor,f,c
  8321  0106B4  3A1B               	swapf	??_LCD_placeCursor,f,c
  8322  0106B6  461B               	rlncf	??_LCD_placeCursor,f,c
  8323  0106B8  5087               	movf	3975,w,c	;volatile
  8324  0106BA  181B               	xorwf	??_LCD_placeCursor,w,c
  8325  0106BC  0BDF               	andlw	-33
  8326  0106BE  181B               	xorwf	??_LCD_placeCursor,w,c
  8327  0106C0  6E87               	movwf	3975,c	;volatile
  8328  0106C2  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8329  0106C6  0012               	return	
  8330  0106C8                     __end_ofPL14:
  8331                           	opt stack 0
  8332  0106C8                     PL16:
  8333                           	opt stack 23
  8334  0106C8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8335  0106CC  3A1B               	swapf	??_LCD_placeCursor,f,c
  8336  0106CE  0E0F               	movlw	15
  8337  0106D0  161B               	andwf	??_LCD_placeCursor,f,c
  8338  0106D2  0E80               	movlw	128
  8339  0106D4  261B               	addwf	??_LCD_placeCursor,f,c
  8340  0106D6  0C80               	retlw	128
  8341  0106D8                     __end_ofPL16:
  8342                           	opt stack 0
  8343  0106D8                     PL18:
  8344                           	opt stack 23
  8345  0106D8  161B               	andwf	??_LCD_placeCursor,f,c
  8346  0106DA  461B               	rlncf	??_LCD_placeCursor,f,c
  8347  0106DC  5084               	movf	3972,w,c	;volatile
  8348  0106DE  181B               	xorwf	??_LCD_placeCursor,w,c
  8349  0106E0  0BFD               	andlw	-3
  8350  0106E2  181B               	xorwf	??_LCD_placeCursor,w,c
  8351  0106E4  6E84               	movwf	3972,c	;volatile
  8352  0106E6  0012               	return	
  8353  0106E8                     __end_ofPL18:
  8354                           	opt stack 0
  8355  0106E8                     PL20:
  8356                           	opt stack 23
  8357  0106E8  0E01               	movlw	1
  8358  0106EA  161B               	andwf	??_LCD_placeCursor,f,c
  8359  0106EC  461B               	rlncf	??_LCD_placeCursor,f,c
  8360  0106EE  461B               	rlncf	??_LCD_placeCursor,f,c
  8361  0106F0  5084               	movf	3972,w,c	;volatile
  8362  0106F2  181B               	xorwf	??_LCD_placeCursor,w,c
  8363  0106F4  0BFB               	andlw	-5
  8364  0106F6  181B               	xorwf	??_LCD_placeCursor,w,c
  8365  0106F8  6E84               	movwf	3972,c	;volatile
  8366  0106FA  0012               	return	
  8367  0106FC                     __end_ofPL20:
  8368                           	opt stack 0
  8369  0106FC                     PL22:
  8370                           	opt stack 23
  8371  0106FC  161B               	andwf	??_LCD_placeCursor,f,c
  8372  0106FE  5084               	movf	3972,w,c	;volatile
  8373  010700  181B               	xorwf	??_LCD_placeCursor,w,c
  8374  010702  0BFE               	andlw	-2
  8375  010704  181B               	xorwf	??_LCD_placeCursor,w,c
  8376  010706  6E84               	movwf	3972,c	;volatile
  8377  010708  0012               	return	
  8378  01070A                     __end_ofPL22:
  8379                           	opt stack 0
  8380  01070A                     PL30:
  8381                           	opt stack 23
  8382  01070A  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8383  01070E  90D8               	bcf	status,0,c
  8384  010710  321B               	rrcf	??_LCD_placeCursor,f,c
  8385  010712  90D8               	bcf	status,0,c
  8386  010714  321B               	rrcf	??_LCD_placeCursor,f,c
  8387  010716  90D8               	bcf	status,0,c
  8388  010718  321B               	rrcf	??_LCD_placeCursor,f,c
  8389  01071A  0012               	return	
  8390  01071C                     __end_ofPL30:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           intcon2	equ	0xFF1
  8400                           intcon3	equ	0xFF0
  8401                           indf0	equ	0xFEF
  8402                           postinc0	equ	0xFEE
  8403                           fsr0h	equ	0xFEA
  8404                           fsr0l	equ	0xFE9
  8405                           wreg	equ	0xFE8
  8406                           indf1	equ	0xFE7
  8407                           postinc1	equ	0xFE6
  8408                           postdec1	equ	0xFE5
  8409                           fsr1h	equ	0xFE2
  8410                           fsr1l	equ	0xFE1
  8411                           indf2	equ	0xFDF
  8412                           postinc2	equ	0xFDE
  8413                           postdec2	equ	0xFDD
  8414                           fsr2h	equ	0xFDA
  8415                           fsr2l	equ	0xFD9
  8416                           status	equ	0xFD8
  8417                           
  8418 ;; *************** function _delay_us *****************
  8419 ;; Defined at:
  8420 ;;		line 51 in file "delays.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;  x               4    5[COMRAM] long 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;		None
  8425 ;; Return value:  Size  Location     Type
  8426 ;;		None               void
  8427 ;; Registers used:
  8428 ;;		wreg, status,2, status,0
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/E
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8437 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8438 ;;Total ram usage:        4 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    3
  8441 ;; This function calls:
  8442 ;;		Nothing
  8443 ;; This function is called by:
  8444 ;;		_LCD_init4bit
  8445 ;;		_LCD_placeCursor
  8446 ;;		_LCD_printString
  8447 ;;		_fft_init
  8448 ;;		_PS2_init
  8449 ;;		_PS2_readGamepad
  8450 ;;		_PS2_shiftInOut
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text41
  8455  0114C2                     __ptext41:
  8456                           	opt stack 0
  8457  0114C2                     _delay_us:
  8458                           	opt stack 25
  8459                           
  8460                           ;delays.c: 53: x -= 3;
  8461                           
  8462                           ;incstack = 0
  8463  0114C2  0EFD               	movlw	253
  8464  0114C4  D005               	goto	L2
  8465  0114C6                     l4411:
  8466                           
  8467                           ;delays.c: 55: {
  8468                           ;delays.c: 56: _delay((unsigned long)((1)*(64000000/4000000.0)));
  8469  0114C6  0E05               	movlw	5
  8470  0114C8                     u3047:
  8471  0114C8  2EE8               	decfsz	wreg,f,c
  8472  0114CA  D7FE               	goto	u3047
  8473  0114CC  F000               	nop	
  8474                           
  8475                           ;delays.c: 57: x -= 2;
  8476  0114CE  0EFE               	movlw	254
  8477  0114D0                     L2:
  8478  0114D0  2606               	addwf	delay_us@x,f,c
  8479  0114D2  0EFF               	movlw	255
  8480  0114D4  2207               	addwfc	delay_us@x+1,f,c
  8481  0114D6  2208               	addwfc	delay_us@x+2,f,c
  8482  0114D8  2209               	addwfc	delay_us@x+3,f,c
  8483  0114DA  5009               	movf	delay_us@x+3,w,c
  8484  0114DC  0A80               	xorlw	128
  8485  0114DE  0F80               	addlw	128
  8486  0114E0  E108               	bnz	u2195
  8487  0114E2  0E00               	movlw	0
  8488  0114E4  5C08               	subwf	delay_us@x+2,w,c
  8489  0114E6  E105               	bnz	u2195
  8490  0114E8  0E00               	movlw	0
  8491  0114EA  5C07               	subwf	delay_us@x+1,w,c
  8492  0114EC  E102               	bnz	u2195
  8493  0114EE  0E01               	movlw	1
  8494  0114F0  5C06               	subwf	delay_us@x,w,c
  8495  0114F2                     u2195:
  8496  0114F2  A0D8               	btfss	status,0,c
  8497  0114F4  0012               	return	
  8498  0114F6  D7E7               	goto	l4411
  8499  0114F8                     __end_of_delay_us:
  8500                           	opt stack 0
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           intcon2	equ	0xFF1
  8509                           intcon3	equ	0xFF0
  8510                           indf0	equ	0xFEF
  8511                           postinc0	equ	0xFEE
  8512                           fsr0h	equ	0xFEA
  8513                           fsr0l	equ	0xFE9
  8514                           wreg	equ	0xFE8
  8515                           indf1	equ	0xFE7
  8516                           postinc1	equ	0xFE6
  8517                           postdec1	equ	0xFE5
  8518                           fsr1h	equ	0xFE2
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           fsr2h	equ	0xFDA
  8524                           fsr2l	equ	0xFD9
  8525                           status	equ	0xFD8
  8526                           
  8527 ;; *************** function _delay_ms *****************
  8528 ;; Defined at:
  8529 ;;		line 62 in file "delays.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  x               4    9[COMRAM] long 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  time            4   21[COMRAM] unsigned long 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;		None               void
  8536 ;; Registers used:
  8537 ;;		wreg, status,2, status,0, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8544 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8545 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8546 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8547 ;;Total ram usage:       16 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    4
  8550 ;; This function calls:
  8551 ;;		_millis
  8552 ;; This function is called by:
  8553 ;;		_LCD_init4bit
  8554 ;;		_LCD_placeCursor
  8555 ;;		_LCD_printString
  8556 ;;		_RCMode
  8557 ;;		_main
  8558 ;;		_PS2_readGamepad
  8559 ;;		_PS2_sendCommandString
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	text42
  8564  01132A                     __ptext42:
  8565                           	opt stack 0
  8566  01132A                     _delay_ms:
  8567                           	opt stack 24
  8568                           
  8569                           ;delays.c: 64: unsigned long time = millis();
  8570                           
  8571                           ;incstack = 0
  8572  01132A  EC31  F08B         	call	_millis	;wreg free
  8573  01132E  C006  F016         	movff	?_millis,delay_ms@time
  8574  011332  C007  F017         	movff	?_millis+1,delay_ms@time+1
  8575  011336  C008  F018         	movff	?_millis+2,delay_ms@time+2
  8576  01133A  C009  F019         	movff	?_millis+3,delay_ms@time+3
  8577  01133E                     l4421:
  8578  01133E  EC31  F08B         	call	_millis	;wreg free
  8579  011342  C006  F00E         	movff	?_millis,??_delay_ms
  8580  011346  C007  F00F         	movff	?_millis+1,??_delay_ms+1
  8581  01134A  C008  F010         	movff	?_millis+2,??_delay_ms+2
  8582  01134E  C009  F011         	movff	?_millis+3,??_delay_ms+3
  8583  011352  5016               	movf	delay_ms@time,w,c
  8584  011354  5C0E               	subwf	??_delay_ms,w,c
  8585  011356  6E12               	movwf	(??_delay_ms+4)& (0+255),c
  8586  011358  5017               	movf	delay_ms@time+1,w,c
  8587  01135A  580F               	subwfb	??_delay_ms+1,w,c
  8588  01135C  6E13               	movwf	(??_delay_ms+5)& (0+255),c
  8589  01135E  5018               	movf	delay_ms@time+2,w,c
  8590  011360  5810               	subwfb	??_delay_ms+2,w,c
  8591  011362  6E14               	movwf	(??_delay_ms+6)& (0+255),c
  8592  011364  5019               	movf	delay_ms@time+3,w,c
  8593  011366  5811               	subwfb	??_delay_ms+3,w,c
  8594  011368  6E15               	movwf	(??_delay_ms+7)& (0+255),c
  8595  01136A  500A               	movf	delay_ms@x,w,c
  8596  01136C  5C12               	subwf	??_delay_ms+4,w,c
  8597  01136E  500B               	movf	delay_ms@x+1,w,c
  8598  011370  5813               	subwfb	??_delay_ms+5,w,c
  8599  011372  500C               	movf	delay_ms@x+2,w,c
  8600  011374  5814               	subwfb	??_delay_ms+6,w,c
  8601  011376  500D               	movf	delay_ms@x+3,w,c
  8602  011378  5815               	subwfb	??_delay_ms+7,w,c
  8603  01137A  B0D8               	btfsc	status,0,c
  8604  01137C  0012               	return	
  8605  01137E  D7DF               	goto	l4421
  8606  011380                     __end_of_delay_ms:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           intcon	equ	0xFF2
  8615                           intcon2	equ	0xFF1
  8616                           intcon3	equ	0xFF0
  8617                           indf0	equ	0xFEF
  8618                           postinc0	equ	0xFEE
  8619                           fsr0h	equ	0xFEA
  8620                           fsr0l	equ	0xFE9
  8621                           wreg	equ	0xFE8
  8622                           indf1	equ	0xFE7
  8623                           postinc1	equ	0xFE6
  8624                           postdec1	equ	0xFE5
  8625                           fsr1h	equ	0xFE2
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           fsr2h	equ	0xFDA
  8631                           fsr2l	equ	0xFD9
  8632                           status	equ	0xFD8
  8633                           
  8634 ;; *************** function _millis *****************
  8635 ;; Defined at:
  8636 ;;		line 110 in file "delays.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;		None
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  4    5[COMRAM] unsigned long 
  8643 ;; Registers used:
  8644 ;;		None
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8650 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8653 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8654 ;;Total ram usage:        4 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    3
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_delay_ms
  8661 ;;		_PS2_readGamepad
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text43
  8666  011662                     __ptext43:
  8667                           	opt stack 0
  8668  011662                     _millis:
  8669                           	opt stack 24
  8670                           
  8671                           ;delays.c: 112: return millisCount;
  8672                           
  8673                           ;incstack = 0
  8674  011662  C0B5  F006         	movff	_millisCount,?_millis
  8675  011666  C0B6  F007         	movff	_millisCount+1,?_millis+1
  8676  01166A  C0B7  F008         	movff	_millisCount+2,?_millis+2
  8677  01166E  C0B8  F009         	movff	_millisCount+3,?_millis+3
  8678  011672  0012               	return	
  8679  011674                     __end_of_millis:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           intcon2	equ	0xFF1
  8689                           intcon3	equ	0xFF0
  8690                           indf0	equ	0xFEF
  8691                           postinc0	equ	0xFEE
  8692                           fsr0h	equ	0xFEA
  8693                           fsr0l	equ	0xFE9
  8694                           wreg	equ	0xFE8
  8695                           indf1	equ	0xFE7
  8696                           postinc1	equ	0xFE6
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _encoderInterrupt *****************
  8708 ;; Defined at:
  8709 ;;		line 40 in file "encoders.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;		None               void
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8725 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8727 ;;Total ram usage:        3 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    2
  8730 ;; This function calls:
  8731 ;;		Nothing
  8732 ;; This function is called by:
  8733 ;;		Interrupt level 1
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	intcodelo
  8738  000018                     __pintcodelo:
  8739                           	opt stack 0
  8740  000018                     _encoderInterrupt:
  8741                           	opt stack 21
  8742                           
  8743                           ;incstack = 0
  8744  000018  CFD8 F001          	movff	status,??_encoderInterrupt
  8745  00001C  CFE8 F002          	movff	wreg,??_encoderInterrupt+1
  8746  000020  CFE0 F003          	movff	bsr,??_encoderInterrupt+2
  8747                           
  8748                           ;encoders.c: 42: if(INT1IF == 1)
  8749  000024  A0F0               	btfss	intcon3,0,c	;volatile
  8750  000026  D00E               	goto	i1l395
  8751                           
  8752                           ;encoders.c: 43: {
  8753                           ;encoders.c: 44: if(PORTBbits.RB0 == 1)
  8754  000028  A081               	btfss	3969,0,c	;volatile
  8755  00002A  D004               	goto	i1l4397
  8756                           
  8757                           ;encoders.c: 45: {
  8758                           ;encoders.c: 46: left_count--;
  8759  00002C  0EFF               	movlw	255
  8760  00002E  0100               	movlb	0	; () banked
  8761  000030  07B1               	decf	_left_count& (0+255),f,b	;volatile
  8762  000032  D003               	goto	L5
  8763  000034                     i1l4397:
  8764                           
  8765                           ;encoders.c: 48: else
  8766                           ;encoders.c: 49: {
  8767                           ;encoders.c: 50: left_count++;
  8768  000034  0100               	movlb	0	; () banked
  8769  000036  2BB1               	incf	_left_count& (0+255),f,b	;volatile
  8770  000038  0E00               	movlw	0
  8771  00003A                     L5:
  8772  00003A  23B2               	addwfc	(_left_count+1)& (0+255),f,b	;volatile
  8773  00003C  23B3               	addwfc	(_left_count+2)& (0+255),f,b	;volatile
  8774  00003E  23B4               	addwfc	(_left_count+3)& (0+255),f,b	;volatile
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;encoders.c: 51: }
  8778                           ;encoders.c: 52: INT1IF = 0;
  8779  000040  90F0               	bcf	intcon3,0,c	;volatile
  8780                           
  8781                           ;encoders.c: 53: }
  8782  000042  D00F               	goto	i1l402
  8783  000044                     i1l395:
  8784                           
  8785                           ;encoders.c: 54: else if(INT3IF == 1)
  8786  000044  A4F0               	btfss	intcon3,2,c	;volatile
  8787  000046  D00D               	goto	i1l402
  8788                           
  8789                           ;encoders.c: 55: {
  8790                           ;encoders.c: 56: if(PORTBbits.RB2 == 1)
  8791  000048  A481               	btfss	3969,2,c	;volatile
  8792  00004A  D004               	goto	i1l4405
  8793                           
  8794                           ;encoders.c: 57: {
  8795                           ;encoders.c: 58: right_count--;
  8796  00004C  0EFF               	movlw	255
  8797  00004E  0100               	movlb	0	; () banked
  8798  000050  07B9               	decf	_right_count& (0+255),f,b	;volatile
  8799  000052  D003               	goto	L6
  8800  000054                     i1l4405:
  8801                           
  8802                           ;encoders.c: 60: else
  8803                           ;encoders.c: 61: {
  8804                           ;encoders.c: 62: right_count++;
  8805  000054  0100               	movlb	0	; () banked
  8806  000056  2BB9               	incf	_right_count& (0+255),f,b	;volatile
  8807  000058  0E00               	movlw	0
  8808  00005A                     L6:
  8809  00005A  23BA               	addwfc	(_right_count+1)& (0+255),f,b	;volatile
  8810  00005C  23BB               	addwfc	(_right_count+2)& (0+255),f,b	;volatile
  8811  00005E  23BC               	addwfc	(_right_count+3)& (0+255),f,b	;volatile
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;encoders.c: 63: }
  8815                           ;encoders.c: 64: INT3IF = 0;
  8816  000060  94F0               	bcf	intcon3,2,c	;volatile
  8817  000062                     i1l402:
  8818  000062  C003  FFE0         	movff	??_encoderInterrupt+2,bsr
  8819  000066  C002  FFE8         	movff	??_encoderInterrupt+1,wreg
  8820  00006A  C001  FFD8         	movff	??_encoderInterrupt,status
  8821  00006E  0010               	retfie	
  8822  000070                     __end_of_encoderInterrupt:
  8823                           	opt stack 0
  8824                           tblptru	equ	0xFF8
  8825                           tblptrh	equ	0xFF7
  8826                           tblptrl	equ	0xFF6
  8827                           tablat	equ	0xFF5
  8828                           prodh	equ	0xFF4
  8829                           prodl	equ	0xFF3
  8830                           intcon	equ	0xFF2
  8831                           intcon2	equ	0xFF1
  8832                           intcon3	equ	0xFF0
  8833                           indf0	equ	0xFEF
  8834                           postinc0	equ	0xFEE
  8835                           fsr0h	equ	0xFEA
  8836                           fsr0l	equ	0xFE9
  8837                           wreg	equ	0xFE8
  8838                           indf1	equ	0xFE7
  8839                           postinc1	equ	0xFE6
  8840                           postdec1	equ	0xFE5
  8841                           fsr1h	equ	0xFE2
  8842                           fsr1l	equ	0xFE1
  8843                           bsr	equ	0xFE0
  8844                           indf2	equ	0xFDF
  8845                           postinc2	equ	0xFDE
  8846                           postdec2	equ	0xFDD
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function _communicationInterruptHandler *****************
  8852 ;; Defined at:
  8853 ;;		line 203 in file "main.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;		None
  8858 ;; Return value:  Size  Location     Type
  8859 ;;		None               void
  8860 ;; Registers used:
  8861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8871 ;;Total ram usage:        2 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    1
  8874 ;; This function calls:
  8875 ;;		_tickMillis
  8876 ;; This function is called by:
  8877 ;;		Interrupt level 2
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           	psect	intcode
  8882  000008                     __pintcode:
  8883                           	opt stack 0
  8884  000008                     _communicationInterruptHandler:
  8885                           	opt stack 21
  8886                           
  8887                           ;incstack = 0
  8888  000008  CFD9 F004          	movff	fsr2l,??_communicationInterruptHandler
  8889  00000C  CFDA F005          	movff	fsr2h,??_communicationInterruptHandler+1
  8890  000010  EF07  F089         	goto	int_func
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           intcon2	equ	0xFF1
  8899                           intcon3	equ	0xFF0
  8900                           indf0	equ	0xFEF
  8901                           postinc0	equ	0xFEE
  8902                           fsr0h	equ	0xFEA
  8903                           fsr0l	equ	0xFE9
  8904                           wreg	equ	0xFE8
  8905                           indf1	equ	0xFE7
  8906                           postinc1	equ	0xFE6
  8907                           postdec1	equ	0xFE5
  8908                           fsr1h	equ	0xFE2
  8909                           fsr1l	equ	0xFE1
  8910                           bsr	equ	0xFE0
  8911                           indf2	equ	0xFDF
  8912                           postinc2	equ	0xFDE
  8913                           postdec2	equ	0xFDD
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918                           	psect	intcode_body
  8919  01120E                     __pintcode_body:
  8920                           	opt stack 21
  8921  01120E                     int_func:
  8922                           	opt stack 21
  8923                           
  8924                           ;main.c: 205: if(TMR0IF == 1)
  8925  01120E  A4F2               	btfss	intcon,2,c	;volatile
  8926  011210  D007               	goto	i2l284
  8927                           
  8928                           ;main.c: 206: {
  8929                           ;main.c: 207: TMR0L = 193;
  8930  011212  0EC1               	movlw	193
  8931  011214  6ED6               	movwf	4054,c	;volatile
  8932                           
  8933                           ;main.c: 208: TMR0IF = 0;
  8934  011216  94F2               	bcf	intcon,2,c	;volatile
  8935                           
  8936                           ;main.c: 209: TMR0IE = 1;
  8937  011218  8AF2               	bsf	intcon,5,c	;volatile
  8938                           
  8939                           ;main.c: 210: tickMillis();
  8940  01121A  EC57  F08B         	call	_tickMillis	;wreg free
  8941  01121E  D025               	goto	i2l282
  8942  011220                     i2l284:
  8943                           
  8944                           ;main.c: 224: }
  8945                           ;main.c: 225: if(PIR1bits.RC1IF)
  8946  011220  AA9E               	btfss	3998,5,c	;volatile
  8947  011222  D00A               	goto	i2l4379
  8948                           
  8949                           ;main.c: 226: {
  8950                           ;main.c: 227: FONA_BUFF[FONA_INDEX] = RCREG1;
  8951  011224  0101               	movlb	1	; () banked
  8952  011226  0E00               	movlw	low _FONA_BUFF	;volatile
  8953  011228  2453               	addwf	_FONA_INDEX,w,c	;volatile
  8954  01122A  6ED9               	movwf	fsr2l,c
  8955  01122C  6ADA               	clrf	fsr2h,c
  8956  01122E  0E01               	movlw	high _FONA_BUFF	;volatile
  8957  011230  22DA               	addwfc	fsr2h,f,c
  8958  011232  CFAE FFDF          	movff	4014,indf2	;volatile
  8959                           
  8960                           ; BSR set to: 1
  8961                           ;main.c: 228: FONA_INDEX++;
  8962  011236  2A53               	incf	_FONA_INDEX,f,c	;volatile
  8963  011238                     i2l4379:
  8964                           
  8965                           ;main.c: 229: }
  8966                           ;main.c: 230: if(PIR3bits.RC2IF)
  8967  011238  50A4               	movf	4004,w,c	;volatile
  8968                           
  8969                           ;main.c: 233: }
  8970                           ;main.c: 234: if(PIR6bits.RC3IF)
  8971                           
  8972                           ;main.c: 231: {
  8973  01123A  AAA6               	btfss	4006,5,c	;volatile
  8974  01123C  D00A               	goto	i2l4385
  8975                           
  8976                           ;main.c: 235: {
  8977                           ;main.c: 236: PIXY_BUFF[PIXY_INDEX] = RCREG3;
  8978  01123E  0E80               	movlw	low _PIXY_BUFF
  8979  011240  2454               	addwf	_PIXY_INDEX,w,c	;volatile
  8980  011242  6ED9               	movwf	fsr2l,c
  8981  011244  6ADA               	clrf	fsr2h,c
  8982  011246  0E02               	movlw	high _PIXY_BUFF
  8983  011248  22DA               	addwfc	fsr2h,f,c
  8984  01124A  010F               	movlb	15	; () banked
  8985  01124C  CF2A FFDF          	movff	3882,indf2	;volatile
  8986                           
  8987                           ; BSR set to: 15
  8988                           ;main.c: 237: PIXY_INDEX++;
  8989  011250  2A54               	incf	_PIXY_INDEX,f,c	;volatile
  8990  011252                     i2l4385:
  8991                           
  8992                           ;main.c: 238: }
  8993                           ;main.c: 239: if(PIR6bits.RC4IF)
  8994  011252  AEA6               	btfss	4006,7,c	;volatile
  8995  011254  D00A               	goto	i2l282
  8996                           
  8997                           ;main.c: 240: {
  8998                           ;main.c: 241: USB_BUFF[USB_INDEX] = RCREG4;
  8999  011256  0E74               	movlw	low _USB_BUFF
  9000  011258  2456               	addwf	_USB_INDEX,w,c	;volatile
  9001  01125A  6ED9               	movwf	fsr2l,c
  9002  01125C  6ADA               	clrf	fsr2h,c
  9003  01125E  0E04               	movlw	high _USB_BUFF
  9004  011260  22DA               	addwfc	fsr2h,f,c
  9005  011262  010E               	movlb	14	; () banked
  9006  011264  CEFA FFDF          	movff	3834,indf2	;volatile
  9007                           
  9008                           ; BSR set to: 14
  9009                           ;main.c: 242: USB_INDEX++;
  9010  011268  2A56               	incf	_USB_INDEX,f,c	;volatile
  9011  01126A                     i2l282:
  9012  01126A  C005  FFDA         	movff	??_communicationInterruptHandler+1,fsr2h
  9013  01126E  C004  FFD9         	movff	??_communicationInterruptHandler,fsr2l
  9014  011272  0011               	retfie		f
  9015  011274                     __end_of_communicationInterruptHandler:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           intcon3	equ	0xFF0
  9026                           indf0	equ	0xFEF
  9027                           postinc0	equ	0xFEE
  9028                           fsr0h	equ	0xFEA
  9029                           fsr0l	equ	0xFE9
  9030                           wreg	equ	0xFE8
  9031                           indf1	equ	0xFE7
  9032                           postinc1	equ	0xFE6
  9033                           postdec1	equ	0xFE5
  9034                           fsr1h	equ	0xFE2
  9035                           fsr1l	equ	0xFE1
  9036                           bsr	equ	0xFE0
  9037                           indf2	equ	0xFDF
  9038                           postinc2	equ	0xFDE
  9039                           postdec2	equ	0xFDD
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function _tickMillis *****************
  9045 ;; Defined at:
  9046 ;;		line 121 in file "delays.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;		None
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, status,2, status,0
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : F/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9064 ;;Total ram usage:        0 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; This function calls:
  9067 ;;		Nothing
  9068 ;; This function is called by:
  9069 ;;		_communicationInterruptHandler
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           	psect	text46
  9074  0116AE                     __ptext46:
  9075                           	opt stack 0
  9076  0116AE                     _tickMillis:
  9077                           	opt stack 21
  9078                           
  9079                           ;delays.c: 123: ++millisCount;
  9080                           
  9081                           ;incstack = 0
  9082  0116AE  0100               	movlb	0	; () banked
  9083  0116B0  2BB5               	incf	_millisCount& (0+255),f,b
  9084  0116B2  0E00               	movlw	0
  9085  0116B4  23B6               	addwfc	(_millisCount+1)& (0+255),f,b
  9086  0116B6  23B7               	addwfc	(_millisCount+2)& (0+255),f,b
  9087  0116B8  23B8               	addwfc	(_millisCount+3)& (0+255),f,b
  9088                           
  9089                           ; BSR set to: 0
  9090  0116BA  0C00               	retlw	0
  9091  0116BC                     __end_of_tickMillis:
  9092                           	opt stack 0
  9093                           tblptru	equ	0xFF8
  9094                           tblptrh	equ	0xFF7
  9095                           tblptrl	equ	0xFF6
  9096                           tablat	equ	0xFF5
  9097                           prodh	equ	0xFF4
  9098                           prodl	equ	0xFF3
  9099                           intcon	equ	0xFF2
  9100                           intcon2	equ	0xFF1
  9101                           intcon3	equ	0xFF0
  9102                           indf0	equ	0xFEF
  9103                           postinc0	equ	0xFEE
  9104                           fsr0h	equ	0xFEA
  9105                           fsr0l	equ	0xFE9
  9106                           wreg	equ	0xFE8
  9107                           indf1	equ	0xFE7
  9108                           postinc1	equ	0xFE6
  9109                           postdec1	equ	0xFE5
  9110                           fsr1h	equ	0xFE2
  9111                           fsr1l	equ	0xFE1
  9112                           bsr	equ	0xFE0
  9113                           indf2	equ	0xFDF
  9114                           postinc2	equ	0xFDE
  9115                           postdec2	equ	0xFDD
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           intcon	equ	0xFF2
  9126                           intcon2	equ	0xFF1
  9127                           intcon3	equ	0xFF0
  9128                           indf0	equ	0xFEF
  9129                           postinc0	equ	0xFEE
  9130                           fsr0h	equ	0xFEA
  9131                           fsr0l	equ	0xFE9
  9132                           wreg	equ	0xFE8
  9133                           indf1	equ	0xFE7
  9134                           postinc1	equ	0xFE6
  9135                           postdec1	equ	0xFE5
  9136                           fsr1h	equ	0xFE2
  9137                           fsr1l	equ	0xFE1
  9138                           bsr	equ	0xFE0
  9139                           indf2	equ	0xFDF
  9140                           postinc2	equ	0xFDE
  9141                           postdec2	equ	0xFDD
  9142                           fsr2h	equ	0xFDA
  9143                           fsr2l	equ	0xFD9
  9144                           status	equ	0xFD8
  9145                           
  9146                           	psect	rparam
  9147  0000                     tblptru	equ	0xFF8
  9148                           tblptrh	equ	0xFF7
  9149                           tblptrl	equ	0xFF6
  9150                           tablat	equ	0xFF5
  9151                           prodh	equ	0xFF4
  9152                           prodl	equ	0xFF3
  9153                           intcon	equ	0xFF2
  9154                           intcon2	equ	0xFF1
  9155                           intcon3	equ	0xFF0
  9156                           indf0	equ	0xFEF
  9157                           postinc0	equ	0xFEE
  9158                           fsr0h	equ	0xFEA
  9159                           fsr0l	equ	0xFE9
  9160                           wreg	equ	0xFE8
  9161                           indf1	equ	0xFE7
  9162                           postinc1	equ	0xFE6
  9163                           postdec1	equ	0xFE5
  9164                           fsr1h	equ	0xFE2
  9165                           fsr1l	equ	0xFE1
  9166                           bsr	equ	0xFE0
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           tblptru	equ	0xFF8
  9174                           tblptrh	equ	0xFF7
  9175                           tblptrl	equ	0xFF6
  9176                           tablat	equ	0xFF5
  9177                           prodh	equ	0xFF4
  9178                           prodl	equ	0xFF3
  9179                           intcon	equ	0xFF2
  9180                           intcon2	equ	0xFF1
  9181                           intcon3	equ	0xFF0
  9182                           indf0	equ	0xFEF
  9183                           postinc0	equ	0xFEE
  9184                           fsr0h	equ	0xFEA
  9185                           fsr0l	equ	0xFE9
  9186                           wreg	equ	0xFE8
  9187                           indf1	equ	0xFE7
  9188                           postinc1	equ	0xFE6
  9189                           postdec1	equ	0xFE5
  9190                           fsr1h	equ	0xFE2
  9191                           fsr1l	equ	0xFE1
  9192                           bsr	equ	0xFE0
  9193                           indf2	equ	0xFDF
  9194                           postinc2	equ	0xFDE
  9195                           postdec2	equ	0xFDD
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8


Data Sizes:
    Strings     270
    Constant    43
    Data        41
    BSS         1409
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      89
    BANK0           160     56     143
    BANK1           256      0     228
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> UART_transmitString@tempString_1922(COMRAM[2]), UART_transmitString@tempString(COMRAM[20]), STR_15(CODE[2]), LCD_printString@tempString_590(BANK0[2]), 
		 -> LCD_printString@tempString(BANK0[20]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_16(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> UART_transmitString@tempString(COMRAM[20]), LCD_printString@tempString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S3619$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    PS2_sendCommandString@string	PTR unsigned char  size(1) Largest target is 9
		 -> exit_config(BANK0[9]), set_mode(BANK0[9]), enter_config(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 21
		 -> FONA_CheckStrength@genString(COMRAM[21]), FONA_Text@genString(COMRAM[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    LCD_printString@input	PTR unsigned char  size(2) Largest target is 18
		 -> STR_22(CODE[7]), STR_21(CODE[13]), STR_14(CODE[17]), STR_13(CODE[15]), 
		 -> STR_12(CODE[18]), STR_11(CODE[16]), STR_10(CODE[15]), STR_9(CODE[17]), 
		 -> STR_8(CODE[15]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[16]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), LCD_printBin@string(COMRAM[9]), LCD_printVal@temp(COMRAM[3]), 
		 -> LCD_printChar@string(COMRAM[2]), 

    LCD_printString@aptr	PTR void [1] size(1) Largest target is 0
		 -> ?_LCD_printString(COMRAM[0]), 


Critical Paths under _main in COMRAM

    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _motorDrive_init->_motorDrive_setSpeeds
    _fft_init->_LCD_printString
    _LCD_init4bit->_delay_ms
    _competitionMode->_LCD_printString
    _RCMode->_PS2_init
    _motorDrive_setSpeeds->___awdiv
    ___awdiv->___wmul
    _PS2_init->_PS2_readGamepad
    _PS2_reconfig->_PS2_sendCommandString
    _PS2_sendCommandString->_delay_ms
    _PS2_shiftInOut->_delay_us
    _LCD_printString->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_placeCursor->_delay_ms
    _delay_ms->_millis

Critical Paths under _communicationInterruptHandler in COMRAM

    None.

Critical Paths under _encoderInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_RCMode
    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _fft_init->_LCD_printString
    _competitionMode->_LCD_printString
    _RCMode->_LCD_printString

Critical Paths under _communicationInterruptHandler in BANK0

    None.

Critical Paths under _encoderInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _communicationInterruptHandler in BANK1

    None.

Critical Paths under _encoderInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _communicationInterruptHandler in BANK2

    None.

Critical Paths under _encoderInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _communicationInterruptHandler in BANK3

    None.

Critical Paths under _encoderInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _communicationInterruptHandler in BANK4

    None.

Critical Paths under _encoderInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _communicationInterruptHandler in BANK5

    None.

Critical Paths under _encoderInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _communicationInterruptHandler in BANK6

    None.

Critical Paths under _encoderInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _communicationInterruptHandler in BANK7

    None.

Critical Paths under _encoderInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _communicationInterruptHandler in BANK8

    None.

Critical Paths under _encoderInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _communicationInterruptHandler in BANK9

    None.

Critical Paths under _encoderInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _communicationInterruptHandler in BANK10

    None.

Critical Paths under _encoderInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _communicationInterruptHandler in BANK11

    None.

Critical Paths under _encoderInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _communicationInterruptHandler in BANK12

    None.

Critical Paths under _encoderInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _communicationInterruptHandler in BANK13

    None.

Critical Paths under _encoderInterrupt in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  177017
                                             79 COMRAM     3     3      0
                    _LCD_printString
                             _RCMode
                    _competitionMode
                              _debug
                           _delay_ms
                               _init
                           _selfTest
                      _settings_auto
                _settings_readButton
                  _settings_selfTest
                    _settings_wander
                         _wanderMode
 ---------------------------------------------------------------------------------
 (1) _wanderMode                                           0     0      0   18182
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _settings_wander                                      1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_selfTest                                    1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_auto                                        1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _selfTest                                             1     1      0   18197
                                             42 COMRAM     1     1      0
                    _LCD_printString
                _settings_readButton
 ---------------------------------------------------------------------------------
 (1) _settings_readButton                                  1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   32109
                       _LCD_init4bit
                          _UART_init
                        _clearMillis
                      _encoders_init
                           _fft_init
                    _motorDrive_init
                      _settings_init
 ---------------------------------------------------------------------------------
 (2) _settings_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motorDrive_init                                      0     0      0    4974
                          _OpenEPWM1
                          _OpenEPWM3
                         _SetDCEPWM1
                         _SetDCEPWM3
                     _SetOutputEPWM1
                     _SetOutputEPWM3
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM3                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM1                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM3                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM1                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _fft_init                                             0     0      0   21926
                    _LCD_printString
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _encoders_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_init4bit                                         0     0      0    5209
                         _delay_init
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _debug                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _competitionMode                                      0     0      0   18182
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _RCMode                                               6     6      0   70544
                                             50 BANK0      6     6      0
                    _LCD_printString
                         _PS2_analog
                           _PS2_init
                    _PS2_readGamepad
                       _PS2_readType
                            ___awdiv
                           _delay_ms
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _motorDrive_setSpeeds                                22    21      1    3866
                                             19 COMRAM    22    21      1
                         _SetDCEPWM1
                         _SetDCEPWM3
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1150
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1091
                                             11 COMRAM     8     4      4
                         _PS2_analog (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM3                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM1                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PS2_readType                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PS2_init                                            13    13      0   29961
                                             66 COMRAM    13    13      0
                    _PS2_readGamepad
              _PS2_sendCommandString
                     _PS2_shiftInOut
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_readGamepad                                     34    34      0   15778
                                             32 COMRAM    34    34      0
                       _PS2_reconfig
                     _PS2_shiftInOut
                           _delay_ms
                           _delay_us
                             _millis
 ---------------------------------------------------------------------------------
 (3) _PS2_reconfig                                         0     0      0    6197
              _PS2_sendCommandString
 ---------------------------------------------------------------------------------
 (4) _PS2_sendCommandString                                7     6      1    6197
                                             25 COMRAM     7     6      1
                     _PS2_shiftInOut
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _PS2_shiftInOut                                       5     5      0    3942
                                              9 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_analog                                           1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCD_printString                                     59    52      7   18182
                                             33 COMRAM     9     2      7
                                              0 BANK0     50    50      0
                    _LCD_placeCursor
                         _PS2_analog (ARG)
                           _delay_ms
                           _delay_us
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     947
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             16    12      4    1677
                                             17 COMRAM    16    12      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             12 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                              5 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _LCD_placeCursor                                      5     4      1    5924
                                             25 COMRAM     5     4      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             4     0      4    3744
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                            16    12      4    1465
                                              9 COMRAM    16    12      4
                             _millis
 ---------------------------------------------------------------------------------
 (4) _millis                                               4     0      4       0
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _encoderInterrupt                                     3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _communicationInterruptHandler                        2     2      0       0
                                              3 COMRAM     2     2      0
                         _tickMillis
 ---------------------------------------------------------------------------------
 (10) _tickMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_printString
     _LCD_placeCursor
       _delay_ms
         _millis
       _delay_us
     _PS2_analog (ARG)
     _delay_ms (ARG)
       _millis
     _delay_us (ARG)
     _sprintf (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat (ARG)
   _RCMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _PS2_analog
     _PS2_init
       _PS2_readGamepad
         _PS2_reconfig
           _PS2_sendCommandString
             _PS2_shiftInOut
               _delay_us
             _delay_ms
               _millis
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
         _delay_us
         _millis
       _PS2_sendCommandString
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
       _PS2_shiftInOut
         _delay_us
       _delay_us
     _PS2_readGamepad
       _PS2_reconfig
         _PS2_sendCommandString
           _PS2_shiftInOut
             _delay_us
           _delay_ms
             _millis
       _PS2_shiftInOut
         _delay_us
       _delay_ms
         _millis
       _delay_us
       _millis
     _PS2_readType
     ___awdiv
       _PS2_analog (ARG)
       ___wmul (ARG)
     _delay_ms
       _millis
     _motorDrive_setSpeeds
       _SetDCEPWM1
       _SetDCEPWM3
       ___awdiv
         _PS2_analog (ARG)
         ___wmul (ARG)
       ___wmul
   _competitionMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
   _debug
   _delay_ms
     _millis
   _init
     _LCD_init4bit
       _delay_init
       _delay_ms
         _millis
       _delay_us
     _UART_init
     _clearMillis
     _encoders_init
     _fft_init
       _LCD_printString
         _LCD_placeCursor
           _delay_ms
             _millis
           _delay_us
         _PS2_analog (ARG)
         _delay_ms (ARG)
           _millis
         _delay_us (ARG)
         _sprintf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _strcat (ARG)
       _delay_us
     _motorDrive_init
       _OpenEPWM1
       _OpenEPWM3
       _SetDCEPWM1
       _SetDCEPWM3
       _SetOutputEPWM1
       _SetOutputEPWM3
       _motorDrive_setSpeeds
         _SetDCEPWM1
         _SetDCEPWM3
         ___awdiv
           _PS2_analog (ARG)
           ___wmul (ARG)
         ___wmul
     _settings_init
   _selfTest
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _settings_readButton
   _settings_auto
   _settings_readButton
   _settings_selfTest
   _settings_wander
   _wanderMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)

 _encoderInterrupt (ROOT)

 _communicationInterruptHandler (ROOT)
   _tickMillis

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0     3E8      33       28.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      80      10       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     38      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     52      59       1       93.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24C       8        0.0%
DATA                 0      0     634       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May  7 10:06:01 2015

                            __CFG_BW$16 000000                             __CFG_ABW$MM 000000  
                                    PL2 08A6                                      PL4 02AA  
                                    PL6 033E                                      PL8 0350  
                                    l94 05FA                            ___awdiv@sign 0011  
                                    bsr 000FE0                     ___wmul@multiplicand 0008  
                           __CFG_BORV$1 000000                          _SetOutputEPWM1 0FE6  
                        _SetOutputEPWM3 0F74                            __CFG_CP0$OFF 000000  
                                   PL10 08B2                                     PL20 06E8  
                                   PL12 0360                                     PL30 070A  
                                   PL22 06FC                                     PL14 06B0  
                                   PL40 0546                                     PL32 0DB4  
                                   PL24 0CF0                                     PL16 06C8  
                                   PL42 0550                                     PL34 0B26  
                                   PL26 0AF6                                     PL18 06D8  
                                   PL36 0536                                     PL28 0B0E  
                                   PL38 0378                                     l116 0204  
                                   l108 0150                                     l242 1660  
                                   l236 164E                                     l717 12B4  
                                   l916 09E6                                     l844 046A  
                                   l933 115C                                     l934 115E  
                                   _GIE 007F97                                     _RG0 007C30  
                                   _RG1 007C31                                     _RG2 007C32  
                                   _RG3 007C33                                     _RG4 007C34  
                                   _RL1 007721                                     _RL2 007722  
                                   _RL3 007723                                     _PR2 000FCB  
                                   _PR4 000F05                                     _PR6 000F3E  
                                   _PR8 000F3B                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                              _TXSTA2bits 000F32  
                            _TXSTA3bits 000F2E                              _TXSTA4bits 000EFE  
                                  l1115 0A28                                    l1243 0FA6  
                                  l1253 0FD2                                    l1182 1018  
                                  l1254 0FDE                                    l1255 0FE2  
                                  l1192 1044                                    l1248 0FC2  
                                  l1193 1050                                    l1194 1054  
                                  l1187 1034                                    l2503 0F42  
                                  l2507 0F5A                                    l2531 0FC6  
                                  l2523 0FB2                                    l1820 13C0  
                                  l2453 1098                                    l1830 1442  
                                  l2519 0FA8                                    l2457 10B0  
                                  l2449 1080                                    l2481 1038  
                                  l2473 1024                                    l4411 14C6  
                                  l4421 133E                                    l4501 057A  
                                  l5213 0C5A                                    l5205 0C52  
                                  l2469 101A                                    l5231 0C7A  
                                  l4601 0AEA                                    l5305 1562  
                                  l4451 13D4                                    l5251 0CDA  
                                  l5323 0D3E                                    l5315 0D0C  
                                  l2499 0F2A                                    l5307 156A  
                                  l4541 12E0                                    l4701 0158  
                                  l4429 113E                                    l5317 0D14  
                                  l4535 06A0                                    l4543 12EE  
                                  l4439 118C                                    l4455 13E6  
                                  l5255 0CEE                                    l5351 0B8E  
                                  l5343 0B38                                    l4465 1390  
                                  l4545 12F6                                    l4705 0172  
                                  l5281 163A                                    l4641 0EB4  
                                  l5329 0D68                                    l5353 0BA0  
                                  l5361 0BDA                                    l5345 0B58  
                                  l4467 1398                                    l4539 12DC  
                                  l5275 1632                                    l5267 162C  
                                  l4643 0EBC                                    l4635 0EA4  
                                  l4811 03CC                                    l5187 12B2  
                                  l5371 0C06                                    l5355 0BB2  
                                  l5347 0B6A                                    l4477 13B6  
                                  l4469 139C                                    l4493 1438  
                                  l4485 141A                                    l4549 0A14  
                                  l4709 017C                                    l4661 0EF0  
                                  l4653 0EDA                                    l4645 0EC0  
                                  l4629 0E8C                                    l4821 03F4  
                                  l4813 03D6                                    l5373 0C0C  
                                  l5365 0BF4                                    l5349 0B7C  
                                  l4487 1422                                    l4591 0AA0  
                                  l4583 0A84                                    l4575 0A64  
                                  l4559 0A38                                    l4743 0272  
                                  l4751 028A                                    l5367 0BFA  
                                  l5359 0BC4                                    l4489 1426  
                                  l4569 0A60                                    l4745 027C  
                                  l4673 0026                                    l4657 0EE4  
                                  l5369 0C00                                    l5377 0C12  
                                  l4835 0432                                    l4827 040E  
                                  l4819 03EA                                    l4597 0ADE  
                                  l4589 0A9A                                    l4749 0284  
                                  l4765 094A                                    l4845 047A  
                                  l4837 043C                                    l4829 0418  
                                  l4599 0AE4                                    l4695 0116  
                                  l4687 00D8                                    l4679 009C  
                                  l4783 0982                                    l4855 04C4  
                                  l4847 049E                                    l4689 00E0  
                                  l4697 011C                                    l4857 04D6  
                                  l4849 04A6                                    l4797 09BA  
                                  _ADON 007E0F                                    STR_1 FFFC  
                                  STR_2 FFC9                                    STR_3 FF3A  
                                  STR_4 FF16                                    STR_5 FF7F  
                                  STR_6 FF4C                                    STR_7 FF04  
                                  STR_8 FFBD                                    STR_9 FF5D  
                                  _CPEN 0076C7                                    _LCDA 0076D5  
                                  _DONE 007E00                                    u2214 114E  
                                  u2215 114A                                    u2244 1184  
                                  u2245 1180                                    u3047 14C8  
                                  u2335 0606                                    u2600 013A  
                                  u2345 060C                                    u2370 1320  
                                  u2195 14F2                                    u2355 0620  
                                  u2541 000A                                    u2550 0044  
                                  u2607 0130                                    _IPEN 007E87  
                                  u2377 1316                                    u2721 096A  
                                  u2705 0904                                    u2465 1492  
                                  u2570 0082                                    u2731 0978  
                                  u2475 1456                                    u2557 003A  
                                  u2590 0100                                    u2665 02DA  
                                  u2577 0078                                    u2675 0302  
                                  u2835 0442                                    u2597 00F6  
                                  u2775 0388                                    u2865 04AC  
                                  u2785 03A4                                    _SAMP 007E01  
                                  _main 0B30                                    _init 1608  
                                  _mode 0058                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                         __CFG_BOREN$ON 000000                                    prodh 000FF4  
                                  prodl 000FF3                      __CFG_WDTWIN$PS25_0 000000  
                                  start 0070                           __CFG_IESO$OFF 000000  
                    __CFG_LS48MHZ$SYSX2 000000                         _motorDrive_init 10CA  
                __end_of_SetOutputEPWM1 1058                  __end_of_SetOutputEPWM3 0FE6  
           __end_of_settings_readButton 16A0                        RCMode@left_speed 0092  
                          _BAUDCON1bits 000F67                         _competitionMode 1650  
                          _BAUDCON2bits 000F31                            _BAUDCON3bits 000F2D  
                          _BAUDCON4bits 000EFD                           __CFG_WAIT$OFF 000000  
                           ?_PS2_analog 0001                                   ?_main 0001  
                                 ?_init 0001                         __end_of___awdiv 0EFA  
                 OpenEPWM3@timer_source 0006                                   STR_10 FFAE  
                                 STR_11 FF8F                                   STR_20 FFE3  
                                 STR_12 FF28                                   STR_21 FFCC  
                                 STR_13 FF9F                                   STR_22 FFF5  
                                 STR_14 FF6E                                   STR_17 FFD9  
                                 STR_18 FFEC                                   STR_19 FEF0  
                                 _RD163 007D8F                                   _T0CON 000FD5  
                       ___awdiv@divisor 000E                                   _LCDMD 00778B  
                                 _RC1IE 007CED                                   _RC2IE 007D1D  
                                 _RC3IE 007B0D                                   _RC4IE 007B0F  
                       __end_of___lwdiv 13CA                                   i1l402 0062  
                       __end_of___lwmod 144C                                   i1l395 0044  
                                 i2l282 126A                                   i2l284 1220  
                       ___awdiv@counter 0010                                   _TX1IE 007CEC  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TX2IE 007D1C                                   _TMR3L 000FB2  
                                 _TX3IE 007B0C                                   _TX4IE 007B0E  
                         ?_LCD_init4bit 0001                           __CFG_WPSA$128 000000  
                      __end_of_PS2_init 0CF0                          __CFG_EASHFT$ON 000000  
                       ??_encoders_init 0006                                   _debug 16D4  
                    __size_of_UART_init 00AC                         __end_of_dpowers FECF  
                       ??_settings_auto 0006                         ??_settings_init 0006  
                                 _spbrg 00C1                                   tablat 000FF5  
                                 status 000FD8                         __end_of_sprintf 0AF6  
                            _SetDCEPWM1 1488                              _SetDCEPWM3 144C  
                  __size_of_clearMillis 000E                         __initialization 11A4  
                   PS2_readGamepad@temp 003B                            __end_of_main 0C28  
                          __end_of_init 1624                 __size_of_PS2_shiftInOut 006C  
                       ?_SetOutputEPWM1 0006                         ?_SetOutputEPWM3 0006  
                                ??_main 0050                                  ??_init 002B  
                         __activetblptr 000003                          ??_LCD_init4bit 001A  
                   __CFG_WPEND$WPENDMEM 000000                          __CFG_RETEN$OFF 000000  
              __size_of_PS2_readGamepad 014E                    _motorDrive_setSpeeds 0384  
                                ?_debug 0001                                  _CCPR1L 000FBA  
                                _CCPR3L 000F4A                          __CFG_VBTBOR$ON 000000  
                                _ANCON1 000E47                                  _ANCON2 000E46  
                                _ANCON3 000E45                        ___awdiv@dividend 000C  
              __size_of_LCD_placeCursor 0156                                  _ANSEL6 00723E  
                                _ANSEL9 007231                                  _INT1IF 007F80  
                                _INT3IF 007F82                                  i1l4405 0054  
                                i1l4397 0034                                  _IOLOCK 007B36  
                        __CFG_WDTEN$OFF 000000                                  i2l4385 1252  
                                i2l4379 1238                                  _RCREG1 000FAE  
                                _RCREG3 000F2A                                  _RCREG4 000EFA  
                      _encoderInterrupt 0018                                  _NVCFG0 00746D  
                                _PVCFG0 00746E                                  _PVCFG1 00746F  
               __end_of_motorDrive_init 1138                                  _TMR0IE 007F95  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _SPBRG2 000F1F                                  _SPBRG3 000F2B  
                                _SPBRG4 000EFB                                  _TMR0IP 007F8A  
                                _TMR3IE 007D01                                  _TMR3ON 007D88  
                                _TMR4ON 007822                                  _TMR6ON 0079EA  
                                _RCMode 0CFC                                  _TRISE0 007CB0  
                                _TRISE1 007CB1                                  _TRISE2 007CB2  
                                _TRISE3 007CB3                                  _TRISE4 007CB4  
                                _TRISE5 007CB5                                  _TRISH0 007CC8  
                                _TRISE6 007CB6                                  _TRISH1 007CC9  
                                _TRISE7 007CB7                                  _TRISH2 007CCA  
                                _TRISH3 007CCB                                  _TRISG7 007CC7  
                                _TRISK1 007749                                  _TRISL0 007730  
                   __size_of_PS2_analog 0010                                  _TXREG1 000FAD  
                                _TXREG2 000F1D                                  _TXREG4 000EF9  
                      __end_of_delay_ms 1380                        __end_of_delay_us 14F8  
                        __CFG_XINST$OFF 000000                 __end_of_competitionMode 1662  
                    __size_of_OpenEPWM1 0072                      __size_of_OpenEPWM3 007A  
                      __end_of_fft_init 12D2                          settings_auto@t 0006  
                                ___wmul 159E          __size_of_PS2_sendCommandString 0044  
                     __end_of_UART_init 0E72                               ??___awdiv 0010  
                        __CFG_STVREN$ON 000000           __end_of_PS2_sendCommandString 140E  
                             ??___lwdiv 000A                    settings_readButton@t 0006  
                             ??___lwmod 0011                                  _config 00C5  
                                _millis 1662                                  clear_0 11AC  
                                clear_1 11BE                                  clear_2 11CA  
                                clear_3 11D6                                  clear_4 11E2  
                      ___awdiv@quotient 0012                         __CFG_CLKOEN$OFF 000000  
                                _strcat 12D2                        __end_of_selfTest 1578  
                 ?_motorDrive_setSpeeds 0014                            __mediumconst FEC4  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                         __CFG_DSBITEN$ON 000000  
                             ??_sprintf 0016                         __CFG_DSBOREN$ON 000000  
                            __accesstop 0060                 __end_of__initialization 1208  
                    __CFG_DSWDTOSC$LPRC 000000                         __CFG_T5GSEL$T5G 000000  
                       __CFG_IOL1WAY$ON 000000                             ?_SetDCEPWM1 0006  
                           ?_SetDCEPWM3 0006                    PS2_readGamepad@dword 0032  
                        __pcstackCOMRAM 0001                            __pidataBANK0 1528  
                             ?_PS2_init 0001                  LCD_placeCursor@address 001E  
                         __end_of_debug 16D6                __size_of_settings_wander 000C  
                       __CFG_DSWDTEN$ON 000000                              __end_ofPL2 08B2  
                            __end_ofPL4 033E                              __end_ofPL6 0350  
                            __end_ofPL8 0360                       RCMode@right_speed 0094  
                     __CFG_PLLDIV$NODIV 000000                         OpenEPWM1@period 0008  
                       OpenEPWM3@period 0008                       __end_of_OpenEPWM1 10CA  
                     __end_of_OpenEPWM3 0F74                                 ??_debug 0006  
              __size_of_LCD_printString 02AA                              __pbssBANK0 0098  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                     ??_PS2_readGamepad 0021                        ?_motorDrive_init 0001  
                               ?_RCMode 0001                       ??_LCD_placeCursor 001B  
                  __end_of_LCD_init4bit 08A6                              _delay_init 14F8  
                      ?_competitionMode 0001                          _PS2_shiftInOut 1138  
                            ??_PS2_init 0043                                 ?___wmul 0006  
                    settings_selfTest@t 0006                                 _ADCBUF0 000FC2  
                               _ADCHS0H 000E87                                 _ADCHS0L 000E86  
                               _ADCON3L 000E8A                                 _CCP1CON 000FB9  
                               _CCP3CON 000F49                               PS2_init@i 004E  
                             PS2_init@y 004C                                 ?_millis 0006  
                          ??_PS2_analog 0006                                 _ANSEL10 007232  
                               _ANSEL11 007233                                 _ANSEL21 00722D  
                               _ANSEL14 007236                                 _ANSEL16 007228  
                               _ANSEL17 007229                                 _ANSEL18 00722A  
                               _ANSEL19 00722B                                 ?_strcat 0006  
                         ?_PS2_readType 0001                                 _T3CKPS0 007D8C  
                               _T3CKPS1 007D8D                                 _T4CKPS1 007821  
                               _PADCFG1 000F54                                 _T6CKPS1 0079E9  
                ??_motorDrive_setSpeeds 0015                           ?_PS2_reconfig 0001  
                       __CFG_WDTCLK$FRC 000000                               ?_delay_ms 000A  
                             ?_delay_us 0006                     __size_of_SetDCEPWM1 003A  
                   __size_of_SetDCEPWM3 003C                                 _TMR3CS0 007D8E  
                               _TMR3CS1 007D8F                                 _SPBRGH1 000F30  
                               _SPBRGH2 000F20                                 _SPBRGH3 000F2C  
                               _SPBRGH4 000EFC                                 _PS2data 0098  
                               _SSP1ADD 000FC8                                 _SSP2ADD 000F02  
                               _SSP1BUF 000FC9                                 _SSP2BUF 000F03  
                             ?_fft_init 0001                SetOutputEPWM1@outputmode 0006  
                    PS2_shiftInOut@byte 000C                         __size_of_RCMode 00B8  
                    __end_of_PS2_analog 1684                        PS2_readGamepad@i 003F  
                      ??_SetOutputEPWM1 0007                        ??_SetOutputEPWM3 0007  
                            _left_count 00B1                  __end_of_PS2_shiftInOut 11A4  
                             ?_selfTest 0001                                 __Hparam 0000  
                               __Lparam 0000                                 ___awdiv 0E72  
                       __size_of___wmul 0026                                 ___lwdiv 1380  
                               ___lwmod 140E                                 __pcinit 11A4  
                            _read_delay 0059                         __size_of_millis 0012  
                               __ramtop 0E00                __end_of_encoderInterrupt 0070  
                        ??_PS2_readType 0006                        delay_init@config 00C3  
                               __ptext0 0B30                                 __ptext1 163E  
                               __ptext2 16BC                                 __ptext3 16C8  
                               __ptext4 1684                                 __ptext5 1552  
                               __ptext6 1692                                 __ptext7 1608  
                               __ptext8 15C4                                 __ptext9 10CA  
                       PS2_shiftInOut@i 000E                         __size_of_strcat 0058  
                        ??_PS2_reconfig 0021                                 _dpowers FEC5  
                             _T2CONbits 000FCA                       ??_settings_wander 0006  
          __size_of_settings_readButton 000E                                 _buttons 00BD  
                             _FONA_BUFF 0100                               _T4CONbits 000F04  
                            ??_delay_ms 000E                              ??_delay_us 000A  
                             _T6CONbits 000F3D                               _T8CONbits 000F3A  
                            ??_fft_init 002B                                 _sprintf 0A0C  
                      LCD_placeCursor@x 001D                        LCD_placeCursor@y 001A  
                        __pintcode_body 120E                    end_of_initialization 1208  
                 __end_of_encoders_init 159E                   __end_of_settings_auto 1692  
                 __end_of_settings_init 15E6                SetOutputEPWM3@outputmode 0006  
             LCD_printString@tempString 0060                                 int_func 120E  
                         ??_clearMillis 0006                              _tickMillis 16AE  
                  LCD_printString@i_591 0090                         _controller_type 0057  
                     ??_LCD_printString 0029               motorDrive_setSpeeds@templ 0017  
             motorDrive_setSpeeds@tempr 0019                              ??_selfTest 002B  
                       ?_PS2_shiftInOut 0001                             ?_delay_init 0001  
                  LCD_printString@input 0023                                 postdec1 000FE5  
                               postdec2 000FDD                              _wanderMode 163E  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                               _RPOR10_11 000E17  
                      __CFG_FSCM$CSDCMD 000000                               _RPOR12_13 000E18  
                             _RPOR30_31 000E21                               _RPOR22_23 000E1D  
                             _RPOR34_35 000E23                  PS2_sendCommandString@y 001E  
                             _PIXY_BUFF 0280                               _PORTBbits 000F81  
                             _UART_init 0DC6                               _PORTDbits 000F83  
                             _PORTEbits 000F84                               _PORTFbits 000F85  
                             _PORTGbits 000F86                               _PORTHbits 000F87  
                 PS2_readGamepad@F16091 00C6                               _PORTJbits 000F88  
                             _PORTKbits 000EE7                               _PORTLbits 000EE4  
                      __CFG_FOSC$FRCPLL 000000                             _ADCON1Hbits 000FC1  
                             _TRISBbits 000F93                               _USB_INDEX 0056  
                             _TRISCbits 000F94              motorDrive_setSpeeds@lSpeed 0029  
                             _TRISDbits 000F95                               _TRISEbits 000F96  
                             _TRISFbits 000F97                               _TRISGbits 000F98  
                             _TRISHbits 000F99                               _TRISJbits 000F9A  
                             _TRISLbits 000EE6              motorDrive_setSpeeds@rSpeed 0014  
                  __CFG_CINASEL$DEFAULT 000000                   __size_of_LCD_init4bit 018A  
                 PS2_readGamepad@i_2534 0041                          __end_of_RCMode 0DB4  
                          ??_SetDCEPWM1 0008                            ??_SetDCEPWM3 0008  
                 PS2_readGamepad@dword2 0026                       __CFG_WPFP$WPFP255 000000  
                   __end_of_clearMillis 16AE                          __end_of___wmul 15C4  
                     __size_of_PS2_init 00C8                   _PS2_sendCommandString 13CA  
                            ?_UART_init 0001                          __end_of_millis 1674  
 __end_of_communicationInterruptHandler 1274  __size_of_communicationInterruptHandler 126C  
         _communicationInterruptHandler 0008                         _PS2_readGamepad 08BE  
                        __end_of_strcat 132A                             __end_ofPL10 08BE  
                           __end_ofPL20 06FC                             __end_ofPL12 0378  
                           __end_ofPL30 071C                             __end_ofPL22 070A  
                           __end_ofPL14 06C8                             __end_ofPL40 0550  
                           __end_ofPL32 0DC6                             __end_ofPL24 0CFC  
                           __end_ofPL16 06D8                             __end_ofPL42 055A  
                           __end_ofPL34 0B30                             __end_ofPL26 0B0E  
                           __end_ofPL18 06E8                             __end_ofPL36 0546  
                           __end_ofPL28 0B26                            _LCD_init4bit 071C  
                           __end_ofPL38 0384                     start_initialization 11A4  
                   __size_of_delay_init 0030                         _LCD_placeCursor 055A  
                    __end_of_SetDCEPWM1 14C2                      __end_of_SetDCEPWM3 1488  
                  SetOutputEPWM1@eccpmx 0008                            _enter_config 00EA  
                  SetOutputEPWM3@eccpmx 0008                               _OpenEPWM1 1058  
                             _OpenEPWM3 0EFA                                ??_RCMode 0050  
                           ?_tickMillis 0001                    __end_of_PS2_readType 163E  
                  __end_of_PS2_reconfig 1608                        _imaginaryNumbers 0164  
                           ?_wanderMode 0001                                ??___wmul 000A  
                           __pdataBANK0 00C6                                ??_millis 000A  
                              ??_strcat 000A                            _last_buttons 00BF  
                           __pbssBIGRAM 0280                             __pbssCOMRAM 0053  
                         __pcstackBANK0 0060                     __end_of__stringdata FFFE  
                   SetDCEPWM1@dutycycle 0006                       __size_of_delay_ms 0056  
                     __size_of_delay_us 0036                              ?_OpenEPWM1 0006  
                            ?_OpenEPWM3 0006                       __size_of_fft_init 005E  
                           sprintf@_val 001B                             sprintf@flag 0019  
                           sprintf@prec 001A                             _clearMillis 16A0  
                   _settings_readButton 1692                        ___lwdiv@dividend 0006  
                             __pintcode 0008                         _settings_wander 16BC  
                     __size_of_selfTest 0026                           __pmediumconst FEC4  
              __size_of_motorDrive_init 006E                                ?___awdiv 000C  
                   SetDCEPWM3@dutycycle 0006                       _settings_selfTest 16C8  
               __end_of_PS2_readGamepad 0A0C                                ?___lwdiv 0006  
                              ?___lwmod 000D                  ?_PS2_sendCommandString 001A  
                           __pintcodelo 0018                      ?_settings_selfTest 0001  
                           ??_UART_init 0006                __size_of_competitionMode 0012  
                     ?_encoderInterrupt 0001                 __end_of_LCD_placeCursor 06B0  
                     PS2_shiftInOut@tmp 000D                     __size_of_tickMillis 000E  
                  ?_settings_readButton 0001                        __CFG_POSCMD$NONE 000000  
            SetOutputEPWM1@outputconfig 0009                      ??_encoderInterrupt 0001  
                   ??_settings_selfTest 0006           __size_of_motorDrive_setSpeeds 01B2  
                              _CCPTMRS0 000F36                         _LCD_printString 0000  
                           _PADCFG1bits 000F54          ?_communicationInterruptHandler 0001  
                             _last_read 00AD                        ___lwdiv@quotient 000B  
                        __size_of_debug 0002                                ?_sprintf 0012  
                   __size_of_wanderMode 0012                        ??_PS2_shiftInOut 000A  
                            RCMode@done 0097                          ___wmul@product 000A  
                             delay_ms@x 000A                              RCMode@type 0096  
                             delay_us@x 0006                            ??_delay_init 0006  
                   LCD_printString@aptr 008D                                _PIR1bits 000F9E  
                              _PIR3bits 000FA4             PS2_sendCommandString@string 0020  
             __end_of_settings_selfTest 16D4                                _PIR6bits 000FA6  
                      __CFG_WDTPS$32768 000000                                _PS2_init 0C28  
                              _RPINR0_1 000E2A                                _RPINR4_5 000E2C  
                              _RPINR6_7 000E2D                                _SSP1CON1 000FC6  
                              _SSP1CON2 000FC5                                _SSP1CON3 000F69  
                              _SSP2CON1 000F19                                _SSP2CON3 000F39  
                              _SSP1STAT 000FC7                                _SSP2STAT 000F1A  
                              _USB_BUFF 0474                        PS2_analog@button 0006  
                           __stringdata FEF0                       ___wmul@multiplier 0006  
                      __CFG_SOSCSEL$DIG 000000                   ??_settings_readButton 0006  
                            _CM1CONbits 000F53                     __end_ofatan@coeff_a FEE1  
                   __end_ofatan@coeff_b FEF0                        __CFG_WPDIS$WPDIS 000000  
                    __end_of_delay_init 1528                            PS2_init@temp 0043  
                 __size_of_PS2_readType 001A                             _INTCON2bits 000FF1  
                          delay_ms@time 0016                             _INTCON3bits 000FF0  
                             copy_data0 11FC                               _type_read 00CF  
                           ??_OpenEPWM1 0007                             ??_OpenEPWM3 0007  
                 __size_of_PS2_reconfig 0022                 __end_of_settings_wander 16C8  
                              __Hrparam 0000                        SetDCEPWM1@DCycle 000A  
                              __Lrparam 0000                        SetDCEPWM3@DCycle 000A  
                      ?_PS2_readGamepad 0001                        __size_of___awdiv 0088  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                __size_of_encoders_init 0026                   OpenEPWM1@timer_source 0006  
                __size_of_settings_auto 000E                  __size_of_settings_init 0022  
               __size_of_SetOutputEPWM1 0072                 __size_of_SetOutputEPWM3 0072  
               __end_of_LCD_printString 02AA                        ?_LCD_placeCursor 001A  
                     ??_motorDrive_init 002A                            _PS2_readType 1624  
                          _PS2_reconfig 15E6                              strcat@from 0008  
                              _delay_ms 132A                                _delay_us 14C2  
                       ___lwdiv@divisor 0008                         ___lwdiv@counter 000A  
                              __ptext10 0F74                                __ptext11 0FE6  
                              __ptext20 16D4                                __ptext12 0EFA  
                              __ptext21 1650                                __ptext13 1058  
                              __ptext30 08BE                                __ptext22 0CFC  
                              __ptext14 1274                                __ptext31 15E6  
                              __ptext23 0384                                __ptext15 1578  
                              __ptext40 055A                                __ptext32 13CA  
                              __ptext24 159E                                __ptext16 16A0  
                              __ptext41 14C2                                __ptext33 1138  
                              __ptext25 0E72                                __ptext17 0DC6  
                     ??_competitionMode 002B                                __ptext42 132A  
                              __ptext34 1674                                __ptext26 144C  
                              __ptext18 071C                                __ptext43 1662  
                              __ptext35 0000                                __ptext27 1488  
                              __ptext19 14F8                                __ptext36 12D2  
                              __ptext28 1624                                __ptext37 0A0C  
                              __ptext29 0C28                                __ptext46 16AE  
                              __ptext38 140E                                __ptext39 1380  
                          _SSP1CON1bits 000FC6                            _SSP1CON2bits 000FC5  
                            _LCDCONbits 000ED9                             _realNumbers 0200  
                              _fft_init 1274                        settings_wander@t 0006  
                           _exit_config 00D8                            _SSP2CON1bits 000F19  
                          _SSP2CON2bits 000F18                        __size_of_sprintf 00EA  
                          ??_tickMillis 0004                           __size_of_main 00F8  
                         __size_of_init 001C                             _millisCount 00B5  
                            _FONA_INDEX 0053                      __CFG_MSSPMSK1$MSK7 000000  
                    __CFG_MSSPMSK2$MSK7 000000                                _selfTest 1552  
                    LCD_printString@val 0089              __size_of_settings_selfTest 000C  
                              _set_mode 00E1                            ??_wanderMode 002B  
                           _UART4_INDEX 0055                              _MEMCONbits 000EE3  
             _motorDrive_setSpeeds$2402 001B               _motorDrive_setSpeeds$2403 001D  
             _motorDrive_setSpeeds$2404 001F               _motorDrive_setSpeeds$2405 0021  
             _motorDrive_setSpeeds$2406 0023               _motorDrive_setSpeeds$2407 0025  
             _motorDrive_setSpeeds$2408 0027                            _SSP1STATbits 000FC7  
                              main@mode 0052                            _SSP2STATbits 000F1A  
                           atan@coeff_a FECF                             atan@coeff_b FEE1  
                            _INTCONbits 000FF2                      __end_of_tickMillis 16BC  
                              intlevel1 0000                                intlevel2 0000  
                             sprintf@ap 0018                      __end_of_wanderMode 1650  
                             sprintf@sp 0020                           _encoders_init 1578  
                         _settings_auto 1684                           _settings_init 15C4  
                      ___lwmod@dividend 000D                             _right_count 00B9  
              PS2_sendCommandString@len 001A                            ?_clearMillis 0001  
                      ?_settings_wander 0001                              _RCSTA1bits 000FAB  
                            _RCSTA2bits 000F33                              _RCSTA3bits 000F2F  
                            _RCSTA4bits 000EFF                   LCD_printString@string 0074  
               ??_PS2_sendCommandString 001B                              _PS2_analog 1674  
                            _RPINR26_27 000E37                              _RPINR28_29 000E38  
                      ?_LCD_printString 0022                            _ADCBUF0Hbits 000FC3  
                              sprintf@c 0021                                sprintf@f 0012  
                              strcat@cp 000A                            _ADCBUF0Lbits 000FC2  
                              strcat@to 0006                         ___lwmod@divisor 000F  
                       ___lwmod@counter 0011                              _PIXY_INDEX 0054  
            SetOutputEPWM3@outputconfig 0009                        LCD_printString@i 008E  
                            _PSPCONbits 000FA7                        LCD_printString@x 0088  
                      LCD_printString@y 0022                             _USART4_BUFF 0132  
                        ?_encoders_init 0001                     __CFG_WPCFG$WPCFGDIS 000000  
                        ?_settings_auto 0001                          ?_settings_init 0001  
         LCD_printString@tempString_590 008B                      __CFG_WINDIS$WDTSTD 000000  
             __size_of_encoderInterrupt 0058            __end_of_motorDrive_setSpeeds 0536  
                __CFG_DSWDTPS$DSWDTPS1F 000000         ??_communicationInterruptHandler 0004  
