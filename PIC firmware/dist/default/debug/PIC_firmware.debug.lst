

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Thu May  7 10:05:11 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F97J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    66                           	psect	pa_nodes,global,class=CODE,delta=1
    67  0000                     tblptru	equ	0xFF8
    68                           tblptrh	equ	0xFF7
    69                           tblptrl	equ	0xFF6
    70                           tablat	equ	0xFF5
    71                           prodh	equ	0xFF4
    72                           prodl	equ	0xFF3
    73                           intcon	equ	0xFF2
    74                           intcon2	equ	0xFF1
    75                           intcon3	equ	0xFF0
    76                           indf0	equ	0xFEF
    77                           fsr0h	equ	0xFEA
    78                           fsr0l	equ	0xFE9
    79                           wreg	equ	0xFE8
    80                           indf1	equ	0xFE7
    81                           postinc1	equ	0xFE6
    82                           fsr1h	equ	0xFE2
    83                           fsr1l	equ	0xFE1
    84                           indf2	equ	0xFDF
    85                           postinc2	equ	0xFDE
    86                           postdec2	equ	0xFDD
    87                           fsr2h	equ	0xFDA
    88                           fsr2l	equ	0xFD9
    89                           status	equ	0xFD8
    90                           
    91                           	psect	idataBANK0
    92  0114CA                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for PS2_readGamepad@F16091
    96  0114CA  01                 	db	1
    97  0114CB  42                 	db	66
    98  0114CC  00                 	db	0
    99  0114CD  00                 	db	0
   100  0114CE  00                 	db	0
   101  0114CF  00                 	db	0
   102  0114D0  00                 	db	0
   103  0114D1  00                 	db	0
   104  0114D2  00                 	db	0
   105                           
   106                           ;initializer for _type_read
   107  0114D3  01                 	db	1
   108  0114D4  45                 	db	69
   109  0114D5  00                 	db	0
   110  0114D6  5A                 	db	90
   111  0114D7  5A                 	db	90
   112  0114D8  5A                 	db	90
   113  0114D9  5A                 	db	90
   114  0114DA  5A                 	db	90
   115  0114DB  5A                 	db	90
   116                           
   117                           ;initializer for _exit_config
   118  0114DC  01                 	db	1
   119  0114DD  43                 	db	67
   120  0114DE  00                 	db	0
   121  0114DF  00                 	db	0
   122  0114E0  5A                 	db	90
   123  0114E1  5A                 	db	90
   124  0114E2  5A                 	db	90
   125  0114E3  5A                 	db	90
   126  0114E4  5A                 	db	90
   127                           
   128                           ;initializer for _set_mode
   129  0114E5  01                 	db	1
   130  0114E6  44                 	db	68
   131  0114E7  00                 	db	0
   132  0114E8  01                 	db	1
   133  0114E9  03                 	db	3
   134  0114EA  00                 	db	0
   135  0114EB  00                 	db	0
   136  0114EC  00                 	db	0
   137  0114ED  00                 	db	0
   138                           
   139                           ;initializer for _enter_config
   140  0114EE  01                 	db	1
   141  0114EF  43                 	db	67
   142  0114F0  00                 	db	0
   143  0114F1  01                 	db	1
   144  0114F2  00                 	db	0
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           prodh	equ	0xFF4
   150                           prodl	equ	0xFF3
   151                           intcon	equ	0xFF2
   152                           intcon2	equ	0xFF1
   153                           intcon3	equ	0xFF0
   154                           indf0	equ	0xFEF
   155                           fsr0h	equ	0xFEA
   156                           fsr0l	equ	0xFE9
   157                           wreg	equ	0xFE8
   158                           indf1	equ	0xFE7
   159                           postinc1	equ	0xFE6
   160                           fsr1h	equ	0xFE2
   161                           fsr1l	equ	0xFE1
   162                           indf2	equ	0xFDF
   163                           postinc2	equ	0xFDE
   164                           postdec2	equ	0xFDD
   165                           fsr2h	equ	0xFDA
   166                           fsr2l	equ	0xFD9
   167                           status	equ	0xFD8
   168                           
   169                           	psect	mediumconst
   170  00FEC4                     __pmediumconst:
   171                           	opt stack 0
   172  00FEC4  00                 	db	0
   173  00FEC5                     _dpowers:
   174                           	opt stack 0
   175  00FEC5  0001               	dw	1
   176  00FEC7  000A               	dw	10
   177  00FEC9  0064               	dw	100
   178  00FECB  03E8               	dw	1000
   179  00FECD  2710               	dw	10000
   180  00FECF                     __end_of_dpowers:
   181                           	opt stack 0
   182  00FECF  3C                 	db	60
   183  00FED0  04                 	db	4
   184  00FED1  42                 	db	66
   185  00FED2  9F                 	db	159
   186  00FED3  6A                 	db	106
   187  00FED4  42                 	db	66
   188  00FED5  90                 	db	144
   189  00FED6  01                 	db	1
   190  00FED7  42                 	db	66
   191  00FED8  4D                 	db	77
   192  00FED9  BB                 	db	187
   193  00FEDA  40                 	db	64
   194  00FEDB  EC                 	db	236
   195  00FEDC  47                 	db	71
   196  00FEDD  3E                 	db	62
   197  00FEDE  8E                 	db	142
   198  00FEDF  1F                 	db	31
   199  00FEE0  BB                 	db	187
   200  00FEE1                     __end_ofatan@coeff_a:
   201                           	opt stack 0
   202  00FEE1  3C                 	db	60
   203  00FEE2  04                 	db	4
   204  00FEE3  42                 	db	66
   205  00FEE4  5A                 	db	90
   206  00FEE5  8B                 	db	139
   207  00FEE6  42                 	db	66
   208  00FEE7  04                 	db	4
   209  00FEE8  44                 	db	68
   210  00FEE9  42                 	db	66
   211  00FEEA  9C                 	db	156
   212  00FEEB  4F                 	db	79
   213  00FEEC  41                 	db	65
   214  00FEED  00                 	db	0
   215  00FEEE  80                 	db	128
   216  00FEEF  3F                 	db	63
   217  00FEF0                     __end_ofatan@coeff_b:
   218                           	opt stack 0
   219  0000                     _ADCBUF0	set	4034
   220  0000                     _ADCBUF0Hbits	set	4035
   221  0000                     _ADCBUF0Lbits	set	4034
   222  0000                     _ADCHS0H	set	3719
   223  0000                     _ADCHS0L	set	3718
   224  0000                     _ADCON1Hbits	set	4033
   225  0000                     _ADCON3L	set	3722
   226  0000                     _ANCON1	set	3655
   227  0000                     _ANCON2	set	3654
   228  0000                     _ANCON3	set	3653
   229  0000                     _BAUDCON1bits	set	3943
   230  0000                     _BAUDCON2bits	set	3889
   231  0000                     _BAUDCON3bits	set	3885
   232  0000                     _BAUDCON4bits	set	3837
   233  0000                     _CCP1CON	set	4025
   234  0000                     _CCP3CON	set	3913
   235  0000                     _CCPR1L	set	4026
   236  0000                     _CCPR3L	set	3914
   237  0000                     _CCPTMRS0	set	3894
   238  0000                     _CM1CONbits	set	3923
   239  0000                     _INTCON2bits	set	4081
   240  0000                     _INTCON3bits	set	4080
   241  0000                     _INTCONbits	set	4082
   242  0000                     _LCDCONbits	set	3801
   243  0000                     _MEMCONbits	set	3811
   244  0000                     _PADCFG1	set	3924
   245  0000                     _PADCFG1bits	set	3924
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PIR3bits	set	4004
   248  0000                     _PIR6bits	set	4006
   249  0000                     _PORTBbits	set	3969
   250  0000                     _PORTDbits	set	3971
   251  0000                     _PORTEbits	set	3972
   252  0000                     _PORTFbits	set	3973
   253  0000                     _PORTGbits	set	3974
   254  0000                     _PORTHbits	set	3975
   255  0000                     _PORTJbits	set	3976
   256  0000                     _PORTKbits	set	3815
   257  0000                     _PORTLbits	set	3812
   258  0000                     _PR2	set	4043
   259  0000                     _PR4	set	3845
   260  0000                     _PR6	set	3902
   261  0000                     _PR8	set	3899
   262  0000                     _PSPCONbits	set	4007
   263  0000                     _RCREG1	set	4014
   264  0000                     _RCREG3	set	3882
   265  0000                     _RCREG4	set	3834
   266  0000                     _RCSTA1bits	set	4011
   267  0000                     _RCSTA2bits	set	3891
   268  0000                     _RCSTA3bits	set	3887
   269  0000                     _RCSTA4bits	set	3839
   270  0000                     _RPINR0_1	set	3626
   271  0000                     _RPINR26_27	set	3639
   272  0000                     _RPINR28_29	set	3640
   273  0000                     _RPINR4_5	set	3628
   274  0000                     _RPINR6_7	set	3629
   275  0000                     _RPOR10_11	set	3607
   276  0000                     _RPOR12_13	set	3608
   277  0000                     _RPOR22_23	set	3613
   278  0000                     _RPOR30_31	set	3617
   279  0000                     _RPOR34_35	set	3619
   280  0000                     _SPBRG1	set	4015
   281  0000                     _SPBRG2	set	3871
   282  0000                     _SPBRG3	set	3883
   283  0000                     _SPBRG4	set	3835
   284  0000                     _SPBRGH1	set	3888
   285  0000                     _SPBRGH2	set	3872
   286  0000                     _SPBRGH3	set	3884
   287  0000                     _SPBRGH4	set	3836
   288  0000                     _SSP1ADD	set	4040
   289  0000                     _SSP1BUF	set	4041
   290  0000                     _SSP1CON1	set	4038
   291  0000                     _SSP1CON1bits	set	4038
   292  0000                     _SSP1CON2	set	4037
   293  0000                     _SSP1CON2bits	set	4037
   294  0000                     _SSP1CON3	set	3945
   295  0000                     _SSP1STAT	set	4039
   296  0000                     _SSP1STATbits	set	4039
   297  0000                     _SSP2ADD	set	3842
   298  0000                     _SSP2BUF	set	3843
   299  0000                     _SSP2CON1	set	3865
   300  0000                     _SSP2CON1bits	set	3865
   301  0000                     _SSP2CON2bits	set	3864
   302  0000                     _SSP2CON3	set	3897
   303  0000                     _SSP2STAT	set	3866
   304  0000                     _SSP2STATbits	set	3866
   305  0000                     _T0CON	set	4053
   306  0000                     _T2CONbits	set	4042
   307  0000                     _T4CONbits	set	3844
   308  0000                     _T6CONbits	set	3901
   309  0000                     _T8CONbits	set	3898
   310  0000                     _TMR0L	set	4054
   311  0000                     _TMR3H	set	4019
   312  0000                     _TMR3L	set	4018
   313  0000                     _TRISBbits	set	3987
   314  0000                     _TRISCbits	set	3988
   315  0000                     _TRISDbits	set	3989
   316  0000                     _TRISEbits	set	3990
   317  0000                     _TRISFbits	set	3991
   318  0000                     _TRISGbits	set	3992
   319  0000                     _TRISHbits	set	3993
   320  0000                     _TRISJbits	set	3994
   321  0000                     _TRISLbits	set	3814
   322  0000                     _TXREG1	set	4013
   323  0000                     _TXREG2	set	3869
   324  0000                     _TXREG4	set	3833
   325  0000                     _TXSTA1bits	set	4012
   326  0000                     _TXSTA2bits	set	3890
   327  0000                     _TXSTA3bits	set	3886
   328  0000                     _TXSTA4bits	set	3838
   329  0000                     _ADON	set	32271
   330  0000                     _ANSEL10	set	29234
   331  0000                     _ANSEL11	set	29235
   332  0000                     _ANSEL14	set	29238
   333  0000                     _ANSEL16	set	29224
   334  0000                     _ANSEL17	set	29225
   335  0000                     _ANSEL18	set	29226
   336  0000                     _ANSEL19	set	29227
   337  0000                     _ANSEL21	set	29229
   338  0000                     _ANSEL6	set	29246
   339  0000                     _ANSEL9	set	29233
   340  0000                     _CPEN	set	30407
   341  0000                     _DONE	set	32256
   342  0000                     _GIE	set	32663
   343  0000                     _INT1IF	set	32640
   344  0000                     _INT3IF	set	32642
   345  0000                     _IOLOCK	set	31542
   346  0000                     _IPEN	set	32391
   347  0000                     _LCDA	set	30421
   348  0000                     _LCDMD	set	30603
   349  0000                     _NVCFG0	set	29805
   350  0000                     _PVCFG0	set	29806
   351  0000                     _PVCFG1	set	29807
   352  0000                     _RC1IE	set	31981
   353  0000                     _RC2IE	set	32029
   354  0000                     _RC3IE	set	31501
   355  0000                     _RC4IE	set	31503
   356  0000                     _RD163	set	32143
   357  0000                     _RG0	set	31792
   358  0000                     _RG1	set	31793
   359  0000                     _RG2	set	31794
   360  0000                     _RG3	set	31795
   361  0000                     _RG4	set	31796
   362  0000                     _RL1	set	30497
   363  0000                     _RL2	set	30498
   364  0000                     _RL3	set	30499
   365  0000                     _SAMP	set	32257
   366  0000                     _T3CKPS0	set	32140
   367  0000                     _T3CKPS1	set	32141
   368  0000                     _T4CKPS1	set	30753
   369  0000                     _T6CKPS1	set	31209
   370  0000                     _TMR0IE	set	32661
   371  0000                     _TMR0IF	set	32658
   372  0000                     _TMR0IP	set	32650
   373  0000                     _TMR3CS0	set	32142
   374  0000                     _TMR3CS1	set	32143
   375  0000                     _TMR3IE	set	32001
   376  0000                     _TMR3ON	set	32136
   377  0000                     _TMR4ON	set	30754
   378  0000                     _TMR6ON	set	31210
   379  0000                     _TRISE0	set	31920
   380  0000                     _TRISE1	set	31921
   381  0000                     _TRISE2	set	31922
   382  0000                     _TRISE3	set	31923
   383  0000                     _TRISE4	set	31924
   384  0000                     _TRISE5	set	31925
   385  0000                     _TRISE6	set	31926
   386  0000                     _TRISE7	set	31927
   387  0000                     _TRISG7	set	31943
   388  0000                     _TRISH0	set	31944
   389  0000                     _TRISH1	set	31945
   390  0000                     _TRISH2	set	31946
   391  0000                     _TRISH3	set	31947
   392  0000                     _TRISK1	set	30537
   393  0000                     _TRISL0	set	30512
   394  0000                     _TX1IE	set	31980
   395  0000                     _TX2IE	set	32028
   396  0000                     _TX3IE	set	31500
   397  0000                     _TX4IE	set	31502
   398  00FEF0                     __stringdata:
   399                           	opt stack 0
   400  00FEF0  4D                 	db	77	;'M'
   401  00FEF1  45                 	db	69	;'E'
   402  00FEF2  53                 	db	83	;'S'
   403  00FEF3  53                 	db	83	;'S'
   404  00FEF4  41                 	db	65	;'A'
   405  00FEF5  47                 	db	71	;'G'
   406  00FEF6  45                 	db	69	;'E'
   407  00FEF7  5F                 	db	95	;'_'
   408  00FEF8  47                 	db	71	;'G'
   409  00FEF9  4F                 	db	79	;'O'
   410  00FEFA  45                 	db	69	;'E'
   411  00FEFB  53                 	db	83	;'S'
   412  00FEFC  5F                 	db	95	;'_'
   413  00FEFD  48                 	db	72	;'H'
   414  00FEFE  45                 	db	69	;'E'
   415  00FEFF  52                 	db	82	;'R'
   416  00FF00  45                 	db	69	;'E'
   417  00FF01  0D                 	db	13
   418  00FF02  0A                 	db	10
   419  00FF03  00                 	db	0
   420  00FF04                     STR_7:
   421  00FF04  52                 	db	82	;'R'
   422  00FF05  43                 	db	67	;'C'
   423  00FF06  20                 	db	32
   424  00FF07  4D                 	db	77	;'M'
   425  00FF08  6F                 	db	111	;'o'
   426  00FF09  64                 	db	100	;'d'
   427  00FF0A  65                 	db	101	;'e'
   428  00FF0B  0A                 	db	10
   429  00FF0C  45                 	db	69	;'E'
   430  00FF0D  52                 	db	82	;'R'
   431  00FF0E  52                 	db	82	;'R'
   432  00FF0F  3A                 	db	58	;':'
   433  00FF10  20                 	db	32
   434  00FF11  25                 	db	37
   435  00FF12  69                 	db	105	;'i'
   436  00FF13  20                 	db	32
   437  00FF14  20                 	db	32
   438  00FF15  00                 	db	0
   439  00FF16                     STR_4:
   440  00FF16  57                 	db	87	;'W'
   441  00FF17  61                 	db	97	;'a'
   442  00FF18  6E                 	db	110	;'n'
   443  00FF19  64                 	db	100	;'d'
   444  00FF1A  65                 	db	101	;'e'
   445  00FF1B  72                 	db	114	;'r'
   446  00FF1C  69                 	db	105	;'i'
   447  00FF1D  6E                 	db	110	;'n'
   448  00FF1E  0A                 	db	10
   449  00FF1F  2D                 	db	45
   450  00FF20  2D                 	db	45
   451  00FF21  2D                 	db	45
   452  00FF22  2E                 	db	46
   453  00FF23  2E                 	db	46
   454  00FF24  2D                 	db	45
   455  00FF25  2D                 	db	45
   456  00FF26  2D                 	db	45
   457  00FF27  00                 	db	0
   458  00FF28                     STR_12:
   459  00FF28  53                 	db	83	;'S'
   460  00FF29  65                 	db	101	;'e'
   461  00FF2A  6C                 	db	108	;'l'
   462  00FF2B  65                 	db	101	;'e'
   463  00FF2C  63                 	db	99	;'c'
   464  00FF2D  74                 	db	116	;'t'
   465  00FF2E  65                 	db	101	;'e'
   466  00FF2F  64                 	db	100	;'d'
   467  00FF30  0A                 	db	10
   468  00FF31  53                 	db	83	;'S'
   469  00FF32  65                 	db	101	;'e'
   470  00FF33  6C                 	db	108	;'l'
   471  00FF34  66                 	db	102	;'f'
   472  00FF35  54                 	db	84	;'T'
   473  00FF36  65                 	db	101	;'e'
   474  00FF37  73                 	db	115	;'s'
   475  00FF38  74                 	db	116	;'t'
   476  00FF39  00                 	db	0
   477  00FF3A                     STR_3:
   478  00FF3A  53                 	db	83	;'S'
   479  00FF3B  65                 	db	101	;'e'
   480  00FF3C  6C                 	db	108	;'l'
   481  00FF3D  66                 	db	102	;'f'
   482  00FF3E  20                 	db	32
   483  00FF3F  43                 	db	67	;'C'
   484  00FF40  61                 	db	97	;'a'
   485  00FF41  6C                 	db	108	;'l'
   486  00FF42  0A                 	db	10
   487  00FF43  57                 	db	87	;'W'
   488  00FF44  61                 	db	97	;'a'
   489  00FF45  69                 	db	105	;'i'
   490  00FF46  74                 	db	116	;'t'
   491  00FF47  20                 	db	32
   492  00FF48  50                 	db	80	;'P'
   493  00FF49  6C                 	db	108	;'l'
   494  00FF4A  7A                 	db	122	;'z'
   495  00FF4B  00                 	db	0
   496  00FF4C                     STR_6:
   497  00FF4C  52                 	db	82	;'R'
   498  00FF4D  43                 	db	67	;'C'
   499  00FF4E  20                 	db	32
   500  00FF4F  4D                 	db	77	;'M'
   501  00FF50  6F                 	db	111	;'o'
   502  00FF51  64                 	db	100	;'d'
   503  00FF52  65                 	db	101	;'e'
   504  00FF53  0A                 	db	10
   505  00FF54  53                 	db	83	;'S'
   506  00FF55  65                 	db	101	;'e'
   507  00FF56  61                 	db	97	;'a'
   508  00FF57  72                 	db	114	;'r'
   509  00FF58  63                 	db	99	;'c'
   510  00FF59  68                 	db	104	;'h'
   511  00FF5A  2E                 	db	46
   512  00FF5B  2E                 	db	46
   513  00FF5C  00                 	db	0
   514  00FF5D                     STR_9:
   515  00FF5D  53                 	db	83	;'S'
   516  00FF5E  65                 	db	101	;'e'
   517  00FF5F  6C                 	db	108	;'l'
   518  00FF60  65                 	db	101	;'e'
   519  00FF61  63                 	db	99	;'c'
   520  00FF62  74                 	db	116	;'t'
   521  00FF63  65                 	db	101	;'e'
   522  00FF64  64                 	db	100	;'d'
   523  00FF65  0A                 	db	10
   524  00FF66  52                 	db	82	;'R'
   525  00FF67  43                 	db	67	;'C'
   526  00FF68  20                 	db	32
   527  00FF69  4D                 	db	77	;'M'
   528  00FF6A  6F                 	db	111	;'o'
   529  00FF6B  64                 	db	100	;'d'
   530  00FF6C  65                 	db	101	;'e'
   531  00FF6D  00                 	db	0
   532  00FF6E                     STR_14:
   533  00FF6E  53                 	db	83	;'S'
   534  00FF6F  65                 	db	101	;'e'
   535  00FF70  6C                 	db	108	;'l'
   536  00FF71  65                 	db	101	;'e'
   537  00FF72  63                 	db	99	;'c'
   538  00FF73  74                 	db	116	;'t'
   539  00FF74  65                 	db	101	;'e'
   540  00FF75  64                 	db	100	;'d'
   541  00FF76  0A                 	db	10
   542  00FF77  55                 	db	85	;'U'
   543  00FF78  6E                 	db	110	;'n'
   544  00FF79  6B                 	db	107	;'k'
   545  00FF7A  6E                 	db	110	;'n'
   546  00FF7B  6F                 	db	111	;'o'
   547  00FF7C  77                 	db	119	;'w'
   548  00FF7D  6E                 	db	110	;'n'
   549  00FF7E  00                 	db	0
   550  00FF7F                     STR_5:
   551  00FF7F  57                 	db	87	;'W'
   552  00FF80  65                 	db	101	;'e'
   553  00FF81  20                 	db	32
   554  00FF82  61                 	db	97	;'a'
   555  00FF83  72                 	db	114	;'r'
   556  00FF84  65                 	db	101	;'e'
   557  00FF85  0A                 	db	10
   558  00FF86  77                 	db	119	;'w'
   559  00FF87  69                 	db	105	;'i'
   560  00FF88  6E                 	db	110	;'n'
   561  00FF89  6E                 	db	110	;'n'
   562  00FF8A  69                 	db	105	;'i'
   563  00FF8B  6E                 	db	110	;'n'
   564  00FF8C  67                 	db	103	;'g'
   565  00FF8D  21                 	db	33
   566  00FF8E  00                 	db	0
   567  00FF8F                     STR_11:
   568  00FF8F  53                 	db	83	;'S'
   569  00FF90  65                 	db	101	;'e'
   570  00FF91  6C                 	db	108	;'l'
   571  00FF92  65                 	db	101	;'e'
   572  00FF93  63                 	db	99	;'c'
   573  00FF94  74                 	db	116	;'t'
   574  00FF95  65                 	db	101	;'e'
   575  00FF96  64                 	db	100	;'d'
   576  00FF97  0A                 	db	10
   577  00FF98  57                 	db	87	;'W'
   578  00FF99  61                 	db	97	;'a'
   579  00FF9A  6E                 	db	110	;'n'
   580  00FF9B  64                 	db	100	;'d'
   581  00FF9C  65                 	db	101	;'e'
   582  00FF9D  72                 	db	114	;'r'
   583  00FF9E  00                 	db	0
   584  00FF9F                     STR_13:
   585  00FF9F  53                 	db	83	;'S'
   586  00FFA0  65                 	db	101	;'e'
   587  00FFA1  6C                 	db	108	;'l'
   588  00FFA2  65                 	db	101	;'e'
   589  00FFA3  63                 	db	99	;'c'
   590  00FFA4  74                 	db	116	;'t'
   591  00FFA5  65                 	db	101	;'e'
   592  00FFA6  64                 	db	100	;'d'
   593  00FFA7  0A                 	db	10
   594  00FFA8  44                 	db	68	;'D'
   595  00FFA9  65                 	db	101	;'e'
   596  00FFAA  62                 	db	98	;'b'
   597  00FFAB  75                 	db	117	;'u'
   598  00FFAC  67                 	db	103	;'g'
   599  00FFAD  00                 	db	0
   600  00FFAE                     STR_10:
   601  00FFAE  53                 	db	83	;'S'
   602  00FFAF  65                 	db	101	;'e'
   603  00FFB0  6C                 	db	108	;'l'
   604  00FFB1  65                 	db	101	;'e'
   605  00FFB2  63                 	db	99	;'c'
   606  00FFB3  74                 	db	116	;'t'
   607  00FFB4  65                 	db	101	;'e'
   608  00FFB5  64                 	db	100	;'d'
   609  00FFB6  0A                 	db	10
   610  00FFB7  4D                 	db	77	;'M'
   611  00FFB8  61                 	db	97	;'a'
   612  00FFB9  74                 	db	116	;'t'
   613  00FFBA  63                 	db	99	;'c'
   614  00FFBB  68                 	db	104	;'h'
   615  00FFBC  00                 	db	0
   616  00FFBD                     STR_8:
   617  00FFBD  61                 	db	97	;'a'
   618  00FFBE  6E                 	db	110	;'n'
   619  00FFBF  61                 	db	97	;'a'
   620  00FFC0  3A                 	db	58	;':'
   621  00FFC1  25                 	db	37
   622  00FFC2  69                 	db	105	;'i'
   623  00FFC3  0A                 	db	10
   624  00FFC4  74                 	db	116	;'t'
   625  00FFC5  79                 	db	121	;'y'
   626  00FFC6  70                 	db	112	;'p'
   627  00FFC7  65                 	db	101	;'e'
   628  00FFC8  20                 	db	32
   629  00FFC9  25                 	db	37
   630  00FFCA  69                 	db	105	;'i'
   631  00FFCB  00                 	db	0
   632  00FFCC  53                 	db	83	;'S'
   633  00FFCD  74                 	db	116	;'t'
   634  00FFCE  61                 	db	97	;'a'
   635  00FFCF  72                 	db	114	;'r'
   636  00FFD0  74                 	db	116	;'t'
   637  00FFD1  69                 	db	105	;'i'
   638  00FFD2  6E                 	db	110	;'n'
   639  00FFD3  67                 	db	103	;'g'
   640  00FFD4  0A                 	db	10
   641  00FFD5  46                 	db	70	;'F'
   642  00FFD6  48                 	db	72	;'H'
   643  00FFD7  54                 	db	84	;'T'
   644  00FFD8  00                 	db	0
   645  00FFD9  41                 	db	65	;'A'
   646  00FFDA  54                 	db	84	;'T'
   647  00FFDB  2B                 	db	43
   648  00FFDC  43                 	db	67	;'C'
   649  00FFDD  4D                 	db	77	;'M'
   650  00FFDE  47                 	db	71	;'G'
   651  00FFDF  46                 	db	70	;'F'
   652  00FFE0  3D                 	db	61	;'='
   653  00FFE1  31                 	db	49	;'1'
   654  00FFE2  00                 	db	0
   655  00FFE3  41                 	db	65	;'A'
   656  00FFE4  54                 	db	84	;'T'
   657  00FFE5  2B                 	db	43
   658  00FFE6  43                 	db	67	;'C'
   659  00FFE7  53                 	db	83	;'S'
   660  00FFE8  51                 	db	81	;'Q'
   661  00FFE9  0D                 	db	13
   662  00FFEA  0A                 	db	10
   663  00FFEB  00                 	db	0
   664  00FFEC  41                 	db	65	;'A'
   665  00FFED  54                 	db	84	;'T'
   666  00FFEE  2B                 	db	43
   667  00FFEF  43                 	db	67	;'C'
   668  00FFF0  4D                 	db	77	;'M'
   669  00FFF1  47                 	db	71	;'G'
   670  00FFF2  53                 	db	83	;'S'
   671  00FFF3  3D                 	db	61	;'='
   672  00FFF4  00                 	db	0
   673  00FFF5  41                 	db	65	;'A'
   674  00FFF6  6E                 	db	110	;'n'
   675  00FFF7  61                 	db	97	;'a'
   676  00FFF8  3A                 	db	58	;':'
   677  00FFF9  25                 	db	37
   678  00FFFA  69                 	db	105	;'i'
   679  00FFFB  00                 	db	0
   680  00FFFC                     STR_1:
   681  00FFFC  25                 	db	37
   682  00FFFD  00                 	db	0
   683  00FFFE                     __end_of__stringdata:
   684                           	opt stack 0
   685                           
   686                           ; #config settings
   687  00FFFE  00                 	db	0	; dummy byte at the end
   688  0000                     tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           prodh	equ	0xFF4
   693                           prodl	equ	0xFF3
   694                           intcon	equ	0xFF2
   695                           intcon2	equ	0xFF1
   696                           intcon3	equ	0xFF0
   697                           indf0	equ	0xFEF
   698                           fsr0h	equ	0xFEA
   699                           fsr0l	equ	0xFE9
   700                           wreg	equ	0xFE8
   701                           indf1	equ	0xFE7
   702                           postinc1	equ	0xFE6
   703                           fsr1h	equ	0xFE2
   704                           fsr1l	equ	0xFE1
   705                           indf2	equ	0xFDF
   706                           postinc2	equ	0xFDE
   707                           postdec2	equ	0xFDD
   708                           fsr2h	equ	0xFDA
   709                           fsr2l	equ	0xFD9
   710                           status	equ	0xFD8
   711                           
   712                           	psect	cinit
   713  0111A4                     __pcinit:
   714                           	opt stack 0
   715  0111A4                     start_initialization:
   716                           	opt stack 0
   717  0111A4                     __initialization:
   718                           	opt stack 0
   719                           
   720                           ; Clear objects allocated to BIGRAM (1000 bytes)
   721  0111A4  EE02  F080         	lfsr	0,__pbssBIGRAM
   722  0111A8  EE13 F0E8          	lfsr	1,1000
   723  0111AC                     clear_0:
   724  0111AC  6AEE               	clrf	postinc0,c
   725  0111AE  50E5               	movf	postdec1,w,c
   726  0111B0  50E1               	movf	fsr1l,w,c
   727  0111B2  E1FC               	bnz	clear_0
   728  0111B4  50E2               	movf	fsr1h,w,c
   729  0111B6  E1FA               	bnz	clear_0
   730                           
   731                           ; Clear objects allocated to BANK2 (128 bytes)
   732  0111B8  EE02  F000         	lfsr	0,__pbssBANK2
   733  0111BC  0E80               	movlw	128
   734  0111BE                     clear_1:
   735  0111BE  6AEE               	clrf	postinc0,c
   736  0111C0  06E8               	decf	wreg,f,c
   737  0111C2  E1FD               	bnz	clear_1
   738                           
   739                           ; Clear objects allocated to BANK1 (228 bytes)
   740  0111C4  EE01  F000         	lfsr	0,__pbssBANK1
   741  0111C8  0EE4               	movlw	228
   742  0111CA                     clear_2:
   743  0111CA  6AEE               	clrf	postinc0,c
   744  0111CC  06E8               	decf	wreg,f,c
   745  0111CE  E1FD               	bnz	clear_2
   746                           
   747                           ; Clear objects allocated to BANK0 (46 bytes)
   748  0111D0  EE00  F098         	lfsr	0,__pbssBANK0
   749  0111D4  0E2E               	movlw	46
   750  0111D6                     clear_3:
   751  0111D6  6AEE               	clrf	postinc0,c
   752  0111D8  06E8               	decf	wreg,f,c
   753  0111DA  E1FD               	bnz	clear_3
   754                           
   755                           ; Clear objects allocated to COMRAM (7 bytes)
   756  0111DC  EE00  F053         	lfsr	0,__pbssCOMRAM
   757  0111E0  0E07               	movlw	7
   758  0111E2                     clear_4:
   759  0111E2  6AEE               	clrf	postinc0,c
   760  0111E4  06E8               	decf	wreg,f,c
   761  0111E6  E1FD               	bnz	clear_4
   762                           
   763                           ; Initialize objects allocated to BANK0 (41 bytes)
   764                           ; load TBLPTR registers with __pidataBANK0
   765  0111E8  0ECA               	movlw	low __pidataBANK0
   766  0111EA  6EF6               	movwf	tblptrl,c
   767  0111EC  0E14               	movlw	high __pidataBANK0
   768  0111EE  6EF7               	movwf	tblptrh,c
   769  0111F0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   770  0111F2  6EF8               	movwf	tblptru,c
   771  0111F4  EE00  F0C6         	lfsr	0,__pdataBANK0
   772  0111F8  EE10 F029          	lfsr	1,41
   773  0111FC                     copy_data0:
   774  0111FC  0009               	tblrd		*+
   775  0111FE  CFF5 FFEE          	movff	tablat,postinc0
   776  011202  50E5               	movf	postdec1,w,c
   777  011204  50E1               	movf	fsr1l,w,c
   778  011206  E1FA               	bnz	copy_data0
   779  011208                     end_of_initialization:
   780                           	opt stack 0
   781  011208                     __end_of__initialization:
   782                           	opt stack 0
   783  011208  0100               	movlb	0
   784  01120A  EF98  F085         	goto	_main	;jump to C main() function
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           prodh	equ	0xFF4
   790                           prodl	equ	0xFF3
   791                           intcon	equ	0xFF2
   792                           intcon2	equ	0xFF1
   793                           intcon3	equ	0xFF0
   794                           indf0	equ	0xFEF
   795                           postinc0	equ	0xFEE
   796                           fsr0h	equ	0xFEA
   797                           fsr0l	equ	0xFE9
   798                           wreg	equ	0xFE8
   799                           indf1	equ	0xFE7
   800                           postinc1	equ	0xFE6
   801                           postdec1	equ	0xFE5
   802                           fsr1h	equ	0xFE2
   803                           fsr1l	equ	0xFE1
   804                           indf2	equ	0xFDF
   805                           postinc2	equ	0xFDE
   806                           postdec2	equ	0xFDD
   807                           fsr2h	equ	0xFDA
   808                           fsr2l	equ	0xFD9
   809                           status	equ	0xFD8
   810                           
   811                           	psect	bssCOMRAM
   812  000053                     __pbssCOMRAM:
   813                           	opt stack 0
   814  000053                     _FONA_INDEX:
   815                           	opt stack 0
   816  000053                     	ds	1
   817  000054                     _PIXY_INDEX:
   818                           	opt stack 0
   819  000054                     	ds	1
   820  000055                     _UART4_INDEX:
   821                           	opt stack 0
   822  000055                     	ds	1
   823  000056                     _USB_INDEX:
   824                           	opt stack 0
   825  000056                     	ds	1
   826  000057                     _controller_type:
   827                           	opt stack 0
   828  000057                     	ds	1
   829  000058                     _mode:
   830                           	opt stack 0
   831  000058                     	ds	1
   832  000059                     _read_delay:
   833                           	opt stack 0
   834  000059                     	ds	1
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           prodh	equ	0xFF4
   840                           prodl	equ	0xFF3
   841                           intcon	equ	0xFF2
   842                           intcon2	equ	0xFF1
   843                           intcon3	equ	0xFF0
   844                           indf0	equ	0xFEF
   845                           postinc0	equ	0xFEE
   846                           fsr0h	equ	0xFEA
   847                           fsr0l	equ	0xFE9
   848                           wreg	equ	0xFE8
   849                           indf1	equ	0xFE7
   850                           postinc1	equ	0xFE6
   851                           postdec1	equ	0xFE5
   852                           fsr1h	equ	0xFE2
   853                           fsr1l	equ	0xFE1
   854                           indf2	equ	0xFDF
   855                           postinc2	equ	0xFDE
   856                           postdec2	equ	0xFDD
   857                           fsr2h	equ	0xFDA
   858                           fsr2l	equ	0xFD9
   859                           status	equ	0xFD8
   860                           
   861                           	psect	bssBANK0
   862  000098                     __pbssBANK0:
   863                           	opt stack 0
   864  000098                     _PS2data:
   865                           	opt stack 0
   866  000098                     	ds	21
   867  0000AD                     _last_read:
   868                           	opt stack 0
   869  0000AD                     	ds	4
   870  0000B1                     _left_count:
   871                           	opt stack 0
   872  0000B1                     	ds	4
   873  0000B5                     _millisCount:
   874                           	opt stack 0
   875  0000B5                     	ds	4
   876  0000B9                     _right_count:
   877                           	opt stack 0
   878  0000B9                     	ds	4
   879  0000BD                     _buttons:
   880                           	opt stack 0
   881  0000BD                     	ds	2
   882  0000BF                     _last_buttons:
   883                           	opt stack 0
   884  0000BF                     	ds	2
   885  0000C1                     _spbrg:
   886                           	opt stack 0
   887  0000C1                     	ds	2
   888  0000C3                     delay_init@config:
   889                           	opt stack 0
   890  0000C3                     	ds	2
   891  0000C5                     _config:
   892                           	opt stack 0
   893  0000C5                     	ds	1
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           prodh	equ	0xFF4
   899                           prodl	equ	0xFF3
   900                           intcon	equ	0xFF2
   901                           intcon2	equ	0xFF1
   902                           intcon3	equ	0xFF0
   903                           indf0	equ	0xFEF
   904                           postinc0	equ	0xFEE
   905                           fsr0h	equ	0xFEA
   906                           fsr0l	equ	0xFE9
   907                           wreg	equ	0xFE8
   908                           indf1	equ	0xFE7
   909                           postinc1	equ	0xFE6
   910                           postdec1	equ	0xFE5
   911                           fsr1h	equ	0xFE2
   912                           fsr1l	equ	0xFE1
   913                           indf2	equ	0xFDF
   914                           postinc2	equ	0xFDE
   915                           postdec2	equ	0xFDD
   916                           fsr2h	equ	0xFDA
   917                           fsr2l	equ	0xFD9
   918                           status	equ	0xFD8
   919                           
   920                           	psect	dataBANK0
   921  0000C6                     __pdataBANK0:
   922                           	opt stack 0
   923  0000C6                     PS2_readGamepad@F16091:
   924                           	opt stack 0
   925  0000C6                     	ds	9
   926  0000CF                     _type_read:
   927                           	opt stack 0
   928  0000CF                     	ds	9
   929  0000D8                     _exit_config:
   930                           	opt stack 0
   931  0000D8                     	ds	9
   932  0000E1                     _set_mode:
   933                           	opt stack 0
   934  0000E1                     	ds	9
   935  0000EA                     _enter_config:
   936                           	opt stack 0
   937  0000EA                     	ds	5
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           prodh	equ	0xFF4
   943                           prodl	equ	0xFF3
   944                           intcon	equ	0xFF2
   945                           intcon2	equ	0xFF1
   946                           intcon3	equ	0xFF0
   947                           indf0	equ	0xFEF
   948                           postinc0	equ	0xFEE
   949                           fsr0h	equ	0xFEA
   950                           fsr0l	equ	0xFE9
   951                           wreg	equ	0xFE8
   952                           indf1	equ	0xFE7
   953                           postinc1	equ	0xFE6
   954                           postdec1	equ	0xFE5
   955                           fsr1h	equ	0xFE2
   956                           fsr1l	equ	0xFE1
   957                           indf2	equ	0xFDF
   958                           postinc2	equ	0xFDE
   959                           postdec2	equ	0xFDD
   960                           fsr2h	equ	0xFDA
   961                           fsr2l	equ	0xFD9
   962                           status	equ	0xFD8
   963                           
   964                           	psect	bssBANK1
   965  000100                     __pbssBANK1:
   966                           	opt stack 0
   967  000100                     _FONA_BUFF:
   968                           	opt stack 0
   969  000100                     	ds	50
   970  000132                     _USART4_BUFF:
   971                           	opt stack 0
   972  000132                     	ds	50
   973  000164                     _imaginaryNumbers:
   974                           	opt stack 0
   975  000164                     	ds	128
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           prodh	equ	0xFF4
   981                           prodl	equ	0xFF3
   982                           intcon	equ	0xFF2
   983                           intcon2	equ	0xFF1
   984                           intcon3	equ	0xFF0
   985                           indf0	equ	0xFEF
   986                           postinc0	equ	0xFEE
   987                           fsr0h	equ	0xFEA
   988                           fsr0l	equ	0xFE9
   989                           wreg	equ	0xFE8
   990                           indf1	equ	0xFE7
   991                           postinc1	equ	0xFE6
   992                           postdec1	equ	0xFE5
   993                           fsr1h	equ	0xFE2
   994                           fsr1l	equ	0xFE1
   995                           indf2	equ	0xFDF
   996                           postinc2	equ	0xFDE
   997                           postdec2	equ	0xFDD
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           status	equ	0xFD8
  1001                           
  1002                           	psect	bssBANK2
  1003  000200                     __pbssBANK2:
  1004                           	opt stack 0
  1005  000200                     _realNumbers:
  1006                           	opt stack 0
  1007  000200                     	ds	128
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           prodh	equ	0xFF4
  1013                           prodl	equ	0xFF3
  1014                           intcon	equ	0xFF2
  1015                           intcon2	equ	0xFF1
  1016                           intcon3	equ	0xFF0
  1017                           indf0	equ	0xFEF
  1018                           postinc0	equ	0xFEE
  1019                           fsr0h	equ	0xFEA
  1020                           fsr0l	equ	0xFE9
  1021                           wreg	equ	0xFE8
  1022                           indf1	equ	0xFE7
  1023                           postinc1	equ	0xFE6
  1024                           postdec1	equ	0xFE5
  1025                           fsr1h	equ	0xFE2
  1026                           fsr1l	equ	0xFE1
  1027                           indf2	equ	0xFDF
  1028                           postinc2	equ	0xFDE
  1029                           postdec2	equ	0xFDD
  1030                           fsr2h	equ	0xFDA
  1031                           fsr2l	equ	0xFD9
  1032                           status	equ	0xFD8
  1033                           
  1034                           	psect	bssBIGRAM
  1035  000280                     __pbssBIGRAM:
  1036                           	opt stack 0
  1037  000280                     _PIXY_BUFF:
  1038                           	opt stack 0
  1039  000280                     	ds	500
  1040  000474                     _USB_BUFF:
  1041                           	opt stack 0
  1042  000474                     	ds	500
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           intcon	equ	0xFF2
  1050                           intcon2	equ	0xFF1
  1051                           intcon3	equ	0xFF0
  1052                           indf0	equ	0xFEF
  1053                           postinc0	equ	0xFEE
  1054                           fsr0h	equ	0xFEA
  1055                           fsr0l	equ	0xFE9
  1056                           wreg	equ	0xFE8
  1057                           indf1	equ	0xFE7
  1058                           postinc1	equ	0xFE6
  1059                           postdec1	equ	0xFE5
  1060                           fsr1h	equ	0xFE2
  1061                           fsr1l	equ	0xFE1
  1062                           indf2	equ	0xFDF
  1063                           postinc2	equ	0xFDE
  1064                           postdec2	equ	0xFDD
  1065                           fsr2h	equ	0xFDA
  1066                           fsr2l	equ	0xFD9
  1067                           status	equ	0xFD8
  1068                           
  1069                           	psect	cstackBANK0
  1070  000060                     __pcstackBANK0:
  1071                           	opt stack 0
  1072  000060                     LCD_printString@tempString:
  1073                           	opt stack 0
  1074                           
  1075                           ; 20 bytes @ 0x0
  1076  000060                     	ds	20
  1077  000074                     LCD_printString@string:
  1078                           	opt stack 0
  1079                           
  1080                           ; 20 bytes @ 0x14
  1081  000074                     	ds	20
  1082  000088                     LCD_printString@x:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x28
  1086  000088                     	ds	1
  1087  000089                     LCD_printString@val:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x29
  1091  000089                     	ds	2
  1092  00008B                     LCD_printString@tempString_590:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x2B
  1096  00008B                     	ds	2
  1097  00008D                     LCD_printString@aptr:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x2D
  1101  00008D                     	ds	1
  1102  00008E                     LCD_printString@i:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2E
  1106  00008E                     	ds	2
  1107  000090                     LCD_printString@i_591:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x30
  1111  000090                     	ds	2
  1112  000092                     RCMode@left_speed:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x32
  1116  000092                     	ds	2
  1117  000094                     RCMode@right_speed:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x34
  1121  000094                     	ds	2
  1122  000096                     RCMode@type:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x36
  1126  000096                     	ds	1
  1127  000097                     RCMode@done:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x37
  1131  000097                     	ds	1
  1132                           tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           prodh	equ	0xFF4
  1137                           prodl	equ	0xFF3
  1138                           intcon	equ	0xFF2
  1139                           intcon2	equ	0xFF1
  1140                           intcon3	equ	0xFF0
  1141                           indf0	equ	0xFEF
  1142                           postinc0	equ	0xFEE
  1143                           fsr0h	equ	0xFEA
  1144                           fsr0l	equ	0xFE9
  1145                           wreg	equ	0xFE8
  1146                           indf1	equ	0xFE7
  1147                           postinc1	equ	0xFE6
  1148                           postdec1	equ	0xFE5
  1149                           fsr1h	equ	0xFE2
  1150                           fsr1l	equ	0xFE1
  1151                           indf2	equ	0xFDF
  1152                           postinc2	equ	0xFDE
  1153                           postdec2	equ	0xFDD
  1154                           fsr2h	equ	0xFDA
  1155                           fsr2l	equ	0xFD9
  1156                           status	equ	0xFD8
  1157                           
  1158                           	psect	cstackCOMRAM
  1159  000001                     __pcstackCOMRAM:
  1160                           	opt stack 0
  1161  000001                     ??_encoderInterrupt:
  1162  000001                     
  1163                           ; 1 bytes @ 0x0
  1164  000001                     	ds	3
  1165  000004                     ??_communicationInterruptHandler:
  1166                           
  1167                           ; 0 bytes @ 0x3
  1168  000004                     	ds	2
  1169  000006                     ?___wmul:
  1170                           	opt stack 0
  1171  000006                     ?___lwdiv:
  1172                           	opt stack 0
  1173  000006                     ?_millis:
  1174                           	opt stack 0
  1175  000006                     settings_readButton@t:
  1176                           	opt stack 0
  1177  000006                     settings_auto@t:
  1178                           	opt stack 0
  1179  000006                     settings_wander@t:
  1180                           	opt stack 0
  1181  000006                     settings_selfTest@t:
  1182                           	opt stack 0
  1183  000006                     PS2_analog@button:
  1184                           	opt stack 0
  1185  000006                     OpenEPWM1@timer_source:
  1186                           	opt stack 0
  1187  000006                     SetOutputEPWM1@outputmode:
  1188                           	opt stack 0
  1189  000006                     OpenEPWM3@timer_source:
  1190                           	opt stack 0
  1191  000006                     SetOutputEPWM3@outputmode:
  1192                           	opt stack 0
  1193  000006                     SetDCEPWM1@dutycycle:
  1194                           	opt stack 0
  1195  000006                     SetDCEPWM3@dutycycle:
  1196                           	opt stack 0
  1197  000006                     ___wmul@multiplier:
  1198                           	opt stack 0
  1199  000006                     ___lwdiv@dividend:
  1200                           	opt stack 0
  1201  000006                     strcat@to:
  1202                           	opt stack 0
  1203  000006                     delay_us@x:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x5
  1207  000006                     	ds	1
  1208  000007                     ??_OpenEPWM1:
  1209  000007                     ??_SetOutputEPWM1:
  1210  000007                     ??_OpenEPWM3:
  1211  000007                     ??_SetOutputEPWM3:
  1212                           
  1213                           ; 0 bytes @ 0x6
  1214  000007                     	ds	1
  1215  000008                     ??_SetDCEPWM1:
  1216  000008                     ??_SetDCEPWM3:
  1217  000008                     OpenEPWM1@period:
  1218                           	opt stack 0
  1219  000008                     SetOutputEPWM1@eccpmx:
  1220                           	opt stack 0
  1221  000008                     OpenEPWM3@period:
  1222                           	opt stack 0
  1223  000008                     SetOutputEPWM3@eccpmx:
  1224                           	opt stack 0
  1225  000008                     ___wmul@multiplicand:
  1226                           	opt stack 0
  1227  000008                     ___lwdiv@divisor:
  1228                           	opt stack 0
  1229  000008                     strcat@from:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x7
  1233  000008                     	ds	1
  1234  000009                     SetOutputEPWM1@outputconfig:
  1235                           	opt stack 0
  1236  000009                     SetOutputEPWM3@outputconfig:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x8
  1240  000009                     	ds	1
  1241  00000A                     ??_PS2_shiftInOut:
  1242  00000A                     ___lwdiv@counter:
  1243                           	opt stack 0
  1244  00000A                     SetDCEPWM1@DCycle:
  1245                           	opt stack 0
  1246  00000A                     SetDCEPWM3@DCycle:
  1247                           	opt stack 0
  1248  00000A                     ___wmul@product:
  1249                           	opt stack 0
  1250  00000A                     strcat@cp:
  1251                           	opt stack 0
  1252  00000A                     delay_ms@x:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x9
  1256  00000A                     	ds	1
  1257  00000B                     ___lwdiv@quotient:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0xA
  1261  00000B                     	ds	1
  1262  00000C                     ?___awdiv:
  1263                           	opt stack 0
  1264  00000C                     PS2_shiftInOut@byte:
  1265                           	opt stack 0
  1266  00000C                     ___awdiv@dividend:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0xB
  1270  00000C                     	ds	1
  1271  00000D                     ?___lwmod:
  1272                           	opt stack 0
  1273  00000D                     PS2_shiftInOut@tmp:
  1274                           	opt stack 0
  1275  00000D                     ___lwmod@dividend:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0xC
  1279  00000D                     	ds	1
  1280  00000E                     ??_delay_ms:
  1281  00000E                     PS2_shiftInOut@i:
  1282                           	opt stack 0
  1283  00000E                     ___awdiv@divisor:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0xD
  1287  00000E                     	ds	1
  1288  00000F                     ___lwmod@divisor:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0xE
  1292  00000F                     	ds	1
  1293  000010                     ___awdiv@counter:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0xF
  1297  000010                     	ds	1
  1298  000011                     ___awdiv@sign:
  1299                           	opt stack 0
  1300  000011                     ___lwmod@counter:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x10
  1304  000011                     	ds	1
  1305  000012                     ?_sprintf:
  1306                           	opt stack 0
  1307  000012                     sprintf@f:
  1308                           	opt stack 0
  1309  000012                     ___awdiv@quotient:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x11
  1313  000012                     	ds	2
  1314  000014                     motorDrive_setSpeeds@rSpeed:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x13
  1318  000014                     	ds	1
  1319  000015                     ??_motorDrive_setSpeeds:
  1320                           
  1321                           ; 0 bytes @ 0x14
  1322  000015                     	ds	1
  1323  000016                     ??_sprintf:
  1324  000016                     delay_ms@time:
  1325                           	opt stack 0
  1326                           
  1327                           ; 4 bytes @ 0x15
  1328  000016                     	ds	1
  1329  000017                     motorDrive_setSpeeds@templ:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x16
  1333  000017                     	ds	1
  1334  000018                     sprintf@ap:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x17
  1338  000018                     	ds	1
  1339  000019                     sprintf@flag:
  1340                           	opt stack 0
  1341  000019                     motorDrive_setSpeeds@tempr:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x18
  1345  000019                     	ds	1
  1346  00001A                     LCD_placeCursor@y:
  1347                           	opt stack 0
  1348  00001A                     PS2_sendCommandString@len:
  1349                           	opt stack 0
  1350  00001A                     sprintf@prec:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x19
  1354  00001A                     	ds	1
  1355  00001B                     ??_PS2_sendCommandString:
  1356  00001B                     ??_LCD_placeCursor:
  1357  00001B                     _motorDrive_setSpeeds$2402:
  1358                           	opt stack 0
  1359  00001B                     sprintf@_val:
  1360                           	opt stack 0
  1361                           
  1362                           ; 5 bytes @ 0x1A
  1363  00001B                     	ds	2
  1364  00001D                     LCD_placeCursor@x:
  1365                           	opt stack 0
  1366  00001D                     _motorDrive_setSpeeds$2403:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x1C
  1370  00001D                     	ds	1
  1371  00001E                     LCD_placeCursor@address:
  1372                           	opt stack 0
  1373  00001E                     PS2_sendCommandString@y:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x1D
  1377  00001E                     	ds	1
  1378  00001F                     _motorDrive_setSpeeds$2404:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x1E
  1382  00001F                     	ds	1
  1383  000020                     PS2_sendCommandString@string:
  1384                           	opt stack 0
  1385  000020                     sprintf@sp:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x1F
  1389  000020                     	ds	1
  1390  000021                     ??_PS2_readGamepad:
  1391  000021                     sprintf@c:
  1392                           	opt stack 0
  1393  000021                     _motorDrive_setSpeeds$2405:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x20
  1397  000021                     	ds	1
  1398  000022                     ?_LCD_printString:
  1399                           	opt stack 0
  1400  000022                     LCD_printString@y:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x21
  1404  000022                     	ds	1
  1405  000023                     LCD_printString@input:
  1406                           	opt stack 0
  1407  000023                     _motorDrive_setSpeeds$2406:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x22
  1411  000023                     	ds	2
  1412  000025                     _motorDrive_setSpeeds$2407:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x24
  1416  000025                     	ds	1
  1417  000026                     PS2_readGamepad@dword2:
  1418                           	opt stack 0
  1419                           
  1420                           ; 12 bytes @ 0x25
  1421  000026                     	ds	1
  1422  000027                     _motorDrive_setSpeeds$2408:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x26
  1426  000027                     	ds	2
  1427  000029                     ??_LCD_printString:
  1428  000029                     motorDrive_setSpeeds@lSpeed:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x28
  1432  000029                     	ds	1
  1433  00002A                     
  1434                           ; 0 bytes @ 0x29
  1435  00002A                     	ds	1
  1436  00002B                     ??_selfTest:
  1437  00002B                     
  1438                           ; 0 bytes @ 0x2A
  1439  00002B                     	ds	7
  1440  000032                     PS2_readGamepad@dword:
  1441                           	opt stack 0
  1442                           
  1443                           ; 9 bytes @ 0x31
  1444  000032                     	ds	9
  1445  00003B                     PS2_readGamepad@temp:
  1446                           	opt stack 0
  1447                           
  1448                           ; 4 bytes @ 0x3A
  1449  00003B                     	ds	4
  1450  00003F                     PS2_readGamepad@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x3E
  1454  00003F                     	ds	2
  1455  000041                     PS2_readGamepad@i_2534:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x40
  1459  000041                     	ds	2
  1460  000043                     PS2_init@temp:
  1461                           	opt stack 0
  1462                           
  1463                           ; 9 bytes @ 0x42
  1464  000043                     	ds	9
  1465  00004C                     PS2_init@y:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x4B
  1469  00004C                     	ds	2
  1470  00004E                     PS2_init@i:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x4D
  1474  00004E                     	ds	2
  1475  000050                     ??_main:
  1476                           
  1477                           ; 0 bytes @ 0x4F
  1478  000050                     	ds	2
  1479  000052                     main@mode:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x51
  1483  000052                     	ds	1
  1484                           tblptru	equ	0xFF8
  1485                           tblptrh	equ	0xFF7
  1486                           tblptrl	equ	0xFF6
  1487                           tablat	equ	0xFF5
  1488                           prodh	equ	0xFF4
  1489                           prodl	equ	0xFF3
  1490                           intcon	equ	0xFF2
  1491                           intcon2	equ	0xFF1
  1492                           intcon3	equ	0xFF0
  1493                           indf0	equ	0xFEF
  1494                           postinc0	equ	0xFEE
  1495                           fsr0h	equ	0xFEA
  1496                           fsr0l	equ	0xFE9
  1497                           wreg	equ	0xFE8
  1498                           indf1	equ	0xFE7
  1499                           postinc1	equ	0xFE6
  1500                           postdec1	equ	0xFE5
  1501                           fsr1h	equ	0xFE2
  1502                           fsr1l	equ	0xFE1
  1503                           indf2	equ	0xFDF
  1504                           postinc2	equ	0xFDE
  1505                           postdec2	equ	0xFDD
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;;
  1511 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1512 ;;
  1513 ;; *************** function _main *****************
  1514 ;; Defined at:
  1515 ;;		line 108 in file "main.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  mode            1   81[COMRAM] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;		None               void
  1522 ;; Registers used:
  1523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;Total ram usage:        3 bytes
  1534 ;; Hardware stack levels required when called:   10
  1535 ;; This function calls:
  1536 ;;		_LCD_printString
  1537 ;;		_RCMode
  1538 ;;		_competitionMode
  1539 ;;		_debug
  1540 ;;		_delay_ms
  1541 ;;		_init
  1542 ;;		_selfTest
  1543 ;;		_settings_auto
  1544 ;;		_settings_readButton
  1545 ;;		_settings_selfTest
  1546 ;;		_settings_wander
  1547 ;;		_wanderMode
  1548 ;; This function is called by:
  1549 ;;		Startup code after reset
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text0
  1554  010B30                     __ptext0:
  1555                           	opt stack 0
  1556  010B30                     _main:
  1557                           	opt stack 20
  1558                           
  1559                           ;main.c: 132: IPEN = 1;
  1560                           
  1561                           ;incstack = 0
  1562  010B30  8ED0               	bsf	4048,7,c	;volatile
  1563                           
  1564                           ;main.c: 133: GIE = 1;
  1565  010B32  8EF2               	bsf	intcon,7,c	;volatile
  1566                           
  1567                           ;main.c: 134: init();
  1568  010B34  ECD5  F08A         	call	_init	;wreg free
  1569  010B38                     l5337:
  1570                           
  1571                           ;main.c: 141: {
  1572                           ;main.c: 143: mode = (settings_selfTest() << 2) + (settings_wander() << 1) + settings_au
      +                          to();
  1573  010B38  EC1B  F08B         	call	_settings_auto	;wreg free
  1574  010B3C  6E50               	movwf	??_main& (0+255),c
  1575  010B3E  EC30  F08B         	call	_settings_wander	;wreg free
  1576  010B42  0D02               	mullw	2
  1577  010B44  CFF3 F051          	movff	prodl,??_main+1
  1578  010B48  EC36  F08B         	call	_settings_selfTest	;wreg free
  1579  010B4C  0D04               	mullw	4
  1580  010B4E  50F3               	movf	prodl,w,c
  1581  010B50  2451               	addwf	??_main+1,w,c
  1582  010B52  2450               	addwf	??_main,w,c
  1583  010B54  6E52               	movwf	main@mode,c
  1584                           
  1585                           ;main.c: 145: switch(mode)
  1586  010B56  D036               	goto	l5353
  1587  010B58                     l5339:
  1588                           
  1589                           ;main.c: 148: LCD_printString(0, 0, "Selected\nRC Mode");
  1590  010B58  6A22               	clrf	LCD_printString@y,c
  1591  010B5A  0EFF               	movlw	high STR_9
  1592  010B5C  6E24               	movwf	LCD_printString@input+1,c
  1593  010B5E  0E5D               	movlw	low STR_9
  1594  010B60  6E23               	movwf	LCD_printString@input,c
  1595  010B62  0E00               	movlw	0
  1596  010B64  EC00  F080         	call	_LCD_printString
  1597                           
  1598                           ;main.c: 149: break;
  1599  010B68  D038               	goto	l5355
  1600  010B6A                     l5341:
  1601                           
  1602                           ;main.c: 152: LCD_printString(0, 0, "Selected\nMatch");
  1603  010B6A  6A22               	clrf	LCD_printString@y,c
  1604  010B6C  0EFF               	movlw	high STR_10
  1605  010B6E  6E24               	movwf	LCD_printString@input+1,c
  1606  010B70  0EAE               	movlw	low STR_10
  1607  010B72  6E23               	movwf	LCD_printString@input,c
  1608  010B74  0E00               	movlw	0
  1609  010B76  EC00  F080         	call	_LCD_printString
  1610                           
  1611                           ;main.c: 153: break;
  1612  010B7A  D02F               	goto	l5355
  1613  010B7C                     l5343:
  1614                           
  1615                           ;main.c: 156: LCD_printString(0, 0, "Selected\nWander");
  1616  010B7C  6A22               	clrf	LCD_printString@y,c
  1617  010B7E  0EFF               	movlw	high STR_11
  1618  010B80  6E24               	movwf	LCD_printString@input+1,c
  1619  010B82  0E8F               	movlw	low STR_11
  1620  010B84  6E23               	movwf	LCD_printString@input,c
  1621  010B86  0E00               	movlw	0
  1622  010B88  EC00  F080         	call	_LCD_printString
  1623                           
  1624                           ;main.c: 157: break;
  1625  010B8C  D026               	goto	l5355
  1626  010B8E                     l5345:
  1627                           
  1628                           ;main.c: 160: LCD_printString(0, 0, "Selected\nSelfTest");
  1629  010B8E  6A22               	clrf	LCD_printString@y,c
  1630  010B90  0EFF               	movlw	high STR_12
  1631  010B92  6E24               	movwf	LCD_printString@input+1,c
  1632  010B94  0E28               	movlw	low STR_12
  1633  010B96  6E23               	movwf	LCD_printString@input,c
  1634  010B98  0E00               	movlw	0
  1635  010B9A  EC00  F080         	call	_LCD_printString
  1636                           
  1637                           ;main.c: 161: break;
  1638  010B9E  D01D               	goto	l5355
  1639  010BA0                     l5347:
  1640                           
  1641                           ;main.c: 164: LCD_printString(0, 0, "Selected\nDebug");
  1642  010BA0  6A22               	clrf	LCD_printString@y,c
  1643  010BA2  0EFF               	movlw	high STR_13
  1644  010BA4  6E24               	movwf	LCD_printString@input+1,c
  1645  010BA6  0E9F               	movlw	low STR_13
  1646  010BA8  6E23               	movwf	LCD_printString@input,c
  1647  010BAA  0E00               	movlw	0
  1648  010BAC  EC00  F080         	call	_LCD_printString
  1649                           
  1650                           ;main.c: 165: break;
  1651  010BB0  D014               	goto	l5355
  1652  010BB2                     l5349:
  1653                           
  1654                           ;main.c: 168: LCD_printString(0, 0, "Selected\nUnknown");
  1655  010BB2  6A22               	clrf	LCD_printString@y,c
  1656  010BB4  0EFF               	movlw	high STR_14
  1657  010BB6  6E24               	movwf	LCD_printString@input+1,c
  1658  010BB8  0E6E               	movlw	low STR_14
  1659  010BBA  6E23               	movwf	LCD_printString@input,c
  1660  010BBC  0E00               	movlw	0
  1661  010BBE  EC00  F080         	call	_LCD_printString
  1662                           
  1663                           ;main.c: 169: break;
  1664  010BC2  D00B               	goto	l5355
  1665  010BC4                     l5353:
  1666  010BC4  5052               	movf	main@mode,w,c
  1667                           
  1668                           ; Switch size 1, requested type "space"
  1669                           ; Number of cases is 5, Range of values is 0 to 5
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte           16     9 (average)
  1673                           ;	Chosen strategy is simple_byte
  1674  010BC6  E0C8               	bz	l5339
  1675  010BC8  0A01               	xorlw	1	; case 1
  1676  010BCA  E0CF               	bz	l5341
  1677  010BCC  0A03               	xorlw	3	; case 2
  1678  010BCE  E0D6               	bz	l5343
  1679  010BD0  0A06               	xorlw	6	; case 4
  1680  010BD2  E0DD               	bz	l5345
  1681  010BD4  0A01               	xorlw	1	; case 5
  1682  010BD6  E0E4               	bz	l5347
  1683  010BD8  D7EC               	goto	l5349
  1684  010BDA                     l5355:
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;main.c: 172: delay_ms(50);
  1688  010BDA  EC59  F084         	call	PL10	;call to abstracted procedure
  1689  010BDE  EC66  F089         	call	_delay_ms	;wreg free
  1690                           
  1691                           ;main.c: 173: }while(settings_readButton() == 1 || mode > 5);
  1692  010BE2  EC22  F08B         	call	_settings_readButton	;wreg free
  1693  010BE6  6E50               	movwf	??_main& (0+255),c
  1694  010BE8  0450               	decf	??_main,w,c
  1695  010BEA  E0A6               	bz	l5337
  1696  010BEC  0E06               	movlw	6
  1697  010BEE  5C52               	subwf	main@mode,w,c
  1698  010BF0  E310               	bnc	l5371
  1699  010BF2  D7A2               	goto	l5337
  1700  010BF4                     l5359:
  1701                           
  1702                           ;main.c: 178: RCMode();
  1703  010BF4  EC7E  F086         	call	_RCMode	;wreg free
  1704                           
  1705                           ;main.c: 179: break;
  1706  010BF8  D79F               	goto	l5337
  1707  010BFA                     l5361:
  1708                           
  1709                           ;main.c: 182: competitionMode();
  1710  010BFA  ECF9  F08A         	call	_competitionMode	;wreg free
  1711                           
  1712                           ;main.c: 183: break;
  1713  010BFE  D79C               	goto	l5337
  1714  010C00                     l5363:
  1715                           
  1716                           ;main.c: 186: wanderMode();
  1717  010C00  ECF0  F08A         	call	_wanderMode	;wreg free
  1718                           
  1719                           ;main.c: 187: break;
  1720  010C04  D799               	goto	l5337
  1721  010C06                     l5365:
  1722                           
  1723                           ;main.c: 190: selfTest();
  1724  010C06  EC7A  F08A         	call	_selfTest	;wreg free
  1725                           
  1726                           ;main.c: 191: break;
  1727  010C0A  D796               	goto	l5337
  1728  010C0C                     l5367:
  1729                           
  1730                           ;main.c: 194: debug();
  1731  010C0C  EC3F  F08B         	call	_debug	;wreg free
  1732                           
  1733                           ;main.c: 195: break;
  1734  010C10  D793               	goto	l5337
  1735  010C12                     l5371:
  1736  010C12  5052               	movf	main@mode,w,c
  1737                           
  1738                           ; Switch size 1, requested type "space"
  1739                           ; Number of cases is 5, Range of values is 0 to 5
  1740                           ; switch strategies available:
  1741                           ; Name         Instructions Cycles
  1742                           ; simple_byte           16     9 (average)
  1743                           ;	Chosen strategy is simple_byte
  1744  010C14  E0EF               	bz	l5359
  1745  010C16  0A01               	xorlw	1	; case 1
  1746  010C18  E0F0               	bz	l5361
  1747  010C1A  0A03               	xorlw	3	; case 2
  1748  010C1C  E0F1               	bz	l5363
  1749  010C1E  0A06               	xorlw	6	; case 4
  1750  010C20  E0F2               	bz	l5365
  1751  010C22  0A01               	xorlw	1	; case 5
  1752  010C24  E0F3               	bz	l5367
  1753  010C26  D788               	goto	l5337
  1754  010C28                     __end_of_main:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           prodh	equ	0xFF4
  1761                           prodl	equ	0xFF3
  1762                           intcon	equ	0xFF2
  1763                           intcon2	equ	0xFF1
  1764                           intcon3	equ	0xFF0
  1765                           indf0	equ	0xFEF
  1766                           postinc0	equ	0xFEE
  1767                           fsr0h	equ	0xFEA
  1768                           fsr0l	equ	0xFE9
  1769                           wreg	equ	0xFE8
  1770                           indf1	equ	0xFE7
  1771                           postinc1	equ	0xFE6
  1772                           postdec1	equ	0xFE5
  1773                           fsr1h	equ	0xFE2
  1774                           fsr1l	equ	0xFE1
  1775                           indf2	equ	0xFDF
  1776                           postinc2	equ	0xFDE
  1777                           postdec2	equ	0xFDD
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function _wanderMode *****************
  1783 ;; Defined at:
  1784 ;;		line 59 in file "main.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;		None
  1789 ;; Return value:  Size  Location     Type
  1790 ;;		None               void
  1791 ;; Registers used:
  1792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;Total ram usage:        0 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    7
  1805 ;; This function calls:
  1806 ;;		_LCD_printString
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text1
  1813  0115E0                     __ptext1:
  1814                           	opt stack 0
  1815  0115E0                     _wanderMode:
  1816                           	opt stack 22
  1817                           
  1818                           ;main.c: 61: LCD_printString(0,0, "Wanderin\n---..---");
  1819                           
  1820                           ;incstack = 0
  1821  0115E0  6A22               	clrf	LCD_printString@y,c
  1822  0115E2  0EFF               	movlw	high STR_4
  1823  0115E4  6E24               	movwf	LCD_printString@input+1,c
  1824  0115E6  0E16               	movlw	low STR_4
  1825  0115E8  6E23               	movwf	LCD_printString@input,c
  1826  0115EA  0E00               	movlw	0
  1827  0115EC  EC00  F080         	call	_LCD_printString
  1828  0115F0                     l236:
  1829                           
  1830                           ;main.c: 63: {
  1831  0115F0  D7FF               	goto	l236
  1832  0115F2                     __end_of_wanderMode:
  1833                           	opt stack 0
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           intcon	equ	0xFF2
  1841                           intcon2	equ	0xFF1
  1842                           intcon3	equ	0xFF0
  1843                           indf0	equ	0xFEF
  1844                           postinc0	equ	0xFEE
  1845                           fsr0h	equ	0xFEA
  1846                           fsr0l	equ	0xFE9
  1847                           wreg	equ	0xFE8
  1848                           indf1	equ	0xFE7
  1849                           postinc1	equ	0xFE6
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _settings_wander *****************
  1861 ;; Defined at:
  1862 ;;		line 80 in file "settings.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  t               1    5[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      unsigned char 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;Total ram usage:        1 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    3
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_main
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text2
  1891  011660                     __ptext2:
  1892                           	opt stack 0
  1893  011660                     _settings_wander:
  1894                           	opt stack 26
  1895                           
  1896                           ;settings.c: 82: char t = RG2;
  1897                           
  1898                           ;incstack = 0
  1899  011660  0E00               	movlw	0
  1900  011662  B486               	btfsc	3974,2,c	;volatile
  1901  011664  0E01               	movlw	1
  1902  011666  6E06               	movwf	settings_wander@t,c
  1903                           
  1904                           ;settings.c: 83: return t;
  1905  011668  5006               	movf	settings_wander@t,w,c
  1906  01166A  0012               	return	
  1907  01166C                     __end_of_settings_wander:
  1908                           	opt stack 0
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           prodh	equ	0xFF4
  1914                           prodl	equ	0xFF3
  1915                           intcon	equ	0xFF2
  1916                           intcon2	equ	0xFF1
  1917                           intcon3	equ	0xFF0
  1918                           indf0	equ	0xFEF
  1919                           postinc0	equ	0xFEE
  1920                           fsr0h	equ	0xFEA
  1921                           fsr0l	equ	0xFE9
  1922                           wreg	equ	0xFE8
  1923                           indf1	equ	0xFE7
  1924                           postinc1	equ	0xFE6
  1925                           postdec1	equ	0xFE5
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _settings_selfTest *****************
  1936 ;; Defined at:
  1937 ;;		line 94 in file "settings.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  t               1    5[COMRAM] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      unsigned char 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1955 ;;Total ram usage:        1 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    3
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text3
  1966  01166C                     __ptext3:
  1967                           	opt stack 0
  1968  01166C                     _settings_selfTest:
  1969                           	opt stack 26
  1970                           
  1971                           ;settings.c: 96: char t = RG0;
  1972                           
  1973                           ;incstack = 0
  1974  01166C  0E00               	movlw	0
  1975  01166E  B086               	btfsc	3974,0,c	;volatile
  1976  011670  0E01               	movlw	1
  1977  011672  6E06               	movwf	settings_selfTest@t,c
  1978                           
  1979                           ;settings.c: 97: return t;
  1980  011674  5006               	movf	settings_selfTest@t,w,c
  1981  011676  0012               	return	
  1982  011678                     __end_of_settings_selfTest:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           prodh	equ	0xFF4
  1989                           prodl	equ	0xFF3
  1990                           intcon	equ	0xFF2
  1991                           intcon2	equ	0xFF1
  1992                           intcon3	equ	0xFF0
  1993                           indf0	equ	0xFEF
  1994                           postinc0	equ	0xFEE
  1995                           fsr0h	equ	0xFEA
  1996                           fsr0l	equ	0xFE9
  1997                           wreg	equ	0xFE8
  1998                           indf1	equ	0xFE7
  1999                           postinc1	equ	0xFE6
  2000                           postdec1	equ	0xFE5
  2001                           fsr1h	equ	0xFE2
  2002                           fsr1l	equ	0xFE1
  2003                           indf2	equ	0xFDF
  2004                           postinc2	equ	0xFDE
  2005                           postdec2	equ	0xFDD
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _settings_auto *****************
  2011 ;; Defined at:
  2012 ;;		line 66 in file "settings.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  t               1    5[COMRAM] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      unsigned char 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;Total ram usage:        1 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    3
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text4
  2041  011636                     __ptext4:
  2042                           	opt stack 0
  2043  011636                     _settings_auto:
  2044                           	opt stack 26
  2045                           
  2046                           ;settings.c: 68: char t = RL1;
  2047                           
  2048                           ;incstack = 0
  2049  011636  010E               	movlb	14
  2050  011638  0E00               	movlw	0
  2051  01163A  B3E4               	btfsc	228,1,b	;volatile
  2052  01163C  0E01               	movlw	1
  2053  01163E  6E06               	movwf	settings_auto@t,c
  2054                           
  2055                           ;settings.c: 69: return t;
  2056  011640  5006               	movf	settings_auto@t,w,c
  2057  011642  0012               	return	
  2058  011644                     __end_of_settings_auto:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           prodh	equ	0xFF4
  2065                           prodl	equ	0xFF3
  2066                           intcon	equ	0xFF2
  2067                           intcon2	equ	0xFF1
  2068                           intcon3	equ	0xFF0
  2069                           indf0	equ	0xFEF
  2070                           postinc0	equ	0xFEE
  2071                           fsr0h	equ	0xFEA
  2072                           fsr0l	equ	0xFE9
  2073                           wreg	equ	0xFE8
  2074                           indf1	equ	0xFE7
  2075                           postinc1	equ	0xFE6
  2076                           postdec1	equ	0xFE5
  2077                           fsr1h	equ	0xFE2
  2078                           fsr1l	equ	0xFE1
  2079                           indf2	equ	0xFDF
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _selfTest *****************
  2087 ;; Defined at:
  2088 ;;		line 49 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;		None               void
  2095 ;; Registers used:
  2096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;Total ram usage:        1 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    7
  2109 ;; This function calls:
  2110 ;;		_LCD_printString
  2111 ;;		_settings_readButton
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text5
  2118  0114F4                     __ptext5:
  2119                           	opt stack 0
  2120  0114F4                     _selfTest:
  2121                           	opt stack 22
  2122                           
  2123                           ;main.c: 53: LCD_printString(0,0, "Self Cal\nWait Plz");
  2124                           
  2125                           ;incstack = 0
  2126  0114F4  6A22               	clrf	LCD_printString@y,c
  2127  0114F6  0EFF               	movlw	high STR_3
  2128  0114F8  6E24               	movwf	LCD_printString@input+1,c
  2129  0114FA  0E3A               	movlw	low STR_3
  2130  0114FC  6E23               	movwf	LCD_printString@input,c
  2131  0114FE  0E00               	movlw	0
  2132  011500  EC00  F080         	call	_LCD_printString
  2133  011504                     l5299:
  2134  011504  EC22  F08B         	call	_settings_readButton	;wreg free
  2135  011508  0900               	iorlw	0
  2136  01150A  E0FC               	bz	l5299
  2137  01150C                     l5301:
  2138  01150C  EC22  F08B         	call	_settings_readButton	;wreg free
  2139  011510  6E2B               	movwf	??_selfTest& (0+255),c
  2140  011512  042B               	decf	??_selfTest,w,c
  2141  011514  A4D8               	btfss	status,2,c
  2142  011516  0012               	return	
  2143  011518  D7F9               	goto	l5301
  2144  01151A                     __end_of_selfTest:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           intcon	equ	0xFF2
  2153                           intcon2	equ	0xFF1
  2154                           intcon3	equ	0xFF0
  2155                           indf0	equ	0xFEF
  2156                           postinc0	equ	0xFEE
  2157                           fsr0h	equ	0xFEA
  2158                           fsr0l	equ	0xFE9
  2159                           wreg	equ	0xFE8
  2160                           indf1	equ	0xFE7
  2161                           postinc1	equ	0xFE6
  2162                           postdec1	equ	0xFE5
  2163                           fsr1h	equ	0xFE2
  2164                           fsr1l	equ	0xFE1
  2165                           indf2	equ	0xFDF
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _settings_readButton *****************
  2173 ;; Defined at:
  2174 ;;		line 45 in file "settings.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  t               1    5[COMRAM] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      unsigned char 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;Total ram usage:        1 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    3
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_selfTest
  2199 ;;		_main
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text6
  2204  011644                     __ptext6:
  2205                           	opt stack 0
  2206  011644                     _settings_readButton:
  2207                           	opt stack 26
  2208                           
  2209                           ;settings.c: 47: char t = RL3;
  2210                           
  2211                           ;incstack = 0
  2212  011644  010E               	movlb	14
  2213  011646  0E00               	movlw	0
  2214  011648  B7E4               	btfsc	228,3,b	;volatile
  2215  01164A  0E01               	movlw	1
  2216  01164C  6E06               	movwf	settings_readButton@t,c
  2217                           
  2218                           ;settings.c: 48: return t;
  2219  01164E  5006               	movf	settings_readButton@t,w,c
  2220  011650  0012               	return	
  2221  011652                     __end_of_settings_readButton:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           intcon2	equ	0xFF1
  2231                           intcon3	equ	0xFF0
  2232                           indf0	equ	0xFEF
  2233                           postinc0	equ	0xFEE
  2234                           fsr0h	equ	0xFEA
  2235                           fsr0l	equ	0xFE9
  2236                           wreg	equ	0xFE8
  2237                           indf1	equ	0xFE7
  2238                           postinc1	equ	0xFE6
  2239                           postdec1	equ	0xFE5
  2240                           fsr1h	equ	0xFE2
  2241                           fsr1l	equ	0xFE1
  2242                           indf2	equ	0xFDF
  2243                           postinc2	equ	0xFDE
  2244                           postdec2	equ	0xFDD
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _init *****************
  2250 ;; Defined at:
  2251 ;;		line 30 in file "main.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : F/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;Total ram usage:        0 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    8
  2272 ;; This function calls:
  2273 ;;		_LCD_init4bit
  2274 ;;		_UART_init
  2275 ;;		_clearMillis
  2276 ;;		_encoders_init
  2277 ;;		_fft_init
  2278 ;;		_motorDrive_init
  2279 ;;		_settings_init
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text7
  2286  0115AA                     __ptext7:
  2287                           	opt stack 0
  2288  0115AA                     _init:
  2289                           	opt stack 21
  2290                           
  2291                           ;main.c: 32: settings_init();
  2292                           
  2293                           ;incstack = 0
  2294  0115AA  ECB3  F08A         	call	_settings_init	;wreg free
  2295                           
  2296                           ; BSR set to: 15
  2297                           ;main.c: 33: motorDrive_init();
  2298  0115AE  EC65  F088         	call	_motorDrive_init	;wreg free
  2299                           
  2300                           ; BSR set to: 15
  2301                           ;main.c: 34: LCD_init4bit();
  2302  0115B2  EC8E  F083         	call	_LCD_init4bit	;wreg free
  2303                           
  2304                           ;main.c: 35: UART_init();
  2305  0115B6  ECE3  F086         	call	_UART_init	;wreg free
  2306                           
  2307                           ; BSR set to: 14
  2308                           ;main.c: 36: encoders_init();
  2309  0115BA  EC8D  F08A         	call	_encoders_init	;wreg free
  2310                           
  2311                           ; BSR set to: 14
  2312                           ;main.c: 37: fft_init();
  2313  0115BE  EC3C  F08B         	call	_fft_init	;wreg free
  2314                           
  2315                           ; BSR set to: 14
  2316                           ;main.c: 41: clearMillis();
  2317  0115C2  EF0B  F08B         	goto	_clearMillis	;wreg free
  2318  0115C6                     __end_of_init:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           intcon2	equ	0xFF1
  2328                           intcon3	equ	0xFF0
  2329                           indf0	equ	0xFEF
  2330                           postinc0	equ	0xFEE
  2331                           fsr0h	equ	0xFEA
  2332                           fsr0l	equ	0xFE9
  2333                           wreg	equ	0xFE8
  2334                           indf1	equ	0xFE7
  2335                           postinc1	equ	0xFE6
  2336                           postdec1	equ	0xFE5
  2337                           fsr1h	equ	0xFE2
  2338                           fsr1l	equ	0xFE1
  2339                           indf2	equ	0xFDF
  2340                           postinc2	equ	0xFDE
  2341                           postdec2	equ	0xFDD
  2342                           fsr2h	equ	0xFDA
  2343                           fsr2l	equ	0xFD9
  2344                           status	equ	0xFD8
  2345                           
  2346 ;; *************** function _settings_init *****************
  2347 ;; Defined at:
  2348 ;;		line 16 in file "settings.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, status,2
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : F/F
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    3
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_init
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text8
  2377  011566                     __ptext8:
  2378                           	opt stack 0
  2379  011566                     _settings_init:
  2380                           	opt stack 25
  2381                           
  2382                           ;settings.c: 18: CM1CONbits.CON = 0;
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;incstack = 0
  2386  011566  010F               	movlb	15	; () banked
  2387  011568  9F53               	bcf	83,7,b	;volatile
  2388                           
  2389                           ;settings.c: 19: ANCON1 = 0;
  2390  01156A  010E               	movlb	14	; () banked
  2391  01156C  6B47               	clrf	71,b	;volatile
  2392                           
  2393                           ;settings.c: 20: ANCON2 = 0;
  2394  01156E  6B46               	clrf	70,b	;volatile
  2395                           
  2396                           ;settings.c: 22: TRISGbits.TRISG0 = 1;
  2397  011570  8098               	bsf	3992,0,c	;volatile
  2398                           
  2399                           ;settings.c: 23: TRISGbits.TRISG1 = 1;
  2400  011572  8298               	bsf	3992,1,c	;volatile
  2401                           
  2402                           ;settings.c: 24: TRISGbits.TRISG2 = 1;
  2403  011574  8498               	bsf	3992,2,c	;volatile
  2404                           
  2405                           ;settings.c: 25: TRISGbits.TRISG3 = 1;
  2406  011576  8698               	bsf	3992,3,c	;volatile
  2407                           
  2408                           ;settings.c: 26: TRISGbits.TRISG4 = 1;
  2409  011578  8898               	bsf	3992,4,c	;volatile
  2410                           
  2411                           ;settings.c: 27: TRISLbits.TRISL1 = 1;
  2412  01157A  83E6               	bsf	230,1,b	;volatile
  2413                           
  2414                           ;settings.c: 28: TRISLbits.TRISL2 = 1;
  2415  01157C  85E6               	bsf	230,2,b	;volatile
  2416                           
  2417                           ;settings.c: 29: TRISLbits.TRISL3 = 1;
  2418  01157E  87E6               	bsf	230,3,b	;volatile
  2419                           
  2420                           ; BSR set to: 14
  2421                           ;settings.c: 32: PADCFG1 = 0b00010001;
  2422  011580  0E11               	movlw	17
  2423  011582  010F               	movlb	15	; () banked
  2424  011584  6F54               	movwf	84,b	;volatile
  2425                           
  2426                           ; BSR set to: 15
  2427  011586  0C11               	retlw	17
  2428  011588                     __end_of_settings_init:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           intcon	equ	0xFF2
  2437                           intcon2	equ	0xFF1
  2438                           intcon3	equ	0xFF0
  2439                           indf0	equ	0xFEF
  2440                           postinc0	equ	0xFEE
  2441                           fsr0h	equ	0xFEA
  2442                           fsr0l	equ	0xFE9
  2443                           wreg	equ	0xFE8
  2444                           indf1	equ	0xFE7
  2445                           postinc1	equ	0xFE6
  2446                           postdec1	equ	0xFE5
  2447                           fsr1h	equ	0xFE2
  2448                           fsr1l	equ	0xFE1
  2449                           indf2	equ	0xFDF
  2450                           postinc2	equ	0xFDE
  2451                           postdec2	equ	0xFDD
  2452                           fsr2h	equ	0xFDA
  2453                           fsr2l	equ	0xFD9
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _motorDrive_init *****************
  2457 ;; Defined at:
  2458 ;;		line 15 in file "motorDrive.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;		None               void
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : F/F
  2469 ;;		On exit  : F/F
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    5
  2479 ;; This function calls:
  2480 ;;		_OpenEPWM1
  2481 ;;		_OpenEPWM3
  2482 ;;		_SetDCEPWM1
  2483 ;;		_SetDCEPWM3
  2484 ;;		_SetOutputEPWM1
  2485 ;;		_SetOutputEPWM3
  2486 ;;		_motorDrive_setSpeeds
  2487 ;; This function is called by:
  2488 ;;		_init
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text9
  2493  0110CA                     __ptext9:
  2494                           	opt stack 0
  2495  0110CA                     _motorDrive_init:
  2496                           	opt stack 23
  2497                           
  2498                           ; BSR set to: 15
  2499                           ;motorDrive.c: 22: IOLOCK = 0;
  2500                           
  2501                           ; BSR set to: 15
  2502                           ;incstack = 0
  2503  0110CA  9C66               	bcf	3942,6,c	;volatile
  2504                           
  2505                           ; BSR set to: 15
  2506                           ;motorDrive.c: 24: RPOR34_35 |= 0xF8;
  2507  0110CC  0EF8               	movlw	248
  2508  0110CE  010E               	movlb	14	; () banked
  2509  0110D0  1323               	iorwf	35,f,b	;volatile
  2510                           
  2511                           ; BSR set to: 14
  2512                           ;motorDrive.c: 25: TRISE6 = 0;
  2513  0110D2  9C96               	bcf	3990,6,c	;volatile
  2514                           
  2515                           ;motorDrive.c: 29: RPOR30_31 |= 0x4F;
  2516  0110D4  0E4F               	movlw	79
  2517  0110D6  1321               	iorwf	33,f,b	;volatile
  2518                           
  2519                           ; BSR set to: 14
  2520                           ;motorDrive.c: 30: TRISE7 = 0;
  2521  0110D8  9E96               	bcf	3990,7,c	;volatile
  2522                           
  2523                           ; BSR set to: 14
  2524                           ;motorDrive.c: 32: IOLOCK = 1;
  2525  0110DA  8C66               	bsf	3942,6,c	;volatile
  2526                           
  2527                           ; BSR set to: 14
  2528                           ;motorDrive.c: 38: TRISL0 = 0;
  2529  0110DC  91E6               	bcf	230,0,b	;volatile
  2530                           
  2531                           ; BSR set to: 14
  2532                           ;motorDrive.c: 39: TRISK1 = 0;
  2533  0110DE  93E9               	bcf	233,1,b	;volatile
  2534                           
  2535                           ; BSR set to: 14
  2536                           ;motorDrive.c: 43: TMR4ON = 1;
  2537  0110E0  010F               	movlb	15	; () banked
  2538  0110E2  8504               	bsf	4,2,b	;volatile
  2539                           
  2540                           ; BSR set to: 15
  2541                           ;motorDrive.c: 44: T4CKPS1 = 1;
  2542  0110E4  8304               	bsf	4,1,b	;volatile
  2543                           
  2544                           ; BSR set to: 15
  2545                           ;motorDrive.c: 46: TMR6ON = 1;
  2546  0110E6  853D               	bsf	61,2,b	;volatile
  2547                           
  2548                           ; BSR set to: 15
  2549                           ;motorDrive.c: 47: T6CKPS1 = 1;
  2550  0110E8  833D               	bsf	61,1,b	;volatile
  2551                           
  2552                           ; BSR set to: 15
  2553                           ;motorDrive.c: 50: OpenEPWM1(0x33, 0b10101111);
  2554  0110EA  0EAF               	movlw	175
  2555  0110EC  6E06               	movwf	OpenEPWM1@timer_source,c
  2556  0110EE  0E33               	movlw	51
  2557  0110F0  EC2C  F088         	call	_OpenEPWM1
  2558                           
  2559                           ; BSR set to: 15
  2560                           ;motorDrive.c: 51: SetDCEPWM1(0x0);
  2561  0110F4  0E00               	movlw	0
  2562  0110F6  6A07               	clrf	SetDCEPWM1@dutycycle+1,c
  2563  0110F8  6A06               	clrf	SetDCEPWM1@dutycycle,c
  2564  0110FA  EC15  F08A         	call	_SetDCEPWM1	;wreg free
  2565                           
  2566                           ;motorDrive.c: 52: SetOutputEPWM1( 0b00111111, 0b11111100);
  2567  0110FE  0EFC               	movlw	252
  2568  011100  6E06               	movwf	SetOutputEPWM1@outputmode,c
  2569  011102  0E3F               	movlw	63
  2570  011104  ECF3  F087         	call	_SetOutputEPWM1
  2571                           
  2572                           ;motorDrive.c: 55: CCP1CON = 0b00001100;
  2573  011108  0E0C               	movlw	12
  2574  01110A  6EB9               	movwf	4025,c	;volatile
  2575                           
  2576                           ;motorDrive.c: 56: CCPTMRS0 = 0b01001001;
  2577  01110C  0E49               	movlw	73
  2578  01110E  010F               	movlb	15	; () banked
  2579  011110  6F36               	movwf	54,b	;volatile
  2580                           
  2581                           ; BSR set to: 15
  2582                           ;motorDrive.c: 60: OpenEPWM3(0x33, 0b11101111);
  2583  011112  0EEF               	movlw	239
  2584  011114  6E06               	movwf	OpenEPWM3@timer_source,c
  2585  011116  0E33               	movlw	51
  2586  011118  EC7D  F087         	call	_OpenEPWM3
  2587                           
  2588                           ; BSR set to: 15
  2589                           ;motorDrive.c: 61: SetDCEPWM3(0x0);
  2590  01111C  0E00               	movlw	0
  2591  01111E  6A07               	clrf	SetDCEPWM3@dutycycle+1,c
  2592  011120  6A06               	clrf	SetDCEPWM3@dutycycle,c
  2593  011122  ECF7  F089         	call	_SetDCEPWM3	;wreg free
  2594                           
  2595                           ; BSR set to: 15
  2596                           ;motorDrive.c: 62: SetOutputEPWM3( 0b00111111, 0b11111100);
  2597  011126  0EFC               	movlw	252
  2598  011128  6E06               	movwf	SetOutputEPWM3@outputmode,c
  2599  01112A  0E3F               	movlw	63
  2600  01112C  ECBA  F087         	call	_SetOutputEPWM3
  2601                           
  2602                           ; BSR set to: 15
  2603                           ;motorDrive.c: 64: motorDrive_setSpeeds(0,0);
  2604  011130  0E00               	movlw	0
  2605  011132  6A14               	clrf	motorDrive_setSpeeds@rSpeed,c
  2606  011134  EFC2  F081         	goto	_motorDrive_setSpeeds
  2607  011138                     __end_of_motorDrive_init:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           intcon2	equ	0xFF1
  2617                           intcon3	equ	0xFF0
  2618                           indf0	equ	0xFEF
  2619                           postinc0	equ	0xFEE
  2620                           fsr0h	equ	0xFEA
  2621                           fsr0l	equ	0xFE9
  2622                           wreg	equ	0xFE8
  2623                           indf1	equ	0xFE7
  2624                           postinc1	equ	0xFE6
  2625                           postdec1	equ	0xFE5
  2626                           fsr1h	equ	0xFE2
  2627                           fsr1l	equ	0xFE1
  2628                           indf2	equ	0xFDF
  2629                           postinc2	equ	0xFDE
  2630                           postdec2	equ	0xFDD
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _SetOutputEPWM3 *****************
  2636 ;; Defined at:
  2637 ;;		line 17 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setoc.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  outputconfig    1    wreg     unsigned char 
  2640 ;;  outputmode      1    5[COMRAM] unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2643 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;		None               void
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2648 ;; Tracked objects:
  2649 ;;		On entry : F/F
  2650 ;;		On exit  : F/F
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2653 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;Total ram usage:        4 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    3
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_motorDrive_init
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text10
  2668  010F74                     __ptext10:
  2669                           	opt stack 0
  2670  010F74                     _SetOutputEPWM3:
  2671                           	opt stack 24
  2672                           
  2673                           ; BSR set to: 15
  2674                           ;incstack = 0
  2675                           ;SetOutputEPWM3@outputconfig stored from wreg
  2676  010F74  6E09               	movwf	SetOutputEPWM3@outputconfig,c
  2677                           
  2678                           ; BSR set to: 15
  2679                           
  2680                           ; BSR set to: 15
  2681  010F76  0E3F               	movlw	63
  2682  010F78  1209               	iorwf	SetOutputEPWM3@outputconfig,f,c
  2683  010F7A  0EFC               	movlw	252
  2684  010F7C  1206               	iorwf	SetOutputEPWM3@outputmode,f,c
  2685  010F7E  5149               	movf	73,w,b	;volatile
  2686  010F80  09C0               	iorlw	192
  2687  010F82  1409               	andwf	SetOutputEPWM3@outputconfig,w,c
  2688  010F84  6F49               	movwf	73,b	;volatile
  2689  010F86  5149               	movf	73,w,b	;volatile
  2690  010F88  090F               	iorlw	15
  2691  010F8A  1406               	andwf	SetOutputEPWM3@outputmode,w,c
  2692  010F8C  6F49               	movwf	73,b	;volatile
  2693                           
  2694                           ; BSR set to: 15
  2695  010F8E  0E05               	movlw	5
  2696  010F90  6EF6               	movwf	tblptrl,c
  2697  010F92                     	if	1	;There is more than 1 active tblptr byte
  2698  010F92  6AF7               	clrf	tblptrh,c
  2699  010F94                     	endif
  2700  010F94                     	if	1	;There are 3 active tblptr bytes
  2701  010F94  0E30               	movlw	48
  2702  010F96  6EF8               	movwf	tblptru,c
  2703  010F98                     	endif
  2704  010F98  0008               	tblrd		*
  2705  010F9A  CFF5 F007          	movff	tablat,??_SetOutputEPWM3
  2706  010F9E  A207               	btfss	??_SetOutputEPWM3,1,c
  2707  010FA0  D002               	goto	l1243
  2708                           
  2709                           ; BSR set to: 15
  2710  010FA2  6808               	setf	SetOutputEPWM3@eccpmx,c
  2711  010FA4  D001               	goto	l2519
  2712  010FA6                     l1243:
  2713                           
  2714                           ; BSR set to: 15
  2715  010FA6  6A08               	clrf	SetOutputEPWM3@eccpmx,c
  2716  010FA8                     l2519:
  2717                           
  2718                           ; BSR set to: 15
  2719  010FA8  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2720  010FAA  0A3F               	xorlw	63
  2721  010FAC  E102               	bnz	l2523
  2722                           
  2723                           ; BSR set to: 15
  2724  010FAE  9098               	bcf	3992,0,c	;volatile
  2725  010FB0  0012               	return	
  2726  010FB2                     l2523:
  2727                           
  2728                           ; BSR set to: 15
  2729  010FB2  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2730  010FB4  0ABF               	xorlw	191
  2731  010FB6  E107               	bnz	l2531
  2732                           
  2733                           ; BSR set to: 15
  2734  010FB8  9098               	bcf	3992,0,c	;volatile
  2735                           
  2736                           ; BSR set to: 15
  2737  010FBA  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2738  010FBC  E002               	bz	l1248
  2739                           
  2740                           ; BSR set to: 15
  2741  010FBE  9896               	bcf	3990,4,c	;volatile
  2742  010FC0  0012               	return	
  2743  010FC2                     l1248:
  2744                           
  2745                           ; BSR set to: 15
  2746  010FC2  9A99               	bcf	3993,5,c	;volatile
  2747  010FC4  0012               	return	
  2748  010FC6                     l2531:
  2749                           
  2750                           ; BSR set to: 15
  2751  010FC6  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2752  010FC8  0A7F               	xorlw	127
  2753  010FCA  E003               	bz	l1253
  2754                           
  2755                           ; BSR set to: 15
  2756  010FCC  2809               	incf	SetOutputEPWM3@outputconfig,w,c
  2757  010FCE  A4D8               	btfss	status,2,c
  2758  010FD0  0012               	return	
  2759  010FD2                     l1253:
  2760                           
  2761                           ; BSR set to: 15
  2762  010FD2  9098               	bcf	3992,0,c	;volatile
  2763                           
  2764                           ; BSR set to: 15
  2765  010FD4  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2766  010FD6  E003               	bz	l1254
  2767                           
  2768                           ; BSR set to: 15
  2769  010FD8  9896               	bcf	3990,4,c	;volatile
  2770  010FDA  9696               	bcf	3990,3,c	;volatile
  2771  010FDC  D002               	goto	l1255
  2772  010FDE                     l1254:
  2773                           
  2774                           ; BSR set to: 15
  2775  010FDE  9A99               	bcf	3993,5,c	;volatile
  2776  010FE0  9899               	bcf	3993,4,c	;volatile
  2777  010FE2                     l1255:
  2778                           
  2779                           ; BSR set to: 15
  2780  010FE2  9698               	bcf	3992,3,c	;volatile
  2781                           
  2782                           ; BSR set to: 15
  2783  010FE4  0012               	return	
  2784  010FE6                     __end_of_SetOutputEPWM3:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           intcon2	equ	0xFF1
  2794                           intcon3	equ	0xFF0
  2795                           indf0	equ	0xFEF
  2796                           postinc0	equ	0xFEE
  2797                           fsr0h	equ	0xFEA
  2798                           fsr0l	equ	0xFE9
  2799                           wreg	equ	0xFE8
  2800                           indf1	equ	0xFE7
  2801                           postinc1	equ	0xFE6
  2802                           postdec1	equ	0xFE5
  2803                           fsr1h	equ	0xFE2
  2804                           fsr1l	equ	0xFE1
  2805                           indf2	equ	0xFDF
  2806                           postinc2	equ	0xFDE
  2807                           postdec2	equ	0xFDD
  2808                           fsr2h	equ	0xFDA
  2809                           fsr2l	equ	0xFD9
  2810                           status	equ	0xFD8
  2811                           
  2812 ;; *************** function _SetOutputEPWM1 *****************
  2813 ;; Defined at:
  2814 ;;		line 50 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setoc.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;  outputconfig    1    wreg     unsigned char 
  2817 ;;  outputmode      1    5[COMRAM] unsigned char 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2820 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;		None               void
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/F
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2830 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2833 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2834 ;;Total ram usage:        4 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    3
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_motorDrive_init
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text11
  2845  010FE6                     __ptext11:
  2846                           	opt stack 0
  2847  010FE6                     _SetOutputEPWM1:
  2848                           	opt stack 24
  2849                           
  2850                           ; BSR set to: 15
  2851                           ;incstack = 0
  2852                           ;SetOutputEPWM1@outputconfig stored from wreg
  2853  010FE6  6E09               	movwf	SetOutputEPWM1@outputconfig,c
  2854  010FE8  0E3F               	movlw	63
  2855  010FEA  1209               	iorwf	SetOutputEPWM1@outputconfig,f,c
  2856  010FEC  0EFC               	movlw	252
  2857  010FEE  1206               	iorwf	SetOutputEPWM1@outputmode,f,c
  2858  010FF0  50B9               	movf	4025,w,c	;volatile
  2859  010FF2  09C0               	iorlw	192
  2860  010FF4  1409               	andwf	SetOutputEPWM1@outputconfig,w,c
  2861  010FF6  6EB9               	movwf	4025,c	;volatile
  2862  010FF8  50B9               	movf	4025,w,c	;volatile
  2863  010FFA  090F               	iorlw	15
  2864  010FFC  1406               	andwf	SetOutputEPWM1@outputmode,w,c
  2865  010FFE  6EB9               	movwf	4025,c	;volatile
  2866  011000  0E05               	movlw	5
  2867  011002  6EF6               	movwf	tblptrl,c
  2868  011004                     	if	1	;There is more than 1 active tblptr byte
  2869  011004  6AF7               	clrf	tblptrh,c
  2870  011006                     	endif
  2871  011006                     	if	1	;There are 3 active tblptr bytes
  2872  011006  0E30               	movlw	48
  2873  011008  6EF8               	movwf	tblptru,c
  2874  01100A                     	endif
  2875  01100A  0008               	tblrd		*
  2876  01100C  CFF5 F007          	movff	tablat,??_SetOutputEPWM1
  2877  011010  A207               	btfss	??_SetOutputEPWM1,1,c
  2878  011012  D002               	goto	l1182
  2879  011014  6808               	setf	SetOutputEPWM1@eccpmx,c
  2880  011016  D001               	goto	l2469
  2881  011018                     l1182:
  2882  011018  6A08               	clrf	SetOutputEPWM1@eccpmx,c
  2883  01101A                     l2469:
  2884  01101A  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2885  01101C  0A3F               	xorlw	63
  2886  01101E  E102               	bnz	l2473
  2887  011020  9494               	bcf	3988,2,c	;volatile
  2888  011022  0012               	return	
  2889  011024                     l2473:
  2890  011024  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2891  011026  0ABF               	xorlw	191
  2892  011028  E107               	bnz	l2481
  2893  01102A  9494               	bcf	3988,2,c	;volatile
  2894  01102C  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2895  01102E  E002               	bz	l1187
  2896  011030  9C96               	bcf	3990,6,c	;volatile
  2897  011032  0012               	return	
  2898  011034                     l1187:
  2899  011034  9E99               	bcf	3993,7,c	;volatile
  2900  011036  0012               	return	
  2901  011038                     l2481:
  2902  011038  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2903  01103A  0A7F               	xorlw	127
  2904  01103C  E003               	bz	l1192
  2905  01103E  2809               	incf	SetOutputEPWM1@outputconfig,w,c
  2906  011040  A4D8               	btfss	status,2,c
  2907  011042  0012               	return	
  2908  011044                     l1192:
  2909  011044  9494               	bcf	3988,2,c	;volatile
  2910  011046  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2911  011048  E003               	bz	l1193
  2912  01104A  9C96               	bcf	3990,6,c	;volatile
  2913  01104C  9A96               	bcf	3990,5,c	;volatile
  2914  01104E  D002               	goto	l1194
  2915  011050                     l1193:
  2916  011050  9E99               	bcf	3993,7,c	;volatile
  2917  011052  9C99               	bcf	3993,6,c	;volatile
  2918  011054                     l1194:
  2919  011054  9898               	bcf	3992,4,c	;volatile
  2920  011056  0012               	return	
  2921  011058                     __end_of_SetOutputEPWM1:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           intcon3	equ	0xFF0
  2932                           indf0	equ	0xFEF
  2933                           postinc0	equ	0xFEE
  2934                           fsr0h	equ	0xFEA
  2935                           fsr0l	equ	0xFE9
  2936                           wreg	equ	0xFE8
  2937                           indf1	equ	0xFE7
  2938                           postinc1	equ	0xFE6
  2939                           postdec1	equ	0xFE5
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _OpenEPWM3 *****************
  2950 ;; Defined at:
  2951 ;;		line 14 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3open.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  period          1    wreg     unsigned char 
  2954 ;;  timer_source    1    5[COMRAM] unsigned char 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  period          1    7[COMRAM] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;		None               void
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : F/F
  2963 ;;		On exit  : F/F
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2966 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2968 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2969 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2970 ;;Total ram usage:        3 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    3
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_motorDrive_init
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text12
  2981  010EFA                     __ptext12:
  2982                           	opt stack 0
  2983  010EFA                     _OpenEPWM3:
  2984                           	opt stack 24
  2985                           
  2986                           ;incstack = 0
  2987                           ;OpenEPWM3@period stored from wreg
  2988  010EFA  6E08               	movwf	OpenEPWM3@period,c
  2989                           
  2990                           ; BSR set to: 15
  2991  010EFC  0E0C               	movlw	12
  2992  010EFE  6F49               	movwf	73,b	;volatile
  2993                           
  2994                           ; BSR set to: 15
  2995  010F00  0E3F               	movlw	63
  2996  010F02  1736               	andwf	54,f,b	;volatile
  2997                           
  2998                           ; BSR set to: 15
  2999  010F04  C006  F007         	movff	OpenEPWM3@timer_source,??_OpenEPWM3
  3000  010F08  0E30               	movlw	48
  3001  010F0A  1607               	andwf	??_OpenEPWM3,f,c
  3002  010F0C  90D8               	bcf	status,0,c
  3003  010F0E  3607               	rlcf	??_OpenEPWM3,f,c
  3004  010F10  90D8               	bcf	status,0,c
  3005  010F12  3407               	rlcf	??_OpenEPWM3,w,c
  3006  010F14  1336               	iorwf	54,f,b	;volatile
  3007                           
  3008                           ; BSR set to: 15
  3009  010F16  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3010  010F1A  0EC0               	movlw	192
  3011  010F1C  1607               	andwf	??_OpenEPWM3,f,c
  3012  010F1E  E105               	bnz	l2499
  3013                           
  3014                           ; BSR set to: 15
  3015  010F20  94CA               	bcf	4042,2,c	;volatile
  3016  010F22  C008  FFCB         	movff	OpenEPWM3@period,4043	;volatile
  3017  010F26  84CA               	bsf	4042,2,c	;volatile
  3018  010F28  0CC0               	retlw	192
  3019  010F2A                     l2499:
  3020                           
  3021                           ; BSR set to: 15
  3022  010F2A  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3023  010F2E  0EC0               	movlw	192
  3024  010F30  1607               	andwf	??_OpenEPWM3,f,c
  3025  010F32  5007               	movf	??_OpenEPWM3,w,c
  3026  010F34  0A40               	xorlw	64
  3027  010F36  E105               	bnz	l2503
  3028                           
  3029                           ; BSR set to: 15
  3030  010F38  9504               	bcf	4,2,b	;volatile
  3031  010F3A  C008  FF05         	movff	OpenEPWM3@period,3845	;volatile
  3032  010F3E  8504               	bsf	4,2,b	;volatile
  3033  010F40  0012               	return	
  3034  010F42                     l2503:
  3035                           
  3036                           ; BSR set to: 15
  3037  010F42  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3038  010F46  0EC0               	movlw	192
  3039  010F48  1607               	andwf	??_OpenEPWM3,f,c
  3040  010F4A  5007               	movf	??_OpenEPWM3,w,c
  3041  010F4C  0A80               	xorlw	128
  3042  010F4E  E105               	bnz	l2507
  3043                           
  3044                           ; BSR set to: 15
  3045  010F50  953D               	bcf	61,2,b	;volatile
  3046  010F52  C008  FF3E         	movff	OpenEPWM3@period,3902	;volatile
  3047  010F56  853D               	bsf	61,2,b	;volatile
  3048  010F58  0012               	return	
  3049  010F5A                     l2507:
  3050                           
  3051                           ; BSR set to: 15
  3052  010F5A  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  3053  010F5E  0EC0               	movlw	192
  3054  010F60  1607               	andwf	??_OpenEPWM3,f,c
  3055  010F62  5007               	movf	??_OpenEPWM3,w,c
  3056  010F64  0AC0               	xorlw	192
  3057  010F66  A4D8               	btfss	status,2,c
  3058  010F68  0012               	return	
  3059                           
  3060                           ; BSR set to: 15
  3061  010F6A  953A               	bcf	58,2,b	;volatile
  3062  010F6C  C008  FF3B         	movff	OpenEPWM3@period,3899	;volatile
  3063  010F70  853A               	bsf	58,2,b	;volatile
  3064  010F72  0012               	return	
  3065  010F74                     __end_of_OpenEPWM3:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           intcon2	equ	0xFF1
  3075                           intcon3	equ	0xFF0
  3076                           indf0	equ	0xFEF
  3077                           postinc0	equ	0xFEE
  3078                           fsr0h	equ	0xFEA
  3079                           fsr0l	equ	0xFE9
  3080                           wreg	equ	0xFE8
  3081                           indf1	equ	0xFE7
  3082                           postinc1	equ	0xFE6
  3083                           postdec1	equ	0xFE5
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _OpenEPWM1 *****************
  3094 ;; Defined at:
  3095 ;;		line 26 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1open.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  period          1    wreg     unsigned char 
  3098 ;;  timer_source    1    5[COMRAM] unsigned char 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  period          1    7[COMRAM] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;		None               void
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : F/F
  3107 ;;		On exit  : F/F
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3110 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3114 ;;Total ram usage:        3 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    3
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_motorDrive_init
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text13
  3125  011058                     __ptext13:
  3126                           	opt stack 0
  3127  011058                     _OpenEPWM1:
  3128                           	opt stack 24
  3129                           
  3130                           ; BSR set to: 15
  3131                           ;incstack = 0
  3132                           ;OpenEPWM1@period stored from wreg
  3133  011058  6E08               	movwf	OpenEPWM1@period,c
  3134                           
  3135                           ; BSR set to: 15
  3136  01105A  0E0C               	movlw	12
  3137  01105C  6EB9               	movwf	4025,c	;volatile
  3138                           
  3139                           ; BSR set to: 15
  3140  01105E  0EFC               	movlw	252
  3141  011060  1736               	andwf	54,f,b	;volatile
  3142                           
  3143                           ; BSR set to: 15
  3144  011062  3806               	swapf	OpenEPWM1@timer_source,w,c
  3145  011064  46E8               	rlncf	wreg,f,c
  3146  011066  0B1F               	andlw	31
  3147  011068  0B03               	andlw	3
  3148  01106A  1336               	iorwf	54,f,b	;volatile
  3149                           
  3150                           ; BSR set to: 15
  3151  01106C  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3152  011070  0E07               	movlw	7
  3153  011072  1607               	andwf	??_OpenEPWM1,f,c
  3154  011074  E105               	bnz	l2449
  3155                           
  3156                           ; BSR set to: 15
  3157  011076  94CA               	bcf	4042,2,c	;volatile
  3158  011078  C008  FFCB         	movff	OpenEPWM1@period,4043	;volatile
  3159  01107C  84CA               	bsf	4042,2,c	;volatile
  3160  01107E  0C07               	retlw	7
  3161  011080                     l2449:
  3162                           
  3163                           ; BSR set to: 15
  3164  011080  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3165  011084  0E07               	movlw	7
  3166  011086  1607               	andwf	??_OpenEPWM1,f,c
  3167  011088  5007               	movf	??_OpenEPWM1,w,c
  3168  01108A  0A01               	xorlw	1
  3169  01108C  E105               	bnz	l2453
  3170                           
  3171                           ; BSR set to: 15
  3172  01108E  9504               	bcf	4,2,b	;volatile
  3173  011090  C008  FF05         	movff	OpenEPWM1@period,3845	;volatile
  3174  011094  8504               	bsf	4,2,b	;volatile
  3175  011096  0012               	return	
  3176  011098                     l2453:
  3177                           
  3178                           ; BSR set to: 15
  3179  011098  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3180  01109C  0E07               	movlw	7
  3181  01109E  1607               	andwf	??_OpenEPWM1,f,c
  3182  0110A0  5007               	movf	??_OpenEPWM1,w,c
  3183  0110A2  0A02               	xorlw	2
  3184  0110A4  E105               	bnz	l2457
  3185                           
  3186                           ; BSR set to: 15
  3187  0110A6  953D               	bcf	61,2,b	;volatile
  3188  0110A8  C008  FF3E         	movff	OpenEPWM1@period,3902	;volatile
  3189  0110AC  853D               	bsf	61,2,b	;volatile
  3190  0110AE  0012               	return	
  3191  0110B0                     l2457:
  3192                           
  3193                           ; BSR set to: 15
  3194  0110B0  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3195  0110B4  0E07               	movlw	7
  3196  0110B6  1607               	andwf	??_OpenEPWM1,f,c
  3197  0110B8  5007               	movf	??_OpenEPWM1,w,c
  3198  0110BA  0A03               	xorlw	3
  3199  0110BC  A4D8               	btfss	status,2,c
  3200  0110BE  0012               	return	
  3201                           
  3202                           ; BSR set to: 15
  3203  0110C0  953A               	bcf	58,2,b	;volatile
  3204  0110C2  C008  FF3B         	movff	OpenEPWM1@period,3899	;volatile
  3205  0110C6  853A               	bsf	58,2,b	;volatile
  3206  0110C8  0012               	return	
  3207  0110CA                     __end_of_OpenEPWM1:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           intcon	equ	0xFF2
  3216                           intcon2	equ	0xFF1
  3217                           intcon3	equ	0xFF0
  3218                           indf0	equ	0xFEF
  3219                           postinc0	equ	0xFEE
  3220                           fsr0h	equ	0xFEA
  3221                           fsr0l	equ	0xFE9
  3222                           wreg	equ	0xFE8
  3223                           indf1	equ	0xFE7
  3224                           postinc1	equ	0xFE6
  3225                           postdec1	equ	0xFE5
  3226                           fsr1h	equ	0xFE2
  3227                           fsr1l	equ	0xFE1
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _fft_init *****************
  3236 ;; Defined at:
  3237 ;;		line 9 in file "fft.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, status,2
  3246 ;; Tracked objects:
  3247 ;;		On entry : F/E
  3248 ;;		On exit  : F/E
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    7
  3258 ;; This function calls:
  3259 ;;		_LCD_printString
  3260 ;;		_delay_us
  3261 ;; This function is called by:
  3262 ;;		_init
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text14
  3267  011678                     __ptext14:
  3268                           	opt stack 0
  3269  011678                     _fft_init:
  3270                           	opt stack 21
  3271                           
  3272                           ; BSR set to: 14
  3273                           ;fft.c: 12: ANCON3 = 0b00100000;
  3274                           
  3275                           ; BSR set to: 15
  3276                           ;incstack = 0
  3277  011678  0E20               	movlw	32
  3278  01167A  6F45               	movwf	69,b	;volatile
  3279                           
  3280                           ; BSR set to: 14
  3281  01167C  0C20               	retlw	32
  3282  01167E                     __end_of_fft_init:
  3283                           	opt stack 0
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           intcon	equ	0xFF2
  3291                           intcon2	equ	0xFF1
  3292                           intcon3	equ	0xFF0
  3293                           indf0	equ	0xFEF
  3294                           postinc0	equ	0xFEE
  3295                           fsr0h	equ	0xFEA
  3296                           fsr0l	equ	0xFE9
  3297                           wreg	equ	0xFE8
  3298                           indf1	equ	0xFE7
  3299                           postinc1	equ	0xFE6
  3300                           postdec1	equ	0xFE5
  3301                           fsr1h	equ	0xFE2
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _encoders_init *****************
  3311 ;; Defined at:
  3312 ;;		line 6 in file "encoders.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;		None               void
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : F/E
  3323 ;;		On exit  : F/E
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    3
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_init
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text15
  3341  01151A                     __ptext15:
  3342                           	opt stack 0
  3343  01151A                     _encoders_init:
  3344                           	opt stack 25
  3345                           
  3346                           ; BSR set to: 14
  3347                           ;encoders.c: 9: TRISBbits.TRISB0 = 1;
  3348                           
  3349                           ; BSR set to: 14
  3350                           ;incstack = 0
  3351  01151A  8093               	bsf	3987,0,c	;volatile
  3352                           
  3353                           ;encoders.c: 10: TRISBbits.TRISB1 = 1;
  3354  01151C  8293               	bsf	3987,1,c	;volatile
  3355                           
  3356                           ;encoders.c: 11: TRISBbits.TRISB2 = 1;
  3357  01151E  8493               	bsf	3987,2,c	;volatile
  3358                           
  3359                           ;encoders.c: 12: TRISBbits.TRISB3 = 1;
  3360  011520  8693               	bsf	3987,3,c	;volatile
  3361                           
  3362                           ;encoders.c: 21: IOLOCK = 0;
  3363  011522  9C66               	bcf	3942,6,c	;volatile
  3364                           
  3365                           ; BSR set to: 14
  3366                           ;encoders.c: 22: RPINR26_27 &= 0xF2;
  3367  011524  0EF2               	movlw	242
  3368  011526  1737               	andwf	55,f,b	;volatile
  3369                           
  3370                           ;encoders.c: 23: RPINR28_29 &= 0xF1;
  3371  011528  0EF1               	movlw	241
  3372  01152A  1738               	andwf	56,f,b	;volatile
  3373                           
  3374                           ; BSR set to: 14
  3375                           ;encoders.c: 24: IOLOCK = 1;
  3376  01152C  8C66               	bsf	3942,6,c	;volatile
  3377                           
  3378                           ; BSR set to: 14
  3379                           ;encoders.c: 26: INTCON2bits.INTEDG1 = 1;
  3380  01152E  8AF1               	bsf	intcon2,5,c	;volatile
  3381                           
  3382                           ; BSR set to: 14
  3383                           ;encoders.c: 27: INTCON3bits.INT1IP = 0;
  3384  011530  9CF0               	bcf	intcon3,6,c	;volatile
  3385                           
  3386                           ; BSR set to: 14
  3387                           ;encoders.c: 28: INTCON3bits.INT1IF = 0;
  3388  011532  90F0               	bcf	intcon3,0,c	;volatile
  3389                           
  3390                           ; BSR set to: 14
  3391                           ;encoders.c: 29: INTCON3bits.INT1IE = 1;
  3392  011534  86F0               	bsf	intcon3,3,c	;volatile
  3393                           
  3394                           ; BSR set to: 14
  3395                           ;encoders.c: 32: INTCON2bits.INTEDG3 = 1;
  3396  011536  86F1               	bsf	intcon2,3,c	;volatile
  3397                           
  3398                           ; BSR set to: 14
  3399                           ;encoders.c: 33: INTCON2bits.INT3IP = 0;
  3400  011538  92F1               	bcf	intcon2,1,c	;volatile
  3401                           
  3402                           ; BSR set to: 14
  3403                           ;encoders.c: 34: INTCON3bits.INT3IF = 0;
  3404  01153A  94F0               	bcf	intcon3,2,c	;volatile
  3405                           
  3406                           ; BSR set to: 14
  3407                           ;encoders.c: 35: INTCON3bits.INT3IE = 1;
  3408  01153C  8AF0               	bsf	intcon3,5,c	;volatile
  3409                           
  3410                           ; BSR set to: 14
  3411  01153E  0CF1               	retlw	241
  3412  011540                     __end_of_encoders_init:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           intcon2	equ	0xFF1
  3422                           intcon3	equ	0xFF0
  3423                           indf0	equ	0xFEF
  3424                           postinc0	equ	0xFEE
  3425                           fsr0h	equ	0xFEA
  3426                           fsr0l	equ	0xFE9
  3427                           wreg	equ	0xFE8
  3428                           indf1	equ	0xFE7
  3429                           postinc1	equ	0xFE6
  3430                           postdec1	equ	0xFE5
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _clearMillis *****************
  3441 ;; Defined at:
  3442 ;;		line 115 in file "delays.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;		None               void
  3449 ;; Registers used:
  3450 ;;		wreg, status,2
  3451 ;; Tracked objects:
  3452 ;;		On entry : F/E
  3453 ;;		On exit  : F/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_init
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text16
  3471  011616                     __ptext16:
  3472                           	opt stack 0
  3473  011616                     _clearMillis:
  3474                           	opt stack 25
  3475                           
  3476                           ; BSR set to: 14
  3477                           ;delays.c: 117: TMR0L = 193;
  3478                           
  3479                           ; BSR set to: 14
  3480                           ;incstack = 0
  3481  011616  0EC1               	movlw	193
  3482  011618  6ED6               	movwf	4054,c	;volatile
  3483                           
  3484                           ; BSR set to: 14
  3485                           ;delays.c: 118: millisCount = 0;
  3486  01161A  0100               	movlb	0	; () banked
  3487  01161C  6BB5               	clrf	_millisCount& (0+255),b
  3488  01161E  6BB6               	clrf	(_millisCount+1)& (0+255),b
  3489  011620  6BB7               	clrf	(_millisCount+2)& (0+255),b
  3490  011622  6BB8               	clrf	(_millisCount+3)& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493  011624  0012               	return	
  3494  011626                     __end_of_clearMillis:
  3495                           	opt stack 0
  3496                           tblptru	equ	0xFF8
  3497                           tblptrh	equ	0xFF7
  3498                           tblptrl	equ	0xFF6
  3499                           tablat	equ	0xFF5
  3500                           prodh	equ	0xFF4
  3501                           prodl	equ	0xFF3
  3502                           intcon	equ	0xFF2
  3503                           intcon2	equ	0xFF1
  3504                           intcon3	equ	0xFF0
  3505                           indf0	equ	0xFEF
  3506                           postinc0	equ	0xFEE
  3507                           fsr0h	equ	0xFEA
  3508                           fsr0l	equ	0xFE9
  3509                           wreg	equ	0xFE8
  3510                           indf1	equ	0xFE7
  3511                           postinc1	equ	0xFE6
  3512                           postdec1	equ	0xFE5
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _UART_init *****************
  3523 ;; Defined at:
  3524 ;;		line 21 in file "UART.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;		None               void
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/F
  3535 ;;		On exit  : F/E
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    3
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_init
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text17
  3553  010DC6                     __ptext17:
  3554                           	opt stack 0
  3555  010DC6                     _UART_init:
  3556                           	opt stack 25
  3557                           
  3558                           ;UART.c: 43: IOLOCK = 0;
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;incstack = 0
  3562  010DC6  9C66               	bcf	3942,6,c	;volatile
  3563                           
  3564                           ;UART.c: 45: RPINR6_7 &= 0xF6;
  3565  010DC8  0EF6               	movlw	246
  3566  010DCA  010E               	movlb	14	; () banked
  3567  010DCC  172D               	andwf	45,f,b	;volatile
  3568                           
  3569                           ;UART.c: 46: RPOR22_23 |= 0xF1;
  3570  010DCE  0EF1               	movlw	241
  3571  010DD0  131D               	iorwf	29,f,b	;volatile
  3572                           
  3573                           ;UART.c: 48: RPINR4_5 &= 0xF4;
  3574  010DD2  0EF4               	movlw	244
  3575  010DD4  172C               	andwf	44,f,b	;volatile
  3576                           
  3577                           ;UART.c: 49: RPOR10_11 |= 0x2F;
  3578  010DD6  0E2F               	movlw	47
  3579  010DD8  1317               	iorwf	23,f,b	;volatile
  3580                           
  3581                           ;UART.c: 51: RPINR0_1 &= 0xF6;
  3582  010DDA  0EF6               	movlw	246
  3583  010DDC  172A               	andwf	42,f,b	;volatile
  3584                           
  3585                           ;UART.c: 52: RPOR12_13 |= 0x3F;
  3586  010DDE  0E3F               	movlw	63
  3587  010DE0  1318               	iorwf	24,f,b	;volatile
  3588                           
  3589                           ; BSR set to: 14
  3590                           ;UART.c: 54: IOLOCK = 1;
  3591  010DE2  8C66               	bsf	3942,6,c	;volatile
  3592                           
  3593                           ; BSR set to: 14
  3594                           ;UART.c: 56: INTCONbits.GIE = 1;
  3595  010DE4  8EF2               	bsf	intcon,7,c	;volatile
  3596                           
  3597                           ; BSR set to: 14
  3598                           ;UART.c: 59: INTCONbits.PEIE = 1;
  3599  010DE6  8CF2               	bsf	intcon,6,c	;volatile
  3600                           
  3601                           ; BSR set to: 14
  3602                           ;UART.c: 69: SPBRG1 = 34;
  3603  010DE8  0E22               	movlw	34
  3604  010DEA  6EAF               	movwf	4015,c	;volatile
  3605                           
  3606                           ; BSR set to: 14
  3607                           ;UART.c: 70: SPBRGH1 = 0;
  3608  010DEC  010F               	movlb	15	; () banked
  3609  010DEE  6B30               	clrf	48,b	;volatile
  3610                           
  3611                           ; BSR set to: 15
  3612                           ;UART.c: 72: TXSTA1bits.BRGH = 0;
  3613  010DF0  94AC               	bcf	4012,2,c	;volatile
  3614                           
  3615                           ; BSR set to: 15
  3616                           ;UART.c: 74: BAUDCON1bits.ABDOVF = 0;
  3617  010DF2  9E67               	bcf	3943,7,c	;volatile
  3618                           
  3619                           ; BSR set to: 15
  3620                           ;UART.c: 75: BAUDCON1bits.BRG16 = 1;
  3621  010DF4  8667               	bsf	3943,3,c	;volatile
  3622                           
  3623                           ; BSR set to: 15
  3624                           ;UART.c: 76: BAUDCON1bits.RCIDL = 0;
  3625  010DF6  9C67               	bcf	3943,6,c	;volatile
  3626                           
  3627                           ; BSR set to: 15
  3628                           ;UART.c: 77: BAUDCON1bits.RXDTP = 0;
  3629  010DF8  9A67               	bcf	3943,5,c	;volatile
  3630                           
  3631                           ; BSR set to: 15
  3632                           ;UART.c: 79: TXSTA1bits.SYNC = 0;
  3633  010DFA  98AC               	bcf	4012,4,c	;volatile
  3634                           
  3635                           ; BSR set to: 15
  3636                           ;UART.c: 80: RCSTA1bits.SPEN = 1;
  3637  010DFC  8EAB               	bsf	4011,7,c	;volatile
  3638                           
  3639                           ; BSR set to: 15
  3640                           ;UART.c: 81: RCSTA1bits.RX9 = 0;
  3641  010DFE  9CAB               	bcf	4011,6,c	;volatile
  3642                           
  3643                           ; BSR set to: 15
  3644                           ;UART.c: 82: RCSTA1bits.CREN = 1;
  3645  010E00  88AB               	bsf	4011,4,c	;volatile
  3646                           
  3647                           ; BSR set to: 15
  3648                           ;UART.c: 84: TXSTA1bits.TXEN = 1;
  3649  010E02  8AAC               	bsf	4012,5,c	;volatile
  3650                           
  3651                           ; BSR set to: 15
  3652                           ;UART.c: 85: TXSTA1bits.TX9 = 0;
  3653  010E04  9CAC               	bcf	4012,6,c	;volatile
  3654                           
  3655                           ; BSR set to: 15
  3656                           ;UART.c: 88: TX1IE = 0;
  3657  010E06  989D               	bcf	3997,4,c	;volatile
  3658                           
  3659                           ; BSR set to: 15
  3660                           ;UART.c: 89: RC1IE = 1;
  3661  010E08  8A9D               	bsf	3997,5,c	;volatile
  3662                           
  3663                           ; BSR set to: 15
  3664                           ;UART.c: 99: SPBRG2 = 34;
  3665  010E0A  0E22               	movlw	34
  3666  010E0C  6F1F               	movwf	31,b	;volatile
  3667                           
  3668                           ; BSR set to: 15
  3669                           ;UART.c: 100: SPBRGH2 = 0;
  3670  010E0E  6B20               	clrf	32,b	;volatile
  3671                           
  3672                           ; BSR set to: 15
  3673                           ;UART.c: 102: TXSTA2bits.BRGH = 0;
  3674  010E10  9532               	bcf	50,2,b	;volatile
  3675                           
  3676                           ; BSR set to: 15
  3677                           ;UART.c: 104: BAUDCON2bits.ABDOVF = 0;
  3678  010E12  9F31               	bcf	49,7,b	;volatile
  3679                           
  3680                           ; BSR set to: 15
  3681                           ;UART.c: 105: BAUDCON2bits.BRG16 = 1;
  3682  010E14  8731               	bsf	49,3,b	;volatile
  3683                           
  3684                           ; BSR set to: 15
  3685                           ;UART.c: 106: BAUDCON2bits.RCIDL = 0;
  3686  010E16  9D31               	bcf	49,6,b	;volatile
  3687                           
  3688                           ; BSR set to: 15
  3689                           ;UART.c: 107: BAUDCON2bits.RXDTP = 0;
  3690  010E18  9B31               	bcf	49,5,b	;volatile
  3691                           
  3692                           ; BSR set to: 15
  3693                           ;UART.c: 109: TXSTA2bits.SYNC = 0;
  3694  010E1A  9932               	bcf	50,4,b	;volatile
  3695                           
  3696                           ; BSR set to: 15
  3697                           ;UART.c: 110: RCSTA2bits.SPEN = 1;
  3698  010E1C  8F33               	bsf	51,7,b	;volatile
  3699                           
  3700                           ; BSR set to: 15
  3701                           ;UART.c: 111: RCSTA2bits.RX9 = 0;
  3702  010E1E  9D33               	bcf	51,6,b	;volatile
  3703                           
  3704                           ; BSR set to: 15
  3705                           ;UART.c: 112: RCSTA2bits.CREN = 1;
  3706  010E20  8933               	bsf	51,4,b	;volatile
  3707                           
  3708                           ; BSR set to: 15
  3709                           ;UART.c: 114: TXSTA2bits.TXEN = 1;
  3710  010E22  8B32               	bsf	50,5,b	;volatile
  3711                           
  3712                           ; BSR set to: 15
  3713                           ;UART.c: 115: TXSTA2bits.TX9 = 0;
  3714  010E24  9D32               	bcf	50,6,b	;volatile
  3715                           
  3716                           ; BSR set to: 15
  3717                           ;UART.c: 118: TX2IE = 0;
  3718  010E26  98A3               	bcf	4003,4,c	;volatile
  3719                           
  3720                           ; BSR set to: 15
  3721                           ;UART.c: 119: RC2IE = 1;
  3722  010E28  8AA3               	bsf	4003,5,c	;volatile
  3723                           
  3724                           ; BSR set to: 15
  3725                           ;UART.c: 129: SPBRG3 = 34;
  3726  010E2A  0E22               	movlw	34
  3727  010E2C  6F2B               	movwf	43,b	;volatile
  3728                           
  3729                           ; BSR set to: 15
  3730                           ;UART.c: 130: SPBRGH3 = 0;
  3731  010E2E  6B2C               	clrf	44,b	;volatile
  3732                           
  3733                           ; BSR set to: 15
  3734                           ;UART.c: 132: TXSTA3bits.BRGH = 0;
  3735  010E30  952E               	bcf	46,2,b	;volatile
  3736                           
  3737                           ; BSR set to: 15
  3738                           ;UART.c: 134: BAUDCON3bits.ABDOVF = 0;
  3739  010E32  9F2D               	bcf	45,7,b	;volatile
  3740                           
  3741                           ; BSR set to: 15
  3742                           ;UART.c: 135: BAUDCON3bits.BRG16 = 1;
  3743  010E34  872D               	bsf	45,3,b	;volatile
  3744                           
  3745                           ; BSR set to: 15
  3746                           ;UART.c: 136: BAUDCON3bits.RCIDL = 0;
  3747  010E36  9D2D               	bcf	45,6,b	;volatile
  3748                           
  3749                           ; BSR set to: 15
  3750                           ;UART.c: 137: BAUDCON3bits.RXDTP = 0;
  3751  010E38  9B2D               	bcf	45,5,b	;volatile
  3752                           
  3753                           ; BSR set to: 15
  3754                           ;UART.c: 139: TXSTA3bits.SYNC = 0;
  3755  010E3A  992E               	bcf	46,4,b	;volatile
  3756                           
  3757                           ; BSR set to: 15
  3758                           ;UART.c: 140: RCSTA3bits.SPEN = 1;
  3759  010E3C  8F2F               	bsf	47,7,b	;volatile
  3760                           
  3761                           ; BSR set to: 15
  3762                           ;UART.c: 141: RCSTA3bits.RX9 = 0;
  3763  010E3E  9D2F               	bcf	47,6,b	;volatile
  3764                           
  3765                           ; BSR set to: 15
  3766                           ;UART.c: 142: RCSTA3bits.CREN = 1;
  3767  010E40  892F               	bsf	47,4,b	;volatile
  3768                           
  3769                           ; BSR set to: 15
  3770                           ;UART.c: 144: TXSTA3bits.TXEN = 1;
  3771  010E42  8B2E               	bsf	46,5,b	;volatile
  3772                           
  3773                           ; BSR set to: 15
  3774                           ;UART.c: 145: TXSTA3bits.TX9 = 0;
  3775  010E44  9D2E               	bcf	46,6,b	;volatile
  3776                           
  3777                           ; BSR set to: 15
  3778                           ;UART.c: 147: TX3IE = 0;
  3779  010E46  9861               	bcf	3937,4,c	;volatile
  3780                           
  3781                           ; BSR set to: 15
  3782                           ;UART.c: 148: RC3IE = 1;
  3783  010E48  8A61               	bsf	3937,5,c	;volatile
  3784                           
  3785                           ; BSR set to: 15
  3786                           ;UART.c: 158: TRISDbits.TRISD4 = 1;
  3787  010E4A  8895               	bsf	3989,4,c	;volatile
  3788                           
  3789                           ; BSR set to: 15
  3790                           ;UART.c: 159: TRISDbits.TRISD2 = 0;
  3791  010E4C  9495               	bcf	3989,2,c	;volatile
  3792                           
  3793                           ; BSR set to: 15
  3794                           ;UART.c: 162: SPBRG4 = 34;
  3795  010E4E  0E22               	movlw	34
  3796  010E50  010E               	movlb	14	; () banked
  3797  010E52  6FFB               	movwf	251,b	;volatile
  3798                           
  3799                           ; BSR set to: 14
  3800                           ;UART.c: 163: SPBRGH4 = 0;
  3801  010E54  6BFC               	clrf	252,b	;volatile
  3802                           
  3803                           ; BSR set to: 14
  3804                           ;UART.c: 165: TXSTA4bits.BRGH = 0;
  3805  010E56  95FE               	bcf	254,2,b	;volatile
  3806                           
  3807                           ; BSR set to: 14
  3808                           ;UART.c: 167: BAUDCON4bits.ABDOVF = 0;
  3809  010E58  9FFD               	bcf	253,7,b	;volatile
  3810                           
  3811                           ; BSR set to: 14
  3812                           ;UART.c: 168: BAUDCON4bits.BRG16 = 1;
  3813  010E5A  87FD               	bsf	253,3,b	;volatile
  3814                           
  3815                           ; BSR set to: 14
  3816                           ;UART.c: 169: BAUDCON4bits.RCIDL = 0;
  3817  010E5C  9DFD               	bcf	253,6,b	;volatile
  3818                           
  3819                           ; BSR set to: 14
  3820                           ;UART.c: 170: BAUDCON4bits.RXDTP = 0;
  3821  010E5E  9BFD               	bcf	253,5,b	;volatile
  3822                           
  3823                           ; BSR set to: 14
  3824                           ;UART.c: 172: TXSTA4bits.SYNC = 0;
  3825  010E60  99FE               	bcf	254,4,b	;volatile
  3826                           
  3827                           ; BSR set to: 14
  3828                           ;UART.c: 173: RCSTA4bits.SPEN = 1;
  3829  010E62  8FFF               	bsf	255,7,b	;volatile
  3830                           
  3831                           ; BSR set to: 14
  3832                           ;UART.c: 174: RCSTA4bits.RX9 = 0;
  3833  010E64  9DFF               	bcf	255,6,b	;volatile
  3834                           
  3835                           ; BSR set to: 14
  3836                           ;UART.c: 175: RCSTA4bits.CREN = 1;
  3837  010E66  89FF               	bsf	255,4,b	;volatile
  3838                           
  3839                           ; BSR set to: 14
  3840                           ;UART.c: 177: TXSTA4bits.TXEN = 1;
  3841  010E68  8BFE               	bsf	254,5,b	;volatile
  3842                           
  3843                           ; BSR set to: 14
  3844                           ;UART.c: 178: TXSTA4bits.TX9 = 0;
  3845  010E6A  9DFE               	bcf	254,6,b	;volatile
  3846                           
  3847                           ; BSR set to: 14
  3848                           ;UART.c: 181: TX4IE = 0;
  3849  010E6C  9C61               	bcf	3937,6,c	;volatile
  3850                           
  3851                           ; BSR set to: 14
  3852                           ;UART.c: 182: RC4IE = 1;
  3853  010E6E  8E61               	bsf	3937,7,c	;volatile
  3854                           
  3855                           ; BSR set to: 14
  3856  010E70  0012               	return	
  3857  010E72                     __end_of_UART_init:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           intcon	equ	0xFF2
  3866                           intcon2	equ	0xFF1
  3867                           intcon3	equ	0xFF0
  3868                           indf0	equ	0xFEF
  3869                           postinc0	equ	0xFEE
  3870                           fsr0h	equ	0xFEA
  3871                           fsr0l	equ	0xFE9
  3872                           wreg	equ	0xFE8
  3873                           indf1	equ	0xFE7
  3874                           postinc1	equ	0xFE6
  3875                           postdec1	equ	0xFE5
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           indf2	equ	0xFDF
  3879                           postinc2	equ	0xFDE
  3880                           postdec2	equ	0xFDD
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _LCD_init4bit *****************
  3886 ;; Defined at:
  3887 ;;		line 47 in file "LCD.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : F/F
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    5
  3908 ;; This function calls:
  3909 ;;		_delay_init
  3910 ;;		_delay_ms
  3911 ;;		_delay_us
  3912 ;; This function is called by:
  3913 ;;		_init
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text18
  3918  01071C                     __ptext18:
  3919                           	opt stack 0
  3920  01071C                     _LCD_init4bit:
  3921                           	opt stack 23
  3922                           
  3923                           ; BSR set to: 15
  3924                           ;LCD.c: 50: mode = 1;
  3925                           
  3926                           ; BSR set to: 14
  3927                           ;incstack = 0
  3928  01071C  0E01               	movlw	1
  3929  01071E  6E58               	movwf	_mode,c	;volatile
  3930                           
  3931                           ; BSR set to: 15
  3932                           ;LCD.c: 52: ANSEL21 = 0;
  3933  010720  010E               	movlb	14	; () banked
  3934  010722  9B45               	bcf	69,5,b	;volatile
  3935                           
  3936                           ; BSR set to: 14
  3937                           ;LCD.c: 53: ANSEL6 = 0;
  3938  010724  9D47               	bcf	71,6,b	;volatile
  3939                           
  3940                           ; BSR set to: 14
  3941                           ;LCD.c: 54: ANSEL11 = 0;
  3942  010726  9746               	bcf	70,3,b	;volatile
  3943                           
  3944                           ; BSR set to: 14
  3945                           ;LCD.c: 55: ANSEL10 = 0;
  3946  010728  9546               	bcf	70,2,b	;volatile
  3947                           
  3948                           ; BSR set to: 14
  3949                           ;LCD.c: 56: ANSEL9 = 0;
  3950  01072A  9346               	bcf	70,1,b	;volatile
  3951                           
  3952                           ; BSR set to: 14
  3953                           ;LCD.c: 58: MEMCONbits.EBDIS = 1;
  3954  01072C  8FE3               	bsf	227,7,b	;volatile
  3955                           
  3956                           ; BSR set to: 14
  3957                           ;LCD.c: 59: PSPCONbits.PSPMODE = 0;
  3958  01072E  98A7               	bcf	4007,4,c	;volatile
  3959                           
  3960                           ; BSR set to: 14
  3961                           ;LCD.c: 60: LCDMD = 0;
  3962  010730  97F1               	bcf	241,3,b	;volatile
  3963                           
  3964                           ; BSR set to: 14
  3965                           ;LCD.c: 61: LCDCONbits.WERR = 0;
  3966  010732  9BD9               	bcf	217,5,b	;volatile
  3967                           
  3968                           ; BSR set to: 14
  3969                           ;LCD.c: 62: CPEN = 0;
  3970  010734  9FD8               	bcf	216,7,b	;volatile
  3971                           
  3972                           ; BSR set to: 14
  3973                           ;LCD.c: 63: LCDA = 0;
  3974  010736  9BDA               	bcf	218,5,b	;volatile
  3975                           
  3976                           ; BSR set to: 14
  3977                           ;LCD.c: 65: PORTEbits.RE2 = 0;
  3978  010738  9484               	bcf	3972,2,c	;volatile
  3979                           
  3980                           ; BSR set to: 14
  3981                           ;LCD.c: 66: PORTEbits.RE0 = 0;
  3982  01073A  9084               	bcf	3972,0,c	;volatile
  3983                           
  3984                           ; BSR set to: 14
  3985                           ;LCD.c: 67: PORTEbits.RE1 = 0;
  3986  01073C  9284               	bcf	3972,1,c	;volatile
  3987                           
  3988                           ; BSR set to: 14
  3989                           ;LCD.c: 68: PORTHbits.RH5 = 0;
  3990  01073E  9A87               	bcf	3975,5,c	;volatile
  3991                           
  3992                           ; BSR set to: 14
  3993                           ;LCD.c: 70: PORTEbits.RE4 = 0;
  3994  010740  9884               	bcf	3972,4,c	;volatile
  3995                           
  3996                           ; BSR set to: 14
  3997                           ;LCD.c: 71: PORTDbits.RD0 = 0;
  3998  010742  9083               	bcf	3971,0,c	;volatile
  3999                           
  4000                           ; BSR set to: 14
  4001                           ;LCD.c: 72: PORTGbits.RG7 = 0;
  4002  010744  9E86               	bcf	3974,7,c	;volatile
  4003                           
  4004                           ; BSR set to: 14
  4005                           ;LCD.c: 76: TRISDbits.TRISD0 = 0;
  4006  010746  9095               	bcf	3989,0,c	;volatile
  4007                           
  4008                           ; BSR set to: 14
  4009                           ;LCD.c: 77: TRISEbits.TRISE0 = 0;
  4010  010748  9096               	bcf	3990,0,c	;volatile
  4011                           
  4012                           ; BSR set to: 14
  4013                           ;LCD.c: 78: TRISEbits.TRISE1 = 0;
  4014  01074A  9296               	bcf	3990,1,c	;volatile
  4015                           
  4016                           ; BSR set to: 14
  4017                           ;LCD.c: 79: TRISEbits.TRISE2 = 0;
  4018  01074C  9496               	bcf	3990,2,c	;volatile
  4019                           
  4020                           ; BSR set to: 14
  4021                           ;LCD.c: 80: TRISEbits.TRISE3 = 0;
  4022  01074E  9696               	bcf	3990,3,c	;volatile
  4023                           
  4024                           ; BSR set to: 14
  4025                           ;LCD.c: 81: TRISEbits.TRISE4 = 0;
  4026  010750  9896               	bcf	3990,4,c	;volatile
  4027                           
  4028                           ; BSR set to: 14
  4029                           ;LCD.c: 82: TRISHbits.TRISH5 = 0;
  4030  010752  9A99               	bcf	3993,5,c	;volatile
  4031                           
  4032                           ; BSR set to: 14
  4033                           ;LCD.c: 84: delay_init();
  4034  010754  EC4D  F08A         	call	_delay_init	;wreg free
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;LCD.c: 85: delay_ms(100);
  4038  010758  0E64               	movlw	100
  4039  01075A  6E0A               	movwf	delay_ms@x,c
  4040  01075C  0E00               	movlw	0
  4041  01075E  6A0B               	clrf	delay_ms@x+1,c
  4042  010760  6A0C               	clrf	delay_ms@x+2,c
  4043  010762  6A0D               	clrf	delay_ms@x+3,c
  4044  010764  EC66  F089         	call	_delay_ms	;wreg free
  4045                           
  4046                           ;LCD.c: 87: PORTDbits.RD0 = 0;
  4047  010768  9083               	bcf	3971,0,c	;volatile
  4048                           
  4049                           ;LCD.c: 88: PORTGbits.RG7 = 0;
  4050  01076A  9E86               	bcf	3974,7,c	;volatile
  4051                           
  4052                           ;LCD.c: 91: delay_us(40);;
  4053  01076C  D89C               	call	PL2	;call to abstracted procedure
  4054  01076E  EC32  F08A         	call	_delay_us	;wreg free
  4055                           
  4056                           ;LCD.c: 92: PORTEbits.RE4 = 1;
  4057  010772  8884               	bsf	3972,4,c	;volatile
  4058                           
  4059                           ;LCD.c: 93: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTEb
      +                          its.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4060  010774  9A87               	bcf	3975,5,c	;volatile
  4061  010776  9284               	bcf	3972,1,c	;volatile
  4062  010778  8084               	bsf	3972,0,c	;volatile
  4063  01077A  8484               	bsf	3972,2,c	;volatile
  4064                           
  4065                           ;LCD.c: 94: delay_us(40);;
  4066  01077C  D894               	call	PL2	;call to abstracted procedure
  4067  01077E  EC32  F08A         	call	_delay_us	;wreg free
  4068                           
  4069                           ;LCD.c: 95: PORTEbits.RE4 = 0;
  4070  010782  9884               	bcf	3972,4,c	;volatile
  4071                           
  4072                           ;LCD.c: 97: delay_ms(50);
  4073  010784  D896               	call	PL10	;call to abstracted procedure
  4074  010786  EC66  F089         	call	_delay_ms	;wreg free
  4075                           
  4076                           ;LCD.c: 100: delay_us(40);;
  4077  01078A  D88D               	call	PL2	;call to abstracted procedure
  4078  01078C  EC32  F08A         	call	_delay_us	;wreg free
  4079                           
  4080                           ;LCD.c: 101: PORTEbits.RE4 = 1;
  4081  010790  8884               	bsf	3972,4,c	;volatile
  4082                           
  4083                           ;LCD.c: 102: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4084  010792  9A87               	bcf	3975,5,c	;volatile
  4085  010794  9284               	bcf	3972,1,c	;volatile
  4086  010796  8084               	bsf	3972,0,c	;volatile
  4087  010798  8484               	bsf	3972,2,c	;volatile
  4088                           
  4089                           ;LCD.c: 103: delay_us(40);;
  4090  01079A  D885               	call	PL2	;call to abstracted procedure
  4091  01079C  EC32  F08A         	call	_delay_us	;wreg free
  4092                           
  4093                           ;LCD.c: 104: PORTEbits.RE4 = 0;
  4094  0107A0  9884               	bcf	3972,4,c	;volatile
  4095                           
  4096                           ;LCD.c: 106: delay_ms(50);
  4097  0107A2  D887               	call	PL10	;call to abstracted procedure
  4098  0107A4  EC66  F089         	call	_delay_ms	;wreg free
  4099                           
  4100                           ;LCD.c: 109: delay_us(40);;
  4101  0107A8  D87E               	call	PL2	;call to abstracted procedure
  4102  0107AA  EC32  F08A         	call	_delay_us	;wreg free
  4103                           
  4104                           ;LCD.c: 110: PORTEbits.RE4 = 1;
  4105  0107AE  8884               	bsf	3972,4,c	;volatile
  4106                           
  4107                           ;LCD.c: 111: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4108  0107B0  9A87               	bcf	3975,5,c	;volatile
  4109  0107B2  9284               	bcf	3972,1,c	;volatile
  4110  0107B4  8084               	bsf	3972,0,c	;volatile
  4111  0107B6  8484               	bsf	3972,2,c	;volatile
  4112                           
  4113                           ;LCD.c: 112: delay_us(40);;
  4114  0107B8  D876               	call	PL2	;call to abstracted procedure
  4115  0107BA  EC32  F08A         	call	_delay_us	;wreg free
  4116                           
  4117                           ;LCD.c: 113: PORTEbits.RE4 = 0;
  4118  0107BE  9884               	bcf	3972,4,c	;volatile
  4119                           
  4120                           ;LCD.c: 115: delay_ms(50);
  4121  0107C0  D878               	call	PL10	;call to abstracted procedure
  4122  0107C2  EC66  F089         	call	_delay_ms	;wreg free
  4123                           
  4124                           ;LCD.c: 118: delay_us(40);;
  4125  0107C6  D86F               	call	PL2	;call to abstracted procedure
  4126  0107C8  EC32  F08A         	call	_delay_us	;wreg free
  4127                           
  4128                           ;LCD.c: 119: PORTEbits.RE4 = 1;
  4129  0107CC  8884               	bsf	3972,4,c	;volatile
  4130                           
  4131                           ;LCD.c: 120: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4132  0107CE  9A87               	bcf	3975,5,c	;volatile
  4133  0107D0  9284               	bcf	3972,1,c	;volatile
  4134  0107D2  8084               	bsf	3972,0,c	;volatile
  4135  0107D4  9484               	bcf	3972,2,c	;volatile
  4136                           
  4137                           ;LCD.c: 121: delay_us(40);;
  4138  0107D6  D867               	call	PL2	;call to abstracted procedure
  4139  0107D8  EC32  F08A         	call	_delay_us	;wreg free
  4140                           
  4141                           ;LCD.c: 122: PORTEbits.RE4 = 0;
  4142  0107DC  9884               	bcf	3972,4,c	;volatile
  4143                           
  4144                           ;LCD.c: 124: delay_ms(50);
  4145  0107DE  D869               	call	PL10	;call to abstracted procedure
  4146  0107E0  EC66  F089         	call	_delay_ms	;wreg free
  4147                           
  4148                           ;LCD.c: 127: delay_us(40);;
  4149  0107E4  D860               	call	PL2	;call to abstracted procedure
  4150  0107E6  EC32  F08A         	call	_delay_us	;wreg free
  4151                           
  4152                           ;LCD.c: 128: PORTEbits.RE4 = 1;
  4153  0107EA  8884               	bsf	3972,4,c	;volatile
  4154                           
  4155                           ;LCD.c: 129: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4156  0107EC  9A87               	bcf	3975,5,c	;volatile
  4157  0107EE  9284               	bcf	3972,1,c	;volatile
  4158  0107F0  8084               	bsf	3972,0,c	;volatile
  4159  0107F2  9484               	bcf	3972,2,c	;volatile
  4160                           
  4161                           ;LCD.c: 130: delay_us(40);;
  4162  0107F4  D858               	call	PL2	;call to abstracted procedure
  4163  0107F6  EC32  F08A         	call	_delay_us	;wreg free
  4164                           
  4165                           ;LCD.c: 131: PORTEbits.RE4 = 0;
  4166  0107FA  9884               	bcf	3972,4,c	;volatile
  4167                           
  4168                           ;LCD.c: 133: delay_us(40);;
  4169  0107FC  D854               	call	PL2	;call to abstracted procedure
  4170  0107FE  EC32  F08A         	call	_delay_us	;wreg free
  4171                           
  4172                           ;LCD.c: 134: PORTEbits.RE4 = 1;
  4173  010802  8884               	bsf	3972,4,c	;volatile
  4174                           
  4175                           ;LCD.c: 135: { PORTHbits.RH5 = ((0x8 >> 3) & 1); PORTEbits.RE1 = ((0x8 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x8 >> 1) & 1); PORTEbits.RE2 = (0x8 & 1); };
  4176  010804  8A87               	bsf	3975,5,c	;volatile
  4177  010806  9284               	bcf	3972,1,c	;volatile
  4178  010808  9084               	bcf	3972,0,c	;volatile
  4179  01080A  9484               	bcf	3972,2,c	;volatile
  4180                           
  4181                           ;LCD.c: 136: delay_us(40);;
  4182  01080C  D84C               	call	PL2	;call to abstracted procedure
  4183  01080E  EC32  F08A         	call	_delay_us	;wreg free
  4184                           
  4185                           ;LCD.c: 137: PORTEbits.RE4 = 0;
  4186  010812  9884               	bcf	3972,4,c	;volatile
  4187                           
  4188                           ;LCD.c: 140: delay_us(40);;
  4189  010814  D848               	call	PL2	;call to abstracted procedure
  4190  010816  EC32  F08A         	call	_delay_us	;wreg free
  4191                           
  4192                           ;LCD.c: 141: PORTEbits.RE4 = 1;
  4193  01081A  8884               	bsf	3972,4,c	;volatile
  4194                           
  4195                           ;LCD.c: 142: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4196  01081C  9A87               	bcf	3975,5,c	;volatile
  4197  01081E  9284               	bcf	3972,1,c	;volatile
  4198  010820  9084               	bcf	3972,0,c	;volatile
  4199  010822  9484               	bcf	3972,2,c	;volatile
  4200                           
  4201                           ;LCD.c: 143: delay_us(40);;
  4202  010824  D840               	call	PL2	;call to abstracted procedure
  4203  010826  EC32  F08A         	call	_delay_us	;wreg free
  4204                           
  4205                           ;LCD.c: 144: PORTEbits.RE4 = 0;
  4206  01082A  9884               	bcf	3972,4,c	;volatile
  4207                           
  4208                           ;LCD.c: 146: delay_us(40);;
  4209  01082C  D83C               	call	PL2	;call to abstracted procedure
  4210  01082E  EC32  F08A         	call	_delay_us	;wreg free
  4211                           
  4212                           ;LCD.c: 147: PORTEbits.RE4 = 1;
  4213  010832  8884               	bsf	3972,4,c	;volatile
  4214                           
  4215                           ;LCD.c: 148: { PORTHbits.RH5 = ((0xF >> 3) & 1); PORTEbits.RE1 = ((0xF >> 2) & 1); PORTE
      +                          bits.RE0 = ((0xF >> 1) & 1); PORTEbits.RE2 = (0xF & 1); };
  4216  010834  8A87               	bsf	3975,5,c	;volatile
  4217  010836  8284               	bsf	3972,1,c	;volatile
  4218  010838  8084               	bsf	3972,0,c	;volatile
  4219  01083A  8484               	bsf	3972,2,c	;volatile
  4220                           
  4221                           ;LCD.c: 149: delay_us(40);;
  4222  01083C  D834               	call	PL2	;call to abstracted procedure
  4223  01083E  EC32  F08A         	call	_delay_us	;wreg free
  4224                           
  4225                           ;LCD.c: 150: PORTEbits.RE4 = 0;
  4226  010842  9884               	bcf	3972,4,c	;volatile
  4227                           
  4228                           ;LCD.c: 153: delay_us(40);;
  4229  010844  D830               	call	PL2	;call to abstracted procedure
  4230  010846  EC32  F08A         	call	_delay_us	;wreg free
  4231                           
  4232                           ;LCD.c: 154: PORTEbits.RE4 = 1;
  4233  01084A  8884               	bsf	3972,4,c	;volatile
  4234                           
  4235                           ;LCD.c: 155: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4236  01084C  9A87               	bcf	3975,5,c	;volatile
  4237  01084E  9284               	bcf	3972,1,c	;volatile
  4238  010850  9084               	bcf	3972,0,c	;volatile
  4239  010852  9484               	bcf	3972,2,c	;volatile
  4240                           
  4241                           ;LCD.c: 156: delay_us(40);;
  4242  010854  D828               	call	PL2	;call to abstracted procedure
  4243  010856  EC32  F08A         	call	_delay_us	;wreg free
  4244                           
  4245                           ;LCD.c: 157: PORTEbits.RE4 = 0;
  4246  01085A  9884               	bcf	3972,4,c	;volatile
  4247                           
  4248                           ;LCD.c: 159: delay_us(40);;
  4249  01085C  D824               	call	PL2	;call to abstracted procedure
  4250  01085E  EC32  F08A         	call	_delay_us	;wreg free
  4251                           
  4252                           ;LCD.c: 160: PORTEbits.RE4 = 1;
  4253  010862  8884               	bsf	3972,4,c	;volatile
  4254                           
  4255                           ;LCD.c: 161: { PORTHbits.RH5 = ((0x1 >> 3) & 1); PORTEbits.RE1 = ((0x1 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x1 >> 1) & 1); PORTEbits.RE2 = (0x1 & 1); };
  4256  010864  9A87               	bcf	3975,5,c	;volatile
  4257  010866  9284               	bcf	3972,1,c	;volatile
  4258  010868  9084               	bcf	3972,0,c	;volatile
  4259  01086A  8484               	bsf	3972,2,c	;volatile
  4260                           
  4261                           ;LCD.c: 162: delay_us(40);;
  4262  01086C  D81C               	call	PL2	;call to abstracted procedure
  4263  01086E  EC32  F08A         	call	_delay_us	;wreg free
  4264                           
  4265                           ;LCD.c: 163: PORTEbits.RE4 = 0;
  4266  010872  9884               	bcf	3972,4,c	;volatile
  4267                           
  4268                           ;LCD.c: 166: delay_us(40);;
  4269  010874  D818               	call	PL2	;call to abstracted procedure
  4270  010876  EC32  F08A         	call	_delay_us	;wreg free
  4271                           
  4272                           ;LCD.c: 167: PORTEbits.RE4 = 1;
  4273  01087A  8884               	bsf	3972,4,c	;volatile
  4274                           
  4275                           ;LCD.c: 168: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4276  01087C  9A87               	bcf	3975,5,c	;volatile
  4277  01087E  9284               	bcf	3972,1,c	;volatile
  4278  010880  9084               	bcf	3972,0,c	;volatile
  4279  010882  9484               	bcf	3972,2,c	;volatile
  4280                           
  4281                           ;LCD.c: 169: delay_us(40);;
  4282  010884  D810               	call	PL2	;call to abstracted procedure
  4283  010886  EC32  F08A         	call	_delay_us	;wreg free
  4284                           
  4285                           ;LCD.c: 170: PORTEbits.RE4 = 0;
  4286  01088A  9884               	bcf	3972,4,c	;volatile
  4287                           
  4288                           ;LCD.c: 172: delay_us(40);;
  4289  01088C  D80C               	call	PL2	;call to abstracted procedure
  4290  01088E  EC32  F08A         	call	_delay_us	;wreg free
  4291                           
  4292                           ;LCD.c: 173: PORTEbits.RE4 = 1;
  4293  010892  8884               	bsf	3972,4,c	;volatile
  4294                           
  4295                           ;LCD.c: 174: { PORTHbits.RH5 = ((0x6 >> 3) & 1); PORTEbits.RE1 = ((0x6 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x6 >> 1) & 1); PORTEbits.RE2 = (0x6 & 1); };
  4296  010894  9A87               	bcf	3975,5,c	;volatile
  4297  010896  8284               	bsf	3972,1,c	;volatile
  4298  010898  8084               	bsf	3972,0,c	;volatile
  4299  01089A  9484               	bcf	3972,2,c	;volatile
  4300                           
  4301                           ;LCD.c: 175: delay_us(40);;
  4302  01089C  D804               	call	PL2	;call to abstracted procedure
  4303  01089E  EC32  F08A         	call	_delay_us	;wreg free
  4304                           
  4305                           ;LCD.c: 176: PORTEbits.RE4 = 0;
  4306  0108A2  9884               	bcf	3972,4,c	;volatile
  4307  0108A4  0012               	return	
  4308  0108A6                     __end_of_LCD_init4bit:
  4309                           	opt stack 0
  4310  0108A6                     PL2:
  4311                           	opt stack 22
  4312  0108A6  0E28               	movlw	40
  4313  0108A8  6E06               	movwf	delay_us@x,c
  4314  0108AA  6A07               	clrf	delay_us@x+1,c
  4315  0108AC  6A08               	clrf	delay_us@x+2,c
  4316  0108AE  6A09               	clrf	delay_us@x+3,c
  4317  0108B0  0C00               	retlw	0
  4318  0108B2                     __end_ofPL2:
  4319                           	opt stack 0
  4320  0108B2                     PL10:
  4321                           	opt stack 23
  4322  0108B2  0E32               	movlw	50
  4323  0108B4  6E0A               	movwf	delay_ms@x,c
  4324  0108B6  6A0B               	clrf	delay_ms@x+1,c
  4325  0108B8  6A0C               	clrf	delay_ms@x+2,c
  4326  0108BA  6A0D               	clrf	delay_ms@x+3,c
  4327  0108BC  0C00               	retlw	0
  4328  0108BE                     __end_ofPL10:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           intcon3	equ	0xFF0
  4339                           indf0	equ	0xFEF
  4340                           postinc0	equ	0xFEE
  4341                           fsr0h	equ	0xFEA
  4342                           fsr0l	equ	0xFE9
  4343                           wreg	equ	0xFE8
  4344                           indf1	equ	0xFE7
  4345                           postinc1	equ	0xFE6
  4346                           postdec1	equ	0xFE5
  4347                           fsr1h	equ	0xFE2
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _delay_init *****************
  4357 ;; Defined at:
  4358 ;;		line 7 in file "delays.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;		None               void
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0
  4367 ;; Tracked objects:
  4368 ;;		On entry : F/E
  4369 ;;		On exit  : F/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    3
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_LCD_init4bit
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text19
  4387  01149A                     __ptext19:
  4388                           	opt stack 0
  4389  01149A                     _delay_init:
  4390                           	opt stack 24
  4391                           
  4392                           ; BSR set to: 14
  4393                           ;delays.c: 9: static int config = 0;
  4394                           ;delays.c: 12: if(config == 1)
  4395                           
  4396                           ;incstack = 0
  4397  01149A  0100               	movlb	0	; () banked
  4398  01149C  05C3               	decf	delay_init@config& (0+255),w,b
  4399  01149E  11C4               	iorwf	(delay_init@config+1)& (0+255),w,b
  4400  0114A0  B4D8               	btfsc	status,2,c
  4401  0114A2  0012               	return	
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;delays.c: 15: }
  4405                           ;delays.c: 18: TMR3CS0 = 1;
  4406  0114A4  8CB1               	bsf	4017,6,c	;volatile
  4407                           
  4408                           ;delays.c: 19: TMR3CS1 = 1;
  4409  0114A6  8EB1               	bsf	4017,7,c	;volatile
  4410                           
  4411                           ;delays.c: 22: T3CKPS0 = 0;
  4412  0114A8  98B1               	bcf	4017,4,c	;volatile
  4413                           
  4414                           ;delays.c: 23: T3CKPS1 = 0;
  4415  0114AA  9AB1               	bcf	4017,5,c	;volatile
  4416                           
  4417                           ;delays.c: 26: RD163 = 1;
  4418  0114AC  8EB1               	bsf	4017,7,c	;volatile
  4419                           
  4420                           ;delays.c: 29: TMR3IE = 0;
  4421  0114AE  92A0               	bcf	4000,1,c	;volatile
  4422                           
  4423                           ;delays.c: 32: TMR3ON = 1;
  4424  0114B0  80B1               	bsf	4017,0,c	;volatile
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;delays.c: 34: config = 1;
  4428  0114B2  0E00               	movlw	0
  4429  0114B4  6FC4               	movwf	(delay_init@config+1)& (0+255),b
  4430  0114B6  0E01               	movlw	1
  4431  0114B8  6FC3               	movwf	delay_init@config& (0+255),b
  4432                           
  4433                           ;delays.c: 42: T0CON = 0b11010111;
  4434  0114BA  0ED7               	movlw	215
  4435  0114BC  6ED5               	movwf	4053,c	;volatile
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;delays.c: 43: TMR0IP = 1;
  4439  0114BE  84F1               	bsf	intcon2,2,c	;volatile
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;delays.c: 44: TMR0IF = 0;
  4443  0114C0  94F2               	bcf	intcon,2,c	;volatile
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;delays.c: 45: TMR0IE = 1;
  4447  0114C2  8AF2               	bsf	intcon,5,c	;volatile
  4448                           
  4449                           ;delays.c: 46: TMR0L = 193;
  4450  0114C4  0EC1               	movlw	193
  4451  0114C6  6ED6               	movwf	4054,c	;volatile
  4452                           
  4453                           ; BSR set to: 0
  4454  0114C8  0CC1               	retlw	193
  4455  0114CA                     __end_of_delay_init:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           intcon	equ	0xFF2
  4464                           intcon2	equ	0xFF1
  4465                           intcon3	equ	0xFF0
  4466                           indf0	equ	0xFEF
  4467                           postinc0	equ	0xFEE
  4468                           fsr0h	equ	0xFEA
  4469                           fsr0l	equ	0xFE9
  4470                           wreg	equ	0xFE8
  4471                           indf1	equ	0xFE7
  4472                           postinc1	equ	0xFE6
  4473                           postdec1	equ	0xFE5
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _debug *****************
  4484 ;; Defined at:
  4485 ;;		line 44 in file "main.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;		None               void
  4492 ;; Registers used:
  4493 ;;		None
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    3
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text20
  4514  01167E                     __ptext20:
  4515                           	opt stack 0
  4516  01167E                     _debug:
  4517                           	opt stack 26
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;incstack = 0
  4521  01167E  0012               	return	
  4522  011680                     __end_of_debug:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           intcon2	equ	0xFF1
  4532                           intcon3	equ	0xFF0
  4533                           indf0	equ	0xFEF
  4534                           postinc0	equ	0xFEE
  4535                           fsr0h	equ	0xFEA
  4536                           fsr0l	equ	0xFE9
  4537                           wreg	equ	0xFE8
  4538                           indf1	equ	0xFE7
  4539                           postinc1	equ	0xFE6
  4540                           postdec1	equ	0xFE5
  4541                           fsr1h	equ	0xFE2
  4542                           fsr1l	equ	0xFE1
  4543                           indf2	equ	0xFDF
  4544                           postinc2	equ	0xFDE
  4545                           postdec2	equ	0xFDD
  4546                           fsr2h	equ	0xFDA
  4547                           fsr2l	equ	0xFD9
  4548                           status	equ	0xFD8
  4549                           
  4550 ;; *************** function _competitionMode *****************
  4551 ;; Defined at:
  4552 ;;		line 68 in file "main.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;		None               void
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4570 ;;Total ram usage:        0 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    7
  4573 ;; This function calls:
  4574 ;;		_LCD_printString
  4575 ;; This function is called by:
  4576 ;;		_main
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text21
  4581  0115F2                     __ptext21:
  4582                           	opt stack 0
  4583  0115F2                     _competitionMode:
  4584                           	opt stack 22
  4585                           
  4586                           ;main.c: 70: LCD_printString(0,0, "We are\nwinning!");
  4587                           
  4588                           ;incstack = 0
  4589  0115F2  6A22               	clrf	LCD_printString@y,c
  4590  0115F4  0EFF               	movlw	high STR_5
  4591  0115F6  6E24               	movwf	LCD_printString@input+1,c
  4592  0115F8  0E7F               	movlw	low STR_5
  4593  0115FA  6E23               	movwf	LCD_printString@input,c
  4594  0115FC  0E00               	movlw	0
  4595  0115FE  EC00  F080         	call	_LCD_printString
  4596  011602                     l242:
  4597                           
  4598                           ;main.c: 72: {
  4599  011602  D7FF               	goto	l242
  4600  011604                     __end_of_competitionMode:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon2	equ	0xFF1
  4610                           intcon3	equ	0xFF0
  4611                           indf0	equ	0xFEF
  4612                           postinc0	equ	0xFEE
  4613                           fsr0h	equ	0xFEA
  4614                           fsr0l	equ	0xFE9
  4615                           wreg	equ	0xFE8
  4616                           indf1	equ	0xFE7
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _RCMode *****************
  4629 ;; Defined at:
  4630 ;;		line 77 in file "main.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  right_speed     2   52[BANK0 ] int 
  4635 ;;  left_speed      2   50[BANK0 ] int 
  4636 ;;  done            1   55[BANK0 ] unsigned char 
  4637 ;;  type            1   54[BANK0 ] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4650 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;Total ram usage:        6 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    9
  4654 ;; This function calls:
  4655 ;;		_LCD_printString
  4656 ;;		_PS2_analog
  4657 ;;		_PS2_init
  4658 ;;		_PS2_readGamepad
  4659 ;;		_PS2_readType
  4660 ;;		___awdiv
  4661 ;;		_delay_ms
  4662 ;;		_motorDrive_setSpeeds
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text22
  4669  010CFC                     __ptext22:
  4670                           	opt stack 0
  4671  010CFC                     _RCMode:
  4672                           	opt stack 20
  4673                           
  4674                           ;main.c: 79: LCD_printString(0,0, "RC Mode\nSearch..");
  4675                           
  4676                           ;incstack = 0
  4677  010CFC  6A22               	clrf	LCD_printString@y,c
  4678  010CFE  0EFF               	movlw	high STR_6
  4679  010D00  6E24               	movwf	LCD_printString@input+1,c
  4680  010D02  0E4C               	movlw	low STR_6
  4681  010D04  6E23               	movwf	LCD_printString@input,c
  4682  010D06  0E00               	movlw	0
  4683  010D08  EC00  F080         	call	_LCD_printString
  4684  010D0C                     l5309:
  4685                           
  4686                           ;main.c: 80: char done = PS2_init();
  4687  010D0C  EC14  F086         	call	_PS2_init	;wreg free
  4688  010D10  6F97               	movwf	RCMode@done& (0+255),b
  4689                           
  4690                           ;main.c: 81: while( done != 0 )
  4691  010D12  D015               	goto	l5317
  4692  010D14                     l5311:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;main.c: 82: {
  4696                           ;main.c: 83: LCD_printString(0,0, "RC Mode\nERR: %i  ",done);
  4697  010D14  6A22               	clrf	LCD_printString@y,c
  4698  010D16  0EFF               	movlw	high STR_7
  4699  010D18  6E24               	movwf	LCD_printString@input+1,c
  4700  010D1A  0E04               	movlw	low STR_7
  4701  010D1C  6E23               	movwf	LCD_printString@input,c
  4702  010D1E  C097  F025         	movff	RCMode@done,?_LCD_printString+3
  4703  010D22  6A26               	clrf	?_LCD_printString+4,c
  4704  010D24  0E00               	movlw	0
  4705  010D26  EC00  F080         	call	_LCD_printString
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;main.c: 84: delay_ms(500);
  4709  010D2A  0EF4               	movlw	244
  4710  010D2C  6E0A               	movwf	delay_ms@x,c
  4711  010D2E  0E01               	movlw	1
  4712  010D30  6E0B               	movwf	delay_ms@x+1,c
  4713  010D32  0E00               	movlw	0
  4714  010D34  6A0C               	clrf	delay_ms@x+2,c
  4715  010D36  6A0D               	clrf	delay_ms@x+3,c
  4716  010D38  EC66  F089         	call	_delay_ms	;wreg free
  4717  010D3C  D7E7               	goto	l5309
  4718  010D3E                     l5317:
  4719                           
  4720                           ; BSR set to: 0
  4721  010D3E  6797               	tstfsz	RCMode@done& (0+255),b
  4722  010D40  D7E9               	goto	l5311
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;main.c: 86: }
  4726                           ;main.c: 88: char type = PS2_readType();
  4727  010D42  ECE3  F08A         	call	_PS2_readType	;wreg free
  4728  010D46  6F96               	movwf	RCMode@type& (0+255),b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;main.c: 90: LCD_printString(0,0, "ana:%i\ntype %i",PS2_analog(7),type);
  4732  010D48  6A22               	clrf	LCD_printString@y,c
  4733  010D4A  0EFF               	movlw	high STR_8
  4734  010D4C  6E24               	movwf	LCD_printString@input+1,c
  4735  010D4E  0EBD               	movlw	low STR_8
  4736  010D50  6E23               	movwf	LCD_printString@input,c
  4737  010D52  0E07               	movlw	7
  4738  010D54  EC13  F08B         	call	_PS2_analog
  4739  010D58  6E25               	movwf	?_LCD_printString+3,c
  4740  010D5A  6A26               	clrf	?_LCD_printString+4,c
  4741  010D5C  C096  F027         	movff	RCMode@type,?_LCD_printString+5
  4742  010D60  6A28               	clrf	?_LCD_printString+6,c
  4743  010D62  0E00               	movlw	0
  4744  010D64  EC00  F080         	call	_LCD_printString
  4745  010D68                     l5323:
  4746                           
  4747                           ;main.c: 95: {
  4748                           ;main.c: 96: PS2_readGamepad();
  4749  010D68  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  4750                           
  4751                           ;main.c: 98: int left_speed = ((PS2_analog(8) * 120) / 255) - 60;
  4752  010D6C  0E08               	movlw	8
  4753  010D6E  EC13  F08B         	call	_PS2_analog
  4754  010D72  D820               	call	PL32	;call to abstracted procedure
  4755  010D74  EC39  F087         	call	___awdiv	;wreg free
  4756  010D78  0EC4               	movlw	196
  4757  010D7A  240C               	addwf	?___awdiv,w,c
  4758  010D7C  0100               	movlb	0	; () banked
  4759  010D7E  6F92               	movwf	RCMode@left_speed& (0+255),b
  4760  010D80  0EFF               	movlw	255
  4761  010D82  200D               	addwfc	?___awdiv+1,w,c
  4762  010D84  6F93               	movwf	(RCMode@left_speed+1)& (0+255),b
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;main.c: 99: int right_speed = ((PS2_analog(6) * 120) / 255) - 60;
  4766  010D86  0E06               	movlw	6
  4767  010D88  EC13  F08B         	call	_PS2_analog
  4768  010D8C  D813               	call	PL32	;call to abstracted procedure
  4769  010D8E  EC39  F087         	call	___awdiv	;wreg free
  4770  010D92  0EC4               	movlw	196
  4771  010D94  240C               	addwf	?___awdiv,w,c
  4772  010D96  0100               	movlb	0	; () banked
  4773  010D98  6F94               	movwf	RCMode@right_speed& (0+255),b
  4774  010D9A  0EFF               	movlw	255
  4775  010D9C  200D               	addwfc	?___awdiv+1,w,c
  4776  010D9E  6F95               	movwf	(RCMode@right_speed+1)& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;main.c: 103: motorDrive_setSpeeds(right_speed, left_speed);
  4780  010DA0  C092  F014         	movff	RCMode@left_speed,motorDrive_setSpeeds@rSpeed
  4781  010DA4  5194               	movf	RCMode@right_speed& (0+255),w,b
  4782  010DA6  ECC2  F081         	call	_motorDrive_setSpeeds
  4783                           
  4784                           ; BSR set to: 15
  4785                           ;main.c: 104: delay_ms(50);
  4786  010DAA  EC59  F084         	call	PL10	;call to abstracted procedure
  4787  010DAE  EC66  F089         	call	_delay_ms	;wreg free
  4788  010DB2  D7DA               	goto	l5323
  4789  010DB4                     __end_of_RCMode:
  4790                           	opt stack 0
  4791  010DB4                     PL32:
  4792                           	opt stack 20
  4793  010DB4  0D78               	mullw	120
  4794  010DB6  CFF3 F00C          	movff	prodl,___awdiv@dividend
  4795  010DBA  CFF4 F00D          	movff	prodh,___awdiv@dividend+1
  4796  010DBE  0E00               	movlw	0
  4797  010DC0  6A0F               	clrf	___awdiv@divisor+1,c
  4798  010DC2  680E               	setf	___awdiv@divisor,c
  4799  010DC4  0012               	return	
  4800  010DC6                     __end_ofPL32:
  4801                           	opt stack 0
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           intcon2	equ	0xFF1
  4810                           intcon3	equ	0xFF0
  4811                           indf0	equ	0xFEF
  4812                           postinc0	equ	0xFEE
  4813                           fsr0h	equ	0xFEA
  4814                           fsr0l	equ	0xFE9
  4815                           wreg	equ	0xFE8
  4816                           indf1	equ	0xFE7
  4817                           postinc1	equ	0xFE6
  4818                           postdec1	equ	0xFE5
  4819                           fsr1h	equ	0xFE2
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _motorDrive_setSpeeds *****************
  4829 ;; Defined at:
  4830 ;;		line 68 in file "motorDrive.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  lSpeed          1    wreg     char 
  4833 ;;  rSpeed          1   19[COMRAM] char 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  lSpeed          1   40[COMRAM] char 
  4836 ;;  tempr           2   24[COMRAM] int 
  4837 ;;  templ           2   22[COMRAM] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;		None               void
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/F
  4844 ;;		On exit  : F/F
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4847 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4848 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4849 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4850 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4851 ;;Total ram usage:       22 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    4
  4854 ;; This function calls:
  4855 ;;		_SetDCEPWM1
  4856 ;;		_SetDCEPWM3
  4857 ;;		___awdiv
  4858 ;;		___wmul
  4859 ;; This function is called by:
  4860 ;;		_RCMode
  4861 ;;		_motorDrive_init
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text23
  4866  010384                     __ptext23:
  4867                           	opt stack 0
  4868  010384                     _motorDrive_setSpeeds:
  4869                           	opt stack 23
  4870                           
  4871                           ;incstack = 0
  4872                           ;motorDrive_setSpeeds@lSpeed stored from wreg
  4873  010384  6E29               	movwf	motorDrive_setSpeeds@lSpeed,c
  4874                           
  4875                           ;motorDrive.c: 70: PORTLbits.RL0 = (lSpeed >> 7 ) & 0x1 ^ 0x1;
  4876  010386  D8E4               	call	PL42	;call to abstracted procedure
  4877  010388                     u2755:
  4878  010388  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  4879  01038A  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  4880  01038C  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  4881  01038E  D7FC               	goto	u2755
  4882  010390  0E01               	movlw	1
  4883  010392  1615               	andwf	??_motorDrive_setSpeeds,f,c
  4884  010394  1A15               	xorwf	??_motorDrive_setSpeeds,f,c
  4885  010396  010E               	movlb	14	; () banked
  4886  010398  51E4               	movf	228,w,b	;volatile
  4887  01039A  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4888  01039C  0BFE               	andlw	-2
  4889  01039E  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4890  0103A0  6FE4               	movwf	228,b	;volatile
  4891                           
  4892                           ;motorDrive.c: 71: PORTKbits.RK1 = (rSpeed >> 7 ) & 0x1;
  4893  0103A2  D8D1               	call	PL40	;call to abstracted procedure
  4894  0103A4                     u2765:
  4895  0103A4  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  4896  0103A6  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  4897  0103A8  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  4898  0103AA  D7FC               	goto	u2765
  4899  0103AC  0E01               	movlw	1
  4900  0103AE  1615               	andwf	??_motorDrive_setSpeeds,f,c
  4901  0103B0  4615               	rlncf	??_motorDrive_setSpeeds,f,c
  4902  0103B2  51E7               	movf	231,w,b	;volatile
  4903  0103B4  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4904  0103B6  0BFD               	andlw	-3
  4905  0103B8  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  4906  0103BA  6FE7               	movwf	231,b	;volatile
  4907                           
  4908                           ;motorDrive.c: 73: lSpeed = ((lSpeed < 100) ? lSpeed : 100);
  4909  0103BC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  4910  0103BE  0A80               	xorlw	128
  4911  0103C0  0F1C               	addlw	-228
  4912  0103C2  E304               	bnc	l4807
  4913                           
  4914                           ; BSR set to: 14
  4915  0103C4  6A1C               	clrf	_motorDrive_setSpeeds$2402+1,c
  4916  0103C6  0E64               	movlw	100
  4917  0103C8  6E1B               	movwf	_motorDrive_setSpeeds$2402,c
  4918  0103CA  D005               	goto	l4809
  4919  0103CC                     l4807:
  4920                           
  4921                           ; BSR set to: 14
  4922  0103CC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  4923  0103CE  6E1B               	movwf	_motorDrive_setSpeeds$2402,c
  4924  0103D0  6A1C               	clrf	_motorDrive_setSpeeds$2402+1,c
  4925  0103D2  BE1B               	btfsc	_motorDrive_setSpeeds$2402,7,c
  4926  0103D4  061C               	decf	_motorDrive_setSpeeds$2402+1,f,c
  4927  0103D6                     l4809:
  4928                           
  4929                           ; BSR set to: 14
  4930  0103D6  C01B  F029         	movff	_motorDrive_setSpeeds$2402,motorDrive_setSpeeds@lSpeed
  4931                           
  4932                           ; BSR set to: 14
  4933                           ;motorDrive.c: 74: rSpeed = ((rSpeed < 100) ? rSpeed : 100);
  4934  0103DA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  4935  0103DC  0A80               	xorlw	128
  4936  0103DE  0F1C               	addlw	-228
  4937  0103E0  E304               	bnc	l4815
  4938                           
  4939                           ; BSR set to: 14
  4940  0103E2  6A1E               	clrf	_motorDrive_setSpeeds$2403+1,c
  4941  0103E4  0E64               	movlw	100
  4942  0103E6  6E1D               	movwf	_motorDrive_setSpeeds$2403,c
  4943  0103E8  D005               	goto	l4817
  4944  0103EA                     l4815:
  4945                           
  4946                           ; BSR set to: 14
  4947  0103EA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  4948  0103EC  6E1D               	movwf	_motorDrive_setSpeeds$2403,c
  4949  0103EE  6A1E               	clrf	_motorDrive_setSpeeds$2403+1,c
  4950  0103F0  BE1D               	btfsc	_motorDrive_setSpeeds$2403,7,c
  4951  0103F2  061E               	decf	_motorDrive_setSpeeds$2403+1,f,c
  4952  0103F4                     l4817:
  4953                           
  4954                           ; BSR set to: 14
  4955  0103F4  C01D  F014         	movff	_motorDrive_setSpeeds$2403,motorDrive_setSpeeds@rSpeed
  4956                           
  4957                           ; BSR set to: 14
  4958                           ;motorDrive.c: 76: lSpeed = ((lSpeed > -100) ? lSpeed : -100);
  4959  0103F8  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  4960  0103FA  0A80               	xorlw	128
  4961  0103FC  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  4962  0103FE  0E9D               	movlw	157
  4963  010400  0A80               	xorlw	128
  4964  010402  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  4965  010404  E204               	bc	l4823
  4966                           
  4967                           ; BSR set to: 14
  4968  010406  6820               	setf	_motorDrive_setSpeeds$2404+1,c
  4969  010408  0E9C               	movlw	156
  4970  01040A  6E1F               	movwf	_motorDrive_setSpeeds$2404,c
  4971  01040C  D005               	goto	l4825
  4972  01040E                     l4823:
  4973                           
  4974                           ; BSR set to: 14
  4975  01040E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  4976  010410  6E1F               	movwf	_motorDrive_setSpeeds$2404,c
  4977  010412  6A20               	clrf	_motorDrive_setSpeeds$2404+1,c
  4978  010414  BE1F               	btfsc	_motorDrive_setSpeeds$2404,7,c
  4979  010416  0620               	decf	_motorDrive_setSpeeds$2404+1,f,c
  4980  010418                     l4825:
  4981                           
  4982                           ; BSR set to: 14
  4983  010418  C01F  F029         	movff	_motorDrive_setSpeeds$2404,motorDrive_setSpeeds@lSpeed
  4984                           
  4985                           ; BSR set to: 14
  4986                           ;motorDrive.c: 77: rSpeed = ((rSpeed > -100) ? rSpeed : -100);
  4987  01041C  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  4988  01041E  0A80               	xorlw	128
  4989  010420  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  4990  010422  0E9D               	movlw	157
  4991  010424  0A80               	xorlw	128
  4992  010426  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  4993  010428  E204               	bc	l4831
  4994                           
  4995                           ; BSR set to: 14
  4996  01042A  6822               	setf	_motorDrive_setSpeeds$2405+1,c
  4997  01042C  0E9C               	movlw	156
  4998  01042E  6E21               	movwf	_motorDrive_setSpeeds$2405,c
  4999  010430  D005               	goto	l4833
  5000  010432                     l4831:
  5001                           
  5002                           ; BSR set to: 14
  5003  010432  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5004  010434  6E21               	movwf	_motorDrive_setSpeeds$2405,c
  5005  010436  6A22               	clrf	_motorDrive_setSpeeds$2405+1,c
  5006  010438  BE21               	btfsc	_motorDrive_setSpeeds$2405,7,c
  5007  01043A  0622               	decf	_motorDrive_setSpeeds$2405+1,f,c
  5008  01043C                     l4833:
  5009                           
  5010                           ; BSR set to: 14
  5011  01043C  C021  F014         	movff	_motorDrive_setSpeeds$2405,motorDrive_setSpeeds@rSpeed
  5012                           
  5013                           ; BSR set to: 14
  5014                           ;motorDrive.c: 79: lSpeed = ((lSpeed >> 7 ) & 0x1) ? ((lSpeed < 0) ? (lSpeed*-1) : lSpee
      +                          d) : 100-lSpeed;
  5015  010440  D887               	call	PL42	;call to abstracted procedure
  5016  010442                     u2815:
  5017  010442  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5018  010444  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5019  010446  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5020  010448  D7FC               	goto	u2815
  5021  01044A  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5022  01044C  D00E               	goto	l844
  5023                           
  5024                           ; BSR set to: 14
  5025  01044E  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5026  010452  6A16               	clrf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5027  010454  BE15               	btfsc	??_motorDrive_setSpeeds& (0+255),7,c
  5028  010456  0616               	decf	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5029  010458  5015               	movf	??_motorDrive_setSpeeds,w,c
  5030  01045A  0864               	sublw	100
  5031  01045C  6E23               	movwf	_motorDrive_setSpeeds$2406,c
  5032  01045E  5016               	movf	??_motorDrive_setSpeeds+1,w,c
  5033  010460  A0D8               	btfss	status,0,c
  5034  010462  2AE8               	incf	wreg,f,c
  5035  010464  0800               	sublw	0
  5036  010466  6E24               	movwf	_motorDrive_setSpeeds$2406+1,c
  5037  010468  D01E               	goto	l4845
  5038  01046A                     l844:
  5039                           
  5040                           ; BSR set to: 14
  5041  01046A  BE29               	btfsc	motorDrive_setSpeeds@lSpeed,7,c
  5042  01046C  D006               	goto	l4841
  5043                           
  5044                           ; BSR set to: 14
  5045  01046E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5046  010470  6E25               	movwf	_motorDrive_setSpeeds$2407,c
  5047  010472  6A26               	clrf	_motorDrive_setSpeeds$2407+1,c
  5048  010474  BE25               	btfsc	_motorDrive_setSpeeds$2407,7,c
  5049  010476  0626               	decf	_motorDrive_setSpeeds$2407+1,f,c
  5050  010478  D012               	goto	l4843
  5051  01047A                     l4841:
  5052                           
  5053                           ; BSR set to: 14
  5054  01047A  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5055  01047C  6E06               	movwf	___wmul@multiplier,c
  5056  01047E  6A07               	clrf	___wmul@multiplier+1,c
  5057  010480  BE06               	btfsc	___wmul@multiplier,7,c
  5058  010482  0607               	decf	___wmul@multiplier+1,f,c
  5059  010484  6A09               	clrf	___wmul@multiplicand+1,c
  5060  010486  0E01               	movlw	1
  5061  010488  6E08               	movwf	___wmul@multiplicand,c
  5062  01048A  ECA0  F08A         	call	___wmul	;wreg free
  5063  01048E  1E06               	comf	?___wmul,f,c
  5064  010490  1E07               	comf	?___wmul+1,f,c
  5065  010492  4A06               	infsnz	?___wmul,f,c
  5066  010494  2A07               	incf	?___wmul+1,f,c
  5067  010496  C006  F025         	movff	?___wmul,_motorDrive_setSpeeds$2407
  5068  01049A  C007  F026         	movff	?___wmul+1,_motorDrive_setSpeeds$2407+1
  5069  01049E                     l4843:
  5070  01049E  C025  F023         	movff	_motorDrive_setSpeeds$2407,_motorDrive_setSpeeds$2406
  5071  0104A2  C026  F024         	movff	_motorDrive_setSpeeds$2407+1,_motorDrive_setSpeeds$2406+1
  5072  0104A6                     l4845:
  5073  0104A6  C023  F029         	movff	_motorDrive_setSpeeds$2406,motorDrive_setSpeeds@lSpeed
  5074                           
  5075                           ;motorDrive.c: 80: rSpeed = ((rSpeed >> 7 ) & 0x1) ? 100 + rSpeed : rSpeed;
  5076  0104AA  D84D               	call	PL40	;call to abstracted procedure
  5077  0104AC                     u2845:
  5078  0104AC  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5079  0104AE  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5080  0104B0  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5081  0104B2  D7FC               	goto	u2845
  5082  0104B4  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5083  0104B6  D006               	goto	l4851
  5084  0104B8  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5085  0104BA  6E27               	movwf	_motorDrive_setSpeeds$2408,c
  5086  0104BC  6A28               	clrf	_motorDrive_setSpeeds$2408+1,c
  5087  0104BE  BE27               	btfsc	_motorDrive_setSpeeds$2408,7,c
  5088  0104C0  0628               	decf	_motorDrive_setSpeeds$2408+1,f,c
  5089  0104C2  D009               	goto	l4853
  5090  0104C4                     l4851:
  5091  0104C4  0E64               	movlw	100
  5092  0104C6  2414               	addwf	motorDrive_setSpeeds@rSpeed,w,c
  5093  0104C8  6E27               	movwf	_motorDrive_setSpeeds$2408,c
  5094  0104CA  6AE8               	clrf	wreg,c
  5095  0104CC  B0D8               	btfsc	status,0,c
  5096  0104CE  2AE8               	incf	wreg,f,c
  5097  0104D0  BE14               	btfsc	motorDrive_setSpeeds@rSpeed,7,c
  5098  0104D2  06E8               	decf	wreg,f,c
  5099  0104D4  6E28               	movwf	_motorDrive_setSpeeds$2408+1,c
  5100  0104D6                     l4853:
  5101  0104D6  C027  F014         	movff	_motorDrive_setSpeeds$2408,motorDrive_setSpeeds@rSpeed
  5102                           
  5103                           ;motorDrive.c: 82: int templ = ((0xD0 * lSpeed) / 100);
  5104  0104DA  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5105  0104DC  D82C               	call	PL36	;call to abstracted procedure
  5106  0104DE  ECA0  F08A         	call	___wmul	;wreg free
  5107  0104E2  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5108  0104E6  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5109  0104EA  6A0F               	clrf	___awdiv@divisor+1,c
  5110  0104EC  0E64               	movlw	100
  5111  0104EE  6E0E               	movwf	___awdiv@divisor,c
  5112  0104F0  EC39  F087         	call	___awdiv	;wreg free
  5113  0104F4  C00C  F017         	movff	?___awdiv,motorDrive_setSpeeds@templ
  5114  0104F8  C00D  F018         	movff	?___awdiv+1,motorDrive_setSpeeds@templ+1
  5115                           
  5116                           ;motorDrive.c: 83: int tempr = ((0xD0 * rSpeed) / 100);
  5117  0104FC  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5118  0104FE  D81B               	call	PL36	;call to abstracted procedure
  5119  010500  ECA0  F08A         	call	___wmul	;wreg free
  5120  010504  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5121  010508  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5122  01050C  6A0F               	clrf	___awdiv@divisor+1,c
  5123  01050E  0E64               	movlw	100
  5124  010510  6E0E               	movwf	___awdiv@divisor,c
  5125  010512  EC39  F087         	call	___awdiv	;wreg free
  5126  010516  C00C  F019         	movff	?___awdiv,motorDrive_setSpeeds@tempr
  5127  01051A  C00D  F01A         	movff	?___awdiv+1,motorDrive_setSpeeds@tempr+1
  5128                           
  5129                           ;motorDrive.c: 85: SetDCEPWM1(tempr);
  5130  01051E  C019  F006         	movff	motorDrive_setSpeeds@tempr,SetDCEPWM1@dutycycle
  5131  010522  C01A  F007         	movff	motorDrive_setSpeeds@tempr+1,SetDCEPWM1@dutycycle+1
  5132  010526  EC15  F08A         	call	_SetDCEPWM1	;wreg free
  5133                           
  5134                           ;motorDrive.c: 86: SetDCEPWM3(templ);
  5135  01052A  C017  F006         	movff	motorDrive_setSpeeds@templ,SetDCEPWM3@dutycycle
  5136  01052E  C018  F007         	movff	motorDrive_setSpeeds@templ+1,SetDCEPWM3@dutycycle+1
  5137  010532  EFF7  F089         	goto	_SetDCEPWM3	;wreg free
  5138  010536                     __end_of_motorDrive_setSpeeds:
  5139                           	opt stack 0
  5140  010536                     PL36:
  5141                           	opt stack 23
  5142  010536  6E06               	movwf	___wmul@multiplier,c
  5143  010538  6A07               	clrf	___wmul@multiplier+1,c
  5144  01053A  BE06               	btfsc	___wmul@multiplier,7,c
  5145  01053C  0607               	decf	___wmul@multiplier+1,f,c
  5146  01053E  6A09               	clrf	___wmul@multiplicand+1,c
  5147  010540  0ED0               	movlw	208
  5148  010542  6E08               	movwf	___wmul@multiplicand,c
  5149  010544  0CD0               	retlw	208
  5150  010546                     __end_ofPL36:
  5151                           	opt stack 0
  5152  010546                     PL40:
  5153                           	opt stack 23
  5154  010546  C014  F015         	movff	motorDrive_setSpeeds@rSpeed,??_motorDrive_setSpeeds
  5155  01054A  0E07               	movlw	7
  5156  01054C  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5157  01054E  0C07               	retlw	7
  5158  010550                     __end_ofPL40:
  5159                           	opt stack 0
  5160  010550                     PL42:
  5161                           	opt stack 23
  5162  010550  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5163  010554  0E07               	movlw	7
  5164  010556  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5165  010558  0C07               	retlw	7
  5166  01055A                     __end_ofPL42:
  5167                           	opt stack 0
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           intcon	equ	0xFF2
  5175                           intcon2	equ	0xFF1
  5176                           intcon3	equ	0xFF0
  5177                           indf0	equ	0xFEF
  5178                           postinc0	equ	0xFEE
  5179                           fsr0h	equ	0xFEA
  5180                           fsr0l	equ	0xFE9
  5181                           wreg	equ	0xFE8
  5182                           indf1	equ	0xFE7
  5183                           postinc1	equ	0xFE6
  5184                           postdec1	equ	0xFE5
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function ___wmul *****************
  5195 ;; Defined at:
  5196 ;;		line 15 in file "/Applications/microchip/xc8/v1.33/sources/common/Umul16.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  multiplier      2    5[COMRAM] unsigned int 
  5199 ;;  multiplicand    2    7[COMRAM] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  product         2    9[COMRAM] unsigned int 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2    5[COMRAM] unsigned int 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0, prodl, prodh
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/E
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5214 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;Total ram usage:        6 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    3
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_motorDrive_setSpeeds
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text24
  5226  011540                     __ptext24:
  5227                           	opt stack 0
  5228  011540                     ___wmul:
  5229                           	opt stack 23
  5230                           
  5231                           ; BSR set to: 15
  5232                           ;incstack = 0
  5233  011540  5006               	movf	___wmul@multiplier,w,c
  5234  011542  0208               	mulwf	___wmul@multiplicand,c
  5235  011544  CFF3 F00A          	movff	prodl,___wmul@product
  5236  011548  CFF4 F00B          	movff	prodh,___wmul@product+1
  5237  01154C  5006               	movf	___wmul@multiplier,w,c
  5238  01154E  0209               	mulwf	___wmul@multiplicand+1,c
  5239  011550  50F3               	movf	prodl,w,c
  5240  011552  260B               	addwf	___wmul@product+1,f,c
  5241  011554  5007               	movf	___wmul@multiplier+1,w,c
  5242  011556  0208               	mulwf	___wmul@multiplicand,c
  5243  011558  50F3               	movf	prodl,w,c
  5244  01155A  260B               	addwf	___wmul@product+1,f,c
  5245  01155C  C00A  F006         	movff	___wmul@product,?___wmul
  5246  011560  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  5247  011564  0012               	return	
  5248  011566                     __end_of___wmul:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon2	equ	0xFF1
  5258                           intcon3	equ	0xFF0
  5259                           indf0	equ	0xFEF
  5260                           postinc0	equ	0xFEE
  5261                           fsr0h	equ	0xFEA
  5262                           fsr0l	equ	0xFE9
  5263                           wreg	equ	0xFE8
  5264                           indf1	equ	0xFE7
  5265                           postinc1	equ	0xFE6
  5266                           postdec1	equ	0xFE5
  5267                           fsr1h	equ	0xFE2
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276 ;; *************** function ___awdiv *****************
  5277 ;; Defined at:
  5278 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/awdiv.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  dividend        2   11[COMRAM] int 
  5281 ;;  divisor         2   13[COMRAM] int 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;  quotient        2   17[COMRAM] int 
  5284 ;;  sign            1   16[COMRAM] unsigned char 
  5285 ;;  counter         1   15[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  2   11[COMRAM] int 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, prodl
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;Total ram usage:        8 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    3
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_RCMode
  5306 ;;		_motorDrive_setSpeeds
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text25
  5311  010E72                     __ptext25:
  5312                           	opt stack 0
  5313  010E72                     ___awdiv:
  5314                           	opt stack 23
  5315                           
  5316                           ;incstack = 0
  5317  010E72  6A11               	clrf	___awdiv@sign,c
  5318  010E74  500F               	movf	___awdiv@divisor+1,w,c
  5319  010E76  EC93  F085         	call	PL34	;call to abstracted procedure
  5320  010E7A  B4D8               	btfsc	status,2,c
  5321  010E7C  5C0E               	subwf	___awdiv@divisor,w,c
  5322  010E7E  E206               	bc	l4625
  5323  010E80  6C0E               	negf	___awdiv@divisor,c
  5324  010E82  1E0F               	comf	___awdiv@divisor+1,f,c
  5325  010E84  B0D8               	btfsc	status,0,c
  5326  010E86  2A0F               	incf	___awdiv@divisor+1,f,c
  5327  010E88  0E01               	movlw	1
  5328  010E8A  6E11               	movwf	___awdiv@sign,c
  5329  010E8C                     l4625:
  5330  010E8C  500D               	movf	___awdiv@dividend+1,w,c
  5331  010E8E  EC93  F085         	call	PL34	;call to abstracted procedure
  5332  010E92  B4D8               	btfsc	status,2,c
  5333  010E94  5C0C               	subwf	___awdiv@dividend,w,c
  5334  010E96  E206               	bc	l4631
  5335  010E98  6C0C               	negf	___awdiv@dividend,c
  5336  010E9A  1E0D               	comf	___awdiv@dividend+1,f,c
  5337  010E9C  B0D8               	btfsc	status,0,c
  5338  010E9E  2A0D               	incf	___awdiv@dividend+1,f,c
  5339  010EA0  0E01               	movlw	1
  5340  010EA2  1A11               	xorwf	___awdiv@sign,f,c
  5341  010EA4                     l4631:
  5342  010EA4  6A12               	clrf	___awdiv@quotient,c
  5343  010EA6  6A13               	clrf	___awdiv@quotient+1,c
  5344  010EA8  500F               	movf	___awdiv@divisor+1,w,c
  5345  010EAA  100E               	iorwf	___awdiv@divisor,w,c
  5346  010EAC  E01B               	bz	l4653
  5347  010EAE  0E01               	movlw	1
  5348  010EB0  6E10               	movwf	___awdiv@counter,c
  5349  010EB2  D004               	goto	l4639
  5350  010EB4                     l4637:
  5351  010EB4  90D8               	bcf	status,0,c
  5352  010EB6  360E               	rlcf	___awdiv@divisor,f,c
  5353  010EB8  360F               	rlcf	___awdiv@divisor+1,f,c
  5354  010EBA  2A10               	incf	___awdiv@counter,f,c
  5355  010EBC                     l4639:
  5356  010EBC  AE0F               	btfss	___awdiv@divisor+1,7,c
  5357  010EBE  D7FA               	goto	l4637
  5358  010EC0                     l4641:
  5359  010EC0  90D8               	bcf	status,0,c
  5360  010EC2  3612               	rlcf	___awdiv@quotient,f,c
  5361  010EC4  3613               	rlcf	___awdiv@quotient+1,f,c
  5362  010EC6  500E               	movf	___awdiv@divisor,w,c
  5363  010EC8  5C0C               	subwf	___awdiv@dividend,w,c
  5364  010ECA  500F               	movf	___awdiv@divisor+1,w,c
  5365  010ECC  580D               	subwfb	___awdiv@dividend+1,w,c
  5366  010ECE  E305               	bnc	l4649
  5367  010ED0  500E               	movf	___awdiv@divisor,w,c
  5368  010ED2  5E0C               	subwf	___awdiv@dividend,f,c
  5369  010ED4  500F               	movf	___awdiv@divisor+1,w,c
  5370  010ED6  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5371  010ED8  8012               	bsf	___awdiv@quotient,0,c
  5372  010EDA                     l4649:
  5373  010EDA  90D8               	bcf	status,0,c
  5374  010EDC  320F               	rrcf	___awdiv@divisor+1,f,c
  5375  010EDE  320E               	rrcf	___awdiv@divisor,f,c
  5376  010EE0  2E10               	decfsz	___awdiv@counter,f,c
  5377  010EE2  D7EE               	goto	l4641
  5378  010EE4                     l4653:
  5379  010EE4  5011               	movf	___awdiv@sign,w,c
  5380  010EE6  E004               	bz	l4657
  5381  010EE8  6C12               	negf	___awdiv@quotient,c
  5382  010EEA  1E13               	comf	___awdiv@quotient+1,f,c
  5383  010EEC  B0D8               	btfsc	status,0,c
  5384  010EEE  2A13               	incf	___awdiv@quotient+1,f,c
  5385  010EF0                     l4657:
  5386  010EF0  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5387  010EF4  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5388  010EF8  0012               	return	
  5389  010EFA                     __end_of___awdiv:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           intcon2	equ	0xFF1
  5399                           intcon3	equ	0xFF0
  5400                           indf0	equ	0xFEF
  5401                           postinc0	equ	0xFEE
  5402                           fsr0h	equ	0xFEA
  5403                           fsr0l	equ	0xFE9
  5404                           wreg	equ	0xFE8
  5405                           indf1	equ	0xFE7
  5406                           postinc1	equ	0xFE6
  5407                           postdec1	equ	0xFE5
  5408                           fsr1h	equ	0xFE2
  5409                           fsr1l	equ	0xFE1
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           fsr2h	equ	0xFDA
  5414                           fsr2l	equ	0xFD9
  5415                           status	equ	0xFD8
  5416                           
  5417 ;; *************** function _SetDCEPWM3 *****************
  5418 ;; Defined at:
  5419 ;;		line 16 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setdc.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5424 ;; Return value:  Size  Location     Type
  5425 ;;		None               void
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/F
  5430 ;;		On exit  : F/F
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;Total ram usage:        6 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    3
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_motorDrive_init
  5444 ;;		_motorDrive_setSpeeds
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text26
  5449  0113EE                     __ptext26:
  5450                           	opt stack 0
  5451  0113EE                     _SetDCEPWM3:
  5452                           	opt stack 23
  5453                           
  5454                           ;incstack = 0
  5455  0113EE  C006  F008         	movff	SetDCEPWM3@dutycycle,??_SetDCEPWM3
  5456  0113F2  C007  F009         	movff	SetDCEPWM3@dutycycle+1,??_SetDCEPWM3+1
  5457  0113F6  0E06               	movlw	6
  5458  0113F8                     u2455:
  5459  0113F8  90D8               	bcf	status,0,c
  5460  0113FA  3608               	rlcf	??_SetDCEPWM3,f,c
  5461  0113FC  3609               	rlcf	??_SetDCEPWM3+1,f,c
  5462  0113FE  2EE8               	decfsz	wreg,f,c
  5463  011400  D7FB               	goto	u2455
  5464  011402  C008  F00A         	movff	??_SetDCEPWM3,SetDCEPWM3@DCycle
  5465  011406  C009  F00B         	movff	??_SetDCEPWM3+1,SetDCEPWM3@DCycle+1
  5466  01140A  C00B  FF4A         	movff	SetDCEPWM3@DCycle+1,3914	;volatile
  5467  01140E  C00A  F008         	movff	SetDCEPWM3@DCycle,??_SetDCEPWM3
  5468  011412  90D8               	bcf	status,0,c
  5469  011414  3208               	rrcf	??_SetDCEPWM3,f,c
  5470  011416  90D8               	bcf	status,0,c
  5471  011418  3208               	rrcf	??_SetDCEPWM3,f,c
  5472  01141A  0E30               	movlw	48
  5473  01141C  1608               	andwf	??_SetDCEPWM3,f,c
  5474  01141E  010F               	movlb	15	; () banked
  5475  011420  5149               	movf	73,w,b	;volatile
  5476  011422  0BCF               	andlw	207
  5477  011424  1008               	iorwf	??_SetDCEPWM3,w,c
  5478  011426  6F49               	movwf	73,b	;volatile
  5479                           
  5480                           ; BSR set to: 15
  5481  011428  0012               	return	
  5482  01142A                     __end_of_SetDCEPWM3:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           intcon2	equ	0xFF1
  5492                           intcon3	equ	0xFF0
  5493                           indf0	equ	0xFEF
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           indf1	equ	0xFE7
  5499                           postinc1	equ	0xFE6
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _SetDCEPWM1 *****************
  5511 ;; Defined at:
  5512 ;;		line 32 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setdc.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5517 ;; Return value:  Size  Location     Type
  5518 ;;		None               void
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/F
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5526 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5530 ;;Total ram usage:        6 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    3
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_motorDrive_init
  5537 ;;		_motorDrive_setSpeeds
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text27
  5542  01142A                     __ptext27:
  5543                           	opt stack 0
  5544  01142A                     _SetDCEPWM1:
  5545                           	opt stack 23
  5546                           
  5547                           ; BSR set to: 15
  5548                           ;incstack = 0
  5549  01142A  C006  F008         	movff	SetDCEPWM1@dutycycle,??_SetDCEPWM1
  5550  01142E  C007  F009         	movff	SetDCEPWM1@dutycycle+1,??_SetDCEPWM1+1
  5551  011432  0E06               	movlw	6
  5552  011434                     u2445:
  5553  011434  90D8               	bcf	status,0,c
  5554  011436  3608               	rlcf	??_SetDCEPWM1,f,c
  5555  011438  3609               	rlcf	??_SetDCEPWM1+1,f,c
  5556  01143A  2EE8               	decfsz	wreg,f,c
  5557  01143C  D7FB               	goto	u2445
  5558  01143E  C008  F00A         	movff	??_SetDCEPWM1,SetDCEPWM1@DCycle
  5559  011442  C009  F00B         	movff	??_SetDCEPWM1+1,SetDCEPWM1@DCycle+1
  5560  011446  C00B  FFBA         	movff	SetDCEPWM1@DCycle+1,4026	;volatile
  5561  01144A  C00A  F008         	movff	SetDCEPWM1@DCycle,??_SetDCEPWM1
  5562  01144E  90D8               	bcf	status,0,c
  5563  011450  3208               	rrcf	??_SetDCEPWM1,f,c
  5564  011452  90D8               	bcf	status,0,c
  5565  011454  3208               	rrcf	??_SetDCEPWM1,f,c
  5566  011456  0E30               	movlw	48
  5567  011458  1608               	andwf	??_SetDCEPWM1,f,c
  5568  01145A  50B9               	movf	4025,w,c	;volatile
  5569  01145C  0BCF               	andlw	207
  5570  01145E  1008               	iorwf	??_SetDCEPWM1,w,c
  5571  011460  6EB9               	movwf	4025,c	;volatile
  5572  011462  0012               	return	
  5573  011464                     __end_of_SetDCEPWM1:
  5574                           	opt stack 0
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           intcon	equ	0xFF2
  5582                           intcon2	equ	0xFF1
  5583                           intcon3	equ	0xFF0
  5584                           indf0	equ	0xFEF
  5585                           postinc0	equ	0xFEE
  5586                           fsr0h	equ	0xFEA
  5587                           fsr0l	equ	0xFE9
  5588                           wreg	equ	0xFE8
  5589                           indf1	equ	0xFE7
  5590                           postinc1	equ	0xFE6
  5591                           postdec1	equ	0xFE5
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _PS2_readType *****************
  5602 ;; Defined at:
  5603 ;;		line 172 in file "PS2.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      unsigned char 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : F/0
  5614 ;;		On exit  : F/0
  5615 ;;		Unchanged: F/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5621 ;;Total ram usage:        0 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_RCMode
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text28
  5632  0115C6                     __ptext28:
  5633                           	opt stack 0
  5634  0115C6                     _PS2_readType:
  5635                           	opt stack 25
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;PS2.c: 174: if(controller_type == 0x03)
  5639                           
  5640                           ;incstack = 0
  5641  0115C6  5057               	movf	_controller_type,w,c	;volatile
  5642  0115C8  0A03               	xorlw	3
  5643  0115CA  E101               	bnz	l5261
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;PS2.c: 175: return 1;
  5647  0115CC  0C01               	retlw	1
  5648  0115CE                     l5261:
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;PS2.c: 176: else if(controller_type == 0x01)
  5652  0115CE  0457               	decf	_controller_type,w,c	;volatile
  5653  0115D0  E101               	bnz	l5269
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;PS2.c: 177: return 2;
  5657  0115D2  0C02               	retlw	2
  5658  0115D4                     l5269:
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;PS2.c: 178: else if(controller_type == 0x0C)
  5662  0115D4  5057               	movf	_controller_type,w,c	;volatile
  5663  0115D6  0A0C               	xorlw	12
  5664  0115D8  E101               	bnz	l5275
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;PS2.c: 179: return 3;
  5668  0115DA  0C03               	retlw	3
  5669  0115DC                     l5275:
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;PS2.c: 181: return controller_type;
  5673  0115DC  5057               	movf	_controller_type,w,c	;volatile
  5674                           
  5675                           ; BSR set to: 0
  5676  0115DE  0012               	return	
  5677  0115E0                     __end_of_PS2_readType:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           intcon	equ	0xFF2
  5686                           intcon2	equ	0xFF1
  5687                           intcon3	equ	0xFF0
  5688                           indf0	equ	0xFEF
  5689                           postinc0	equ	0xFEE
  5690                           fsr0h	equ	0xFEA
  5691                           fsr0l	equ	0xFE9
  5692                           wreg	equ	0xFE8
  5693                           indf1	equ	0xFE7
  5694                           postinc1	equ	0xFE6
  5695                           postdec1	equ	0xFE5
  5696                           fsr1h	equ	0xFE2
  5697                           fsr1l	equ	0xFE1
  5698                           indf2	equ	0xFDF
  5699                           postinc2	equ	0xFDE
  5700                           postdec2	equ	0xFDD
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8
  5704                           
  5705 ;; *************** function _PS2_init *****************
  5706 ;; Defined at:
  5707 ;;		line 14 in file "PS2.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;		None
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  i               2   77[COMRAM] int 
  5712 ;;  y               2   75[COMRAM] int 
  5713 ;;  temp            9   66[COMRAM] unsigned char [9]
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      unsigned char 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : F/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5726 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;Total ram usage:       13 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    8
  5730 ;; This function calls:
  5731 ;;		_PS2_readGamepad
  5732 ;;		_PS2_sendCommandString
  5733 ;;		_PS2_shiftInOut
  5734 ;;		_delay_us
  5735 ;; This function is called by:
  5736 ;;		_RCMode
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text29
  5741  010C28                     __ptext29:
  5742                           	opt stack 0
  5743  010C28                     _PS2_init:
  5744                           	opt stack 20
  5745                           
  5746                           ;PS2.c: 16: char temp[sizeof(type_read)];
  5747                           ;PS2.c: 18: TRISFbits.TRISF2 = 0;
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;incstack = 0
  5751  010C28  9497               	bcf	3991,2,c	;volatile
  5752                           
  5753                           ;PS2.c: 19: TRISFbits.TRISF3 = 1;
  5754  010C2A  8697               	bsf	3991,3,c	;volatile
  5755                           
  5756                           ;PS2.c: 20: TRISFbits.TRISF5 = 0;
  5757  010C2C  9A97               	bcf	3991,5,c	;volatile
  5758                           
  5759                           ;PS2.c: 21: TRISFbits.TRISF6 = 0;
  5760  010C2E  9C97               	bcf	3991,6,c	;volatile
  5761                           
  5762                           ;PS2.c: 24: PORTFbits.RF2 = 1;
  5763  010C30  8485               	bsf	3973,2,c	;volatile
  5764                           
  5765                           ;PS2.c: 25: PORTFbits.RF5 = 1;
  5766  010C32  8A85               	bsf	3973,5,c	;volatile
  5767                           
  5768                           ;PS2.c: 27: PS2_readGamepad();
  5769  010C34  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5770                           
  5771                           ;PS2.c: 28: PS2_readGamepad();
  5772  010C38  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5773                           
  5774                           ;PS2.c: 30: if(PS2data[1] != 0x41 && PS2data[1] != 0x73 && PS2data[1] != 0x79)
  5775  010C3C  0100               	movlb	0	; () banked
  5776  010C3E  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5777  010C40  0A41               	xorlw	65
  5778  010C42  E007               	bz	l5199
  5779                           
  5780                           ; BSR set to: 0
  5781  010C44  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5782  010C46  0A73               	xorlw	115
  5783  010C48  E004               	bz	l5199
  5784                           
  5785                           ; BSR set to: 0
  5786  010C4A  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5787  010C4C  0A79               	xorlw	121
  5788  010C4E  E001               	bz	l5199
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;PS2.c: 31: {
  5792                           ;PS2.c: 32: return 1;
  5793  010C50  0C01               	retlw	1
  5794  010C52                     l5199:
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;PS2.c: 33: }
  5798                           ;PS2.c: 36: read_delay = 1;
  5799  010C52  0E01               	movlw	1
  5800  010C54  6E59               	movwf	_read_delay,c	;volatile
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;PS2.c: 38: for(int y = 0; y <= 10; y++)
  5804  010C56  6A4C               	clrf	PS2_init@y,c
  5805  010C58  6A4D               	clrf	PS2_init@y+1,c
  5806  010C5A                     l5207:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;PS2.c: 39: {
  5810                           ;PS2.c: 40: PS2_sendCommandString(enter_config, sizeof(enter_config));
  5811  010C5A  0E05               	movlw	5
  5812  010C5C  6E1A               	movwf	PS2_sendCommandString@len,c
  5813  010C5E  0EEA               	movlw	_enter_config& (0+255)
  5814  010C60  ECB6  F089         	call	_PS2_sendCommandString
  5815                           
  5816                           ;PS2.c: 43: delay_us(4);
  5817  010C64  D845               	call	PL24	;call to abstracted procedure
  5818  010C66  EC32  F08A         	call	_delay_us	;wreg free
  5819                           
  5820                           ;PS2.c: 45: PORTFbits.RF2 = 1;
  5821  010C6A  8485               	bsf	3973,2,c	;volatile
  5822                           
  5823                           ;PS2.c: 46: PORTFbits.RF5 = 1;
  5824  010C6C  8A85               	bsf	3973,5,c	;volatile
  5825                           
  5826                           ;PS2.c: 47: PORTFbits.RF6 = 0;
  5827  010C6E  9C85               	bcf	3973,6,c	;volatile
  5828                           
  5829                           ;PS2.c: 49: delay_us(4);
  5830  010C70  D83F               	call	PL24	;call to abstracted procedure
  5831  010C72  EC32  F08A         	call	_delay_us	;wreg free
  5832                           
  5833                           ;PS2.c: 51: for (int i = 0; i<9; i++)
  5834  010C76  6A4E               	clrf	PS2_init@i,c
  5835  010C78  6A4F               	clrf	PS2_init@i+1,c
  5836  010C7A                     l5225:
  5837                           
  5838                           ;PS2.c: 52: {
  5839                           ;PS2.c: 53: temp[i] = PS2_shiftInOut(type_read[i]);
  5840  010C7A  504E               	movf	PS2_init@i,w,c
  5841  010C7C  0F43               	addlw	low PS2_init@temp
  5842  010C7E  6ED9               	movwf	fsr2l,c
  5843  010C80  6ADA               	clrf	fsr2h,c
  5844  010C82  504E               	movf	PS2_init@i,w,c
  5845  010C84  0100               	movlb	0	; () banked
  5846  010C86  0FCF               	addlw	low _type_read	;volatile
  5847  010C88  6EE1               	movwf	fsr1l,c
  5848  010C8A  6AE2               	clrf	fsr1h,c
  5849  010C8C  50E7               	movf	indf1,w,c
  5850  010C8E  EC9C  F088         	call	_PS2_shiftInOut
  5851  010C92  6EDF               	movwf	indf2,c
  5852  010C94  4A4E               	infsnz	PS2_init@i,f,c
  5853  010C96  2A4F               	incf	PS2_init@i+1,f,c
  5854  010C98  504F               	movf	PS2_init@i+1,w,c
  5855  010C9A  0A80               	xorlw	128
  5856  010C9C  0F80               	addlw	-128
  5857  010C9E  0E09               	movlw	9
  5858  010CA0  B4D8               	btfsc	status,2,c
  5859  010CA2  5C4E               	subwf	PS2_init@i,w,c
  5860  010CA4  E3EA               	bnc	l5225
  5861                           
  5862                           ;PS2.c: 54: }
  5863                           ;PS2.c: 56: PORTFbits.RF6 = 1;
  5864  010CA6  8C85               	bsf	3973,6,c	;volatile
  5865                           
  5866                           ;PS2.c: 58: controller_type = temp[3];
  5867  010CA8  C046  F057         	movff	PS2_init@temp+3,_controller_type	;volatile
  5868                           
  5869                           ;PS2.c: 60: PS2_sendCommandString(set_mode, sizeof(set_mode));
  5870  010CAC  0E09               	movlw	9
  5871  010CAE  6E1A               	movwf	PS2_sendCommandString@len,c
  5872  010CB0  0100               	movlb	0	; () banked
  5873  010CB2  0EE1               	movlw	_set_mode& (0+255)
  5874  010CB4  ECB6  F089         	call	_PS2_sendCommandString
  5875                           
  5876                           ;PS2.c: 62: PS2_sendCommandString(exit_config, sizeof(exit_config));
  5877  010CB8  0E09               	movlw	9
  5878  010CBA  6E1A               	movwf	PS2_sendCommandString@len,c
  5879  010CBC  0100               	movlb	0	; () banked
  5880  010CBE  0ED8               	movlw	_exit_config& (0+255)
  5881  010CC0  ECB6  F089         	call	_PS2_sendCommandString
  5882                           
  5883                           ;PS2.c: 64: PS2_readGamepad();
  5884  010CC4  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5885                           
  5886                           ;PS2.c: 66: if(PS2data[1] == 0x73)
  5887  010CC8  0100               	movlb	0	; () banked
  5888  010CCA  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  5889  010CCC  0A73               	xorlw	115
  5890  010CCE  E00F               	bz	l5249
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;PS2.c: 69: if(y == 10)
  5894  010CD0  504C               	movf	PS2_init@y,w,c
  5895  010CD2  0A0A               	xorlw	10
  5896  010CD4  104D               	iorwf	PS2_init@y+1,w,c
  5897  010CD6  E101               	bnz	l5245
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;PS2.c: 70: {
  5901                           ;PS2.c: 71: return 2;
  5902  010CD8  0C02               	retlw	2
  5903  010CDA                     l5245:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;PS2.c: 72: }
  5907                           ;PS2.c: 73: read_delay += 1;
  5908  010CDA  2A59               	incf	_read_delay,f,c	;volatile
  5909  010CDC  4A4C               	infsnz	PS2_init@y,f,c
  5910  010CDE  2A4D               	incf	PS2_init@y+1,f,c
  5911                           
  5912                           ; BSR set to: 0
  5913  010CE0  504D               	movf	PS2_init@y+1,w,c
  5914  010CE2  0A80               	xorlw	128
  5915  010CE4  0F80               	addlw	-128
  5916  010CE6  0E0B               	movlw	11
  5917  010CE8  B4D8               	btfsc	status,2,c
  5918  010CEA  5C4C               	subwf	PS2_init@y,w,c
  5919  010CEC  E3B6               	bnc	l5207
  5920  010CEE                     l5249:
  5921                           
  5922                           ; BSR set to: 0
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;PS2.c: 74: }
  5926                           ;PS2.c: 75: return 0;
  5927  010CEE  0C00               	retlw	0
  5928  010CF0                     __end_of_PS2_init:
  5929                           	opt stack 0
  5930  010CF0                     PL24:
  5931                           	opt stack 20
  5932  010CF0  0E04               	movlw	4
  5933  010CF2  6E06               	movwf	delay_us@x,c
  5934  010CF4  6A07               	clrf	delay_us@x+1,c
  5935  010CF6  6A08               	clrf	delay_us@x+2,c
  5936  010CF8  6A09               	clrf	delay_us@x+3,c
  5937  010CFA  0C00               	retlw	0
  5938  010CFC                     __end_ofPL24:
  5939                           	opt stack 0
  5940                           tblptru	equ	0xFF8
  5941                           tblptrh	equ	0xFF7
  5942                           tblptrl	equ	0xFF6
  5943                           tablat	equ	0xFF5
  5944                           prodh	equ	0xFF4
  5945                           prodl	equ	0xFF3
  5946                           intcon	equ	0xFF2
  5947                           intcon2	equ	0xFF1
  5948                           intcon3	equ	0xFF0
  5949                           indf0	equ	0xFEF
  5950                           postinc0	equ	0xFEE
  5951                           fsr0h	equ	0xFEA
  5952                           fsr0l	equ	0xFE9
  5953                           wreg	equ	0xFE8
  5954                           indf1	equ	0xFE7
  5955                           postinc1	equ	0xFE6
  5956                           postdec1	equ	0xFE5
  5957                           fsr1h	equ	0xFE2
  5958                           fsr1l	equ	0xFE1
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _PS2_readGamepad *****************
  5967 ;; Defined at:
  5968 ;;		line 78 in file "PS2.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  i               2   64[COMRAM] int 
  5973 ;;  i               2   62[COMRAM] int 
  5974 ;;  dword2         12   37[COMRAM] unsigned char [12]
  5975 ;;  dword           9   49[COMRAM] unsigned char [9]
  5976 ;;  temp            4   58[COMRAM] long 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;		None               void
  5979 ;; Registers used:
  5980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5987 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5988 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5989 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5990 ;;Total ram usage:       34 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    7
  5993 ;; This function calls:
  5994 ;;		_PS2_reconfig
  5995 ;;		_PS2_shiftInOut
  5996 ;;		_delay_ms
  5997 ;;		_delay_us
  5998 ;;		_millis
  5999 ;; This function is called by:
  6000 ;;		_RCMode
  6001 ;;		_PS2_init
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           	psect	text30
  6006  0108BE                     __ptext30:
  6007                           	opt stack 0
  6008  0108BE                     _PS2_readGamepad:
  6009                           	opt stack 21
  6010                           
  6011                           ;PS2.c: 80: long temp = millis() - last_read;
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;incstack = 0
  6015  0108BE  EC02  F08B         	call	_millis	;wreg free
  6016  0108C2  C006  F021         	movff	?_millis,??_PS2_readGamepad
  6017  0108C6  C007  F022         	movff	?_millis+1,??_PS2_readGamepad+1
  6018  0108CA  C008  F023         	movff	?_millis+2,??_PS2_readGamepad+2
  6019  0108CE  C009  F024         	movff	?_millis+3,??_PS2_readGamepad+3
  6020  0108D2  0100               	movlb	0	; () banked
  6021  0108D4  51AD               	movf	_last_read& (0+255),w,b	;volatile
  6022  0108D6  5C21               	subwf	??_PS2_readGamepad,w,c
  6023  0108D8  6E3B               	movwf	PS2_readGamepad@temp,c
  6024  0108DA  51AE               	movf	(_last_read+1)& (0+255),w,b	;volatile
  6025  0108DC  5822               	subwfb	??_PS2_readGamepad+1,w,c
  6026  0108DE  6E3C               	movwf	PS2_readGamepad@temp+1,c
  6027  0108E0  51AF               	movf	(_last_read+2)& (0+255),w,b	;volatile
  6028  0108E2  5823               	subwfb	??_PS2_readGamepad+2,w,c
  6029  0108E4  6E3D               	movwf	PS2_readGamepad@temp+2,c
  6030  0108E6  51B0               	movf	(_last_read+3)& (0+255),w,b	;volatile
  6031  0108E8  5824               	subwfb	??_PS2_readGamepad+3,w,c
  6032  0108EA  6E3E               	movwf	PS2_readGamepad@temp+3,c
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;PS2.c: 82: if (temp > 1500)
  6036  0108EC  503E               	movf	PS2_readGamepad@temp+3,w,c
  6037  0108EE  0A80               	xorlw	128
  6038  0108F0  0F80               	addlw	128
  6039  0108F2  E108               	bnz	u2685
  6040  0108F4  0E00               	movlw	0
  6041  0108F6  5C3D               	subwf	PS2_readGamepad@temp+2,w,c
  6042  0108F8  E105               	bnz	u2685
  6043  0108FA  0E05               	movlw	5
  6044  0108FC  5C3C               	subwf	PS2_readGamepad@temp+1,w,c
  6045  0108FE  E102               	bnz	u2685
  6046  010900  0EDD               	movlw	221
  6047  010902  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6048  010904                     u2685:
  6049  010904  B0D8               	btfsc	status,0,c
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;PS2.c: 83: {
  6053                           ;PS2.c: 84: PS2_reconfig();
  6054  010906  ECC4  F08A         	call	_PS2_reconfig	;wreg free
  6055                           
  6056                           ;PS2.c: 85: }
  6057                           ;PS2.c: 87: if(temp < read_delay)
  6058  01090A  C059  F021         	movff	_read_delay,??_PS2_readGamepad	;volatile
  6059  01090E  6A22               	clrf	(??_PS2_readGamepad+1)& (0+255),c
  6060  010910  6A23               	clrf	(??_PS2_readGamepad+2)& (0+255),c
  6061  010912  6A24               	clrf	(??_PS2_readGamepad+3)& (0+255),c
  6062  010914  503E               	movf	PS2_readGamepad@temp+3,w,c
  6063  010916  0A80               	xorlw	128
  6064  010918  6E25               	movwf	(??_PS2_readGamepad+4)& (0+255),c
  6065  01091A  5021               	movf	??_PS2_readGamepad,w,c
  6066  01091C  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6067  01091E  5022               	movf	??_PS2_readGamepad+1,w,c
  6068  010920  583C               	subwfb	PS2_readGamepad@temp+1,w,c
  6069  010922  5023               	movf	??_PS2_readGamepad+2,w,c
  6070  010924  583D               	subwfb	PS2_readGamepad@temp+2,w,c
  6071  010926  5024               	movf	??_PS2_readGamepad+3,w,c
  6072  010928  0A80               	xorlw	128
  6073  01092A  5825               	subwfb	(??_PS2_readGamepad+4)& (0+255),w,c
  6074  01092C  E20E               	bc	l4761
  6075                           
  6076                           ;PS2.c: 88: {
  6077                           ;PS2.c: 89: delay_ms(read_delay - temp);
  6078  01092E  503B               	movf	PS2_readGamepad@temp,w,c
  6079  010930  5C59               	subwf	_read_delay,w,c	;volatile
  6080  010932  6E0A               	movwf	delay_ms@x,c
  6081  010934  503C               	movf	PS2_readGamepad@temp+1,w,c
  6082  010936  6A0B               	clrf	delay_ms@x+1,c
  6083  010938  5A0B               	subwfb	delay_ms@x+1,f,c
  6084  01093A  503D               	movf	PS2_readGamepad@temp+2,w,c
  6085  01093C  6A0C               	clrf	delay_ms@x+2,c
  6086  01093E  5A0C               	subwfb	delay_ms@x+2,f,c
  6087  010940  503E               	movf	PS2_readGamepad@temp+3,w,c
  6088  010942  6A0D               	clrf	delay_ms@x+3,c
  6089  010944  5A0D               	subwfb	delay_ms@x+3,f,c
  6090  010946  EC66  F089         	call	_delay_ms	;wreg free
  6091  01094A                     l4761:
  6092                           
  6093                           ;PS2.c: 90: }
  6094                           ;PS2.c: 92: last_buttons = buttons;
  6095  01094A  C0BD  F0BF         	movff	_buttons,_last_buttons	;volatile
  6096  01094E  C0BE  F0C0         	movff	_buttons+1,_last_buttons+1	;volatile
  6097                           
  6098                           ;PS2.c: 94: PORTFbits.RF2 = 1;
  6099  010952  8485               	bsf	3973,2,c	;volatile
  6100                           
  6101                           ;PS2.c: 95: PORTFbits.RF5 = 1;
  6102  010954  8A85               	bsf	3973,5,c	;volatile
  6103                           
  6104                           ;PS2.c: 96: PORTFbits.RF6 = 0;
  6105  010956  9C85               	bcf	3973,6,c	;volatile
  6106                           
  6107                           ;PS2.c: 98: delay_us(4);
  6108  010958  EC78  F086         	call	PL24	;call to abstracted procedure
  6109  01095C  EC32  F08A         	call	_delay_us	;wreg free
  6110                           
  6111                           ;PS2.c: 101: char dword[9] = {0x01,0x42,0,0,0x00,0,0,0,0};
  6112  010960  EE20  F0C6         	lfsr	2,PS2_readGamepad@F16091
  6113  010964  EE10  F032         	lfsr	1,PS2_readGamepad@dword
  6114  010968  0E09               	movlw	9
  6115  01096A                     u2701:
  6116  01096A  CFDE FFE6          	movff	postinc2,postinc1
  6117  01096E  2EE8               	decfsz	wreg,f,c
  6118  010970  D7FC               	goto	u2701
  6119                           
  6120                           ;PS2.c: 102: char dword2[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  6121  010972  EE20  F026         	lfsr	2,PS2_readGamepad@dword2
  6122  010976  0E0C               	movlw	12
  6123  010978                     u2711:
  6124  010978  6ADE               	clrf	postinc2,c
  6125  01097A  2EE8               	decfsz	wreg,f,c
  6126  01097C  D7FD               	goto	u2711
  6127                           
  6128                           ;PS2.c: 105: for (int i = 0; i<9; i++)
  6129  01097E  6A3F               	clrf	PS2_readGamepad@i,c
  6130  010980  6A40               	clrf	PS2_readGamepad@i+1,c
  6131  010982                     l4779:
  6132                           
  6133                           ;PS2.c: 106: {
  6134                           ;PS2.c: 107: PS2data[i] = PS2_shiftInOut(dword[i]);
  6135  010982  503F               	movf	PS2_readGamepad@i,w,c
  6136  010984  0100               	movlb	0	; () banked
  6137  010986  0F98               	addlw	low _PS2data	;volatile
  6138  010988  6ED9               	movwf	fsr2l,c
  6139  01098A  6ADA               	clrf	fsr2h,c
  6140  01098C  503F               	movf	PS2_readGamepad@i,w,c
  6141  01098E  0F32               	addlw	low PS2_readGamepad@dword
  6142  010990  6EE1               	movwf	fsr1l,c
  6143  010992  6AE2               	clrf	fsr1h,c
  6144  010994  50E7               	movf	indf1,w,c
  6145  010996  EC9C  F088         	call	_PS2_shiftInOut
  6146  01099A  6EDF               	movwf	indf2,c
  6147  01099C  4A3F               	infsnz	PS2_readGamepad@i,f,c
  6148  01099E  2A40               	incf	PS2_readGamepad@i+1,f,c
  6149  0109A0  5040               	movf	PS2_readGamepad@i+1,w,c
  6150  0109A2  0A80               	xorlw	128
  6151  0109A4  0F80               	addlw	-128
  6152  0109A6  0E09               	movlw	9
  6153  0109A8  B4D8               	btfsc	status,2,c
  6154  0109AA  5C3F               	subwf	PS2_readGamepad@i,w,c
  6155  0109AC  E3EA               	bnc	l4779
  6156                           
  6157                           ;PS2.c: 108: }
  6158                           ;PS2.c: 110: if(PS2data[1] == 0x79)
  6159  0109AE  0100               	movlb	0	; () banked
  6160  0109B0  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6161  0109B2  0A79               	xorlw	121
  6162  0109B4  E118               	bnz	l916
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;PS2.c: 111: {
  6166                           ;PS2.c: 112: for (int i = 0; i<12; i++)
  6167  0109B6  6A41               	clrf	PS2_readGamepad@i_2534,c
  6168  0109B8  6A42               	clrf	PS2_readGamepad@i_2534+1,c
  6169  0109BA                     l4793:
  6170                           
  6171                           ;PS2.c: 113: {
  6172                           ;PS2.c: 114: PS2data[i+9] = PS2_shiftInOut(dword2[i]);
  6173  0109BA  5041               	movf	PS2_readGamepad@i_2534,w,c
  6174  0109BC  0100               	movlb	0	; () banked
  6175  0109BE  0FA1               	addlw	low (_PS2data+9)	;volatile
  6176  0109C0  6ED9               	movwf	fsr2l,c
  6177  0109C2  6ADA               	clrf	fsr2h,c
  6178  0109C4  5041               	movf	PS2_readGamepad@i_2534,w,c
  6179  0109C6  0F26               	addlw	low PS2_readGamepad@dword2
  6180  0109C8  6EE1               	movwf	fsr1l,c
  6181  0109CA  6AE2               	clrf	fsr1h,c
  6182  0109CC  50E7               	movf	indf1,w,c
  6183  0109CE  EC9C  F088         	call	_PS2_shiftInOut
  6184  0109D2  6EDF               	movwf	indf2,c
  6185  0109D4  4A41               	infsnz	PS2_readGamepad@i_2534,f,c
  6186  0109D6  2A42               	incf	PS2_readGamepad@i_2534+1,f,c
  6187  0109D8  5042               	movf	PS2_readGamepad@i_2534+1,w,c
  6188  0109DA  0A80               	xorlw	128
  6189  0109DC  0F80               	addlw	-128
  6190  0109DE  0E0C               	movlw	12
  6191  0109E0  B4D8               	btfsc	status,2,c
  6192  0109E2  5C41               	subwf	PS2_readGamepad@i_2534,w,c
  6193  0109E4  E3EA               	bnc	l4793
  6194  0109E6                     l916:
  6195                           
  6196                           ;PS2.c: 115: }
  6197                           ;PS2.c: 116: }
  6198                           ;PS2.c: 118: PORTFbits.RF6 = 1;
  6199  0109E6  8C85               	bsf	3973,6,c	;volatile
  6200                           
  6201                           ;PS2.c: 120: buttons = *(unsigned int*)(PS2data+3);
  6202  0109E8  0100               	movlb	0	; () banked
  6203  0109EA  EE20  F09B         	lfsr	2,_PS2data+3	;volatile
  6204  0109EE  CFDE F0BD          	movff	postinc2,_buttons	;volatile
  6205  0109F2  CFDD F0BE          	movff	postdec2,_buttons+1	;volatile
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;PS2.c: 121: last_read = millis();
  6209  0109F6  EC02  F08B         	call	_millis	;wreg free
  6210  0109FA  C006  F0AD         	movff	?_millis,_last_read	;volatile
  6211  0109FE  C007  F0AE         	movff	?_millis+1,_last_read+1	;volatile
  6212  010A02  C008  F0AF         	movff	?_millis+2,_last_read+2	;volatile
  6213  010A06  C009  F0B0         	movff	?_millis+3,_last_read+3	;volatile
  6214  010A0A  0012               	return	
  6215  010A0C                     __end_of_PS2_readGamepad:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodh	equ	0xFF4
  6222                           prodl	equ	0xFF3
  6223                           intcon	equ	0xFF2
  6224                           intcon2	equ	0xFF1
  6225                           intcon3	equ	0xFF0
  6226                           indf0	equ	0xFEF
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           indf1	equ	0xFE7
  6232                           postinc1	equ	0xFE6
  6233                           postdec1	equ	0xFE5
  6234                           fsr1h	equ	0xFE2
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _PS2_reconfig *****************
  6244 ;; Defined at:
  6245 ;;		line 124 in file "PS2.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : F/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    6
  6266 ;; This function calls:
  6267 ;;		_PS2_sendCommandString
  6268 ;; This function is called by:
  6269 ;;		_PS2_readGamepad
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text31
  6274  011588                     __ptext31:
  6275                           	opt stack 0
  6276  011588                     _PS2_reconfig:
  6277                           	opt stack 21
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;PS2.c: 126: PS2_sendCommandString(enter_config, sizeof(enter_config));
  6281                           
  6282                           ;incstack = 0
  6283  011588  0E05               	movlw	5
  6284  01158A  6E1A               	movwf	PS2_sendCommandString@len,c
  6285  01158C  0EEA               	movlw	_enter_config& (0+255)
  6286  01158E  ECB6  F089         	call	_PS2_sendCommandString
  6287                           
  6288                           ;PS2.c: 127: PS2_sendCommandString(set_mode, sizeof(set_mode));
  6289  011592  0E09               	movlw	9
  6290  011594  6E1A               	movwf	PS2_sendCommandString@len,c
  6291  011596  0100               	movlb	0	; () banked
  6292  011598  0EE1               	movlw	_set_mode& (0+255)
  6293  01159A  ECB6  F089         	call	_PS2_sendCommandString
  6294                           
  6295                           ;PS2.c: 128: PS2_sendCommandString(exit_config, sizeof(exit_config));
  6296  01159E  0E09               	movlw	9
  6297  0115A0  6E1A               	movwf	PS2_sendCommandString@len,c
  6298  0115A2  0100               	movlb	0	; () banked
  6299  0115A4  0ED8               	movlw	_exit_config& (0+255)
  6300  0115A6  EFB6  F089         	goto	_PS2_sendCommandString
  6301  0115AA                     __end_of_PS2_reconfig:
  6302                           	opt stack 0
  6303                           tblptru	equ	0xFF8
  6304                           tblptrh	equ	0xFF7
  6305                           tblptrl	equ	0xFF6
  6306                           tablat	equ	0xFF5
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           intcon	equ	0xFF2
  6310                           intcon2	equ	0xFF1
  6311                           intcon3	equ	0xFF0
  6312                           indf0	equ	0xFEF
  6313                           postinc0	equ	0xFEE
  6314                           fsr0h	equ	0xFEA
  6315                           fsr0l	equ	0xFE9
  6316                           wreg	equ	0xFE8
  6317                           indf1	equ	0xFE7
  6318                           postinc1	equ	0xFE6
  6319                           postdec1	equ	0xFE5
  6320                           fsr1h	equ	0xFE2
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _PS2_sendCommandString *****************
  6330 ;; Defined at:
  6331 ;;		line 131 in file "PS2.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  string          1    wreg     PTR unsigned char 
  6334 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6335 ;;  len             1   25[COMRAM] unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  string          1   31[COMRAM] PTR unsigned char 
  6338 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6339 ;;  y               2   29[COMRAM] int 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;		None               void
  6342 ;; Registers used:
  6343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : F/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6349 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6353 ;;Total ram usage:        7 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    5
  6356 ;; This function calls:
  6357 ;;		_PS2_shiftInOut
  6358 ;;		_delay_ms
  6359 ;; This function is called by:
  6360 ;;		_PS2_init
  6361 ;;		_PS2_reconfig
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text32
  6366  01136C                     __ptext32:
  6367                           	opt stack 0
  6368  01136C                     _PS2_sendCommandString:
  6369                           	opt stack 21
  6370                           
  6371                           ;incstack = 0
  6372                           ;PS2_sendCommandString@string stored from wreg
  6373  01136C  6E20               	movwf	PS2_sendCommandString@string,c
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;PS2.c: 133: PORTFbits.RF6 = 0;
  6377  01136E  9C85               	bcf	3973,6,c	;volatile
  6378                           
  6379                           ;PS2.c: 134: for (int y=0; y < len; y++)
  6380  011370  6A1E               	clrf	PS2_sendCommandString@y,c
  6381  011372  6A1F               	clrf	PS2_sendCommandString@y+1,c
  6382  011374  D009               	goto	l4451
  6383  011376                     l4447:
  6384                           
  6385                           ;PS2.c: 135: {
  6386                           ;PS2.c: 136: PS2_shiftInOut(string[y]);
  6387  011376  5020               	movf	PS2_sendCommandString@string,w,c
  6388  011378  241E               	addwf	PS2_sendCommandString@y,w,c
  6389  01137A  6ED9               	movwf	fsr2l,c
  6390  01137C  6ADA               	clrf	fsr2h,c
  6391  01137E  50DF               	movf	indf2,w,c
  6392  011380  EC9C  F088         	call	_PS2_shiftInOut
  6393  011384  4A1E               	infsnz	PS2_sendCommandString@y,f,c
  6394  011386  2A1F               	incf	PS2_sendCommandString@y+1,f,c
  6395  011388                     l4451:
  6396  011388  501A               	movf	PS2_sendCommandString@len,w,c
  6397  01138A  6E1B               	movwf	??_PS2_sendCommandString& (0+255),c
  6398  01138C  6A1C               	clrf	(??_PS2_sendCommandString+1)& (0+255),c
  6399  01138E  501F               	movf	PS2_sendCommandString@y+1,w,c
  6400  011390  0A80               	xorlw	128
  6401  011392  6E1D               	movwf	(??_PS2_sendCommandString+2)& (0+255),c
  6402  011394  501B               	movf	??_PS2_sendCommandString,w,c
  6403  011396  5C1E               	subwf	PS2_sendCommandString@y,w,c
  6404  011398  501C               	movf	??_PS2_sendCommandString+1,w,c
  6405  01139A  0A80               	xorlw	128
  6406  01139C  581D               	subwfb	(??_PS2_sendCommandString+2)& (0+255),w,c
  6407  01139E  E3EB               	bnc	l4447
  6408                           
  6409                           ;PS2.c: 137: }
  6410                           ;PS2.c: 139: PORTFbits.RF6 = 1;
  6411  0113A0  8C85               	bsf	3973,6,c	;volatile
  6412                           
  6413                           ;PS2.c: 140: delay_ms(read_delay);
  6414  0113A2  5059               	movf	_read_delay,w,c	;volatile
  6415  0113A4  6E0A               	movwf	delay_ms@x,c
  6416  0113A6  6A0B               	clrf	delay_ms@x+1,c
  6417  0113A8  6A0C               	clrf	delay_ms@x+2,c
  6418  0113AA  6A0D               	clrf	delay_ms@x+3,c
  6419  0113AC  EF66  F089         	goto	_delay_ms	;wreg free
  6420  0113B0                     __end_of_PS2_sendCommandString:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           intcon3	equ	0xFF0
  6431                           indf0	equ	0xFEF
  6432                           postinc0	equ	0xFEE
  6433                           fsr0h	equ	0xFEA
  6434                           fsr0l	equ	0xFE9
  6435                           wreg	equ	0xFE8
  6436                           indf1	equ	0xFE7
  6437                           postinc1	equ	0xFE6
  6438                           postdec1	equ	0xFE5
  6439                           fsr1h	equ	0xFE2
  6440                           fsr1l	equ	0xFE1
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _PS2_shiftInOut *****************
  6449 ;; Defined at:
  6450 ;;		line 143 in file "PS2.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  byte            1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  byte            1   11[COMRAM] unsigned char 
  6455 ;;  i               1   13[COMRAM] unsigned char 
  6456 ;;  tmp             1   12[COMRAM] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      unsigned char 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6467 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6469 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6470 ;;Total ram usage:        5 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    4
  6473 ;; This function calls:
  6474 ;;		_delay_us
  6475 ;; This function is called by:
  6476 ;;		_PS2_init
  6477 ;;		_PS2_readGamepad
  6478 ;;		_PS2_sendCommandString
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text33
  6483  011138                     __ptext33:
  6484                           	opt stack 0
  6485  011138                     _PS2_shiftInOut:
  6486                           	opt stack 23
  6487                           
  6488                           ;incstack = 0
  6489                           ;PS2_shiftInOut@byte stored from wreg
  6490  011138  6E0C               	movwf	PS2_shiftInOut@byte,c
  6491                           
  6492                           ;PS2.c: 145: unsigned char tmp = 0;
  6493  01113A  6A0D               	clrf	PS2_shiftInOut@tmp,c
  6494                           
  6495                           ;PS2.c: 146: for(unsigned char i = 0; i < 8; i++)
  6496  01113C  6A0E               	clrf	PS2_shiftInOut@i,c
  6497  01113E                     l4425:
  6498                           
  6499                           ;PS2.c: 147: {
  6500                           ;PS2.c: 148: if((byte & (1<<i)))
  6501  01113E  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6502  011142  0E01               	movlw	1
  6503  011144  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6504  011146  2A0A               	incf	??_PS2_shiftInOut,f,c
  6505  011148  D002               	goto	u2194
  6506  01114A                     u2195:
  6507  01114A  90D8               	bcf	status,0,c
  6508  01114C  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6509  01114E                     u2194:
  6510  01114E  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6511  011150  D7FC               	goto	u2195
  6512  011152  500B               	movf	??_PS2_shiftInOut+1,w,c
  6513  011154  140C               	andwf	PS2_shiftInOut@byte,w,c
  6514  011156  E002               	bz	l933
  6515                           
  6516                           ;PS2.c: 149: {
  6517                           ;PS2.c: 150: PORTFbits.RF2 = 1;
  6518  011158  8485               	bsf	3973,2,c	;volatile
  6519                           
  6520                           ;PS2.c: 151: }
  6521  01115A  D001               	goto	l934
  6522  01115C                     l933:
  6523                           
  6524                           ;PS2.c: 152: else
  6525                           ;PS2.c: 153: {
  6526                           ;PS2.c: 154: PORTFbits.RF2 = 0;
  6527  01115C  9485               	bcf	3973,2,c	;volatile
  6528  01115E                     l934:
  6529                           
  6530                           ;PS2.c: 155: }
  6531                           ;PS2.c: 157: PORTFbits.RF5 = 0;
  6532  01115E  9A85               	bcf	3973,5,c	;volatile
  6533                           
  6534                           ;PS2.c: 158: delay_us(5);
  6535  011160  0E05               	movlw	5
  6536  011162  6E06               	movwf	delay_us@x,c
  6537  011164  0E00               	movlw	0
  6538  011166  6A07               	clrf	delay_us@x+1,c
  6539  011168  6A08               	clrf	delay_us@x+2,c
  6540  01116A  6A09               	clrf	delay_us@x+3,c
  6541  01116C  EC32  F08A         	call	_delay_us	;wreg free
  6542                           
  6543                           ;PS2.c: 160: if(PORTFbits.RF3 == 1)
  6544  011170  A685               	btfss	3973,3,c	;volatile
  6545  011172  D00C               	goto	l4435
  6546                           
  6547                           ;PS2.c: 161: {
  6548                           ;PS2.c: 162: tmp |= (0x1 << i);;
  6549  011174  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6550  011178  0E01               	movlw	1
  6551  01117A  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6552  01117C  2A0A               	incf	??_PS2_shiftInOut,f,c
  6553  01117E  D002               	goto	u2224
  6554  011180                     u2225:
  6555  011180  90D8               	bcf	status,0,c
  6556  011182  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6557  011184                     u2224:
  6558  011184  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6559  011186  D7FC               	goto	u2225
  6560  011188  500B               	movf	??_PS2_shiftInOut+1,w,c
  6561  01118A  120D               	iorwf	PS2_shiftInOut@tmp,f,c
  6562  01118C                     l4435:
  6563                           
  6564                           ;PS2.c: 163: }
  6565                           ;PS2.c: 165: PORTFbits.RF5 = 1;
  6566  01118C  8A85               	bsf	3973,5,c	;volatile
  6567  01118E  2A0E               	incf	PS2_shiftInOut@i,f,c
  6568  011190  0E07               	movlw	7
  6569  011192  640E               	cpfsgt	PS2_shiftInOut@i,c
  6570  011194  D7D4               	goto	l4425
  6571                           
  6572                           ;PS2.c: 166: }
  6573                           ;PS2.c: 167: PORTFbits.RF2 = 1;
  6574  011196  8485               	bsf	3973,2,c	;volatile
  6575                           
  6576                           ;PS2.c: 168: delay_us(4);
  6577  011198  EC78  F086         	call	PL24	;call to abstracted procedure
  6578  01119C  EC32  F08A         	call	_delay_us	;wreg free
  6579                           
  6580                           ;PS2.c: 169: return tmp;
  6581  0111A0  500D               	movf	PS2_shiftInOut@tmp,w,c
  6582  0111A2  0012               	return	
  6583  0111A4                     __end_of_PS2_shiftInOut:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           intcon3	equ	0xFF0
  6594                           indf0	equ	0xFEF
  6595                           postinc0	equ	0xFEE
  6596                           fsr0h	equ	0xFEA
  6597                           fsr0l	equ	0xFE9
  6598                           wreg	equ	0xFE8
  6599                           indf1	equ	0xFE7
  6600                           postinc1	equ	0xFE6
  6601                           postdec1	equ	0xFE5
  6602                           fsr1h	equ	0xFE2
  6603                           fsr1l	equ	0xFE1
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           fsr2h	equ	0xFDA
  6608                           fsr2l	equ	0xFD9
  6609                           status	equ	0xFD8
  6610                           
  6611 ;; *************** function _PS2_analog *****************
  6612 ;; Defined at:
  6613 ;;		line 242 in file "PS2.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  button          1    wreg     unsigned char 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  button          1    5[COMRAM] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      unsigned char 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : F/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6630 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6631 ;;Total ram usage:        1 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    3
  6634 ;; This function calls:
  6635 ;;		Nothing
  6636 ;; This function is called by:
  6637 ;;		_RCMode
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text34
  6642  011626                     __ptext34:
  6643                           	opt stack 0
  6644  011626                     _PS2_analog:
  6645                           	opt stack 25
  6646                           
  6647                           ;incstack = 0
  6648                           ;PS2_analog@button stored from wreg
  6649  011626  6E06               	movwf	PS2_analog@button,c
  6650                           
  6651                           ;PS2.c: 244: return PS2data[button];
  6652  011628  5006               	movf	PS2_analog@button,w,c
  6653  01162A  0100               	movlb	0	; () banked
  6654  01162C  0F98               	addlw	low _PS2data	;volatile
  6655  01162E  6ED9               	movwf	fsr2l,c
  6656  011630  6ADA               	clrf	fsr2h,c
  6657  011632  50DF               	movf	indf2,w,c
  6658                           
  6659                           ; BSR set to: 0
  6660  011634  0012               	return	
  6661  011636                     __end_of_PS2_analog:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon2	equ	0xFF1
  6671                           intcon3	equ	0xFF0
  6672                           indf0	equ	0xFEF
  6673                           postinc0	equ	0xFEE
  6674                           fsr0h	equ	0xFEA
  6675                           fsr0l	equ	0xFE9
  6676                           wreg	equ	0xFE8
  6677                           indf1	equ	0xFE7
  6678                           postinc1	equ	0xFE6
  6679                           postdec1	equ	0xFE5
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _LCD_printString *****************
  6690 ;; Defined at:
  6691 ;;		line 312 in file "LCD.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  x               1    wreg     unsigned char 
  6694 ;;  y               1   33[COMRAM] unsigned char 
  6695 ;;  input           2   34[COMRAM] PTR unsigned char 
  6696 ;;		 -> STR_22(7), STR_21(13), STR_14(17), STR_13(15), 
  6697 ;;		 -> STR_12(18), STR_11(16), STR_10(15), STR_9(17), 
  6698 ;;		 -> STR_8(15), STR_7(18), STR_6(17), STR_5(16), 
  6699 ;;		 -> STR_4(18), STR_3(18), LCD_printBin@string(9), LCD_printVal@temp(3), 
  6700 ;;		 -> LCD_printChar@string(2), 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  x               1   40[BANK0 ] unsigned char 
  6703 ;;  tempString     20    0[BANK0 ] unsigned char [20]
  6704 ;;  val             2   41[BANK0 ] int 
  6705 ;;  tempString      2   43[BANK0 ] unsigned char [2]
  6706 ;;  i               2   48[BANK0 ] int 
  6707 ;;  i               2   46[BANK0 ] int 
  6708 ;;  string         20   20[BANK0 ] unsigned char [20]
  6709 ;;  aptr            1   45[BANK0 ] PTR void [1]
  6710 ;;		 -> ?_LCD_printString(0), 
  6711 ;; Return value:  Size  Location     Type
  6712 ;;		None               void
  6713 ;; Registers used:
  6714 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : F/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6720 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6721 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6723 ;;      Totals:         9      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6724 ;;Total ram usage:       59 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    6
  6727 ;; This function calls:
  6728 ;;		_LCD_placeCursor
  6729 ;;		_delay_ms
  6730 ;;		_delay_us
  6731 ;;		_sprintf
  6732 ;;		_strcat
  6733 ;; This function is called by:
  6734 ;;		_selfTest
  6735 ;;		_wanderMode
  6736 ;;		_competitionMode
  6737 ;;		_RCMode
  6738 ;;		_main
  6739 ;;		_fft_init
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text35
  6744  010000                     __ptext35:
  6745                           	opt stack 0
  6746  010000                     _LCD_printString:
  6747                           	opt stack 22
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;incstack = 0
  6751                           ;LCD_printString@x stored from wreg
  6752  010000  0100               	movlb	0	; () banked
  6753  010002  6F88               	movwf	LCD_printString@x& (0+255),b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;LCD.c: 314: char string[20] = "\0";
  6757  010004  EE20  F074         	lfsr	2,LCD_printString@string
  6758  010008  0E14               	movlw	20
  6759  01000A                     u2521:
  6760  01000A  6ADE               	clrf	postinc2,c
  6761  01000C  2EE8               	decfsz	wreg,f,c
  6762  01000E  D7FD               	goto	u2521
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;LCD.c: 316: va_list aptr;
  6766                           ;LCD.c: 317: *aptr = __va_start();
  6767  010010  0E25               	movlw	low (?_LCD_printString+3)
  6768  010012  6F8D               	movwf	LCD_printString@aptr& (0+255),b
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;LCD.c: 319: LCD_placeCursor(x,y);
  6772  010014  C022  F01A         	movff	LCD_printString@y,LCD_placeCursor@y
  6773  010018  5188               	movf	LCD_printString@x& (0+255),w,b
  6774  01001A  ECAD  F082         	call	_LCD_placeCursor
  6775                           
  6776                           ;LCD.c: 322: for(int i = 0; input[i] != '\0' && i < 200; i++)
  6777  01001E  0100               	movlb	0	; () banked
  6778  010020  6B8E               	clrf	LCD_printString@i& (0+255),b
  6779  010022  6B8F               	clrf	(LCD_printString@i+1)& (0+255),b
  6780  010024  D07B               	goto	l4693
  6781  010026                     l4669:
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;LCD.c: 323: {
  6785                           ;LCD.c: 324: if(input[i] == '%')
  6786  010026  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6787  01002A  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6788  01002E  D998               	call	PL12	;call to abstracted procedure
  6789  010030  64F7               	cpfsgt	tblptrh,c
  6790  010032  D003               	bra	u2537
  6791  010034  0008               	tblrd		*
  6792  010036  50F5               	movf	tablat,w,c
  6793  010038  D005               	bra	u2530
  6794  01003A                     u2537:
  6795  01003A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6796  01003E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6797  010042  50EF               	movf	indf0,w,c
  6798  010044                     u2530:
  6799  010044  0A25               	xorlw	37
  6800  010046  E14C               	bnz	l4685
  6801                           
  6802                           ;LCD.c: 325: {
  6803                           ;LCD.c: 326: if(input[i+1] == '%')
  6804  010048  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6805  01004C  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6806  010050  0100               	movlb	0	; () banked
  6807  010052  518E               	movf	LCD_printString@i& (0+255),w,b
  6808  010054  2629               	addwf	??_LCD_printString,f,c
  6809  010056  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  6810  010058  222A               	addwfc	??_LCD_printString+1,f,c
  6811  01005A  2A29               	incf	??_LCD_printString,f,c
  6812  01005C  0E00               	movlw	0
  6813  01005E  222A               	addwfc	??_LCD_printString+1,f,c
  6814  010060  C029  FFF6         	movff	??_LCD_printString,tblptrl
  6815  010064  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  6816  010068  0E00               	movlw	low (__mediumconst shr (0+16))
  6817  01006A  6EF8               	movwf	tblptru,c
  6818  01006C  0E0D               	movlw	(high __ramtop+-1)
  6819  01006E  64F7               	cpfsgt	tblptrh,c
  6820  010070  D003               	bra	u2557
  6821  010072  0008               	tblrd		*
  6822  010074  50F5               	movf	tablat,w,c
  6823  010076  D005               	bra	u2550
  6824  010078                     u2557:
  6825  010078  CFF6 FFE9          	movff	tblptrl,fsr0l
  6826  01007C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6827  010080  50EF               	movf	indf0,w,c
  6828  010082                     u2550:
  6829  010082  0A25               	xorlw	37
  6830  010084  E10B               	bnz	l4675
  6831                           
  6832                           ;LCD.c: 327: {
  6833                           ;LCD.c: 328: strcat(string, "%");
  6834  010086  6A07               	clrf	strcat@to+1,c
  6835  010088  0100               	movlb	0	; () banked
  6836  01008A  0E74               	movlw	low LCD_printString@string
  6837  01008C  6E06               	movwf	strcat@to,c
  6838  01008E  0EFF               	movlw	high STR_1
  6839  010090  6E09               	movwf	strcat@from+1,c
  6840  010092  0EFC               	movlw	low STR_1
  6841  010094  6E08               	movwf	strcat@from,c
  6842  010096  EC3A  F089         	call	_strcat	;wreg free
  6843                           
  6844                           ;LCD.c: 329: }
  6845  01009A  D01E               	goto	l4683
  6846  01009C                     l4675:
  6847                           
  6848                           ;LCD.c: 330: else
  6849                           ;LCD.c: 331: {
  6850                           ;LCD.c: 332: int val = (*(int *)__va_arg((*(int **)aptr), (int)0));
  6851  01009C  0100               	movlb	0	; () banked
  6852  01009E  518D               	movf	LCD_printString@aptr& (0+255),w,b
  6853  0100A0  6ED9               	movwf	fsr2l,c
  6854  0100A2  6ADA               	clrf	fsr2h,c
  6855  0100A4  CFDE F089          	movff	postinc2,LCD_printString@val
  6856  0100A8  CFDD F08A          	movff	postdec2,LCD_printString@val+1
  6857                           
  6858                           ; BSR set to: 0
  6859  0100AC  0E02               	movlw	2
  6860  0100AE  278D               	addwf	LCD_printString@aptr& (0+255),f,b
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;LCD.c: 333: char tempString[20];
  6864                           ;LCD.c: 334: sprintf(tempString,"%i",val);
  6865  0100B0  0EFF               	movlw	high (STR_8+12)
  6866  0100B2  6E13               	movwf	sprintf@f+1,c
  6867  0100B4  0EC9               	movlw	low (STR_8+12)
  6868  0100B6  6E12               	movwf	sprintf@f,c
  6869  0100B8  C089  F014         	movff	LCD_printString@val,?_sprintf+2
  6870  0100BC  C08A  F015         	movff	LCD_printString@val+1,?_sprintf+3
  6871  0100C0  0E60               	movlw	LCD_printString@tempString& (0+255)
  6872  0100C2  EC06  F085         	call	_sprintf
  6873                           
  6874                           ;LCD.c: 335: strcat(string, tempString);
  6875  0100C6  6A07               	clrf	strcat@to+1,c
  6876  0100C8  0100               	movlb	0	; () banked
  6877  0100CA  0E74               	movlw	low LCD_printString@string
  6878  0100CC  6E06               	movwf	strcat@to,c
  6879  0100CE  6A09               	clrf	strcat@from+1,c
  6880  0100D0  0E60               	movlw	low LCD_printString@tempString
  6881  0100D2  6E08               	movwf	strcat@from,c
  6882  0100D4  EC3A  F089         	call	_strcat	;wreg free
  6883  0100D8                     l4683:
  6884                           
  6885                           ;LCD.c: 336: }
  6886                           ;LCD.c: 337: i++;
  6887  0100D8  0100               	movlb	0	; () banked
  6888  0100DA  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  6889  0100DC  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  6890                           
  6891                           ;LCD.c: 338: }
  6892  0100DE  D01B               	goto	l4691
  6893  0100E0                     l4685:
  6894                           
  6895                           ;LCD.c: 339: else
  6896                           ;LCD.c: 340: {
  6897                           ;LCD.c: 341: char tempString[2];
  6898                           ;LCD.c: 342: tempString[0] = input[i];
  6899  0100E0  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6900  0100E4  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6901  0100E8  0100               	movlb	0	; () banked
  6902  0100EA  D93A               	call	PL12	;call to abstracted procedure
  6903  0100EC  64F7               	cpfsgt	tblptrh,c
  6904  0100EE  D003               	bra	u2577
  6905  0100F0  0008               	tblrd		*
  6906  0100F2  50F5               	movf	tablat,w,c
  6907  0100F4  D005               	bra	u2570
  6908  0100F6                     u2577:
  6909  0100F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  6910  0100FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  6911  0100FE  50EF               	movf	indf0,w,c
  6912  010100                     u2570:
  6913  010100  0100               	movlb	0	; () banked
  6914  010102  6F8B               	movwf	LCD_printString@tempString_590& (0+255),b
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;LCD.c: 343: tempString[1] = '\0';
  6918  010104  6B8C               	clrf	(LCD_printString@tempString_590+1)& (0+255),b
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;LCD.c: 344: strcat(string,tempString);
  6922  010106  6A07               	clrf	strcat@to+1,c
  6923  010108  0E74               	movlw	low LCD_printString@string
  6924  01010A  6E06               	movwf	strcat@to,c
  6925  01010C  6A09               	clrf	strcat@from+1,c
  6926  01010E  0E8B               	movlw	low LCD_printString@tempString_590
  6927  010110  6E08               	movwf	strcat@from,c
  6928  010112  EC3A  F089         	call	_strcat	;wreg free
  6929  010116                     l4691:
  6930  010116  0100               	movlb	0	; () banked
  6931  010118  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  6932  01011A  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  6933  01011C                     l4693:
  6934                           
  6935                           ; BSR set to: 0
  6936  01011C  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  6937  010120  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  6938  010124  D91D               	call	PL12	;call to abstracted procedure
  6939  010126  64F7               	cpfsgt	tblptrh,c
  6940  010128  D003               	bra	u2587
  6941  01012A  0008               	tblrd		*
  6942  01012C  50F5               	movf	tablat,w,c
  6943  01012E  D005               	bra	u2580
  6944  010130                     u2587:
  6945  010130  CFF6 FFE9          	movff	tblptrl,fsr0l
  6946  010134  CFF7 FFEA          	movff	tblptrh,fsr0h
  6947  010138  50EF               	movf	indf0,w,c
  6948  01013A                     u2580:
  6949  01013A  0900               	iorlw	0
  6950  01013C  E009               	bz	l108
  6951  01013E  0100               	movlb	0	; () banked
  6952  010140  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  6953  010142  0A80               	xorlw	128
  6954  010144  0F80               	addlw	-128
  6955  010146  0EC8               	movlw	200
  6956  010148  B4D8               	btfsc	status,2,c
  6957  01014A  5D8E               	subwf	LCD_printString@i& (0+255),w,b
  6958  01014C  E201 D76B          	bnc	l4669
  6959  010150                     l108:
  6960                           
  6961                           ;LCD.c: 345: }
  6962                           ;LCD.c: 346: }
  6963                           ;LCD.c: 348: ;
  6964                           ;LCD.c: 351: for(int i = 0; string[i] != '\0' && i < 200; i++)
  6965  010150  0100               	movlb	0	; () banked
  6966  010152  6B90               	clrf	LCD_printString@i_591& (0+255),b
  6967  010154  6B91               	clrf	(LCD_printString@i_591+1)& (0+255),b
  6968  010156  D099               	goto	l4747
  6969  010158                     l4697:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;LCD.c: 352: {
  6973                           ;LCD.c: 353: if(string[i] == '\n')
  6974  010158  5190               	movf	LCD_printString@i_591& (0+255),w,b
  6975  01015A  0F74               	addlw	low LCD_printString@string
  6976  01015C  6ED9               	movwf	fsr2l,c
  6977  01015E  6ADA               	clrf	fsr2h,c
  6978  010160  0E0A               	movlw	10
  6979  010162  62DF               	cpfseq	indf2,c
  6980  010164  D006               	goto	l4701
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;LCD.c: 354: {
  6984                           ;LCD.c: 355: LCD_placeCursor(0,y+1);
  6985  010166  2822               	incf	LCD_printString@y,w,c
  6986  010168  6E1A               	movwf	LCD_placeCursor@y,c
  6987  01016A  0E00               	movlw	0
  6988  01016C  ECAD  F082         	call	_LCD_placeCursor
  6989                           
  6990                           ;LCD.c: 356: }
  6991  010170  D089               	goto	l4745
  6992  010172                     l4701:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;LCD.c: 357: else
  6996                           ;LCD.c: 358: {
  6997                           ;LCD.c: 359: delay_ms(2);
  6998  010172  D902               	call	PL38	;call to abstracted procedure
  6999  010174  EC66  F089         	call	_delay_ms	;wreg free
  7000                           
  7001                           ;LCD.c: 360: PORTDbits.RD0 = 1;
  7002  010178  8083               	bsf	3971,0,c	;volatile
  7003                           
  7004                           ;LCD.c: 362: switch(mode)
  7005  01017A  D07B               	goto	l4739
  7006  01017C                     l4705:
  7007                           
  7008                           ;LCD.c: 365: delay_us(40);;
  7009  01017C  EC53  F084         	call	PL2	;call to abstracted procedure
  7010  010180  EC32  F08A         	call	_delay_us	;wreg free
  7011                           
  7012                           ;LCD.c: 366: PORTEbits.RE4 = 1;
  7013  010184  8884               	bsf	3972,4,c	;volatile
  7014                           
  7015                           ;LCD.c: 367: { PORTHbits.RH5 = (((string[i] >> 4) >> 3) & 1); PORTEbits.RE1 = (((string[
      +                          i] >> 4) >> 2) & 1); PORTEbits.RE0 = (((string[i] >> 4) >> 1) & 1); PORTEbits.RE2 = ((st
      +                          ring[i] >> 4) & 1); };
  7016  010186  0100               	movlb	0	; () banked
  7017  010188  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7018  01018A  0F74               	addlw	low LCD_printString@string
  7019  01018C  6ED9               	movwf	fsr2l,c
  7020                           
  7021                           ; BSR set to: 0
  7022                           
  7023                           ; BSR set to: 0
  7024                           
  7025                           ; BSR set to: 0
  7026  01018E  D88D               	call	PL4	;call to abstracted procedure
  7027                           
  7028                           ;LCD.c: 368: delay_us(40);;
  7029  010190  EC53  F084         	call	PL2	;call to abstracted procedure
  7030  010194  EC32  F08A         	call	_delay_us	;wreg free
  7031                           
  7032                           ;LCD.c: 369: PORTEbits.RE4 = 0;
  7033  010198  9884               	bcf	3972,4,c	;volatile
  7034                           
  7035                           ;LCD.c: 371: delay_us(40);;
  7036  01019A  EC53  F084         	call	PL2	;call to abstracted procedure
  7037  01019E  EC32  F08A         	call	_delay_us	;wreg free
  7038                           
  7039                           ;LCD.c: 372: PORTEbits.RE4 = 1;
  7040  0101A2  8884               	bsf	3972,4,c	;volatile
  7041                           
  7042                           ;LCD.c: 373: { PORTHbits.RH5 = (((string[i] & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((strin
      +                          g[i] & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((string[i] & 0x0F) >> 1) & 1); PORTEbits.RE2 
      +                          = ((string[i] & 0x0F) & 1); };
  7043  0101A4  0100               	movlb	0	; () banked
  7044  0101A6  D8CB               	call	PL6	;call to abstracted procedure
  7045  0101A8  90D8               	bcf	status,0,c
  7046  0101AA  3229               	rrcf	??_LCD_printString,f,c
  7047  0101AC  90D8               	bcf	status,0,c
  7048  0101AE  3229               	rrcf	??_LCD_printString,f,c
  7049  0101B0  0E01               	movlw	1
  7050  0101B2  1629               	andwf	??_LCD_printString,f,c
  7051  0101B4  3A29               	swapf	??_LCD_printString,f,c
  7052  0101B6  4629               	rlncf	??_LCD_printString,f,c
  7053  0101B8  5087               	movf	3975,w,c	;volatile
  7054  0101BA  1829               	xorwf	??_LCD_printString,w,c
  7055  0101BC  0BDF               	andlw	-33
  7056  0101BE  1829               	xorwf	??_LCD_printString,w,c
  7057  0101C0  6E87               	movwf	3975,c	;volatile
  7058                           
  7059                           ; BSR set to: 0
  7060  0101C2  D8BD               	call	PL6	;call to abstracted procedure
  7061  0101C4  90D8               	bcf	status,0,c
  7062  0101C6  3229               	rrcf	??_LCD_printString,f,c
  7063  0101C8  0E01               	movlw	1
  7064  0101CA  1629               	andwf	??_LCD_printString,f,c
  7065  0101CC  4629               	rlncf	??_LCD_printString,f,c
  7066  0101CE  5084               	movf	3972,w,c	;volatile
  7067  0101D0  1829               	xorwf	??_LCD_printString,w,c
  7068  0101D2  0BFD               	andlw	-3
  7069  0101D4  1829               	xorwf	??_LCD_printString,w,c
  7070  0101D6  6E84               	movwf	3972,c	;volatile
  7071                           
  7072                           ; BSR set to: 0
  7073  0101D8  D8B2               	call	PL6	;call to abstracted procedure
  7074  0101DA  0E01               	movlw	1
  7075  0101DC  1629               	andwf	??_LCD_printString,f,c
  7076  0101DE  5084               	movf	3972,w,c	;volatile
  7077  0101E0  1829               	xorwf	??_LCD_printString,w,c
  7078  0101E2  0BFE               	andlw	-2
  7079  0101E4  1829               	xorwf	??_LCD_printString,w,c
  7080  0101E6  6E84               	movwf	3972,c	;volatile
  7081                           
  7082                           ; BSR set to: 0
  7083  0101E8  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7084  0101EA  D8B2               	call	PL8	;call to abstracted procedure
  7085  0101EC  4629               	rlncf	??_LCD_printString,f,c
  7086  0101EE  4629               	rlncf	??_LCD_printString,f,c
  7087  0101F0  5084               	movf	3972,w,c	;volatile
  7088  0101F2  1829               	xorwf	??_LCD_printString,w,c
  7089  0101F4  0BFB               	andlw	-5
  7090  0101F6  1829               	xorwf	??_LCD_printString,w,c
  7091  0101F8  6E84               	movwf	3972,c	;volatile
  7092                           
  7093                           ;LCD.c: 374: delay_us(40);;
  7094  0101FA  EC53  F084         	call	PL2	;call to abstracted procedure
  7095  0101FE  EC32  F08A         	call	_delay_us	;wreg free
  7096  010202  D035               	goto	L1
  7097  010204                     l116:
  7098  010204  F000               	nop		;# 
  7099                           
  7100                           ;LCD.c: 380: PORTEbits.RE4 = 1;
  7101  010206  8884               	bsf	3972,4,c	;volatile
  7102                           
  7103                           ;LCD.c: 381: { PORTHbits.RH5 = ((string[i] >> 7) & 1); PORTEbits.RE1 = ((string[i] >> 6)
      +                           & 1); PORTEbits.RE0 = ((string[i] >> 5) & 1); PORTEbits.RE2 = ((string[i] >> 4) & 1); P
      +                          ORTHbits.RH0 = ((string[i] >> 3) & 1); PORTHbits.RH1 = ((string[i] >> 2) & 1); PORTHbit
  7104  010208  0100               	movlb	0	; () banked
  7105  01020A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7106  01020C  0F74               	addlw	low LCD_printString@string
  7107  01020E  6ED9               	movwf	fsr2l,c
  7108  010210  D84C               	call	PL4	;call to abstracted procedure
  7109  010212  D895               	call	PL6	;call to abstracted procedure
  7110  010214  90D8               	bcf	status,0,c
  7111  010216  3229               	rrcf	??_LCD_printString,f,c
  7112  010218  90D8               	bcf	status,0,c
  7113  01021A  3229               	rrcf	??_LCD_printString,f,c
  7114  01021C  0E01               	movlw	1
  7115  01021E  1629               	andwf	??_LCD_printString,f,c
  7116  010220  5087               	movf	3975,w,c	;volatile
  7117  010222  1829               	xorwf	??_LCD_printString,w,c
  7118  010224  0BFE               	andlw	-2
  7119  010226  1829               	xorwf	??_LCD_printString,w,c
  7120  010228  6E87               	movwf	3975,c	;volatile
  7121  01022A  D889               	call	PL6	;call to abstracted procedure
  7122  01022C  90D8               	bcf	status,0,c
  7123  01022E  3229               	rrcf	??_LCD_printString,f,c
  7124  010230  0E01               	movlw	1
  7125  010232  1629               	andwf	??_LCD_printString,f,c
  7126  010234  4629               	rlncf	??_LCD_printString,f,c
  7127  010236  5087               	movf	3975,w,c	;volatile
  7128  010238  1829               	xorwf	??_LCD_printString,w,c
  7129  01023A  0BFD               	andlw	-3
  7130  01023C  1829               	xorwf	??_LCD_printString,w,c
  7131  01023E  6E87               	movwf	3975,c	;volatile
  7132  010240  D87E               	call	PL6	;call to abstracted procedure
  7133  010242  0E01               	movlw	1
  7134  010244  1629               	andwf	??_LCD_printString,f,c
  7135  010246  4629               	rlncf	??_LCD_printString,f,c
  7136  010248  4629               	rlncf	??_LCD_printString,f,c
  7137  01024A  5087               	movf	3975,w,c	;volatile
  7138  01024C  1829               	xorwf	??_LCD_printString,w,c
  7139  01024E  0BFB               	andlw	-5
  7140  010250  1829               	xorwf	??_LCD_printString,w,c
  7141  010252  6E87               	movwf	3975,c	;volatile
  7142  010254  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7143  010256  D87C               	call	PL8	;call to abstracted procedure
  7144  010258  3A29               	swapf	??_LCD_printString,f,c
  7145  01025A  4629               	rlncf	??_LCD_printString,f,c
  7146  01025C  5084               	movf	3972,w,c	;volatile
  7147  01025E  1829               	xorwf	??_LCD_printString,w,c
  7148  010260  0BDF               	andlw	-33
  7149  010262  1829               	xorwf	??_LCD_printString,w,c
  7150  010264  6E84               	movwf	3972,c	;volatile
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;LCD.c: 382: delay_us(40);;
  7154  010266  EC53  F084         	call	PL2	;call to abstracted procedure
  7155  01026A  EC32  F08A         	call	_delay_us	;wreg free
  7156  01026E                     L1:
  7157                           
  7158                           ;LCD.c: 383: PORTEbits.RE4 = 0;
  7159  01026E  9884               	bcf	3972,4,c	;volatile
  7160                           
  7161                           ;LCD.c: 384: break;
  7162  010270  D005               	goto	l4741
  7163  010272                     l4739:
  7164  010272  5058               	movf	_mode,w,c	;volatile
  7165                           
  7166                           ; Switch size 1, requested type "space"
  7167                           ; Number of cases is 2, Range of values is 1 to 2
  7168                           ; switch strategies available:
  7169                           ; Name         Instructions Cycles
  7170                           ; simple_byte            7     4 (average)
  7171                           ;	Chosen strategy is simple_byte
  7172  010274  0A01               	xorlw	1	; case 1
  7173  010276  E082               	bz	l4705
  7174  010278  0A03               	xorlw	3	; case 2
  7175  01027A  E0C4               	bz	l116
  7176  01027C                     l4741:
  7177                           
  7178                           ;LCD.c: 386: delay_ms(2);
  7179  01027C  D87D               	call	PL38	;call to abstracted procedure
  7180  01027E  EC66  F089         	call	_delay_ms	;wreg free
  7181                           
  7182                           ;LCD.c: 387: PORTDbits.RD0 = 0;
  7183  010282  9083               	bcf	3971,0,c	;volatile
  7184  010284                     l4745:
  7185  010284  0100               	movlb	0	; () banked
  7186  010286  4B90               	infsnz	LCD_printString@i_591& (0+255),f,b
  7187  010288  2B91               	incf	(LCD_printString@i_591+1)& (0+255),f,b
  7188  01028A                     l4747:
  7189                           
  7190                           ; BSR set to: 0
  7191  01028A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7192  01028C  0F74               	addlw	low LCD_printString@string
  7193  01028E  6ED9               	movwf	fsr2l,c
  7194  010290  6ADA               	clrf	fsr2h,c
  7195  010292  50DF               	movf	indf2,w,c
  7196  010294  B4D8               	btfsc	status,2,c
  7197  010296  0012               	return	
  7198                           
  7199                           ; BSR set to: 0
  7200  010298  5191               	movf	(LCD_printString@i_591+1)& (0+255),w,b
  7201  01029A  0A80               	xorlw	128
  7202  01029C  0F80               	addlw	-128
  7203  01029E  0EC8               	movlw	200
  7204  0102A0  B4D8               	btfsc	status,2,c
  7205  0102A2  5D90               	subwf	LCD_printString@i_591& (0+255),w,b
  7206  0102A4  B0D8               	btfsc	status,0,c
  7207  0102A6  0012               	return	
  7208  0102A8  D757               	goto	l4697
  7209  0102AA                     __end_of_LCD_printString:
  7210                           	opt stack 0
  7211  0102AA                     PL4:
  7212                           	opt stack 22
  7213  0102AA  6ADA               	clrf	fsr2h,c
  7214  0102AC  50DF               	movf	indf2,w,c
  7215  0102AE  6E29               	movwf	??_LCD_printString& (0+255),c
  7216  0102B0  0E00               	movlw	0
  7217  0102B2  BE29               	btfsc	??_LCD_printString,7,c
  7218  0102B4  0E01               	movlw	1
  7219  0102B6  6E29               	movwf	??_LCD_printString,c
  7220  0102B8  0E01               	movlw	1
  7221  0102BA  1629               	andwf	??_LCD_printString,f,c
  7222  0102BC  3A29               	swapf	??_LCD_printString,f,c
  7223  0102BE  4629               	rlncf	??_LCD_printString,f,c
  7224  0102C0  5087               	movf	3975,w,c	;volatile
  7225  0102C2  1829               	xorwf	??_LCD_printString,w,c
  7226  0102C4  0BDF               	andlw	-33
  7227  0102C6  1829               	xorwf	??_LCD_printString,w,c
  7228  0102C8  6E87               	movwf	3975,c	;volatile
  7229  0102CA  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7230  0102CC  0F74               	addlw	low LCD_printString@string
  7231  0102CE  6ED9               	movwf	fsr2l,c
  7232  0102D0  6ADA               	clrf	fsr2h,c
  7233  0102D2  50DF               	movf	indf2,w,c
  7234  0102D4  6E29               	movwf	??_LCD_printString& (0+255),c
  7235  0102D6  0E06               	movlw	6
  7236  0102D8  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7237  0102DA                     u2645:
  7238  0102DA  90D8               	bcf	status,0,c
  7239  0102DC  3229               	rrcf	??_LCD_printString,f,c
  7240  0102DE  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7241  0102E0  D7FC               	goto	u2645
  7242  0102E2  0E01               	movlw	1
  7243  0102E4  1629               	andwf	??_LCD_printString,f,c
  7244  0102E6  4629               	rlncf	??_LCD_printString,f,c
  7245  0102E8  5084               	movf	3972,w,c	;volatile
  7246  0102EA  1829               	xorwf	??_LCD_printString,w,c
  7247  0102EC  0BFD               	andlw	-3
  7248  0102EE  1829               	xorwf	??_LCD_printString,w,c
  7249  0102F0  6E84               	movwf	3972,c	;volatile
  7250  0102F2  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7251  0102F4  0F74               	addlw	low LCD_printString@string
  7252  0102F6  6ED9               	movwf	fsr2l,c
  7253  0102F8  6ADA               	clrf	fsr2h,c
  7254  0102FA  50DF               	movf	indf2,w,c
  7255  0102FC  6E29               	movwf	??_LCD_printString& (0+255),c
  7256  0102FE  0E05               	movlw	5
  7257  010300  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7258  010302                     u2655:
  7259  010302  90D8               	bcf	status,0,c
  7260  010304  3229               	rrcf	??_LCD_printString,f,c
  7261  010306  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7262  010308  D7FC               	goto	u2655
  7263  01030A  0E01               	movlw	1
  7264  01030C  1629               	andwf	??_LCD_printString,f,c
  7265  01030E  5084               	movf	3972,w,c	;volatile
  7266  010310  1829               	xorwf	??_LCD_printString,w,c
  7267  010312  0BFE               	andlw	-2
  7268  010314  1829               	xorwf	??_LCD_printString,w,c
  7269  010316  6E84               	movwf	3972,c	;volatile
  7270  010318  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7271  01031A  0F74               	addlw	low LCD_printString@string
  7272  01031C  6ED9               	movwf	fsr2l,c
  7273  01031E  6ADA               	clrf	fsr2h,c
  7274  010320  50DF               	movf	indf2,w,c
  7275  010322  6E29               	movwf	??_LCD_printString& (0+255),c
  7276  010324  3A29               	swapf	??_LCD_printString,f,c
  7277  010326  0E0F               	movlw	15
  7278  010328  1629               	andwf	??_LCD_printString,f,c
  7279  01032A  0E01               	movlw	1
  7280  01032C  1629               	andwf	??_LCD_printString,f,c
  7281  01032E  4629               	rlncf	??_LCD_printString,f,c
  7282  010330  4629               	rlncf	??_LCD_printString,f,c
  7283  010332  5084               	movf	3972,w,c	;volatile
  7284  010334  1829               	xorwf	??_LCD_printString,w,c
  7285  010336  0BFB               	andlw	-5
  7286  010338  1829               	xorwf	??_LCD_printString,w,c
  7287  01033A  6E84               	movwf	3972,c	;volatile
  7288  01033C  0012               	return	
  7289  01033E                     __end_ofPL4:
  7290                           	opt stack 0
  7291  01033E                     PL6:
  7292                           	opt stack 22
  7293  01033E  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7294  010340  0F74               	addlw	low LCD_printString@string
  7295  010342  6ED9               	movwf	fsr2l,c
  7296  010344  6ADA               	clrf	fsr2h,c
  7297  010346  50DF               	movf	indf2,w,c
  7298  010348  6E29               	movwf	??_LCD_printString& (0+255),c
  7299  01034A  90D8               	bcf	status,0,c
  7300  01034C  3229               	rrcf	??_LCD_printString,f,c
  7301  01034E  0012               	return	
  7302  010350                     __end_ofPL6:
  7303                           	opt stack 0
  7304  010350                     PL8:
  7305                           	opt stack 22
  7306  010350  0F74               	addlw	low LCD_printString@string
  7307  010352  6ED9               	movwf	fsr2l,c
  7308  010354  6ADA               	clrf	fsr2h,c
  7309  010356  50DF               	movf	indf2,w,c
  7310  010358  6E29               	movwf	??_LCD_printString& (0+255),c
  7311  01035A  0E01               	movlw	1
  7312  01035C  1629               	andwf	??_LCD_printString,f,c
  7313  01035E  0C01               	retlw	1
  7314  010360                     __end_ofPL8:
  7315                           	opt stack 0
  7316  010360                     PL12:
  7317                           	opt stack 22
  7318  010360  518E               	movf	LCD_printString@i& (0+255),w,b
  7319  010362  2629               	addwf	??_LCD_printString,f,c
  7320  010364  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7321  010366  222A               	addwfc	??_LCD_printString+1,f,c
  7322  010368  C029  FFF6         	movff	??_LCD_printString,tblptrl
  7323  01036C  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  7324  010370  0E00               	movlw	low (__mediumconst shr (0+16))
  7325  010372  6EF8               	movwf	tblptru,c
  7326  010374  0E0D               	movlw	(high __ramtop+-1)
  7327  010376  0012               	return	
  7328  010378                     __end_ofPL12:
  7329                           	opt stack 0
  7330  010378                     PL38:
  7331                           	opt stack 22
  7332  010378  0E02               	movlw	2
  7333  01037A  6E0A               	movwf	delay_ms@x,c
  7334  01037C  6A0B               	clrf	delay_ms@x+1,c
  7335  01037E  6A0C               	clrf	delay_ms@x+2,c
  7336  010380  6A0D               	clrf	delay_ms@x+3,c
  7337  010382  0C00               	retlw	0
  7338  010384                     __end_ofPL38:
  7339                           	opt stack 0
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodh	equ	0xFF4
  7345                           prodl	equ	0xFF3
  7346                           intcon	equ	0xFF2
  7347                           intcon2	equ	0xFF1
  7348                           intcon3	equ	0xFF0
  7349                           indf0	equ	0xFEF
  7350                           postinc0	equ	0xFEE
  7351                           fsr0h	equ	0xFEA
  7352                           fsr0l	equ	0xFE9
  7353                           wreg	equ	0xFE8
  7354                           indf1	equ	0xFE7
  7355                           postinc1	equ	0xFE6
  7356                           postdec1	equ	0xFE5
  7357                           fsr1h	equ	0xFE2
  7358                           fsr1l	equ	0xFE1
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           fsr2h	equ	0xFDA
  7363                           fsr2l	equ	0xFD9
  7364                           status	equ	0xFD8
  7365                           
  7366 ;; *************** function _strcat *****************
  7367 ;; Defined at:
  7368 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcat.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;  to              2    5[COMRAM] PTR unsigned char 
  7371 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7372 ;;  from            2    7[COMRAM] PTR const unsigned char 
  7373 ;;		 -> UART_transmitString@tempString_1922(2), UART_transmitString@tempString(20), STR_15(2), LCD_printString@tempStrin
      +g_590(2), 
  7374 ;;		 -> LCD_printString@tempString(20), STR_1(2), 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  cp              2    9[COMRAM] PTR unsigned char 
  7377 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  2    5[COMRAM] PTR unsigned char 
  7380 ;; Registers used:
  7381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7382 ;; Tracked objects:
  7383 ;;		On entry : F/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7391 ;;Total ram usage:        6 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    3
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_LCD_printString
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	text36
  7402  011274                     __ptext36:
  7403                           	opt stack 0
  7404  011274                     _strcat:
  7405                           	opt stack 24
  7406                           
  7407                           ; BSR set to: 0
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;incstack = 0
  7411  011274  C007  F00B         	movff	strcat@to+1,strcat@cp+1
  7412  011278  C006  F00A         	movff	strcat@to,strcat@cp
  7413  01127C  D002               	goto	l4537
  7414  01127E                     l4535:
  7415                           
  7416                           ; BSR set to: 0
  7417  01127E  4A0A               	infsnz	strcat@cp,f,c
  7418  011280  2A0B               	incf	strcat@cp+1,f,c
  7419  011282                     l4537:
  7420                           
  7421                           ; BSR set to: 0
  7422  011282  C00A  FFD9         	movff	strcat@cp,fsr2l
  7423  011286  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7424  01128A  50DF               	movf	indf2,w,c
  7425  01128C  E005               	bz	l4541
  7426  01128E  D7F7               	goto	l4535
  7427  011290                     l4539:
  7428  011290  4A0A               	infsnz	strcat@cp,f,c
  7429  011292  2A0B               	incf	strcat@cp+1,f,c
  7430  011294  4A08               	infsnz	strcat@from,f,c
  7431  011296  2A09               	incf	strcat@from+1,f,c
  7432  011298                     l4541:
  7433  011298  C008  FFF6         	movff	strcat@from,tblptrl
  7434  01129C  C009  FFF7         	movff	strcat@from+1,tblptrh
  7435  0112A0  0E00               	movlw	low (__mediumconst shr (0+16))
  7436  0112A2  6EF8               	movwf	tblptru,c
  7437  0112A4  C00A  FFD9         	movff	strcat@cp,fsr2l
  7438  0112A8  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7439  0112AC  0E0D               	movlw	(high __ramtop+-1)
  7440  0112AE  64F7               	cpfsgt	tblptrh,c
  7441  0112B0  D003               	bra	u2357
  7442  0112B2  0008               	tblrd		*
  7443  0112B4  50F5               	movf	tablat,w,c
  7444  0112B6  D005               	bra	u2350
  7445  0112B8                     u2357:
  7446  0112B8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7447  0112BC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7448  0112C0  50EF               	movf	indf0,w,c
  7449  0112C2                     u2350:
  7450  0112C2  6EDF               	movwf	indf2,c
  7451  0112C4  50DF               	movf	indf2,w,c
  7452  0112C6  B4D8               	btfsc	status,2,c
  7453  0112C8  0012               	return	
  7454  0112CA  D7E2               	goto	l4539
  7455  0112CC                     __end_of_strcat:
  7456                           	opt stack 0
  7457                           tblptru	equ	0xFF8
  7458                           tblptrh	equ	0xFF7
  7459                           tblptrl	equ	0xFF6
  7460                           tablat	equ	0xFF5
  7461                           prodh	equ	0xFF4
  7462                           prodl	equ	0xFF3
  7463                           intcon	equ	0xFF2
  7464                           intcon2	equ	0xFF1
  7465                           intcon3	equ	0xFF0
  7466                           indf0	equ	0xFEF
  7467                           postinc0	equ	0xFEE
  7468                           fsr0h	equ	0xFEA
  7469                           fsr0l	equ	0xFE9
  7470                           wreg	equ	0xFE8
  7471                           indf1	equ	0xFE7
  7472                           postinc1	equ	0xFE6
  7473                           postdec1	equ	0xFE5
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _sprintf *****************
  7484 ;; Defined at:
  7485 ;;		line 492 in file "/Applications/microchip/xc8/v1.33/sources/common/doprnt.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;  sp              1    wreg     PTR unsigned char 
  7488 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7489 ;;  f               2   17[COMRAM] PTR const unsigned char 
  7490 ;;		 -> STR_16(3), STR_2(3), 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  sp              1   31[COMRAM] PTR unsigned char 
  7493 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7494 ;;  _val            5   26[COMRAM] struct .
  7495 ;;  c               1   32[COMRAM] char 
  7496 ;;  prec            1   25[COMRAM] char 
  7497 ;;  flag            1   24[COMRAM] unsigned char 
  7498 ;;  ap              1   23[COMRAM] PTR void [1]
  7499 ;;		 -> ?_sprintf(2), 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  2   17[COMRAM] int 
  7502 ;; Registers used:
  7503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : F/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7510 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7511 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;Total ram usage:       16 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    4
  7516 ;; This function calls:
  7517 ;;		___lwdiv
  7518 ;;		___lwmod
  7519 ;; This function is called by:
  7520 ;;		_LCD_printString
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text37
  7525  010A0C                     __ptext37:
  7526                           	opt stack 0
  7527  010A0C                     _sprintf:
  7528                           	opt stack 23
  7529                           
  7530                           ;incstack = 0
  7531                           ;sprintf@sp stored from wreg
  7532  010A0C  6E20               	movwf	sprintf@sp,c
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;doprnt.c: 494: va_list ap;
  7536                           ;doprnt.c: 499: signed char c;
  7537                           ;doprnt.c: 506: signed char prec;
  7538                           ;doprnt.c: 508: unsigned char flag;
  7539                           ;doprnt.c: 527: union {
  7540                           ;doprnt.c: 528: unsigned int _val;
  7541                           ;doprnt.c: 529: struct {
  7542                           ;doprnt.c: 530: const char * _cp;
  7543                           ;doprnt.c: 531: unsigned _len;
  7544                           ;doprnt.c: 532: } _str;
  7545                           ;doprnt.c: 533: } _val;
  7546                           ;doprnt.c: 542: *ap = __va_start();
  7547  010A0E  0E14               	movlw	low (?_sprintf+2)
  7548  010A10  6E18               	movwf	sprintf@ap,c
  7549                           
  7550                           ;doprnt.c: 545: while(c = *f++) {
  7551  010A12  D068               	goto	l4595
  7552  010A14                     l4545:
  7553                           
  7554                           ;doprnt.c: 547: if(c != '%')
  7555  010A14  5021               	movf	sprintf@c,w,c
  7556  010A16  0A25               	xorlw	37
  7557  010A18  E007               	bz	l1115
  7558                           
  7559                           ;doprnt.c: 549: {
  7560                           ;doprnt.c: 550: ((*sp++ = (c)));
  7561  010A1A  5020               	movf	sprintf@sp,w,c
  7562  010A1C  6ED9               	movwf	fsr2l,c
  7563  010A1E  6ADA               	clrf	fsr2h,c
  7564  010A20  C021  FFDF         	movff	sprintf@c,indf2
  7565  010A24  2A20               	incf	sprintf@sp,f,c
  7566                           
  7567                           ;doprnt.c: 551: continue;
  7568  010A26  D05E               	goto	l4595
  7569  010A28                     l1115:
  7570                           
  7571                           ;doprnt.c: 552: }
  7572                           ;doprnt.c: 557: flag = 0;
  7573  010A28  6A19               	clrf	sprintf@flag,c
  7574                           
  7575                           ;doprnt.c: 644: switch(c = *f++) {
  7576  010A2A  D871               	call	PL28	;call to abstracted procedure
  7577  010A2C  5021               	movf	sprintf@c& (0+255),w,c
  7578                           
  7579                           ; Switch size 1, requested type "space"
  7580                           ; Number of cases is 3, Range of values is 0 to 105
  7581                           ; switch strategies available:
  7582                           ; Name         Instructions Cycles
  7583                           ; simple_byte           10     6 (average)
  7584                           ;	Chosen strategy is simple_byte
  7585  010A2E  E05D               	bz	l4597
  7586  010A30  0A64               	xorlw	100	; case 100
  7587  010A32  E002               	bz	l4555
  7588  010A34  0A0D               	xorlw	13	; case 105
  7589  010A36  E156               	bnz	l4595
  7590  010A38                     l4555:
  7591                           
  7592                           ;doprnt.c: 1262: {
  7593                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7594  010A38  5018               	movf	sprintf@ap,w,c
  7595  010A3A  6ED9               	movwf	fsr2l,c
  7596  010A3C  6ADA               	clrf	fsr2h,c
  7597  010A3E  CFDE F01B          	movff	postinc2,sprintf@_val
  7598  010A42  CFDD F01C          	movff	postdec2,sprintf@_val+1
  7599  010A46  0E02               	movlw	2
  7600  010A48  2618               	addwf	sprintf@ap,f,c
  7601                           
  7602                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  7603  010A4A  501C               	movf	sprintf@_val+1,w,c
  7604  010A4C  D86C               	call	PL34	;call to abstracted procedure
  7605  010A4E  B4D8               	btfsc	status,2,c
  7606  010A50  5C1B               	subwf	sprintf@_val,w,c
  7607  010A52  E206               	bc	l4565
  7608                           
  7609                           ;doprnt.c: 1271: flag |= 0x03;
  7610  010A54  0E03               	movlw	3
  7611  010A56  1219               	iorwf	sprintf@flag,f,c
  7612                           
  7613                           ;doprnt.c: 1272: _val._val = -_val._val;
  7614  010A58  6C1B               	negf	sprintf@_val,c
  7615  010A5A  1E1C               	comf	sprintf@_val+1,f,c
  7616  010A5C  B0D8               	btfsc	status,0,c
  7617  010A5E  2A1C               	incf	sprintf@_val+1,f,c
  7618  010A60                     l4565:
  7619                           
  7620                           ;doprnt.c: 1273: }
  7621                           ;doprnt.c: 1275: }
  7622                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7623  010A60  0E01               	movlw	1
  7624  010A62  6E21               	movwf	sprintf@c,c
  7625  010A64                     l4571:
  7626                           
  7627                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7628  010A64  5021               	movf	sprintf@c,w,c
  7629  010A66  D847               	call	PL26	;call to abstracted procedure
  7630  010A68  CFF5 F016          	movff	tablat,??_sprintf
  7631  010A6C  0009               	tblrd		*+
  7632  010A6E  CFF5 F017          	movff	tablat,??_sprintf+1
  7633  010A72  5016               	movf	??_sprintf,w,c
  7634  010A74  5C1B               	subwf	sprintf@_val,w,c
  7635  010A76  5017               	movf	??_sprintf+1,w,c
  7636  010A78  581C               	subwfb	sprintf@_val+1,w,c
  7637  010A7A  E304               	bnc	l4579
  7638  010A7C  2A21               	incf	sprintf@c,f,c
  7639  010A7E  5021               	movf	sprintf@c,w,c
  7640  010A80  0A05               	xorlw	5
  7641  010A82  E1F0               	bnz	l4571
  7642  010A84                     l4579:
  7643                           
  7644                           ;doprnt.c: 1431: {
  7645                           ;doprnt.c: 1447: if(flag & 0x03)
  7646  010A84  C019  F016         	movff	sprintf@flag,??_sprintf
  7647  010A88  0E03               	movlw	3
  7648  010A8A  1616               	andwf	??_sprintf,f,c
  7649  010A8C  E006               	bz	l4585
  7650                           
  7651                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  7652  010A8E  5020               	movf	sprintf@sp,w,c
  7653  010A90  6ED9               	movwf	fsr2l,c
  7654  010A92  6ADA               	clrf	fsr2h,c
  7655  010A94  0E2D               	movlw	45
  7656  010A96  6EDF               	movwf	indf2,c
  7657  010A98  2A20               	incf	sprintf@sp,f,c
  7658  010A9A                     l4585:
  7659                           
  7660                           ;doprnt.c: 1478: }
  7661                           ;doprnt.c: 1481: prec = c;
  7662  010A9A  C021  F01A         	movff	sprintf@c,sprintf@prec
  7663                           
  7664                           ;doprnt.c: 1483: while(prec--) {
  7665  010A9E  D01F               	goto	l4593
  7666  010AA0                     l4587:
  7667                           
  7668                           ;doprnt.c: 1487: {
  7669                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7670  010AA0  501A               	movf	sprintf@prec,w,c
  7671  010AA2  D829               	call	PL26	;call to abstracted procedure
  7672  010AA4  CFF5 F008          	movff	tablat,___lwdiv@divisor
  7673  010AA8  000A               	tblrd		*-
  7674  010AAA  CFF5 F009          	movff	tablat,___lwdiv@divisor+1
  7675  010AAE  C01B  F006         	movff	sprintf@_val,___lwdiv@dividend
  7676  010AB2  C01C  F007         	movff	sprintf@_val+1,___lwdiv@dividend+1
  7677  010AB6  EC91  F089         	call	___lwdiv	;wreg free
  7678  010ABA  C006  F00D         	movff	?___lwdiv,___lwmod@dividend
  7679  010ABE  C007  F00E         	movff	?___lwdiv+1,___lwmod@dividend+1
  7680  010AC2  6A10               	clrf	___lwmod@divisor+1,c
  7681  010AC4  0E0A               	movlw	10
  7682  010AC6  6E0F               	movwf	___lwmod@divisor,c
  7683  010AC8  ECD8  F089         	call	___lwmod	;wreg free
  7684  010ACC  500D               	movf	?___lwmod,w,c
  7685  010ACE  0F30               	addlw	48
  7686  010AD0  6E21               	movwf	sprintf@c,c
  7687                           
  7688                           ;doprnt.c: 1532: }
  7689                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7690  010AD2  5020               	movf	sprintf@sp,w,c
  7691  010AD4  6ED9               	movwf	fsr2l,c
  7692  010AD6  6ADA               	clrf	fsr2h,c
  7693  010AD8  C021  FFDF         	movff	sprintf@c,indf2
  7694  010ADC  2A20               	incf	sprintf@sp,f,c
  7695  010ADE                     l4593:
  7696  010ADE  061A               	decf	sprintf@prec,f,c
  7697  010AE0  281A               	incf	sprintf@prec& (0+255),w,c
  7698  010AE2  E1DE               	bnz	l4587
  7699  010AE4                     l4595:
  7700  010AE4  D814               	call	PL28	;call to abstracted procedure
  7701  010AE6  6621               	tstfsz	sprintf@c& (0+255),c
  7702  010AE8  D795               	goto	l4545
  7703  010AEA                     l4597:
  7704                           
  7705                           ;doprnt.c: 1547: *sp = 0;
  7706  010AEA  5020               	movf	sprintf@sp,w,c
  7707  010AEC  6ED9               	movwf	fsr2l,c
  7708  010AEE  6ADA               	clrf	fsr2h,c
  7709  010AF0  0E00               	movlw	0
  7710  010AF2  6EDF               	movwf	indf2,c
  7711  010AF4  0C00               	retlw	0
  7712  010AF6                     __end_of_sprintf:
  7713                           	opt stack 0
  7714  010AF6                     PL26:
  7715                           	opt stack 23
  7716  010AF6  0D02               	mullw	2
  7717  010AF8  0EC5               	movlw	low _dpowers
  7718  010AFA  24F3               	addwf	prodl,w,c
  7719  010AFC  6EF6               	movwf	tblptrl,c
  7720  010AFE  0EFE               	movlw	high _dpowers
  7721  010B00  20F4               	addwfc	prodh,w,c
  7722  010B02  6EF7               	movwf	tblptrh,c
  7723  010B04                     	if	1	;There are 3 active tblptr bytes
  7724  010B04  6AF8               	clrf	tblptru,c
  7725  010B06  0E00               	movlw	low (__mediumconst shr (0+16))
  7726  010B08  22F8               	addwfc	tblptru,f,c
  7727  010B0A                     	endif
  7728  010B0A  0009               	tblrd		*+
  7729  010B0C  0012               	return	
  7730  010B0E                     __end_ofPL26:
  7731                           	opt stack 0
  7732  010B0E                     PL28:
  7733                           	opt stack 23
  7734  010B0E  C012  FFF6         	movff	sprintf@f,tblptrl
  7735  010B12  C013  FFF7         	movff	sprintf@f+1,tblptrh
  7736  010B16  4A12               	infsnz	sprintf@f,f,c
  7737  010B18  2A13               	incf	sprintf@f+1,f,c
  7738  010B1A                     	if	0	;tblptru may be non-zero
  7739  010B1A                     	endif
  7740  010B1A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7741  010B1A  0E00               	movlw	low (__mediumconst shr (0+16))
  7742  010B1C  6EF8               	movwf	tblptru,c
  7743  010B1E                     	endif
  7744  010B1E  0008               	tblrd		*
  7745  010B20  CFF5 F021          	movff	tablat,sprintf@c
  7746  010B24  0012               	return	
  7747  010B26                     __end_ofPL28:
  7748                           	opt stack 0
  7749  010B26                     PL34:
  7750                           	opt stack 23
  7751  010B26  0A80               	xorlw	128
  7752  010B28  6EF3               	movwf	prodl,c
  7753  010B2A  0E80               	movlw	128
  7754  010B2C  5CF3               	subwf	prodl,w,c
  7755  010B2E  0C00               	retlw	0
  7756  010B30                     __end_ofPL34:
  7757                           	opt stack 0
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           intcon	equ	0xFF2
  7765                           intcon2	equ	0xFF1
  7766                           intcon3	equ	0xFF0
  7767                           indf0	equ	0xFEF
  7768                           postinc0	equ	0xFEE
  7769                           fsr0h	equ	0xFEA
  7770                           fsr0l	equ	0xFE9
  7771                           wreg	equ	0xFE8
  7772                           indf1	equ	0xFE7
  7773                           postinc1	equ	0xFE6
  7774                           postdec1	equ	0xFE5
  7775                           fsr1h	equ	0xFE2
  7776                           fsr1l	equ	0xFE1
  7777                           indf2	equ	0xFDF
  7778                           postinc2	equ	0xFDE
  7779                           postdec2	equ	0xFDD
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function ___lwmod *****************
  7785 ;; Defined at:
  7786 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwmod.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  dividend        2   12[COMRAM] unsigned int 
  7789 ;;  divisor         2   14[COMRAM] unsigned int 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  counter         1   16[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  2   12[COMRAM] unsigned int 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;Total ram usage:        5 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    3
  7808 ;; This function calls:
  7809 ;;		Nothing
  7810 ;; This function is called by:
  7811 ;;		_sprintf
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text38
  7816  0113B0                     __ptext38:
  7817                           	opt stack 0
  7818  0113B0                     ___lwmod:
  7819                           	opt stack 23
  7820                           
  7821                           ;incstack = 0
  7822  0113B0  5010               	movf	___lwmod@divisor+1,w,c
  7823  0113B2  100F               	iorwf	___lwmod@divisor,w,c
  7824  0113B4  E017               	bz	l1830
  7825  0113B6  0E01               	movlw	1
  7826  0113B8  6E11               	movwf	___lwmod@counter,c
  7827  0113BA  D004               	goto	l4483
  7828  0113BC                     l4481:
  7829  0113BC  90D8               	bcf	status,0,c
  7830  0113BE  360F               	rlcf	___lwmod@divisor,f,c
  7831  0113C0  3610               	rlcf	___lwmod@divisor+1,f,c
  7832  0113C2  2A11               	incf	___lwmod@counter,f,c
  7833  0113C4                     l4483:
  7834  0113C4  AE10               	btfss	___lwmod@divisor+1,7,c
  7835  0113C6  D7FA               	goto	l4481
  7836  0113C8                     l4485:
  7837  0113C8  500F               	movf	___lwmod@divisor,w,c
  7838  0113CA  5C0D               	subwf	___lwmod@dividend,w,c
  7839  0113CC  5010               	movf	___lwmod@divisor+1,w,c
  7840  0113CE  580E               	subwfb	___lwmod@dividend+1,w,c
  7841  0113D0  E304               	bnc	l4489
  7842  0113D2  500F               	movf	___lwmod@divisor,w,c
  7843  0113D4  5E0D               	subwf	___lwmod@dividend,f,c
  7844  0113D6  5010               	movf	___lwmod@divisor+1,w,c
  7845  0113D8  5A0E               	subwfb	___lwmod@dividend+1,f,c
  7846  0113DA                     l4489:
  7847  0113DA  90D8               	bcf	status,0,c
  7848  0113DC  3210               	rrcf	___lwmod@divisor+1,f,c
  7849  0113DE  320F               	rrcf	___lwmod@divisor,f,c
  7850  0113E0  2E11               	decfsz	___lwmod@counter,f,c
  7851  0113E2  D7F2               	goto	l4485
  7852  0113E4                     l1830:
  7853  0113E4  C00D  F00D         	movff	___lwmod@dividend,?___lwmod
  7854  0113E8  C00E  F00E         	movff	___lwmod@dividend+1,?___lwmod+1
  7855  0113EC  0012               	return	
  7856  0113EE                     __end_of___lwmod:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           intcon	equ	0xFF2
  7865                           intcon2	equ	0xFF1
  7866                           intcon3	equ	0xFF0
  7867                           indf0	equ	0xFEF
  7868                           postinc0	equ	0xFEE
  7869                           fsr0h	equ	0xFEA
  7870                           fsr0l	equ	0xFE9
  7871                           wreg	equ	0xFE8
  7872                           indf1	equ	0xFE7
  7873                           postinc1	equ	0xFE6
  7874                           postdec1	equ	0xFE5
  7875                           fsr1h	equ	0xFE2
  7876                           fsr1l	equ	0xFE1
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           postdec2	equ	0xFDD
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function ___lwdiv *****************
  7885 ;; Defined at:
  7886 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwdiv.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  dividend        2    5[COMRAM] unsigned int 
  7889 ;;  divisor         2    7[COMRAM] unsigned int 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  quotient        2   10[COMRAM] unsigned int 
  7892 ;;  counter         1    9[COMRAM] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  2    5[COMRAM] unsigned int 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2, status,0
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7903 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7906 ;;Total ram usage:        7 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    3
  7909 ;; This function calls:
  7910 ;;		Nothing
  7911 ;; This function is called by:
  7912 ;;		_sprintf
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text39
  7917  011322                     __ptext39:
  7918                           	opt stack 0
  7919  011322                     ___lwdiv:
  7920                           	opt stack 23
  7921                           
  7922                           ;incstack = 0
  7923  011322  6A0B               	clrf	___lwdiv@quotient,c
  7924  011324  6A0C               	clrf	___lwdiv@quotient+1,c
  7925  011326  5009               	movf	___lwdiv@divisor+1,w,c
  7926  011328  1008               	iorwf	___lwdiv@divisor,w,c
  7927  01132A  E01B               	bz	l1820
  7928  01132C  0E01               	movlw	1
  7929  01132E  6E0A               	movwf	___lwdiv@counter,c
  7930  011330  D004               	goto	l4463
  7931  011332                     l4461:
  7932  011332  90D8               	bcf	status,0,c
  7933  011334  3608               	rlcf	___lwdiv@divisor,f,c
  7934  011336  3609               	rlcf	___lwdiv@divisor+1,f,c
  7935  011338  2A0A               	incf	___lwdiv@counter,f,c
  7936  01133A                     l4463:
  7937  01133A  AE09               	btfss	___lwdiv@divisor+1,7,c
  7938  01133C  D7FA               	goto	l4461
  7939  01133E                     l4465:
  7940  01133E  90D8               	bcf	status,0,c
  7941  011340  360B               	rlcf	___lwdiv@quotient,f,c
  7942  011342  360C               	rlcf	___lwdiv@quotient+1,f,c
  7943  011344  5008               	movf	___lwdiv@divisor,w,c
  7944  011346  5C06               	subwf	___lwdiv@dividend,w,c
  7945  011348  5009               	movf	___lwdiv@divisor+1,w,c
  7946  01134A  5807               	subwfb	___lwdiv@dividend+1,w,c
  7947  01134C  E305               	bnc	l4473
  7948  01134E  5008               	movf	___lwdiv@divisor,w,c
  7949  011350  5E06               	subwf	___lwdiv@dividend,f,c
  7950  011352  5009               	movf	___lwdiv@divisor+1,w,c
  7951  011354  5A07               	subwfb	___lwdiv@dividend+1,f,c
  7952  011356  800B               	bsf	___lwdiv@quotient,0,c
  7953  011358                     l4473:
  7954  011358  90D8               	bcf	status,0,c
  7955  01135A  3209               	rrcf	___lwdiv@divisor+1,f,c
  7956  01135C  3208               	rrcf	___lwdiv@divisor,f,c
  7957  01135E  2E0A               	decfsz	___lwdiv@counter,f,c
  7958  011360  D7EE               	goto	l4465
  7959  011362                     l1820:
  7960  011362  C00B  F006         	movff	___lwdiv@quotient,?___lwdiv
  7961  011366  C00C  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7962  01136A  0012               	return	
  7963  01136C                     __end_of___lwdiv:
  7964                           	opt stack 0
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           intcon	equ	0xFF2
  7972                           intcon2	equ	0xFF1
  7973                           intcon3	equ	0xFF0
  7974                           indf0	equ	0xFEF
  7975                           postinc0	equ	0xFEE
  7976                           fsr0h	equ	0xFEA
  7977                           fsr0l	equ	0xFE9
  7978                           wreg	equ	0xFE8
  7979                           indf1	equ	0xFE7
  7980                           postinc1	equ	0xFE6
  7981                           postdec1	equ	0xFE5
  7982                           fsr1h	equ	0xFE2
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function _LCD_placeCursor *****************
  7992 ;; Defined at:
  7993 ;;		line 279 in file "LCD.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  x               1    wreg     unsigned char 
  7996 ;;  y               1   25[COMRAM] unsigned char 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;  x               1   28[COMRAM] unsigned char 
  7999 ;;  address         1   29[COMRAM] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;		None               void
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : F/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8009 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8012 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8013 ;;Total ram usage:        5 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    5
  8016 ;; This function calls:
  8017 ;;		_delay_ms
  8018 ;;		_delay_us
  8019 ;; This function is called by:
  8020 ;;		_LCD_printString
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           	psect	text40
  8025  01055A                     __ptext40:
  8026                           	opt stack 0
  8027  01055A                     _LCD_placeCursor:
  8028                           	opt stack 22
  8029                           
  8030                           ;incstack = 0
  8031                           ;LCD_placeCursor@x stored from wreg
  8032  01055A  6E1D               	movwf	LCD_placeCursor@x,c
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;LCD.c: 283: char address = 0x80 + x + (0x40 * y);
  8036  01055C  501A               	movf	LCD_placeCursor@y,w,c
  8037  01055E  0D40               	mullw	64
  8038  010560  50F3               	movf	prodl,w,c
  8039  010562  241D               	addwf	LCD_placeCursor@x,w,c
  8040  010564  0F80               	addlw	128
  8041  010566  6E1E               	movwf	LCD_placeCursor@address,c
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;LCD.c: 284: delay_ms(3);
  8045  010568  0E03               	movlw	3
  8046  01056A  6E0A               	movwf	delay_ms@x,c
  8047  01056C  0E00               	movlw	0
  8048  01056E  6A0B               	clrf	delay_ms@x+1,c
  8049  010570  6A0C               	clrf	delay_ms@x+2,c
  8050  010572  6A0D               	clrf	delay_ms@x+3,c
  8051  010574  EC66  F089         	call	_delay_ms	;wreg free
  8052                           
  8053                           ;LCD.c: 285: switch(mode)
  8054  010578  D093               	goto	l4531
  8055  01057A                     l4497:
  8056                           
  8057                           ;LCD.c: 288: delay_us(40);;
  8058  01057A  EC53  F084         	call	PL2	;call to abstracted procedure
  8059  01057E  EC32  F08A         	call	_delay_us	;wreg free
  8060                           
  8061                           ;LCD.c: 289: PORTEbits.RE4 = 1;
  8062  010582  8884               	bsf	3972,4,c	;volatile
  8063                           
  8064                           ;LCD.c: 290: { PORTHbits.RH5 = ((0x80 + (address >> 4) >> 3) & 1); PORTEbits.RE1 = ((0x8
      +                          0 + (address >> 4) >> 2) & 1); PORTEbits.RE0 = ((0x80 + (address >> 4) >> 1) & 1); PORTE
      +                          bits.RE2 = (0x80 + (address >> 4) & 1); };
  8065  010584  D8A1               	call	PL16	;call to abstracted procedure
  8066  010586  90D8               	bcf	status,0,c
  8067  010588  321B               	rrcf	??_LCD_placeCursor,f,c
  8068  01058A  90D8               	bcf	status,0,c
  8069  01058C  321B               	rrcf	??_LCD_placeCursor,f,c
  8070  01058E  90D8               	bcf	status,0,c
  8071  010590  321B               	rrcf	??_LCD_placeCursor,f,c
  8072  010592  D88E               	call	PL14	;call to abstracted procedure
  8073  010594  3A1B               	swapf	??_LCD_placeCursor,f,c
  8074  010596  0E0F               	movlw	15
  8075  010598  161B               	andwf	??_LCD_placeCursor,f,c
  8076  01059A  0E80               	movlw	128
  8077  01059C  261B               	addwf	??_LCD_placeCursor,f,c
  8078  01059E  90D8               	bcf	status,0,c
  8079  0105A0  321B               	rrcf	??_LCD_placeCursor,f,c
  8080  0105A2  90D8               	bcf	status,0,c
  8081  0105A4  321B               	rrcf	??_LCD_placeCursor,f,c
  8082  0105A6  0E01               	movlw	1
  8083  0105A8  D8A1               	call	PL20	;call to abstracted procedure
  8084  0105AA  D88E               	call	PL16	;call to abstracted procedure
  8085  0105AC  90D8               	bcf	status,0,c
  8086  0105AE  321B               	rrcf	??_LCD_placeCursor,f,c
  8087  0105B0  0E01               	movlw	1
  8088  0105B2  D8A4               	call	PL22	;call to abstracted procedure
  8089  0105B4  D889               	call	PL16	;call to abstracted procedure
  8090  0105B6  D890               	call	PL18	;call to abstracted procedure
  8091                           
  8092                           ;LCD.c: 291: delay_us(40);;
  8093  0105B8  EC53  F084         	call	PL2	;call to abstracted procedure
  8094  0105BC  EC32  F08A         	call	_delay_us	;wreg free
  8095                           
  8096                           ;LCD.c: 292: PORTEbits.RE4 = 0;
  8097  0105C0  9884               	bcf	3972,4,c	;volatile
  8098                           
  8099                           ;LCD.c: 294: delay_us(40);;
  8100  0105C2  EC53  F084         	call	PL2	;call to abstracted procedure
  8101  0105C6  EC32  F08A         	call	_delay_us	;wreg free
  8102                           
  8103                           ;LCD.c: 295: PORTEbits.RE4 = 1;
  8104  0105CA  8884               	bsf	3972,4,c	;volatile
  8105                           
  8106                           ;LCD.c: 296: { PORTHbits.RH5 = (((address & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((address
      +                           & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((address & 0x0F) >> 1) & 1); PORTEbits.RE2 = ((ad
      +                          dress & 0x0F) & 1); };
  8107  0105CC  D89E               	call	PL30	;call to abstracted procedure
  8108  0105CE  D870               	call	PL14	;call to abstracted procedure
  8109  0105D0  90D8               	bcf	status,0,c
  8110  0105D2  321B               	rrcf	??_LCD_placeCursor,f,c
  8111  0105D4  90D8               	bcf	status,0,c
  8112  0105D6  321B               	rrcf	??_LCD_placeCursor,f,c
  8113  0105D8  0E01               	movlw	1
  8114  0105DA  D888               	call	PL20	;call to abstracted procedure
  8115  0105DC  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8116  0105E0  90D8               	bcf	status,0,c
  8117  0105E2  321B               	rrcf	??_LCD_placeCursor,f,c
  8118  0105E4  0E01               	movlw	1
  8119  0105E6  D88A               	call	PL22	;call to abstracted procedure
  8120  0105E8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8121  0105EC  D875               	call	PL18	;call to abstracted procedure
  8122                           
  8123                           ;LCD.c: 297: delay_us(40);;
  8124  0105EE  EC53  F084         	call	PL2	;call to abstracted procedure
  8125  0105F2  EC32  F08A         	call	_delay_us	;wreg free
  8126                           
  8127                           ;LCD.c: 298: PORTEbits.RE4 = 0;
  8128  0105F6  9884               	bcf	3972,4,c	;volatile
  8129                           
  8130                           ;LCD.c: 299: break;
  8131  0105F8  0012               	return	
  8132  0105FA                     l94:
  8133  0105FA  F000               	nop		;# 
  8134                           
  8135                           ;LCD.c: 303: PORTEbits.RE4 = 1;
  8136  0105FC  8884               	bsf	3972,4,c	;volatile
  8137                           
  8138                           ;LCD.c: 304: { PORTHbits.RH5 = ((address >> 7) & 1); PORTEbits.RE1 = ((address >> 6) & 1
      +                          ); PORTEbits.RE0 = ((address >> 5) & 1); PORTEbits.RE2 = ((address >> 4) & 1); PORTHbits
      +                          .RH0 = ((address >> 3) & 1); PORTHbits.RH1 = ((address >> 2) & 1); PORTHbits.RH2 = ((ad
  8139  0105FE  6A1B               	clrf	??_LCD_placeCursor& (0+255),c
  8140  010600  AE1E               	btfss	LCD_placeCursor@address,7,c
  8141  010602  D001               	bra	u2315
  8142  010604  2A1B               	incf	??_LCD_placeCursor& (0+255),f,c
  8143  010606                     u2315:
  8144  010606  D854               	call	PL14	;call to abstracted procedure
  8145  010608  0E06               	movlw	6
  8146  01060A  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8147  01060C                     u2325:
  8148  01060C  90D8               	bcf	status,0,c
  8149  01060E  321B               	rrcf	??_LCD_placeCursor,f,c
  8150  010610  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8151  010612  D7FC               	goto	u2325
  8152  010614  0E01               	movlw	1
  8153  010616  D86A               	call	PL20	;call to abstracted procedure
  8154  010618  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8155  01061C  0E05               	movlw	5
  8156  01061E  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8157  010620                     u2335:
  8158  010620  90D8               	bcf	status,0,c
  8159  010622  321B               	rrcf	??_LCD_placeCursor,f,c
  8160  010624  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8161  010626  D7FC               	goto	u2335
  8162  010628  0E01               	movlw	1
  8163  01062A  D868               	call	PL22	;call to abstracted procedure
  8164  01062C  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8165  010630  3A1B               	swapf	??_LCD_placeCursor,f,c
  8166  010632  0E0F               	movlw	15
  8167  010634  161B               	andwf	??_LCD_placeCursor,f,c
  8168  010636  D850               	call	PL18	;call to abstracted procedure
  8169  010638  D868               	call	PL30	;call to abstracted procedure
  8170  01063A  0E01               	movlw	1
  8171  01063C  161B               	andwf	??_LCD_placeCursor,f,c
  8172  01063E  5087               	movf	3975,w,c	;volatile
  8173  010640  181B               	xorwf	??_LCD_placeCursor,w,c
  8174  010642  0BFE               	andlw	-2
  8175  010644  181B               	xorwf	??_LCD_placeCursor,w,c
  8176  010646  6E87               	movwf	3975,c	;volatile
  8177  010648  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8178  01064C  90D8               	bcf	status,0,c
  8179  01064E  321B               	rrcf	??_LCD_placeCursor,f,c
  8180  010650  90D8               	bcf	status,0,c
  8181  010652  321B               	rrcf	??_LCD_placeCursor,f,c
  8182  010654  0E01               	movlw	1
  8183  010656  161B               	andwf	??_LCD_placeCursor,f,c
  8184  010658  461B               	rlncf	??_LCD_placeCursor,f,c
  8185  01065A  5087               	movf	3975,w,c	;volatile
  8186  01065C  181B               	xorwf	??_LCD_placeCursor,w,c
  8187  01065E  0BFD               	andlw	-3
  8188  010660  181B               	xorwf	??_LCD_placeCursor,w,c
  8189  010662  6E87               	movwf	3975,c	;volatile
  8190  010664  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8191  010668  90D8               	bcf	status,0,c
  8192  01066A  321B               	rrcf	??_LCD_placeCursor,f,c
  8193  01066C  0E01               	movlw	1
  8194  01066E  161B               	andwf	??_LCD_placeCursor,f,c
  8195  010670  461B               	rlncf	??_LCD_placeCursor,f,c
  8196  010672  461B               	rlncf	??_LCD_placeCursor,f,c
  8197  010674  5087               	movf	3975,w,c	;volatile
  8198  010676  181B               	xorwf	??_LCD_placeCursor,w,c
  8199  010678  0BFB               	andlw	-5
  8200  01067A  181B               	xorwf	??_LCD_placeCursor,w,c
  8201  01067C  6E87               	movwf	3975,c	;volatile
  8202  01067E  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8203  010682  0E01               	movlw	1
  8204  010684  161B               	andwf	??_LCD_placeCursor,f,c
  8205  010686  3A1B               	swapf	??_LCD_placeCursor,f,c
  8206  010688  461B               	rlncf	??_LCD_placeCursor,f,c
  8207  01068A  5084               	movf	3972,w,c	;volatile
  8208  01068C  181B               	xorwf	??_LCD_placeCursor,w,c
  8209  01068E  0BDF               	andlw	-33
  8210  010690  181B               	xorwf	??_LCD_placeCursor,w,c
  8211  010692  6E84               	movwf	3972,c	;volatile
  8212                           
  8213                           ;LCD.c: 305: delay_us(40);;
  8214  010694  EC53  F084         	call	PL2	;call to abstracted procedure
  8215  010698  EC32  F08A         	call	_delay_us	;wreg free
  8216                           
  8217                           ;LCD.c: 306: PORTEbits.RE4 = 0;
  8218  01069C  9884               	bcf	3972,4,c	;volatile
  8219                           
  8220                           ;LCD.c: 307: break;
  8221  01069E  0012               	return	
  8222  0106A0                     l4531:
  8223  0106A0  5058               	movf	_mode,w,c	;volatile
  8224                           
  8225                           ; Switch size 1, requested type "space"
  8226                           ; Number of cases is 2, Range of values is 1 to 2
  8227                           ; switch strategies available:
  8228                           ; Name         Instructions Cycles
  8229                           ; simple_byte            7     4 (average)
  8230                           ;	Chosen strategy is simple_byte
  8231  0106A2  0A01               	xorlw	1	; case 1
  8232  0106A4  E101 D769          	bz	l4497
  8233  0106A8  0A03               	xorlw	3	; case 2
  8234  0106AA  A4D8               	btfss	status,2,c
  8235  0106AC  0012               	return	
  8236  0106AE  D7A5               	goto	l94
  8237  0106B0                     __end_of_LCD_placeCursor:
  8238                           	opt stack 0
  8239  0106B0                     PL14:
  8240                           	opt stack 22
  8241  0106B0  0E01               	movlw	1
  8242  0106B2  161B               	andwf	??_LCD_placeCursor,f,c
  8243  0106B4  3A1B               	swapf	??_LCD_placeCursor,f,c
  8244  0106B6  461B               	rlncf	??_LCD_placeCursor,f,c
  8245  0106B8  5087               	movf	3975,w,c	;volatile
  8246  0106BA  181B               	xorwf	??_LCD_placeCursor,w,c
  8247  0106BC  0BDF               	andlw	-33
  8248  0106BE  181B               	xorwf	??_LCD_placeCursor,w,c
  8249  0106C0  6E87               	movwf	3975,c	;volatile
  8250  0106C2  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8251  0106C6  0012               	return	
  8252  0106C8                     __end_ofPL14:
  8253                           	opt stack 0
  8254  0106C8                     PL16:
  8255                           	opt stack 22
  8256  0106C8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8257  0106CC  3A1B               	swapf	??_LCD_placeCursor,f,c
  8258  0106CE  0E0F               	movlw	15
  8259  0106D0  161B               	andwf	??_LCD_placeCursor,f,c
  8260  0106D2  0E80               	movlw	128
  8261  0106D4  261B               	addwf	??_LCD_placeCursor,f,c
  8262  0106D6  0C80               	retlw	128
  8263  0106D8                     __end_ofPL16:
  8264                           	opt stack 0
  8265  0106D8                     PL18:
  8266                           	opt stack 22
  8267  0106D8  0E01               	movlw	1
  8268  0106DA  161B               	andwf	??_LCD_placeCursor,f,c
  8269  0106DC  461B               	rlncf	??_LCD_placeCursor,f,c
  8270  0106DE  461B               	rlncf	??_LCD_placeCursor,f,c
  8271  0106E0  5084               	movf	3972,w,c	;volatile
  8272  0106E2  181B               	xorwf	??_LCD_placeCursor,w,c
  8273  0106E4  0BFB               	andlw	-5
  8274  0106E6  181B               	xorwf	??_LCD_placeCursor,w,c
  8275  0106E8  6E84               	movwf	3972,c	;volatile
  8276  0106EA  0012               	return	
  8277  0106EC                     __end_ofPL18:
  8278                           	opt stack 0
  8279  0106EC                     PL20:
  8280                           	opt stack 22
  8281  0106EC  161B               	andwf	??_LCD_placeCursor,f,c
  8282  0106EE  461B               	rlncf	??_LCD_placeCursor,f,c
  8283  0106F0  5084               	movf	3972,w,c	;volatile
  8284  0106F2  181B               	xorwf	??_LCD_placeCursor,w,c
  8285  0106F4  0BFD               	andlw	-3
  8286  0106F6  181B               	xorwf	??_LCD_placeCursor,w,c
  8287  0106F8  6E84               	movwf	3972,c	;volatile
  8288  0106FA  0012               	return	
  8289  0106FC                     __end_ofPL20:
  8290                           	opt stack 0
  8291  0106FC                     PL22:
  8292                           	opt stack 22
  8293  0106FC  161B               	andwf	??_LCD_placeCursor,f,c
  8294  0106FE  5084               	movf	3972,w,c	;volatile
  8295  010700  181B               	xorwf	??_LCD_placeCursor,w,c
  8296  010702  0BFE               	andlw	-2
  8297  010704  181B               	xorwf	??_LCD_placeCursor,w,c
  8298  010706  6E84               	movwf	3972,c	;volatile
  8299  010708  0012               	return	
  8300  01070A                     __end_ofPL22:
  8301                           	opt stack 0
  8302  01070A                     PL30:
  8303                           	opt stack 22
  8304  01070A  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8305  01070E  90D8               	bcf	status,0,c
  8306  010710  321B               	rrcf	??_LCD_placeCursor,f,c
  8307  010712  90D8               	bcf	status,0,c
  8308  010714  321B               	rrcf	??_LCD_placeCursor,f,c
  8309  010716  90D8               	bcf	status,0,c
  8310  010718  321B               	rrcf	??_LCD_placeCursor,f,c
  8311  01071A  0012               	return	
  8312  01071C                     __end_ofPL30:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           intcon3	equ	0xFF0
  8323                           indf0	equ	0xFEF
  8324                           postinc0	equ	0xFEE
  8325                           fsr0h	equ	0xFEA
  8326                           fsr0l	equ	0xFE9
  8327                           wreg	equ	0xFE8
  8328                           indf1	equ	0xFE7
  8329                           postinc1	equ	0xFE6
  8330                           postdec1	equ	0xFE5
  8331                           fsr1h	equ	0xFE2
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           postdec2	equ	0xFDD
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _delay_us *****************
  8341 ;; Defined at:
  8342 ;;		line 51 in file "delays.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  x               4    5[COMRAM] long 
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;		None
  8347 ;; Return value:  Size  Location     Type
  8348 ;;		None               void
  8349 ;; Registers used:
  8350 ;;		wreg, status,2, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8359 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8360 ;;Total ram usage:        4 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    3
  8363 ;; This function calls:
  8364 ;;		Nothing
  8365 ;; This function is called by:
  8366 ;;		_LCD_init4bit
  8367 ;;		_LCD_placeCursor
  8368 ;;		_LCD_printString
  8369 ;;		_fft_init
  8370 ;;		_PS2_init
  8371 ;;		_PS2_readGamepad
  8372 ;;		_PS2_shiftInOut
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text41
  8377  011464                     __ptext41:
  8378                           	opt stack 0
  8379  011464                     _delay_us:
  8380                           	opt stack 24
  8381                           
  8382                           ;delays.c: 53: x -= 3;
  8383                           
  8384                           ;incstack = 0
  8385  011464  0EFD               	movlw	253
  8386  011466  D005               	goto	L2
  8387  011468                     l4407:
  8388                           
  8389                           ;delays.c: 55: {
  8390                           ;delays.c: 56: _delay((unsigned long)((1)*(64000000/4000000.0)));
  8391  011468  0E05               	movlw	5
  8392  01146A                     u3017:
  8393  01146A  2EE8               	decfsz	wreg,f,c
  8394  01146C  D7FE               	goto	u3017
  8395  01146E  F000               	nop	
  8396                           
  8397                           ;delays.c: 57: x -= 2;
  8398  011470  0EFE               	movlw	254
  8399  011472                     L2:
  8400  011472  2606               	addwf	delay_us@x,f,c
  8401  011474  0EFF               	movlw	255
  8402  011476  2207               	addwfc	delay_us@x+1,f,c
  8403  011478  2208               	addwfc	delay_us@x+2,f,c
  8404  01147A  2209               	addwfc	delay_us@x+3,f,c
  8405  01147C  5009               	movf	delay_us@x+3,w,c
  8406  01147E  0A80               	xorlw	128
  8407  011480  0F80               	addlw	128
  8408  011482  E108               	bnz	u2175
  8409  011484  0E00               	movlw	0
  8410  011486  5C08               	subwf	delay_us@x+2,w,c
  8411  011488  E105               	bnz	u2175
  8412  01148A  0E00               	movlw	0
  8413  01148C  5C07               	subwf	delay_us@x+1,w,c
  8414  01148E  E102               	bnz	u2175
  8415  011490  0E01               	movlw	1
  8416  011492  5C06               	subwf	delay_us@x,w,c
  8417  011494                     u2175:
  8418  011494  A0D8               	btfss	status,0,c
  8419  011496  0012               	return	
  8420  011498  D7E7               	goto	l4407
  8421  01149A                     __end_of_delay_us:
  8422                           	opt stack 0
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           intcon2	equ	0xFF1
  8431                           intcon3	equ	0xFF0
  8432                           indf0	equ	0xFEF
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           indf1	equ	0xFE7
  8438                           postinc1	equ	0xFE6
  8439                           postdec1	equ	0xFE5
  8440                           fsr1h	equ	0xFE2
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _delay_ms *****************
  8450 ;; Defined at:
  8451 ;;		line 62 in file "delays.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  x               4    9[COMRAM] long 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  time            4   21[COMRAM] unsigned long 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;		None               void
  8458 ;; Registers used:
  8459 ;;		wreg, status,2, status,0, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8466 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8467 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8468 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8469 ;;Total ram usage:       16 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    4
  8472 ;; This function calls:
  8473 ;;		_millis
  8474 ;; This function is called by:
  8475 ;;		_LCD_init4bit
  8476 ;;		_LCD_placeCursor
  8477 ;;		_LCD_printString
  8478 ;;		_RCMode
  8479 ;;		_main
  8480 ;;		_PS2_readGamepad
  8481 ;;		_PS2_sendCommandString
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           	psect	text42
  8486  0112CC                     __ptext42:
  8487                           	opt stack 0
  8488  0112CC                     _delay_ms:
  8489                           	opt stack 23
  8490                           
  8491                           ;delays.c: 64: unsigned long time = millis();
  8492                           
  8493                           ;incstack = 0
  8494  0112CC  EC02  F08B         	call	_millis	;wreg free
  8495  0112D0  C006  F016         	movff	?_millis,delay_ms@time
  8496  0112D4  C007  F017         	movff	?_millis+1,delay_ms@time+1
  8497  0112D8  C008  F018         	movff	?_millis+2,delay_ms@time+2
  8498  0112DC  C009  F019         	movff	?_millis+3,delay_ms@time+3
  8499  0112E0                     l4417:
  8500  0112E0  EC02  F08B         	call	_millis	;wreg free
  8501  0112E4  C006  F00E         	movff	?_millis,??_delay_ms
  8502  0112E8  C007  F00F         	movff	?_millis+1,??_delay_ms+1
  8503  0112EC  C008  F010         	movff	?_millis+2,??_delay_ms+2
  8504  0112F0  C009  F011         	movff	?_millis+3,??_delay_ms+3
  8505  0112F4  5016               	movf	delay_ms@time,w,c
  8506  0112F6  5C0E               	subwf	??_delay_ms,w,c
  8507  0112F8  6E12               	movwf	(??_delay_ms+4)& (0+255),c
  8508  0112FA  5017               	movf	delay_ms@time+1,w,c
  8509  0112FC  580F               	subwfb	??_delay_ms+1,w,c
  8510  0112FE  6E13               	movwf	(??_delay_ms+5)& (0+255),c
  8511  011300  5018               	movf	delay_ms@time+2,w,c
  8512  011302  5810               	subwfb	??_delay_ms+2,w,c
  8513  011304  6E14               	movwf	(??_delay_ms+6)& (0+255),c
  8514  011306  5019               	movf	delay_ms@time+3,w,c
  8515  011308  5811               	subwfb	??_delay_ms+3,w,c
  8516  01130A  6E15               	movwf	(??_delay_ms+7)& (0+255),c
  8517  01130C  500A               	movf	delay_ms@x,w,c
  8518  01130E  5C12               	subwf	??_delay_ms+4,w,c
  8519  011310  500B               	movf	delay_ms@x+1,w,c
  8520  011312  5813               	subwfb	??_delay_ms+5,w,c
  8521  011314  500C               	movf	delay_ms@x+2,w,c
  8522  011316  5814               	subwfb	??_delay_ms+6,w,c
  8523  011318  500D               	movf	delay_ms@x+3,w,c
  8524  01131A  5815               	subwfb	??_delay_ms+7,w,c
  8525  01131C  B0D8               	btfsc	status,0,c
  8526  01131E  0012               	return	
  8527  011320  D7DF               	goto	l4417
  8528  011322                     __end_of_delay_ms:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           intcon	equ	0xFF2
  8537                           intcon2	equ	0xFF1
  8538                           intcon3	equ	0xFF0
  8539                           indf0	equ	0xFEF
  8540                           postinc0	equ	0xFEE
  8541                           fsr0h	equ	0xFEA
  8542                           fsr0l	equ	0xFE9
  8543                           wreg	equ	0xFE8
  8544                           indf1	equ	0xFE7
  8545                           postinc1	equ	0xFE6
  8546                           postdec1	equ	0xFE5
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           postdec2	equ	0xFDD
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _millis *****************
  8557 ;; Defined at:
  8558 ;;		line 110 in file "delays.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  4    5[COMRAM] unsigned long 
  8565 ;; Registers used:
  8566 ;;		None
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8576 ;;Total ram usage:        4 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    3
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_delay_ms
  8583 ;;		_PS2_readGamepad
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text43
  8588  011604                     __ptext43:
  8589                           	opt stack 0
  8590  011604                     _millis:
  8591                           	opt stack 23
  8592                           
  8593                           ;delays.c: 112: return millisCount;
  8594                           
  8595                           ;incstack = 0
  8596  011604  C0B5  F006         	movff	_millisCount,?_millis
  8597  011608  C0B6  F007         	movff	_millisCount+1,?_millis+1
  8598  01160C  C0B7  F008         	movff	_millisCount+2,?_millis+2
  8599  011610  C0B8  F009         	movff	_millisCount+3,?_millis+3
  8600  011614  0012               	return	
  8601  011616                     __end_of_millis:
  8602                           	opt stack 0
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           intcon	equ	0xFF2
  8610                           intcon2	equ	0xFF1
  8611                           intcon3	equ	0xFF0
  8612                           indf0	equ	0xFEF
  8613                           postinc0	equ	0xFEE
  8614                           fsr0h	equ	0xFEA
  8615                           fsr0l	equ	0xFE9
  8616                           wreg	equ	0xFE8
  8617                           indf1	equ	0xFE7
  8618                           postinc1	equ	0xFE6
  8619                           postdec1	equ	0xFE5
  8620                           fsr1h	equ	0xFE2
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _encoderInterrupt *****************
  8630 ;; Defined at:
  8631 ;;		line 40 in file "encoders.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8649 ;;Total ram usage:        3 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    2
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		Interrupt level 1
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	intcodelo
  8660  000018                     __pintcodelo:
  8661                           	opt stack 0
  8662  000018                     _encoderInterrupt:
  8663                           	opt stack 20
  8664                           
  8665                           ;incstack = 0
  8666  000018  CFD8 F001          	movff	status,??_encoderInterrupt
  8667  00001C  CFE8 F002          	movff	wreg,??_encoderInterrupt+1
  8668  000020  CFE0 F003          	movff	bsr,??_encoderInterrupt+2
  8669                           
  8670                           ;encoders.c: 42: if(INT1IF == 1)
  8671  000024  A0F0               	btfss	intcon3,0,c	;volatile
  8672  000026  D00E               	goto	i1l395
  8673                           
  8674                           ;encoders.c: 43: {
  8675                           ;encoders.c: 44: if(PORTBbits.RB0 == 1)
  8676  000028  A081               	btfss	3969,0,c	;volatile
  8677  00002A  D004               	goto	i1l4393
  8678                           
  8679                           ;encoders.c: 45: {
  8680                           ;encoders.c: 46: left_count--;
  8681  00002C  0EFF               	movlw	255
  8682  00002E  0100               	movlb	0	; () banked
  8683  000030  07B1               	decf	_left_count& (0+255),f,b	;volatile
  8684  000032  D003               	goto	L5
  8685  000034                     i1l4393:
  8686                           
  8687                           ;encoders.c: 48: else
  8688                           ;encoders.c: 49: {
  8689                           ;encoders.c: 50: left_count++;
  8690  000034  0100               	movlb	0	; () banked
  8691  000036  2BB1               	incf	_left_count& (0+255),f,b	;volatile
  8692  000038  0E00               	movlw	0
  8693  00003A                     L5:
  8694  00003A  23B2               	addwfc	(_left_count+1)& (0+255),f,b	;volatile
  8695  00003C  23B3               	addwfc	(_left_count+2)& (0+255),f,b	;volatile
  8696  00003E  23B4               	addwfc	(_left_count+3)& (0+255),f,b	;volatile
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;encoders.c: 51: }
  8700                           ;encoders.c: 52: INT1IF = 0;
  8701  000040  90F0               	bcf	intcon3,0,c	;volatile
  8702                           
  8703                           ;encoders.c: 53: }
  8704  000042  D00F               	goto	i1l402
  8705  000044                     i1l395:
  8706                           
  8707                           ;encoders.c: 54: else if(INT3IF == 1)
  8708  000044  A4F0               	btfss	intcon3,2,c	;volatile
  8709  000046  D00D               	goto	i1l402
  8710                           
  8711                           ;encoders.c: 55: {
  8712                           ;encoders.c: 56: if(PORTBbits.RB2 == 1)
  8713  000048  A481               	btfss	3969,2,c	;volatile
  8714  00004A  D004               	goto	i1l4401
  8715                           
  8716                           ;encoders.c: 57: {
  8717                           ;encoders.c: 58: right_count--;
  8718  00004C  0EFF               	movlw	255
  8719  00004E  0100               	movlb	0	; () banked
  8720  000050  07B9               	decf	_right_count& (0+255),f,b	;volatile
  8721  000052  D003               	goto	L6
  8722  000054                     i1l4401:
  8723                           
  8724                           ;encoders.c: 60: else
  8725                           ;encoders.c: 61: {
  8726                           ;encoders.c: 62: right_count++;
  8727  000054  0100               	movlb	0	; () banked
  8728  000056  2BB9               	incf	_right_count& (0+255),f,b	;volatile
  8729  000058  0E00               	movlw	0
  8730  00005A                     L6:
  8731  00005A  23BA               	addwfc	(_right_count+1)& (0+255),f,b	;volatile
  8732  00005C  23BB               	addwfc	(_right_count+2)& (0+255),f,b	;volatile
  8733  00005E  23BC               	addwfc	(_right_count+3)& (0+255),f,b	;volatile
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;encoders.c: 63: }
  8737                           ;encoders.c: 64: INT3IF = 0;
  8738  000060  94F0               	bcf	intcon3,2,c	;volatile
  8739  000062                     i1l402:
  8740  000062  C003  FFE0         	movff	??_encoderInterrupt+2,bsr
  8741  000066  C002  FFE8         	movff	??_encoderInterrupt+1,wreg
  8742  00006A  C001  FFD8         	movff	??_encoderInterrupt,status
  8743  00006E  0010               	retfie	
  8744  000070                     __end_of_encoderInterrupt:
  8745                           	opt stack 0
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon	equ	0xFF2
  8753                           intcon2	equ	0xFF1
  8754                           intcon3	equ	0xFF0
  8755                           indf0	equ	0xFEF
  8756                           postinc0	equ	0xFEE
  8757                           fsr0h	equ	0xFEA
  8758                           fsr0l	equ	0xFE9
  8759                           wreg	equ	0xFE8
  8760                           indf1	equ	0xFE7
  8761                           postinc1	equ	0xFE6
  8762                           postdec1	equ	0xFE5
  8763                           fsr1h	equ	0xFE2
  8764                           fsr1l	equ	0xFE1
  8765                           bsr	equ	0xFE0
  8766                           indf2	equ	0xFDF
  8767                           postinc2	equ	0xFDE
  8768                           postdec2	equ	0xFDD
  8769                           fsr2h	equ	0xFDA
  8770                           fsr2l	equ	0xFD9
  8771                           status	equ	0xFD8
  8772                           
  8773 ;; *************** function _communicationInterruptHandler *****************
  8774 ;; Defined at:
  8775 ;;		line 203 in file "main.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;		None               void
  8782 ;; Registers used:
  8783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8793 ;;Total ram usage:        2 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    1
  8796 ;; This function calls:
  8797 ;;		_tickMillis
  8798 ;; This function is called by:
  8799 ;;		Interrupt level 2
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	intcode
  8804  000008                     __pintcode:
  8805                           	opt stack 0
  8806  000008                     _communicationInterruptHandler:
  8807                           	opt stack 20
  8808                           
  8809                           ;incstack = 0
  8810  000008  CFD9 F004          	movff	fsr2l,??_communicationInterruptHandler
  8811  00000C  CFDA F005          	movff	fsr2h,??_communicationInterruptHandler+1
  8812  000010  EF07  F089         	goto	int_func
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodh	equ	0xFF4
  8818                           prodl	equ	0xFF3
  8819                           intcon	equ	0xFF2
  8820                           intcon2	equ	0xFF1
  8821                           intcon3	equ	0xFF0
  8822                           indf0	equ	0xFEF
  8823                           postinc0	equ	0xFEE
  8824                           fsr0h	equ	0xFEA
  8825                           fsr0l	equ	0xFE9
  8826                           wreg	equ	0xFE8
  8827                           indf1	equ	0xFE7
  8828                           postinc1	equ	0xFE6
  8829                           postdec1	equ	0xFE5
  8830                           fsr1h	equ	0xFE2
  8831                           fsr1l	equ	0xFE1
  8832                           bsr	equ	0xFE0
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840                           	psect	intcode_body
  8841  01120E                     __pintcode_body:
  8842                           	opt stack 20
  8843  01120E                     int_func:
  8844                           	opt stack 20
  8845                           
  8846                           ;main.c: 205: if(TMR0IF == 1)
  8847  01120E  A4F2               	btfss	intcon,2,c	;volatile
  8848  011210  D007               	goto	i2l284
  8849                           
  8850                           ;main.c: 206: {
  8851                           ;main.c: 207: TMR0L = 193;
  8852  011212  0EC1               	movlw	193
  8853  011214  6ED6               	movwf	4054,c	;volatile
  8854                           
  8855                           ;main.c: 208: TMR0IF = 0;
  8856  011216  94F2               	bcf	intcon,2,c	;volatile
  8857                           
  8858                           ;main.c: 209: TMR0IE = 1;
  8859  011218  8AF2               	bsf	intcon,5,c	;volatile
  8860                           
  8861                           ;main.c: 210: tickMillis();
  8862  01121A  EC29  F08B         	call	_tickMillis	;wreg free
  8863  01121E  D025               	goto	i2l282
  8864  011220                     i2l284:
  8865                           
  8866                           ;main.c: 224: }
  8867                           ;main.c: 225: if(PIR1bits.RC1IF)
  8868  011220  AA9E               	btfss	3998,5,c	;volatile
  8869  011222  D00A               	goto	i2l4375
  8870                           
  8871                           ;main.c: 226: {
  8872                           ;main.c: 227: FONA_BUFF[FONA_INDEX] = RCREG1;
  8873  011224  0101               	movlb	1	; () banked
  8874  011226  0E00               	movlw	low _FONA_BUFF	;volatile
  8875  011228  2453               	addwf	_FONA_INDEX,w,c	;volatile
  8876  01122A  6ED9               	movwf	fsr2l,c
  8877  01122C  6ADA               	clrf	fsr2h,c
  8878  01122E  0E01               	movlw	high _FONA_BUFF	;volatile
  8879  011230  22DA               	addwfc	fsr2h,f,c
  8880  011232  CFAE FFDF          	movff	4014,indf2	;volatile
  8881                           
  8882                           ; BSR set to: 1
  8883                           ;main.c: 228: FONA_INDEX++;
  8884  011236  2A53               	incf	_FONA_INDEX,f,c	;volatile
  8885  011238                     i2l4375:
  8886                           
  8887                           ;main.c: 229: }
  8888                           ;main.c: 230: if(PIR3bits.RC2IF)
  8889  011238  50A4               	movf	4004,w,c	;volatile
  8890                           
  8891                           ;main.c: 233: }
  8892                           ;main.c: 234: if(PIR6bits.RC3IF)
  8893                           
  8894                           ;main.c: 231: {
  8895  01123A  AAA6               	btfss	4006,5,c	;volatile
  8896  01123C  D00A               	goto	i2l4381
  8897                           
  8898                           ;main.c: 235: {
  8899                           ;main.c: 236: PIXY_BUFF[PIXY_INDEX] = RCREG3;
  8900  01123E  0E80               	movlw	low _PIXY_BUFF
  8901  011240  2454               	addwf	_PIXY_INDEX,w,c	;volatile
  8902  011242  6ED9               	movwf	fsr2l,c
  8903  011244  6ADA               	clrf	fsr2h,c
  8904  011246  0E02               	movlw	high _PIXY_BUFF
  8905  011248  22DA               	addwfc	fsr2h,f,c
  8906  01124A  010F               	movlb	15	; () banked
  8907  01124C  CF2A FFDF          	movff	3882,indf2	;volatile
  8908                           
  8909                           ; BSR set to: 15
  8910                           ;main.c: 237: PIXY_INDEX++;
  8911  011250  2A54               	incf	_PIXY_INDEX,f,c	;volatile
  8912  011252                     i2l4381:
  8913                           
  8914                           ;main.c: 238: }
  8915                           ;main.c: 239: if(PIR6bits.RC4IF)
  8916  011252  AEA6               	btfss	4006,7,c	;volatile
  8917  011254  D00A               	goto	i2l282
  8918                           
  8919                           ;main.c: 240: {
  8920                           ;main.c: 241: USB_BUFF[USB_INDEX] = RCREG4;
  8921  011256  0E74               	movlw	low _USB_BUFF
  8922  011258  2456               	addwf	_USB_INDEX,w,c	;volatile
  8923  01125A  6ED9               	movwf	fsr2l,c
  8924  01125C  6ADA               	clrf	fsr2h,c
  8925  01125E  0E04               	movlw	high _USB_BUFF
  8926  011260  22DA               	addwfc	fsr2h,f,c
  8927  011262  010E               	movlb	14	; () banked
  8928  011264  CEFA FFDF          	movff	3834,indf2	;volatile
  8929                           
  8930                           ; BSR set to: 14
  8931                           ;main.c: 242: USB_INDEX++;
  8932  011268  2A56               	incf	_USB_INDEX,f,c	;volatile
  8933  01126A                     i2l282:
  8934  01126A  C005  FFDA         	movff	??_communicationInterruptHandler+1,fsr2h
  8935  01126E  C004  FFD9         	movff	??_communicationInterruptHandler,fsr2l
  8936  011272  0011               	retfie		f
  8937  011274                     __end_of_communicationInterruptHandler:
  8938                           	opt stack 0
  8939                           tblptru	equ	0xFF8
  8940                           tblptrh	equ	0xFF7
  8941                           tblptrl	equ	0xFF6
  8942                           tablat	equ	0xFF5
  8943                           prodh	equ	0xFF4
  8944                           prodl	equ	0xFF3
  8945                           intcon	equ	0xFF2
  8946                           intcon2	equ	0xFF1
  8947                           intcon3	equ	0xFF0
  8948                           indf0	equ	0xFEF
  8949                           postinc0	equ	0xFEE
  8950                           fsr0h	equ	0xFEA
  8951                           fsr0l	equ	0xFE9
  8952                           wreg	equ	0xFE8
  8953                           indf1	equ	0xFE7
  8954                           postinc1	equ	0xFE6
  8955                           postdec1	equ	0xFE5
  8956                           fsr1h	equ	0xFE2
  8957                           fsr1l	equ	0xFE1
  8958                           bsr	equ	0xFE0
  8959                           indf2	equ	0xFDF
  8960                           postinc2	equ	0xFDE
  8961                           postdec2	equ	0xFDD
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _tickMillis *****************
  8967 ;; Defined at:
  8968 ;;		line 121 in file "delays.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;		None               void
  8975 ;; Registers used:
  8976 ;;		wreg, status,2, status,0
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : F/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8986 ;;Total ram usage:        0 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_communicationInterruptHandler
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text46
  8996  011652                     __ptext46:
  8997                           	opt stack 0
  8998  011652                     _tickMillis:
  8999                           	opt stack 20
  9000                           
  9001                           ;delays.c: 123: ++millisCount;
  9002                           
  9003                           ;incstack = 0
  9004  011652  0100               	movlb	0	; () banked
  9005  011654  2BB5               	incf	_millisCount& (0+255),f,b
  9006  011656  0E00               	movlw	0
  9007  011658  23B6               	addwfc	(_millisCount+1)& (0+255),f,b
  9008  01165A  23B7               	addwfc	(_millisCount+2)& (0+255),f,b
  9009  01165C  23B8               	addwfc	(_millisCount+3)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012  01165E  0C00               	retlw	0
  9013  011660                     __end_of_tickMillis:
  9014                           	opt stack 0
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           intcon3	equ	0xFF0
  9024                           indf0	equ	0xFEF
  9025                           postinc0	equ	0xFEE
  9026                           fsr0h	equ	0xFEA
  9027                           fsr0l	equ	0xFE9
  9028                           wreg	equ	0xFE8
  9029                           indf1	equ	0xFE7
  9030                           postinc1	equ	0xFE6
  9031                           postdec1	equ	0xFE5
  9032                           fsr1h	equ	0xFE2
  9033                           fsr1l	equ	0xFE1
  9034                           bsr	equ	0xFE0
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           tblptru	equ	0xFF8
  9042                           tblptrh	equ	0xFF7
  9043                           tblptrl	equ	0xFF6
  9044                           tablat	equ	0xFF5
  9045                           prodh	equ	0xFF4
  9046                           prodl	equ	0xFF3
  9047                           intcon	equ	0xFF2
  9048                           intcon2	equ	0xFF1
  9049                           intcon3	equ	0xFF0
  9050                           indf0	equ	0xFEF
  9051                           postinc0	equ	0xFEE
  9052                           fsr0h	equ	0xFEA
  9053                           fsr0l	equ	0xFE9
  9054                           wreg	equ	0xFE8
  9055                           indf1	equ	0xFE7
  9056                           postinc1	equ	0xFE6
  9057                           postdec1	equ	0xFE5
  9058                           fsr1h	equ	0xFE2
  9059                           fsr1l	equ	0xFE1
  9060                           bsr	equ	0xFE0
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068                           	psect	rparam
  9069  0000                     tblptru	equ	0xFF8
  9070                           tblptrh	equ	0xFF7
  9071                           tblptrl	equ	0xFF6
  9072                           tablat	equ	0xFF5
  9073                           prodh	equ	0xFF4
  9074                           prodl	equ	0xFF3
  9075                           intcon	equ	0xFF2
  9076                           intcon2	equ	0xFF1
  9077                           intcon3	equ	0xFF0
  9078                           indf0	equ	0xFEF
  9079                           postinc0	equ	0xFEE
  9080                           fsr0h	equ	0xFEA
  9081                           fsr0l	equ	0xFE9
  9082                           wreg	equ	0xFE8
  9083                           indf1	equ	0xFE7
  9084                           postinc1	equ	0xFE6
  9085                           postdec1	equ	0xFE5
  9086                           fsr1h	equ	0xFE2
  9087                           fsr1l	equ	0xFE1
  9088                           bsr	equ	0xFE0
  9089                           indf2	equ	0xFDF
  9090                           postinc2	equ	0xFDE
  9091                           postdec2	equ	0xFDD
  9092                           fsr2h	equ	0xFDA
  9093                           fsr2l	equ	0xFD9
  9094                           status	equ	0xFD8
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           intcon2	equ	0xFF1
  9103                           intcon3	equ	0xFF0
  9104                           indf0	equ	0xFEF
  9105                           postinc0	equ	0xFEE
  9106                           fsr0h	equ	0xFEA
  9107                           fsr0l	equ	0xFE9
  9108                           wreg	equ	0xFE8
  9109                           indf1	equ	0xFE7
  9110                           postinc1	equ	0xFE6
  9111                           postdec1	equ	0xFE5
  9112                           fsr1h	equ	0xFE2
  9113                           fsr1l	equ	0xFE1
  9114                           bsr	equ	0xFE0
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           fsr2h	equ	0xFDA
  9119                           fsr2l	equ	0xFD9
  9120                           status	equ	0xFD8


Data Sizes:
    Strings     270
    Constant    43
    Data        41
    BSS         1409
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      89
    BANK0           160     56     143
    BANK1           256      0     228
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> UART_transmitString@tempString_1922(COMRAM[2]), UART_transmitString@tempString(COMRAM[20]), STR_15(CODE[2]), LCD_printString@tempString_590(BANK0[2]), 
		 -> LCD_printString@tempString(BANK0[20]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_16(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> UART_transmitString@tempString(COMRAM[20]), LCD_printString@tempString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S3619$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    PS2_sendCommandString@string	PTR unsigned char  size(1) Largest target is 9
		 -> exit_config(BANK0[9]), set_mode(BANK0[9]), enter_config(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 21
		 -> FONA_CheckStrength@genString(COMRAM[21]), FONA_Text@genString(COMRAM[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    LCD_printString@input	PTR unsigned char  size(2) Largest target is 18
		 -> STR_22(CODE[7]), STR_21(CODE[13]), STR_14(CODE[17]), STR_13(CODE[15]), 
		 -> STR_12(CODE[18]), STR_11(CODE[16]), STR_10(CODE[15]), STR_9(CODE[17]), 
		 -> STR_8(CODE[15]), STR_7(CODE[18]), STR_6(CODE[17]), STR_5(CODE[16]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), LCD_printBin@string(COMRAM[9]), LCD_printVal@temp(COMRAM[3]), 
		 -> LCD_printChar@string(COMRAM[2]), 

    LCD_printString@aptr	PTR void [1] size(1) Largest target is 0
		 -> ?_LCD_printString(COMRAM[0]), 


Critical Paths under _main in COMRAM

    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _motorDrive_init->_motorDrive_setSpeeds
    _fft_init->_LCD_printString
    _LCD_init4bit->_delay_ms
    _competitionMode->_LCD_printString
    _RCMode->_PS2_init
    _motorDrive_setSpeeds->___awdiv
    ___awdiv->___wmul
    _PS2_init->_PS2_readGamepad
    _PS2_reconfig->_PS2_sendCommandString
    _PS2_sendCommandString->_delay_ms
    _PS2_shiftInOut->_delay_us
    _LCD_printString->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_placeCursor->_delay_ms
    _delay_ms->_millis

Critical Paths under _communicationInterruptHandler in COMRAM

    None.

Critical Paths under _encoderInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_RCMode
    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _fft_init->_LCD_printString
    _competitionMode->_LCD_printString
    _RCMode->_LCD_printString

Critical Paths under _communicationInterruptHandler in BANK0

    None.

Critical Paths under _encoderInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _communicationInterruptHandler in BANK1

    None.

Critical Paths under _encoderInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _communicationInterruptHandler in BANK2

    None.

Critical Paths under _encoderInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _communicationInterruptHandler in BANK3

    None.

Critical Paths under _encoderInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _communicationInterruptHandler in BANK4

    None.

Critical Paths under _encoderInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _communicationInterruptHandler in BANK5

    None.

Critical Paths under _encoderInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _communicationInterruptHandler in BANK6

    None.

Critical Paths under _encoderInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _communicationInterruptHandler in BANK7

    None.

Critical Paths under _encoderInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _communicationInterruptHandler in BANK8

    None.

Critical Paths under _encoderInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _communicationInterruptHandler in BANK9

    None.

Critical Paths under _encoderInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _communicationInterruptHandler in BANK10

    None.

Critical Paths under _encoderInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _communicationInterruptHandler in BANK11

    None.

Critical Paths under _encoderInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _communicationInterruptHandler in BANK12

    None.

Critical Paths under _encoderInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _communicationInterruptHandler in BANK13

    None.

Critical Paths under _encoderInterrupt in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  177017
                                             79 COMRAM     3     3      0
                    _LCD_printString
                             _RCMode
                    _competitionMode
                              _debug
                           _delay_ms
                               _init
                           _selfTest
                      _settings_auto
                _settings_readButton
                  _settings_selfTest
                    _settings_wander
                         _wanderMode
 ---------------------------------------------------------------------------------
 (1) _wanderMode                                           0     0      0   18182
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _settings_wander                                      1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_selfTest                                    1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_auto                                        1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _selfTest                                             1     1      0   18197
                                             42 COMRAM     1     1      0
                    _LCD_printString
                _settings_readButton
 ---------------------------------------------------------------------------------
 (1) _settings_readButton                                  1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   32109
                       _LCD_init4bit
                          _UART_init
                        _clearMillis
                      _encoders_init
                           _fft_init
                    _motorDrive_init
                      _settings_init
 ---------------------------------------------------------------------------------
 (2) _settings_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motorDrive_init                                      0     0      0    4974
                          _OpenEPWM1
                          _OpenEPWM3
                         _SetDCEPWM1
                         _SetDCEPWM3
                     _SetOutputEPWM1
                     _SetOutputEPWM3
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM3                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM1                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM3                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM1                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _fft_init                                             0     0      0   21926
                    _LCD_printString
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _encoders_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_init4bit                                         0     0      0    5209
                         _delay_init
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _debug                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _competitionMode                                      0     0      0   18182
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _RCMode                                               6     6      0   70544
                                             50 BANK0      6     6      0
                    _LCD_printString
                         _PS2_analog
                           _PS2_init
                    _PS2_readGamepad
                       _PS2_readType
                            ___awdiv
                           _delay_ms
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _motorDrive_setSpeeds                                22    21      1    3866
                                             19 COMRAM    22    21      1
                         _SetDCEPWM1
                         _SetDCEPWM3
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1150
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1091
                                             11 COMRAM     8     4      4
                         _PS2_analog (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM3                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM1                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PS2_readType                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PS2_init                                            13    13      0   29961
                                             66 COMRAM    13    13      0
                    _PS2_readGamepad
              _PS2_sendCommandString
                     _PS2_shiftInOut
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_readGamepad                                     34    34      0   15778
                                             32 COMRAM    34    34      0
                       _PS2_reconfig
                     _PS2_shiftInOut
                           _delay_ms
                           _delay_us
                             _millis
 ---------------------------------------------------------------------------------
 (3) _PS2_reconfig                                         0     0      0    6197
              _PS2_sendCommandString
 ---------------------------------------------------------------------------------
 (4) _PS2_sendCommandString                                7     6      1    6197
                                             25 COMRAM     7     6      1
                     _PS2_shiftInOut
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _PS2_shiftInOut                                       5     5      0    3942
                                              9 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_analog                                           1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCD_printString                                     59    52      7   18182
                                             33 COMRAM     9     2      7
                                              0 BANK0     50    50      0
                    _LCD_placeCursor
                         _PS2_analog (ARG)
                           _delay_ms
                           _delay_us
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     947
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             16    12      4    1677
                                             17 COMRAM    16    12      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             12 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                              5 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _LCD_placeCursor                                      5     4      1    5924
                                             25 COMRAM     5     4      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             4     0      4    3744
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                            16    12      4    1465
                                              9 COMRAM    16    12      4
                             _millis
 ---------------------------------------------------------------------------------
 (4) _millis                                               4     0      4       0
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _encoderInterrupt                                     3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _communicationInterruptHandler                        2     2      0       0
                                              3 COMRAM     2     2      0
                         _tickMillis
 ---------------------------------------------------------------------------------
 (10) _tickMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_printString
     _LCD_placeCursor
       _delay_ms
         _millis
       _delay_us
     _PS2_analog (ARG)
     _delay_ms (ARG)
       _millis
     _delay_us (ARG)
     _sprintf (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat (ARG)
   _RCMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _PS2_analog
     _PS2_init
       _PS2_readGamepad
         _PS2_reconfig
           _PS2_sendCommandString
             _PS2_shiftInOut
               _delay_us
             _delay_ms
               _millis
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
         _delay_us
         _millis
       _PS2_sendCommandString
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
       _PS2_shiftInOut
         _delay_us
       _delay_us
     _PS2_readGamepad
       _PS2_reconfig
         _PS2_sendCommandString
           _PS2_shiftInOut
             _delay_us
           _delay_ms
             _millis
       _PS2_shiftInOut
         _delay_us
       _delay_ms
         _millis
       _delay_us
       _millis
     _PS2_readType
     ___awdiv
       _PS2_analog (ARG)
       ___wmul (ARG)
     _delay_ms
       _millis
     _motorDrive_setSpeeds
       _SetDCEPWM1
       _SetDCEPWM3
       ___awdiv
         _PS2_analog (ARG)
         ___wmul (ARG)
       ___wmul
   _competitionMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
   _debug
   _delay_ms
     _millis
   _init
     _LCD_init4bit
       _delay_init
       _delay_ms
         _millis
       _delay_us
     _UART_init
     _clearMillis
     _encoders_init
     _fft_init
       _LCD_printString
         _LCD_placeCursor
           _delay_ms
             _millis
           _delay_us
         _PS2_analog (ARG)
         _delay_ms (ARG)
           _millis
         _delay_us (ARG)
         _sprintf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _strcat (ARG)
       _delay_us
     _motorDrive_init
       _OpenEPWM1
       _OpenEPWM3
       _SetDCEPWM1
       _SetDCEPWM3
       _SetOutputEPWM1
       _SetOutputEPWM3
       _motorDrive_setSpeeds
         _SetDCEPWM1
         _SetDCEPWM3
         ___awdiv
           _PS2_analog (ARG)
           ___wmul (ARG)
         ___wmul
     _settings_init
   _selfTest
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _settings_readButton
   _settings_auto
   _settings_readButton
   _settings_selfTest
   _settings_wander
   _wanderMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)

 _encoderInterrupt (ROOT)

 _communicationInterruptHandler (ROOT)
   _tickMillis

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0     3E8      33       28.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      80      10       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     38      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     52      59       1       93.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24C       8        0.0%
DATA                 0      0     634       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May  7 10:05:11 2015

                            __CFG_BW$16 000000                             __CFG_ABW$MM 000000  
                                    PL2 08A6                                      PL4 02AA  
                                    PL6 033E                                      PL8 0350  
                                    l94 05FA                            ___awdiv@sign 0011  
                                    bsr 000FE0                     ___wmul@multiplicand 0008  
                           __CFG_BORV$1 000000                          _SetOutputEPWM1 0FE6  
                        _SetOutputEPWM3 0F74                            __CFG_CP0$OFF 000000  
                                   PL10 08B2                                     PL20 06EC  
                                   PL12 0360                                     PL30 070A  
                                   PL22 06FC                                     PL14 06B0  
                                   PL40 0546                                     PL32 0DB4  
                                   PL24 0CF0                                     PL16 06C8  
                                   PL42 0550                                     PL34 0B26  
                                   PL26 0AF6                                     PL18 06D8  
                                   PL36 0536                                     PL28 0B0E  
                                   PL38 0378                                     l116 0204  
                                   l108 0150                                     l242 1602  
                                   l236 15F0                                     l916 09E6  
                                   l844 046A                                     l933 115C  
                                   l934 115E                                     _GIE 007F97  
                                   _RG0 007C30                                     _RG1 007C31  
                                   _RG2 007C32                                     _RG3 007C33  
                                   _RG4 007C34                                     _RL1 007721  
                                   _RL2 007722                                     _RL3 007723  
                                   _PR2 000FCB                                     _PR4 000F05  
                                   _PR6 000F3E                                     _PR8 000F3B  
                                   wreg 000FE8                              _TXSTA1bits 000FAC  
                            _TXSTA2bits 000F32                              _TXSTA3bits 000F2E  
                            _TXSTA4bits 000EFE                                    l1115 0A28  
                                  l1243 0FA6                                    l1253 0FD2  
                                  l1182 1018                                    l1254 0FDE  
                                  l1255 0FE2                                    l1192 1044  
                                  l1248 0FC2                                    l1193 1050  
                                  l1194 1054                                    l1187 1034  
                                  l2503 0F42                                    l2507 0F5A  
                                  l2531 0FC6                                    l2523 0FB2  
                                  l1820 1362                                    l2453 1098  
                                  l1830 13E4                                    l2519 0FA8  
                                  l2457 10B0                                    l2449 1080  
                                  l2481 1038                                    l2473 1024  
                                  l2469 101A                                    l5301 150C  
                                  l4407 1468                                    l5207 0C5A  
                                  l5311 0D14                                    l4417 12E0  
                                  l4425 113E                                    l5225 0C7A  
                                  l4531 06A0                                    l4435 118C  
                                  l4451 1388                                    l5323 0D68  
                                  l2499 0F2A                                    l4461 1332  
                                  l4541 1298                                    l4701 0172  
                                  l5245 0CDA                                    l5261 15CE  
                                  l5317 0D3E                                    l5309 0D0C  
                                  l5341 0B6A                                    l4463 133A  
                                  l4535 127E                                    l4447 1376  
                                  l4631 0EA4                                    l5343 0B7C  
                                  l4473 1358                                    l4465 133E  
                                  l4481 13BC                                    l4545 0A14  
                                  l4537 1282                                    l4705 017C  
                                  l5249 0CEE                                    l4641 0EC0  
                                  l4625 0E8C                                    l5361 0BFA  
                                  l5345 0B8E                                    l5353 0BC4  
                                  l5337 0B38                                    l4483 13C4  
                                  l4571 0A64                                    l4555 0A38  
                                  l4539 1290                                    l5275 15DC  
                                  l5363 0C00                                    l5371 0C12  
                                  l5347 0BA0                                    l5355 0BDA  
                                  l5339 0B58                                    l4485 13C8  
                                  l4565 0A60                                    l4741 027C  
                                  l5269 15D4                                    l4637 0EB4  
                                  l4653 0EE4                                    l5365 0C06  
                                  l5349 0BB2                                    l5199 0C52  
                                  l4639 0EBC                                    l4831 0432  
                                  l4823 040E                                    l4815 03EA  
                                  l4807 03CC                                    l5367 0C0C  
                                  l5359 0BF4                                    l4497 057A  
                                  l4489 13DA                                    l4593 0ADE  
                                  l4585 0A9A                                    l4745 0284  
                                  l4761 094A                                    l4657 0EF0  
                                  l4649 0EDA                                    l4841 047A  
                                  l4833 043C                                    l4825 0418  
                                  l4817 03F4                                    l4809 03D6  
                                  l4587 0AA0                                    l4579 0A84  
                                  l4595 0AE4                                    l4739 0272  
                                  l4747 028A                                    l4691 0116  
                                  l4683 00D8                                    l4675 009C  
                                  l4851 04C4                                    l4843 049E  
                                  l5299 1504                                    l4597 0AEA  
                                  l4685 00E0                                    l4669 0026  
                                  l4693 011C                                    l4853 04D6  
                                  l4845 04A6                                    l4697 0158  
                                  l4793 09BA                                    l4779 0982  
                                  _ADON 007E0F                                    STR_1 FFFC  
                                  STR_2 FFC9                                    STR_3 FF3A  
                                  STR_4 FF16                                    STR_5 FF7F  
                                  STR_6 FF4C                                    STR_7 FF04  
                                  STR_8 FFBD                                    STR_9 FF5D  
                                  _CPEN 0076C7                                    _LCDA 0076D5  
                                  _DONE 007E00                                    u2224 1184  
                                  u3017 146A                                    u2225 1180  
                                  u2315 0606                                    u2325 060C  
                                  u2350 12C2                                    u2175 1494  
                                  u2335 0620                                    u2521 000A  
                                  u2530 0044                                    u2194 114E  
                                  u2195 114A                                    u2357 12B8  
                                  u2701 096A                                    u2445 1434  
                                  u2550 0082                                    u2711 0978  
                                  u2455 13F8                                    _IPEN 007E87  
                                  u2537 003A                                    u2570 0100  
                                  u2580 013A                                    u2645 02DA  
                                  u2557 0078                                    u2655 0302  
                                  u2815 0442                                    u2577 00F6  
                                  u2587 0130                                    u2755 0388  
                                  u2685 0904                                    u2845 04AC  
                                  u2765 03A4                                    _SAMP 007E01  
                                  _main 0B30                                    _init 15AA  
                                  _mode 0058                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                         __CFG_BOREN$ON 000000                                    prodh 000FF4  
                                  prodl 000FF3                      __CFG_WDTWIN$PS25_0 000000  
                                  start 0070                           __CFG_IESO$OFF 000000  
                    __CFG_LS48MHZ$SYSX2 000000                         _motorDrive_init 10CA  
                __end_of_SetOutputEPWM1 1058                  __end_of_SetOutputEPWM3 0FE6  
           __end_of_settings_readButton 1652                        RCMode@left_speed 0092  
                          _BAUDCON1bits 000F67                         _competitionMode 15F2  
                          _BAUDCON2bits 000F31                            _BAUDCON3bits 000F2D  
                          _BAUDCON4bits 000EFD                           __CFG_WAIT$OFF 000000  
                           ?_PS2_analog 0001                                   ?_main 0001  
                                 ?_init 0001                         __end_of___awdiv 0EFA  
                 OpenEPWM3@timer_source 0006                                   STR_10 FFAE  
                                 STR_11 FF8F                                   STR_20 FFE3  
                                 STR_12 FF28                                   STR_21 FFCC  
                                 STR_13 FF9F                                   STR_22 FFF5  
                                 STR_14 FF6E                                   STR_17 FFD9  
                                 STR_18 FFEC                                   STR_19 FEF0  
                                 _RD163 007D8F                                   _T0CON 000FD5  
                       ___awdiv@divisor 000E                                   _LCDMD 00778B  
                                 _RC1IE 007CED                                   _RC2IE 007D1D  
                                 _RC3IE 007B0D                                   _RC4IE 007B0F  
                       __end_of___lwdiv 136C                                   i1l402 0062  
                       __end_of___lwmod 13EE                                   i1l395 0044  
                                 i2l282 126A                                   i2l284 1220  
                       ___awdiv@counter 0010                                   _TX1IE 007CEC  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TX2IE 007D1C                                   _TMR3L 000FB2  
                                 _TX3IE 007B0C                                   _TX4IE 007B0E  
                         ?_LCD_init4bit 0001                           __CFG_WPSA$128 000000  
                      __end_of_PS2_init 0CF0                          __CFG_EASHFT$ON 000000  
                       ??_encoders_init 0006                                   _debug 167E  
                    __size_of_UART_init 00AC                         __end_of_dpowers FECF  
                       ??_settings_auto 0006                         ??_settings_init 0006  
                                 _spbrg 00C1                                   tablat 000FF5  
                                 status 000FD8                         __end_of_sprintf 0AF6  
                            _SetDCEPWM1 142A                              _SetDCEPWM3 13EE  
                  __size_of_clearMillis 0010                         __initialization 11A4  
                   PS2_readGamepad@temp 003B                            __end_of_main 0C28  
                          __end_of_init 15C6                 __size_of_PS2_shiftInOut 006C  
                       ?_SetOutputEPWM1 0006                         ?_SetOutputEPWM3 0006  
                                ??_main 0050                                  ??_init 002B  
                         __activetblptr 000003                          ??_LCD_init4bit 001A  
                   __CFG_WPEND$WPENDMEM 000000                          __CFG_RETEN$OFF 000000  
              __size_of_PS2_readGamepad 014E                    _motorDrive_setSpeeds 0384  
                                ?_debug 0001                                  _CCPR1L 000FBA  
                                _CCPR3L 000F4A                          __CFG_VBTBOR$ON 000000  
                                _ANCON1 000E47                                  _ANCON2 000E46  
                                _ANCON3 000E45                        ___awdiv@dividend 000C  
              __size_of_LCD_placeCursor 0156                                  _ANSEL6 00723E  
                                _ANSEL9 007231                                  _INT1IF 007F80  
                                _INT3IF 007F82                                  i1l4401 0054  
                                i1l4393 0034                                  _IOLOCK 007B36  
                        __CFG_WDTEN$OFF 000000                                  i2l4381 1252  
                                i2l4375 1238                                  _RCREG1 000FAE  
                                _RCREG3 000F2A                                  _RCREG4 000EFA  
                      _encoderInterrupt 0018                                  _NVCFG0 00746D  
                                _PVCFG0 00746E                                  _PVCFG1 00746F  
               __end_of_motorDrive_init 1138                                  _TMR0IE 007F95  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _SPBRG2 000F1F                                  _SPBRG3 000F2B  
                                _SPBRG4 000EFB                                  _TMR0IP 007F8A  
                                _TMR3IE 007D01                                  _TMR3ON 007D88  
                                _TMR4ON 007822                                  _TMR6ON 0079EA  
                                _RCMode 0CFC                                  _TRISE0 007CB0  
                                _TRISE1 007CB1                                  _TRISE2 007CB2  
                                _TRISE3 007CB3                                  _TRISE4 007CB4  
                                _TRISE5 007CB5                                  _TRISH0 007CC8  
                                _TRISE6 007CB6                                  _TRISH1 007CC9  
                                _TRISE7 007CB7                                  _TRISH2 007CCA  
                                _TRISH3 007CCB                                  _TRISG7 007CC7  
                                _TRISK1 007749                                  _TRISL0 007730  
                   __size_of_PS2_analog 0010                                  _TXREG1 000FAD  
                                _TXREG2 000F1D                                  _TXREG4 000EF9  
                      __end_of_delay_ms 1322                        __end_of_delay_us 149A  
                        __CFG_XINST$OFF 000000                 __end_of_competitionMode 1604  
                    __size_of_OpenEPWM1 0072                      __size_of_OpenEPWM3 007A  
                      __end_of_fft_init 167E                          settings_auto@t 0006  
                                ___wmul 1540          __size_of_PS2_sendCommandString 0044  
                     __end_of_UART_init 0E72                               ??___awdiv 0010  
                        __CFG_STVREN$ON 000000           __end_of_PS2_sendCommandString 13B0  
                             ??___lwdiv 000A                    settings_readButton@t 0006  
                             ??___lwmod 0011                                  _config 00C5  
                                _millis 1604                                  clear_0 11AC  
                                clear_1 11BE                                  clear_2 11CA  
                                clear_3 11D6                                  clear_4 11E2  
                      ___awdiv@quotient 0012                         __CFG_CLKOEN$OFF 000000  
                                _strcat 1274                        __end_of_selfTest 151A  
                 ?_motorDrive_setSpeeds 0014                            __mediumconst FEC4  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                         __CFG_DSBITEN$ON 000000  
                             ??_sprintf 0016                         __CFG_DSBOREN$ON 000000  
                            __accesstop 0060                 __end_of__initialization 1208  
                    __CFG_DSWDTOSC$LPRC 000000                         __CFG_T5GSEL$T5G 000000  
                       __CFG_IOL1WAY$ON 000000                             ?_SetDCEPWM1 0006  
                           ?_SetDCEPWM3 0006                    PS2_readGamepad@dword 0032  
                        __pcstackCOMRAM 0001                            __pidataBANK0 14CA  
                             ?_PS2_init 0001                  LCD_placeCursor@address 001E  
                         __end_of_debug 1680                __size_of_settings_wander 000C  
                       __CFG_DSWDTEN$ON 000000                              __end_ofPL2 08B2  
                            __end_ofPL4 033E                              __end_ofPL6 0350  
                            __end_ofPL8 0360                       RCMode@right_speed 0094  
                     __CFG_PLLDIV$NODIV 000000                         OpenEPWM1@period 0008  
                       OpenEPWM3@period 0008                       __end_of_OpenEPWM1 10CA  
                     __end_of_OpenEPWM3 0F74                                 ??_debug 0006  
              __size_of_LCD_printString 02AA                              __pbssBANK0 0098  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                     ??_PS2_readGamepad 0021                        ?_motorDrive_init 0001  
                               ?_RCMode 0001                       ??_LCD_placeCursor 001B  
                  __end_of_LCD_init4bit 08A6                              _delay_init 149A  
                      ?_competitionMode 0001                          _PS2_shiftInOut 1138  
                            ??_PS2_init 0043                                 ?___wmul 0006  
                    settings_selfTest@t 0006                                 _ADCBUF0 000FC2  
                               _ADCHS0H 000E87                                 _ADCHS0L 000E86  
                               _ADCON3L 000E8A                                 _CCP1CON 000FB9  
                               _CCP3CON 000F49                               PS2_init@i 004E  
                             PS2_init@y 004C                                 ?_millis 0006  
                          ??_PS2_analog 0006                                 _ANSEL10 007232  
                               _ANSEL11 007233                                 _ANSEL21 00722D  
                               _ANSEL14 007236                                 _ANSEL16 007228  
                               _ANSEL17 007229                                 _ANSEL18 00722A  
                               _ANSEL19 00722B                                 ?_strcat 0006  
                         ?_PS2_readType 0001                                 _T3CKPS0 007D8C  
                               _T3CKPS1 007D8D                                 _T4CKPS1 007821  
                               _PADCFG1 000F54                                 _T6CKPS1 0079E9  
                ??_motorDrive_setSpeeds 0015                           ?_PS2_reconfig 0001  
                       __CFG_WDTCLK$FRC 000000                               ?_delay_ms 000A  
                             ?_delay_us 0006                     __size_of_SetDCEPWM1 003A  
                   __size_of_SetDCEPWM3 003C                                 _TMR3CS0 007D8E  
                               _TMR3CS1 007D8F                                 _SPBRGH1 000F30  
                               _SPBRGH2 000F20                                 _SPBRGH3 000F2C  
                               _SPBRGH4 000EFC                                 _PS2data 0098  
                               _SSP1ADD 000FC8                                 _SSP2ADD 000F02  
                               _SSP1BUF 000FC9                                 _SSP2BUF 000F03  
                             ?_fft_init 0001                SetOutputEPWM1@outputmode 0006  
                    PS2_shiftInOut@byte 000C                         __size_of_RCMode 00B8  
                    __end_of_PS2_analog 1636                        PS2_readGamepad@i 003F  
                      ??_SetOutputEPWM1 0007                        ??_SetOutputEPWM3 0007  
                            _left_count 00B1                  __end_of_PS2_shiftInOut 11A4  
                             ?_selfTest 0001                                 __Hparam 0000  
                               __Lparam 0000                                 ___awdiv 0E72  
                       __size_of___wmul 0026                                 ___lwdiv 1322  
                               ___lwmod 13B0                                 __pcinit 11A4  
                            _read_delay 0059                         __size_of_millis 0012  
                               __ramtop 0E00                __end_of_encoderInterrupt 0070  
                        ??_PS2_readType 0006                        delay_init@config 00C3  
                               __ptext0 0B30                                 __ptext1 15E0  
                               __ptext2 1660                                 __ptext3 166C  
                               __ptext4 1636                                 __ptext5 14F4  
                               __ptext6 1644                                 __ptext7 15AA  
                               __ptext8 1566                                 __ptext9 10CA  
                       PS2_shiftInOut@i 000E                         __size_of_strcat 0058  
                        ??_PS2_reconfig 0021                                 _dpowers FEC5  
                             _T2CONbits 000FCA                       ??_settings_wander 0006  
          __size_of_settings_readButton 000E                                 _buttons 00BD  
                             _FONA_BUFF 0100                               _T4CONbits 000F04  
                            ??_delay_ms 000E                              ??_delay_us 000A  
                             _T6CONbits 000F3D                               _T8CONbits 000F3A  
                            ??_fft_init 002B                                 _sprintf 0A0C  
                      LCD_placeCursor@x 001D                        LCD_placeCursor@y 001A  
                        __pintcode_body 120E                    end_of_initialization 1208  
                 __end_of_encoders_init 1540                   __end_of_settings_auto 1644  
                 __end_of_settings_init 1588                SetOutputEPWM3@outputmode 0006  
             LCD_printString@tempString 0060                                 int_func 120E  
                         ??_clearMillis 0006                              _tickMillis 1652  
                  LCD_printString@i_591 0090                         _controller_type 0057  
                     ??_LCD_printString 0029               motorDrive_setSpeeds@templ 0017  
             motorDrive_setSpeeds@tempr 0019                              ??_selfTest 002B  
                       ?_PS2_shiftInOut 0001                             ?_delay_init 0001  
                  LCD_printString@input 0023                                 postdec1 000FE5  
                               postdec2 000FDD                              _wanderMode 15E0  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                               _RPOR10_11 000E17  
                      __CFG_FSCM$CSDCMD 000000                               _RPOR12_13 000E18  
                             _RPOR30_31 000E21                               _RPOR22_23 000E1D  
                             _RPOR34_35 000E23                  PS2_sendCommandString@y 001E  
                             _PIXY_BUFF 0280                               _PORTBbits 000F81  
                             _UART_init 0DC6                               _PORTDbits 000F83  
                             _PORTEbits 000F84                               _PORTFbits 000F85  
                             _PORTGbits 000F86                               _PORTHbits 000F87  
                 PS2_readGamepad@F16091 00C6                               _PORTJbits 000F88  
                             _PORTKbits 000EE7                               _PORTLbits 000EE4  
                      __CFG_FOSC$FRCPLL 000000                             _ADCON1Hbits 000FC1  
                             _TRISBbits 000F93                               _USB_INDEX 0056  
                             _TRISCbits 000F94              motorDrive_setSpeeds@lSpeed 0029  
                             _TRISDbits 000F95                               _TRISEbits 000F96  
                             _TRISFbits 000F97                               _TRISGbits 000F98  
                             _TRISHbits 000F99                               _TRISJbits 000F9A  
                             _TRISLbits 000EE6              motorDrive_setSpeeds@rSpeed 0014  
                  __CFG_CINASEL$DEFAULT 000000                   __size_of_LCD_init4bit 018A  
                 PS2_readGamepad@i_2534 0041                          __end_of_RCMode 0DB4  
                          ??_SetDCEPWM1 0008                            ??_SetDCEPWM3 0008  
                 PS2_readGamepad@dword2 0026                       __CFG_WPFP$WPFP255 000000  
                   __end_of_clearMillis 1626                          __end_of___wmul 1566  
                     __size_of_PS2_init 00C8                   _PS2_sendCommandString 136C  
                            ?_UART_init 0001                          __end_of_millis 1616  
 __end_of_communicationInterruptHandler 1274  __size_of_communicationInterruptHandler 126C  
         _communicationInterruptHandler 0008                         _PS2_readGamepad 08BE  
                        __end_of_strcat 12CC                             __end_ofPL10 08BE  
                           __end_ofPL20 06FC                             __end_ofPL12 0378  
                           __end_ofPL30 071C                             __end_ofPL22 070A  
                           __end_ofPL14 06C8                             __end_ofPL40 0550  
                           __end_ofPL32 0DC6                             __end_ofPL24 0CFC  
                           __end_ofPL16 06D8                             __end_ofPL42 055A  
                           __end_ofPL34 0B30                             __end_ofPL26 0B0E  
                           __end_ofPL18 06EC                             __end_ofPL36 0546  
                           __end_ofPL28 0B26                            _LCD_init4bit 071C  
                           __end_ofPL38 0384                     start_initialization 11A4  
                   __size_of_delay_init 0030                         _LCD_placeCursor 055A  
                    __end_of_SetDCEPWM1 1464                      __end_of_SetDCEPWM3 142A  
                  SetOutputEPWM1@eccpmx 0008                            _enter_config 00EA  
                  SetOutputEPWM3@eccpmx 0008                               _OpenEPWM1 1058  
                             _OpenEPWM3 0EFA                                ??_RCMode 0050  
                           ?_tickMillis 0001                    __end_of_PS2_readType 15E0  
                  __end_of_PS2_reconfig 15AA                        _imaginaryNumbers 0164  
                           ?_wanderMode 0001                                ??___wmul 000A  
                           __pdataBANK0 00C6                                ??_millis 000A  
                              ??_strcat 000A                            _last_buttons 00BF  
                           __pbssBIGRAM 0280                             __pbssCOMRAM 0053  
                         __pcstackBANK0 0060                     __end_of__stringdata FFFE  
                   SetDCEPWM1@dutycycle 0006                       __size_of_delay_ms 0056  
                     __size_of_delay_us 0036                              ?_OpenEPWM1 0006  
                            ?_OpenEPWM3 0006                       __size_of_fft_init 0006  
                           sprintf@_val 001B                             sprintf@flag 0019  
                           sprintf@prec 001A                             _clearMillis 1616  
                   _settings_readButton 1644                        ___lwdiv@dividend 0006  
                             __pintcode 0008                         _settings_wander 1660  
                     __size_of_selfTest 0026                           __pmediumconst FEC4  
              __size_of_motorDrive_init 006E                                ?___awdiv 000C  
                   SetDCEPWM3@dutycycle 0006                       _settings_selfTest 166C  
               __end_of_PS2_readGamepad 0A0C                                ?___lwdiv 0006  
                              ?___lwmod 000D                  ?_PS2_sendCommandString 001A  
                           __pintcodelo 0018                      ?_settings_selfTest 0001  
                           ??_UART_init 0006                __size_of_competitionMode 0012  
                     ?_encoderInterrupt 0001                 __end_of_LCD_placeCursor 06B0  
                     PS2_shiftInOut@tmp 000D                     __size_of_tickMillis 000E  
                  ?_settings_readButton 0001                        __CFG_POSCMD$NONE 000000  
            SetOutputEPWM1@outputconfig 0009                      ??_encoderInterrupt 0001  
                   ??_settings_selfTest 0006           __size_of_motorDrive_setSpeeds 01B2  
                              _CCPTMRS0 000F36                         _LCD_printString 0000  
                           _PADCFG1bits 000F54          ?_communicationInterruptHandler 0001  
                             _last_read 00AD                        ___lwdiv@quotient 000B  
                        __size_of_debug 0002                                ?_sprintf 0012  
                   __size_of_wanderMode 0012                        ??_PS2_shiftInOut 000A  
                            RCMode@done 0097                          ___wmul@product 000A  
                             delay_ms@x 000A                              RCMode@type 0096  
                             delay_us@x 0006                            ??_delay_init 0006  
                   LCD_printString@aptr 008D                                _PIR1bits 000F9E  
                              _PIR3bits 000FA4             PS2_sendCommandString@string 0020  
             __end_of_settings_selfTest 1678                                _PIR6bits 000FA6  
                      __CFG_WDTPS$32768 000000                                _PS2_init 0C28  
                              _RPINR0_1 000E2A                                _RPINR4_5 000E2C  
                              _RPINR6_7 000E2D                                _SSP1CON1 000FC6  
                              _SSP1CON2 000FC5                                _SSP1CON3 000F69  
                              _SSP2CON1 000F19                                _SSP2CON3 000F39  
                              _SSP1STAT 000FC7                                _SSP2STAT 000F1A  
                              _USB_BUFF 0474                        PS2_analog@button 0006  
                           __stringdata FEF0                       ___wmul@multiplier 0006  
                      __CFG_SOSCSEL$DIG 000000                   ??_settings_readButton 0006  
                            _CM1CONbits 000F53                     __end_ofatan@coeff_a FEE1  
                   __end_ofatan@coeff_b FEF0                        __CFG_WPDIS$WPDIS 000000  
                    __end_of_delay_init 14CA                            PS2_init@temp 0043  
                 __size_of_PS2_readType 001A                             _INTCON2bits 000FF1  
                          delay_ms@time 0016                             _INTCON3bits 000FF0  
                             copy_data0 11FC                               _type_read 00CF  
                           ??_OpenEPWM1 0007                             ??_OpenEPWM3 0007  
                 __size_of_PS2_reconfig 0022                 __end_of_settings_wander 166C  
                              __Hrparam 0000                        SetDCEPWM1@DCycle 000A  
                              __Lrparam 0000                        SetDCEPWM3@DCycle 000A  
                      ?_PS2_readGamepad 0001                        __size_of___awdiv 0088  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                __size_of_encoders_init 0026                   OpenEPWM1@timer_source 0006  
                __size_of_settings_auto 000E                  __size_of_settings_init 0022  
               __size_of_SetOutputEPWM1 0072                 __size_of_SetOutputEPWM3 0072  
               __end_of_LCD_printString 02AA                        ?_LCD_placeCursor 001A  
                     ??_motorDrive_init 002A                            _PS2_readType 15C6  
                          _PS2_reconfig 1588                              strcat@from 0008  
                              _delay_ms 12CC                                _delay_us 1464  
                       ___lwdiv@divisor 0008                         ___lwdiv@counter 000A  
                              __ptext10 0F74                                __ptext11 0FE6  
                              __ptext20 167E                                __ptext12 0EFA  
                              __ptext21 15F2                                __ptext13 1058  
                              __ptext30 08BE                                __ptext22 0CFC  
                              __ptext14 1678                                __ptext31 1588  
                              __ptext23 0384                                __ptext15 151A  
                              __ptext40 055A                                __ptext32 136C  
                              __ptext24 1540                                __ptext16 1616  
                              __ptext41 1464                                __ptext33 1138  
                              __ptext25 0E72                                __ptext17 0DC6  
                     ??_competitionMode 002B                                __ptext42 12CC  
                              __ptext34 1626                                __ptext26 13EE  
                              __ptext18 071C                                __ptext43 1604  
                              __ptext35 0000                                __ptext27 142A  
                              __ptext19 149A                                __ptext36 1274  
                              __ptext28 15C6                                __ptext37 0A0C  
                              __ptext29 0C28                                __ptext46 1652  
                              __ptext38 13B0                                __ptext39 1322  
                          _SSP1CON1bits 000FC6                            _SSP1CON2bits 000FC5  
                            _LCDCONbits 000ED9                             _realNumbers 0200  
                              _fft_init 1678                        settings_wander@t 0006  
                           _exit_config 00D8                            _SSP2CON1bits 000F19  
                          _SSP2CON2bits 000F18                        __size_of_sprintf 00EA  
                          ??_tickMillis 0004                           __size_of_main 00F8  
                         __size_of_init 001C                             _millisCount 00B5  
                            _FONA_INDEX 0053                      __CFG_MSSPMSK1$MSK7 000000  
                    __CFG_MSSPMSK2$MSK7 000000                                _selfTest 14F4  
                    LCD_printString@val 0089              __size_of_settings_selfTest 000C  
                              _set_mode 00E1                            ??_wanderMode 002B  
                           _UART4_INDEX 0055                              _MEMCONbits 000EE3  
             _motorDrive_setSpeeds$2402 001B               _motorDrive_setSpeeds$2403 001D  
             _motorDrive_setSpeeds$2404 001F               _motorDrive_setSpeeds$2405 0021  
             _motorDrive_setSpeeds$2406 0023               _motorDrive_setSpeeds$2407 0025  
             _motorDrive_setSpeeds$2408 0027                            _SSP1STATbits 000FC7  
                              main@mode 0052                            _SSP2STATbits 000F1A  
                           atan@coeff_a FECF                             atan@coeff_b FEE1  
                            _INTCONbits 000FF2                      __end_of_tickMillis 1660  
                              intlevel1 0000                                intlevel2 0000  
                             sprintf@ap 0018                      __end_of_wanderMode 15F2  
                             sprintf@sp 0020                           _encoders_init 151A  
                         _settings_auto 1636                           _settings_init 1566  
                      ___lwmod@dividend 000D                             _right_count 00B9  
              PS2_sendCommandString@len 001A                            ?_clearMillis 0001  
                      ?_settings_wander 0001                              _RCSTA1bits 000FAB  
                            _RCSTA2bits 000F33                              _RCSTA3bits 000F2F  
                            _RCSTA4bits 000EFF                   LCD_printString@string 0074  
               ??_PS2_sendCommandString 001B                              _PS2_analog 1626  
                            _RPINR26_27 000E37                              _RPINR28_29 000E38  
                      ?_LCD_printString 0022                            _ADCBUF0Hbits 000FC3  
                              sprintf@c 0021                                sprintf@f 0012  
                              strcat@cp 000A                            _ADCBUF0Lbits 000FC2  
                              strcat@to 0006                         ___lwmod@divisor 000F  
                       ___lwmod@counter 0011                              _PIXY_INDEX 0054  
            SetOutputEPWM3@outputconfig 0009                        LCD_printString@i 008E  
                            _PSPCONbits 000FA7                        LCD_printString@x 0088  
                      LCD_printString@y 0022                             _USART4_BUFF 0132  
                        ?_encoders_init 0001                     __CFG_WPCFG$WPCFGDIS 000000  
                        ?_settings_auto 0001                          ?_settings_init 0001  
         LCD_printString@tempString_590 008B                      __CFG_WINDIS$WDTSTD 000000  
             __size_of_encoderInterrupt 0058            __end_of_motorDrive_setSpeeds 0536  
                __CFG_DSWDTPS$DSWDTPS1F 000000         ??_communicationInterruptHandler 0004  
