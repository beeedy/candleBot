

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Fri May  8 09:48:44 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F97J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	pa_nodes,global,class=CODE,delta=1
    70  0000                     tblptru	equ	0xFF8
    71                           tblptrh	equ	0xFF7
    72                           tblptrl	equ	0xFF6
    73                           tablat	equ	0xFF5
    74                           prodh	equ	0xFF4
    75                           prodl	equ	0xFF3
    76                           intcon	equ	0xFF2
    77                           intcon2	equ	0xFF1
    78                           intcon3	equ	0xFF0
    79                           wreg	equ	0xFE8
    80                           indf1	equ	0xFE7
    81                           postinc1	equ	0xFE6
    82                           fsr1h	equ	0xFE2
    83                           fsr1l	equ	0xFE1
    84                           indf2	equ	0xFDF
    85                           postinc2	equ	0xFDE
    86                           postdec2	equ	0xFDD
    87                           fsr2h	equ	0xFDA
    88                           fsr2l	equ	0xFD9
    89                           status	equ	0xFD8
    90                           
    91                           	psect	idataBANK0
    92  01163C                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for PS2_readGamepad@F16091
    96  01163C  01                 	db	1
    97  01163D  42                 	db	66
    98  01163E  00                 	db	0
    99  01163F  00                 	db	0
   100  011640  00                 	db	0
   101  011641  00                 	db	0
   102  011642  00                 	db	0
   103  011643  00                 	db	0
   104  011644  00                 	db	0
   105                           
   106                           ;initializer for _type_read
   107  011645  01                 	db	1
   108  011646  45                 	db	69
   109  011647  00                 	db	0
   110  011648  5A                 	db	90
   111  011649  5A                 	db	90
   112  01164A  5A                 	db	90
   113  01164B  5A                 	db	90
   114  01164C  5A                 	db	90
   115  01164D  5A                 	db	90
   116                           
   117                           ;initializer for _exit_config
   118  01164E  01                 	db	1
   119  01164F  43                 	db	67
   120  011650  00                 	db	0
   121  011651  00                 	db	0
   122  011652  5A                 	db	90
   123  011653  5A                 	db	90
   124  011654  5A                 	db	90
   125  011655  5A                 	db	90
   126  011656  5A                 	db	90
   127                           
   128                           ;initializer for _set_mode
   129  011657  01                 	db	1
   130  011658  44                 	db	68
   131  011659  00                 	db	0
   132  01165A  01                 	db	1
   133  01165B  03                 	db	3
   134  01165C  00                 	db	0
   135  01165D  00                 	db	0
   136  01165E  00                 	db	0
   137  01165F  00                 	db	0
   138                           
   139                           ;initializer for _enter_config
   140  011660  01                 	db	1
   141  011661  43                 	db	67
   142  011662  00                 	db	0
   143  011663  01                 	db	1
   144  011664  00                 	db	0
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           prodh	equ	0xFF4
   150                           prodl	equ	0xFF3
   151                           intcon	equ	0xFF2
   152                           intcon2	equ	0xFF1
   153                           intcon3	equ	0xFF0
   154                           wreg	equ	0xFE8
   155                           indf1	equ	0xFE7
   156                           postinc1	equ	0xFE6
   157                           fsr1h	equ	0xFE2
   158                           fsr1l	equ	0xFE1
   159                           indf2	equ	0xFDF
   160                           postinc2	equ	0xFDE
   161                           postdec2	equ	0xFDD
   162                           fsr2h	equ	0xFDA
   163                           fsr2l	equ	0xFD9
   164                           status	equ	0xFD8
   165                           
   166                           	psect	mediumconst
   167  00FED8                     __pmediumconst:
   168                           	opt stack 0
   169  00FED8  00                 	db	0
   170  00FED9                     _dpowers:
   171                           	opt stack 0
   172  00FED9  0001               	dw	1
   173  00FEDB  000A               	dw	10
   174  00FEDD  0064               	dw	100
   175  00FEDF  03E8               	dw	1000
   176  00FEE1  2710               	dw	10000
   177  00FEE3                     __end_of_dpowers:
   178                           	opt stack 0
   179  00FEE3  3C                 	db	60
   180  00FEE4  04                 	db	4
   181  00FEE5  42                 	db	66
   182  00FEE6  9F                 	db	159
   183  00FEE7  6A                 	db	106
   184  00FEE8  42                 	db	66
   185  00FEE9  90                 	db	144
   186  00FEEA  01                 	db	1
   187  00FEEB  42                 	db	66
   188  00FEEC  4D                 	db	77
   189  00FEED  BB                 	db	187
   190  00FEEE  40                 	db	64
   191  00FEEF  EC                 	db	236
   192  00FEF0  47                 	db	71
   193  00FEF1  3E                 	db	62
   194  00FEF2  8E                 	db	142
   195  00FEF3  1F                 	db	31
   196  00FEF4  BB                 	db	187
   197  00FEF5                     __end_ofatan@coeff_a:
   198                           	opt stack 0
   199  00FEF5  3C                 	db	60
   200  00FEF6  04                 	db	4
   201  00FEF7  42                 	db	66
   202  00FEF8  5A                 	db	90
   203  00FEF9  8B                 	db	139
   204  00FEFA  42                 	db	66
   205  00FEFB  04                 	db	4
   206  00FEFC  44                 	db	68
   207  00FEFD  42                 	db	66
   208  00FEFE  9C                 	db	156
   209  00FEFF  4F                 	db	79
   210  00FF00  41                 	db	65
   211  00FF01  00                 	db	0
   212  00FF02  80                 	db	128
   213  00FF03  3F                 	db	63
   214  00FF04                     __end_ofatan@coeff_b:
   215                           	opt stack 0
   216  0000                     _ADCBUF0	set	4034
   217  0000                     _ADCBUF0Hbits	set	4035
   218  0000                     _ADCBUF0Lbits	set	4034
   219  0000                     _ADCHS0H	set	3719
   220  0000                     _ADCHS0L	set	3718
   221  0000                     _ADCON1Hbits	set	4033
   222  0000                     _ADCON1L	set	4032
   223  0000                     _ADCON2L	set	3724
   224  0000                     _ADCON3H	set	3723
   225  0000                     _ADCON3L	set	3722
   226  0000                     _ADCSS0H	set	3715
   227  0000                     _ANCON1	set	3655
   228  0000                     _ANCON2	set	3654
   229  0000                     _ANCON3	set	3653
   230  0000                     _BAUDCON1bits	set	3943
   231  0000                     _BAUDCON2bits	set	3889
   232  0000                     _BAUDCON3bits	set	3885
   233  0000                     _BAUDCON4bits	set	3837
   234  0000                     _CCP1CON	set	4025
   235  0000                     _CCP3CON	set	3913
   236  0000                     _CCPR1L	set	4026
   237  0000                     _CCPR3L	set	3914
   238  0000                     _CCPTMRS0	set	3894
   239  0000                     _CM1CONbits	set	3923
   240  0000                     _INTCON2bits	set	4081
   241  0000                     _INTCON3bits	set	4080
   242  0000                     _INTCONbits	set	4082
   243  0000                     _LCDCONbits	set	3801
   244  0000                     _MEMCONbits	set	3811
   245  0000                     _PADCFG1	set	3924
   246  0000                     _PADCFG1bits	set	3924
   247  0000                     _PIR1bits	set	3998
   248  0000                     _PIR3bits	set	4004
   249  0000                     _PIR6bits	set	4006
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTDbits	set	3971
   252  0000                     _PORTEbits	set	3972
   253  0000                     _PORTFbits	set	3973
   254  0000                     _PORTGbits	set	3974
   255  0000                     _PORTHbits	set	3975
   256  0000                     _PORTJbits	set	3976
   257  0000                     _PORTKbits	set	3815
   258  0000                     _PORTLbits	set	3812
   259  0000                     _PR2	set	4043
   260  0000                     _PR4	set	3845
   261  0000                     _PR6	set	3902
   262  0000                     _PR8	set	3899
   263  0000                     _PSPCONbits	set	4007
   264  0000                     _RCREG1	set	4014
   265  0000                     _RCREG3	set	3882
   266  0000                     _RCREG4	set	3834
   267  0000                     _RCSTA1bits	set	4011
   268  0000                     _RCSTA2bits	set	3891
   269  0000                     _RCSTA3bits	set	3887
   270  0000                     _RCSTA4bits	set	3839
   271  0000                     _RPINR0_1	set	3626
   272  0000                     _RPINR26_27	set	3639
   273  0000                     _RPINR28_29	set	3640
   274  0000                     _RPINR4_5	set	3628
   275  0000                     _RPINR6_7	set	3629
   276  0000                     _RPOR10_11	set	3607
   277  0000                     _RPOR12_13	set	3608
   278  0000                     _RPOR22_23	set	3613
   279  0000                     _RPOR30_31	set	3617
   280  0000                     _RPOR34_35	set	3619
   281  0000                     _SPBRG1	set	4015
   282  0000                     _SPBRG2	set	3871
   283  0000                     _SPBRG3	set	3883
   284  0000                     _SPBRG4	set	3835
   285  0000                     _SPBRGH1	set	3888
   286  0000                     _SPBRGH2	set	3872
   287  0000                     _SPBRGH3	set	3884
   288  0000                     _SPBRGH4	set	3836
   289  0000                     _SSP1ADD	set	4040
   290  0000                     _SSP1BUF	set	4041
   291  0000                     _SSP1CON1	set	4038
   292  0000                     _SSP1CON1bits	set	4038
   293  0000                     _SSP1CON2	set	4037
   294  0000                     _SSP1CON2bits	set	4037
   295  0000                     _SSP1CON3	set	3945
   296  0000                     _SSP1STAT	set	4039
   297  0000                     _SSP1STATbits	set	4039
   298  0000                     _SSP2ADD	set	3842
   299  0000                     _SSP2BUF	set	3843
   300  0000                     _SSP2CON1	set	3865
   301  0000                     _SSP2CON1bits	set	3865
   302  0000                     _SSP2CON2bits	set	3864
   303  0000                     _SSP2CON3	set	3897
   304  0000                     _SSP2STAT	set	3866
   305  0000                     _SSP2STATbits	set	3866
   306  0000                     _T0CON	set	4053
   307  0000                     _T2CONbits	set	4042
   308  0000                     _T4CONbits	set	3844
   309  0000                     _T6CONbits	set	3901
   310  0000                     _T8CONbits	set	3898
   311  0000                     _TMR0L	set	4054
   312  0000                     _TMR3H	set	4019
   313  0000                     _TMR3L	set	4018
   314  0000                     _TRISBbits	set	3987
   315  0000                     _TRISCbits	set	3988
   316  0000                     _TRISDbits	set	3989
   317  0000                     _TRISEbits	set	3990
   318  0000                     _TRISFbits	set	3991
   319  0000                     _TRISGbits	set	3992
   320  0000                     _TRISHbits	set	3993
   321  0000                     _TRISJbits	set	3994
   322  0000                     _TRISLbits	set	3814
   323  0000                     _TXREG1	set	4013
   324  0000                     _TXREG2	set	3869
   325  0000                     _TXREG4	set	3833
   326  0000                     _TXSTA1bits	set	4012
   327  0000                     _TXSTA2bits	set	3890
   328  0000                     _TXSTA3bits	set	3886
   329  0000                     _TXSTA4bits	set	3838
   330  0000                     _ADON	set	32271
   331  0000                     _ANSEL10	set	29234
   332  0000                     _ANSEL11	set	29235
   333  0000                     _ANSEL14	set	29238
   334  0000                     _ANSEL16	set	29224
   335  0000                     _ANSEL17	set	29225
   336  0000                     _ANSEL18	set	29226
   337  0000                     _ANSEL19	set	29227
   338  0000                     _ANSEL21	set	29229
   339  0000                     _ANSEL6	set	29246
   340  0000                     _ANSEL9	set	29233
   341  0000                     _CPEN	set	30407
   342  0000                     _DONE	set	32256
   343  0000                     _GIE	set	32663
   344  0000                     _INT1IF	set	32640
   345  0000                     _INT3IF	set	32642
   346  0000                     _IOLOCK	set	31542
   347  0000                     _IPEN	set	32391
   348  0000                     _LCDA	set	30421
   349  0000                     _LCDMD	set	30603
   350  0000                     _NVCFG0	set	29805
   351  0000                     _PVCFG0	set	29806
   352  0000                     _PVCFG1	set	29807
   353  0000                     _RC1IE	set	31981
   354  0000                     _RC2IE	set	32029
   355  0000                     _RC3IE	set	31501
   356  0000                     _RC4IE	set	31503
   357  0000                     _RD163	set	32143
   358  0000                     _RG0	set	31792
   359  0000                     _RG1	set	31793
   360  0000                     _RG2	set	31794
   361  0000                     _RG3	set	31795
   362  0000                     _RG4	set	31796
   363  0000                     _RL1	set	30497
   364  0000                     _RL2	set	30498
   365  0000                     _RL3	set	30499
   366  0000                     _SAMP	set	32257
   367  0000                     _T3CKPS0	set	32140
   368  0000                     _T3CKPS1	set	32141
   369  0000                     _T4CKPS1	set	30753
   370  0000                     _T6CKPS1	set	31209
   371  0000                     _TMR0IE	set	32661
   372  0000                     _TMR0IF	set	32658
   373  0000                     _TMR0IP	set	32650
   374  0000                     _TMR3CS0	set	32142
   375  0000                     _TMR3CS1	set	32143
   376  0000                     _TMR3IE	set	32001
   377  0000                     _TMR3ON	set	32136
   378  0000                     _TMR4ON	set	30754
   379  0000                     _TMR6ON	set	31210
   380  0000                     _TRISE0	set	31920
   381  0000                     _TRISE1	set	31921
   382  0000                     _TRISE2	set	31922
   383  0000                     _TRISE3	set	31923
   384  0000                     _TRISE4	set	31924
   385  0000                     _TRISE5	set	31925
   386  0000                     _TRISE6	set	31926
   387  0000                     _TRISE7	set	31927
   388  0000                     _TRISG7	set	31943
   389  0000                     _TRISH0	set	31944
   390  0000                     _TRISH1	set	31945
   391  0000                     _TRISH2	set	31946
   392  0000                     _TRISH3	set	31947
   393  0000                     _TRISK1	set	30537
   394  0000                     _TRISL0	set	30512
   395  0000                     _TX1IE	set	31980
   396  0000                     _TX2IE	set	32028
   397  0000                     _TX3IE	set	31500
   398  0000                     _TX4IE	set	31502
   399  00FF04                     __stringdata:
   400                           	opt stack 0
   401  00FF04  4D                 	db	77	;'M'
   402  00FF05  45                 	db	69	;'E'
   403  00FF06  53                 	db	83	;'S'
   404  00FF07  53                 	db	83	;'S'
   405  00FF08  41                 	db	65	;'A'
   406  00FF09  47                 	db	71	;'G'
   407  00FF0A  45                 	db	69	;'E'
   408  00FF0B  5F                 	db	95	;'_'
   409  00FF0C  47                 	db	71	;'G'
   410  00FF0D  4F                 	db	79	;'O'
   411  00FF0E  45                 	db	69	;'E'
   412  00FF0F  53                 	db	83	;'S'
   413  00FF10  5F                 	db	95	;'_'
   414  00FF11  48                 	db	72	;'H'
   415  00FF12  45                 	db	69	;'E'
   416  00FF13  52                 	db	82	;'R'
   417  00FF14  45                 	db	69	;'E'
   418  00FF15  0D                 	db	13
   419  00FF16  0A                 	db	10
   420  00FF17  00                 	db	0
   421  00FF18                     STR_7:
   422  00FF18  52                 	db	82	;'R'
   423  00FF19  43                 	db	67	;'C'
   424  00FF1A  20                 	db	32
   425  00FF1B  4D                 	db	77	;'M'
   426  00FF1C  6F                 	db	111	;'o'
   427  00FF1D  64                 	db	100	;'d'
   428  00FF1E  65                 	db	101	;'e'
   429  00FF1F  0A                 	db	10
   430  00FF20  45                 	db	69	;'E'
   431  00FF21  52                 	db	82	;'R'
   432  00FF22  52                 	db	82	;'R'
   433  00FF23  3A                 	db	58	;':'
   434  00FF24  20                 	db	32
   435  00FF25  25                 	db	37
   436  00FF26  69                 	db	105	;'i'
   437  00FF27  20                 	db	32
   438  00FF28  20                 	db	32
   439  00FF29  00                 	db	0
   440  00FF2A                     STR_4:
   441  00FF2A  57                 	db	87	;'W'
   442  00FF2B  61                 	db	97	;'a'
   443  00FF2C  6E                 	db	110	;'n'
   444  00FF2D  64                 	db	100	;'d'
   445  00FF2E  65                 	db	101	;'e'
   446  00FF2F  72                 	db	114	;'r'
   447  00FF30  69                 	db	105	;'i'
   448  00FF31  6E                 	db	110	;'n'
   449  00FF32  0A                 	db	10
   450  00FF33  2D                 	db	45
   451  00FF34  2D                 	db	45
   452  00FF35  2D                 	db	45
   453  00FF36  2E                 	db	46
   454  00FF37  2E                 	db	46
   455  00FF38  2D                 	db	45
   456  00FF39  2D                 	db	45
   457  00FF3A  2D                 	db	45
   458  00FF3B  00                 	db	0
   459  00FF3C                     STR_12:
   460  00FF3C  53                 	db	83	;'S'
   461  00FF3D  65                 	db	101	;'e'
   462  00FF3E  6C                 	db	108	;'l'
   463  00FF3F  65                 	db	101	;'e'
   464  00FF40  63                 	db	99	;'c'
   465  00FF41  74                 	db	116	;'t'
   466  00FF42  65                 	db	101	;'e'
   467  00FF43  64                 	db	100	;'d'
   468  00FF44  0A                 	db	10
   469  00FF45  53                 	db	83	;'S'
   470  00FF46  65                 	db	101	;'e'
   471  00FF47  6C                 	db	108	;'l'
   472  00FF48  66                 	db	102	;'f'
   473  00FF49  54                 	db	84	;'T'
   474  00FF4A  65                 	db	101	;'e'
   475  00FF4B  73                 	db	115	;'s'
   476  00FF4C  74                 	db	116	;'t'
   477  00FF4D  00                 	db	0
   478  00FF4E                     STR_3:
   479  00FF4E  53                 	db	83	;'S'
   480  00FF4F  65                 	db	101	;'e'
   481  00FF50  6C                 	db	108	;'l'
   482  00FF51  66                 	db	102	;'f'
   483  00FF52  20                 	db	32
   484  00FF53  43                 	db	67	;'C'
   485  00FF54  61                 	db	97	;'a'
   486  00FF55  6C                 	db	108	;'l'
   487  00FF56  0A                 	db	10
   488  00FF57  57                 	db	87	;'W'
   489  00FF58  61                 	db	97	;'a'
   490  00FF59  69                 	db	105	;'i'
   491  00FF5A  74                 	db	116	;'t'
   492  00FF5B  20                 	db	32
   493  00FF5C  50                 	db	80	;'P'
   494  00FF5D  6C                 	db	108	;'l'
   495  00FF5E  7A                 	db	122	;'z'
   496  00FF5F  00                 	db	0
   497  00FF60                     STR_6:
   498  00FF60  52                 	db	82	;'R'
   499  00FF61  43                 	db	67	;'C'
   500  00FF62  20                 	db	32
   501  00FF63  4D                 	db	77	;'M'
   502  00FF64  6F                 	db	111	;'o'
   503  00FF65  64                 	db	100	;'d'
   504  00FF66  65                 	db	101	;'e'
   505  00FF67  0A                 	db	10
   506  00FF68  53                 	db	83	;'S'
   507  00FF69  65                 	db	101	;'e'
   508  00FF6A  61                 	db	97	;'a'
   509  00FF6B  72                 	db	114	;'r'
   510  00FF6C  63                 	db	99	;'c'
   511  00FF6D  68                 	db	104	;'h'
   512  00FF6E  2E                 	db	46
   513  00FF6F  2E                 	db	46
   514  00FF70  00                 	db	0
   515  00FF71                     STR_9:
   516  00FF71  53                 	db	83	;'S'
   517  00FF72  65                 	db	101	;'e'
   518  00FF73  6C                 	db	108	;'l'
   519  00FF74  65                 	db	101	;'e'
   520  00FF75  63                 	db	99	;'c'
   521  00FF76  74                 	db	116	;'t'
   522  00FF77  65                 	db	101	;'e'
   523  00FF78  64                 	db	100	;'d'
   524  00FF79  0A                 	db	10
   525  00FF7A  52                 	db	82	;'R'
   526  00FF7B  43                 	db	67	;'C'
   527  00FF7C  20                 	db	32
   528  00FF7D  4D                 	db	77	;'M'
   529  00FF7E  6F                 	db	111	;'o'
   530  00FF7F  64                 	db	100	;'d'
   531  00FF80  65                 	db	101	;'e'
   532  00FF81  00                 	db	0
   533  00FF82                     STR_14:
   534  00FF82  53                 	db	83	;'S'
   535  00FF83  65                 	db	101	;'e'
   536  00FF84  6C                 	db	108	;'l'
   537  00FF85  65                 	db	101	;'e'
   538  00FF86  63                 	db	99	;'c'
   539  00FF87  74                 	db	116	;'t'
   540  00FF88  65                 	db	101	;'e'
   541  00FF89  64                 	db	100	;'d'
   542  00FF8A  0A                 	db	10
   543  00FF8B  55                 	db	85	;'U'
   544  00FF8C  6E                 	db	110	;'n'
   545  00FF8D  6B                 	db	107	;'k'
   546  00FF8E  6E                 	db	110	;'n'
   547  00FF8F  6F                 	db	111	;'o'
   548  00FF90  77                 	db	119	;'w'
   549  00FF91  6E                 	db	110	;'n'
   550  00FF92  00                 	db	0
   551  00FF93                     STR_5:
   552  00FF93  57                 	db	87	;'W'
   553  00FF94  65                 	db	101	;'e'
   554  00FF95  20                 	db	32
   555  00FF96  61                 	db	97	;'a'
   556  00FF97  72                 	db	114	;'r'
   557  00FF98  65                 	db	101	;'e'
   558  00FF99  0A                 	db	10
   559  00FF9A  77                 	db	119	;'w'
   560  00FF9B  69                 	db	105	;'i'
   561  00FF9C  6E                 	db	110	;'n'
   562  00FF9D  6E                 	db	110	;'n'
   563  00FF9E  69                 	db	105	;'i'
   564  00FF9F  6E                 	db	110	;'n'
   565  00FFA0  67                 	db	103	;'g'
   566  00FFA1  21                 	db	33
   567  00FFA2  00                 	db	0
   568  00FFA3                     STR_11:
   569  00FFA3  53                 	db	83	;'S'
   570  00FFA4  65                 	db	101	;'e'
   571  00FFA5  6C                 	db	108	;'l'
   572  00FFA6  65                 	db	101	;'e'
   573  00FFA7  63                 	db	99	;'c'
   574  00FFA8  74                 	db	116	;'t'
   575  00FFA9  65                 	db	101	;'e'
   576  00FFAA  64                 	db	100	;'d'
   577  00FFAB  0A                 	db	10
   578  00FFAC  57                 	db	87	;'W'
   579  00FFAD  61                 	db	97	;'a'
   580  00FFAE  6E                 	db	110	;'n'
   581  00FFAF  64                 	db	100	;'d'
   582  00FFB0  65                 	db	101	;'e'
   583  00FFB1  72                 	db	114	;'r'
   584  00FFB2  00                 	db	0
   585  00FFB3                     STR_13:
   586  00FFB3  53                 	db	83	;'S'
   587  00FFB4  65                 	db	101	;'e'
   588  00FFB5  6C                 	db	108	;'l'
   589  00FFB6  65                 	db	101	;'e'
   590  00FFB7  63                 	db	99	;'c'
   591  00FFB8  74                 	db	116	;'t'
   592  00FFB9  65                 	db	101	;'e'
   593  00FFBA  64                 	db	100	;'d'
   594  00FFBB  0A                 	db	10
   595  00FFBC  44                 	db	68	;'D'
   596  00FFBD  65                 	db	101	;'e'
   597  00FFBE  62                 	db	98	;'b'
   598  00FFBF  75                 	db	117	;'u'
   599  00FFC0  67                 	db	103	;'g'
   600  00FFC1  00                 	db	0
   601  00FFC2                     STR_10:
   602  00FFC2  53                 	db	83	;'S'
   603  00FFC3  65                 	db	101	;'e'
   604  00FFC4  6C                 	db	108	;'l'
   605  00FFC5  65                 	db	101	;'e'
   606  00FFC6  63                 	db	99	;'c'
   607  00FFC7  74                 	db	116	;'t'
   608  00FFC8  65                 	db	101	;'e'
   609  00FFC9  64                 	db	100	;'d'
   610  00FFCA  0A                 	db	10
   611  00FFCB  4D                 	db	77	;'M'
   612  00FFCC  61                 	db	97	;'a'
   613  00FFCD  74                 	db	116	;'t'
   614  00FFCE  63                 	db	99	;'c'
   615  00FFCF  68                 	db	104	;'h'
   616  00FFD0  00                 	db	0
   617  00FFD1                     STR_8:
   618  00FFD1  61                 	db	97	;'a'
   619  00FFD2  6E                 	db	110	;'n'
   620  00FFD3  61                 	db	97	;'a'
   621  00FFD4  3A                 	db	58	;':'
   622  00FFD5  25                 	db	37
   623  00FFD6  69                 	db	105	;'i'
   624  00FFD7  0A                 	db	10
   625  00FFD8  74                 	db	116	;'t'
   626  00FFD9  79                 	db	121	;'y'
   627  00FFDA  70                 	db	112	;'p'
   628  00FFDB  65                 	db	101	;'e'
   629  00FFDC  20                 	db	32
   630  00FFDD  25                 	db	37
   631  00FFDE  69                 	db	105	;'i'
   632  00FFDF  00                 	db	0
   633  00FFE0  41                 	db	65	;'A'
   634  00FFE1  54                 	db	84	;'T'
   635  00FFE2  2B                 	db	43
   636  00FFE3  43                 	db	67	;'C'
   637  00FFE4  4D                 	db	77	;'M'
   638  00FFE5  47                 	db	71	;'G'
   639  00FFE6  46                 	db	70	;'F'
   640  00FFE7  3D                 	db	61	;'='
   641  00FFE8  31                 	db	49	;'1'
   642  00FFE9  00                 	db	0
   643  00FFEA  41                 	db	65	;'A'
   644  00FFEB  54                 	db	84	;'T'
   645  00FFEC  2B                 	db	43
   646  00FFED  43                 	db	67	;'C'
   647  00FFEE  53                 	db	83	;'S'
   648  00FFEF  51                 	db	81	;'Q'
   649  00FFF0  0D                 	db	13
   650  00FFF1  0A                 	db	10
   651  00FFF2  00                 	db	0
   652  00FFF3  41                 	db	65	;'A'
   653  00FFF4  54                 	db	84	;'T'
   654  00FFF5  2B                 	db	43
   655  00FFF6  43                 	db	67	;'C'
   656  00FFF7  4D                 	db	77	;'M'
   657  00FFF8  47                 	db	71	;'G'
   658  00FFF9  53                 	db	83	;'S'
   659  00FFFA  3D                 	db	61	;'='
   660  00FFFB  00                 	db	0
   661  00FFFC                     STR_1:
   662  00FFFC  25                 	db	37
   663  00FFFD  00                 	db	0
   664  00FFFE                     __end_of__stringdata:
   665                           	opt stack 0
   666                           
   667                           ; #config settings
   668  00FFFE  00                 	db	0	; dummy byte at the end
   669  0000                     tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           prodh	equ	0xFF4
   674                           prodl	equ	0xFF3
   675                           intcon	equ	0xFF2
   676                           intcon2	equ	0xFF1
   677                           intcon3	equ	0xFF0
   678                           wreg	equ	0xFE8
   679                           indf1	equ	0xFE7
   680                           postinc1	equ	0xFE6
   681                           fsr1h	equ	0xFE2
   682                           fsr1l	equ	0xFE1
   683                           indf2	equ	0xFDF
   684                           postinc2	equ	0xFDE
   685                           postdec2	equ	0xFDD
   686                           fsr2h	equ	0xFDA
   687                           fsr2l	equ	0xFD9
   688                           status	equ	0xFD8
   689                           
   690                           	psect	cinit
   691  0112A8                     __pcinit:
   692                           	opt stack 0
   693  0112A8                     start_initialization:
   694                           	opt stack 0
   695  0112A8                     __initialization:
   696                           	opt stack 0
   697                           
   698                           ; Clear objects allocated to BIGRAM (1000 bytes)
   699  0112A8  EE02  F080         	lfsr	0,__pbssBIGRAM
   700  0112AC  EE13 F0E8          	lfsr	1,1000
   701  0112B0                     clear_0:
   702  0112B0  6AEE               	clrf	postinc0,c
   703  0112B2  50E5               	movf	postdec1,w,c
   704  0112B4  50E1               	movf	fsr1l,w,c
   705  0112B6  E1FC               	bnz	clear_0
   706  0112B8  50E2               	movf	fsr1h,w,c
   707  0112BA  E1FA               	bnz	clear_0
   708                           
   709                           ; Clear objects allocated to BANK2 (128 bytes)
   710  0112BC  EE02  F000         	lfsr	0,__pbssBANK2
   711  0112C0  0E80               	movlw	128
   712  0112C2                     clear_1:
   713  0112C2  6AEE               	clrf	postinc0,c
   714  0112C4  06E8               	decf	wreg,f,c
   715  0112C6  E1FD               	bnz	clear_1
   716                           
   717                           ; Clear objects allocated to BANK1 (228 bytes)
   718  0112C8  EE01  F000         	lfsr	0,__pbssBANK1
   719  0112CC  0EE4               	movlw	228
   720  0112CE                     clear_2:
   721  0112CE  6AEE               	clrf	postinc0,c
   722  0112D0  06E8               	decf	wreg,f,c
   723  0112D2  E1FD               	bnz	clear_2
   724                           
   725                           ; Clear objects allocated to BANK0 (46 bytes)
   726  0112D4  EE00  F098         	lfsr	0,__pbssBANK0
   727  0112D8  0E2E               	movlw	46
   728  0112DA                     clear_3:
   729  0112DA  6AEE               	clrf	postinc0,c
   730  0112DC  06E8               	decf	wreg,f,c
   731  0112DE  E1FD               	bnz	clear_3
   732                           
   733                           ; Clear objects allocated to COMRAM (7 bytes)
   734  0112E0  EE00  F053         	lfsr	0,__pbssCOMRAM
   735  0112E4  0E07               	movlw	7
   736  0112E6                     clear_4:
   737  0112E6  6AEE               	clrf	postinc0,c
   738  0112E8  06E8               	decf	wreg,f,c
   739  0112EA  E1FD               	bnz	clear_4
   740                           
   741                           ; Initialize objects allocated to BANK0 (41 bytes)
   742                           ; load TBLPTR registers with __pidataBANK0
   743  0112EC  0E3C               	movlw	low __pidataBANK0
   744  0112EE  6EF6               	movwf	tblptrl,c
   745  0112F0  0E16               	movlw	high __pidataBANK0
   746  0112F2  6EF7               	movwf	tblptrh,c
   747  0112F4  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   748  0112F6  6EF8               	movwf	tblptru,c
   749  0112F8  EE00  F0C6         	lfsr	0,__pdataBANK0
   750  0112FC  EE10 F029          	lfsr	1,41
   751  011300                     copy_data0:
   752  011300  0009               	tblrd		*+
   753  011302  CFF5 FFEE          	movff	tablat,postinc0
   754  011306  50E5               	movf	postdec1,w,c
   755  011308  50E1               	movf	fsr1l,w,c
   756  01130A  E1FA               	bnz	copy_data0
   757  01130C                     end_of_initialization:
   758                           	opt stack 0
   759  01130C                     __end_of__initialization:
   760                           	opt stack 0
   761  01130C  0100               	movlb	0
   762  01130E  EF98  F085         	goto	_main	;jump to C main() function
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           prodh	equ	0xFF4
   768                           prodl	equ	0xFF3
   769                           intcon	equ	0xFF2
   770                           intcon2	equ	0xFF1
   771                           intcon3	equ	0xFF0
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           indf1	equ	0xFE7
   775                           postinc1	equ	0xFE6
   776                           postdec1	equ	0xFE5
   777                           fsr1h	equ	0xFE2
   778                           fsr1l	equ	0xFE1
   779                           indf2	equ	0xFDF
   780                           postinc2	equ	0xFDE
   781                           postdec2	equ	0xFDD
   782                           fsr2h	equ	0xFDA
   783                           fsr2l	equ	0xFD9
   784                           status	equ	0xFD8
   785                           
   786                           	psect	bssCOMRAM
   787  000053                     __pbssCOMRAM:
   788                           	opt stack 0
   789  000053                     _FONA_INDEX:
   790                           	opt stack 0
   791  000053                     	ds	1
   792  000054                     _PIXY_INDEX:
   793                           	opt stack 0
   794  000054                     	ds	1
   795  000055                     _UART4_INDEX:
   796                           	opt stack 0
   797  000055                     	ds	1
   798  000056                     _USB_INDEX:
   799                           	opt stack 0
   800  000056                     	ds	1
   801  000057                     _controller_type:
   802                           	opt stack 0
   803  000057                     	ds	1
   804  000058                     _mode:
   805                           	opt stack 0
   806  000058                     	ds	1
   807  000059                     _read_delay:
   808                           	opt stack 0
   809  000059                     	ds	1
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           prodh	equ	0xFF4
   815                           prodl	equ	0xFF3
   816                           intcon	equ	0xFF2
   817                           intcon2	equ	0xFF1
   818                           intcon3	equ	0xFF0
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           indf1	equ	0xFE7
   822                           postinc1	equ	0xFE6
   823                           postdec1	equ	0xFE5
   824                           fsr1h	equ	0xFE2
   825                           fsr1l	equ	0xFE1
   826                           indf2	equ	0xFDF
   827                           postinc2	equ	0xFDE
   828                           postdec2	equ	0xFDD
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833                           	psect	bssBANK0
   834  000098                     __pbssBANK0:
   835                           	opt stack 0
   836  000098                     _PS2data:
   837                           	opt stack 0
   838  000098                     	ds	21
   839  0000AD                     _last_read:
   840                           	opt stack 0
   841  0000AD                     	ds	4
   842  0000B1                     _left_count:
   843                           	opt stack 0
   844  0000B1                     	ds	4
   845  0000B5                     _millisCount:
   846                           	opt stack 0
   847  0000B5                     	ds	4
   848  0000B9                     _right_count:
   849                           	opt stack 0
   850  0000B9                     	ds	4
   851  0000BD                     _buttons:
   852                           	opt stack 0
   853  0000BD                     	ds	2
   854  0000BF                     _last_buttons:
   855                           	opt stack 0
   856  0000BF                     	ds	2
   857  0000C1                     _spbrg:
   858                           	opt stack 0
   859  0000C1                     	ds	2
   860  0000C3                     delay_init@config:
   861                           	opt stack 0
   862  0000C3                     	ds	2
   863  0000C5                     _config:
   864                           	opt stack 0
   865  0000C5                     	ds	1
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           prodh	equ	0xFF4
   871                           prodl	equ	0xFF3
   872                           intcon	equ	0xFF2
   873                           intcon2	equ	0xFF1
   874                           intcon3	equ	0xFF0
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           indf1	equ	0xFE7
   878                           postinc1	equ	0xFE6
   879                           postdec1	equ	0xFE5
   880                           fsr1h	equ	0xFE2
   881                           fsr1l	equ	0xFE1
   882                           indf2	equ	0xFDF
   883                           postinc2	equ	0xFDE
   884                           postdec2	equ	0xFDD
   885                           fsr2h	equ	0xFDA
   886                           fsr2l	equ	0xFD9
   887                           status	equ	0xFD8
   888                           
   889                           	psect	dataBANK0
   890  0000C6                     __pdataBANK0:
   891                           	opt stack 0
   892  0000C6                     PS2_readGamepad@F16091:
   893                           	opt stack 0
   894  0000C6                     	ds	9
   895  0000CF                     _type_read:
   896                           	opt stack 0
   897  0000CF                     	ds	9
   898  0000D8                     _exit_config:
   899                           	opt stack 0
   900  0000D8                     	ds	9
   901  0000E1                     _set_mode:
   902                           	opt stack 0
   903  0000E1                     	ds	9
   904  0000EA                     _enter_config:
   905                           	opt stack 0
   906  0000EA                     	ds	5
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           prodh	equ	0xFF4
   912                           prodl	equ	0xFF3
   913                           intcon	equ	0xFF2
   914                           intcon2	equ	0xFF1
   915                           intcon3	equ	0xFF0
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           indf1	equ	0xFE7
   919                           postinc1	equ	0xFE6
   920                           postdec1	equ	0xFE5
   921                           fsr1h	equ	0xFE2
   922                           fsr1l	equ	0xFE1
   923                           indf2	equ	0xFDF
   924                           postinc2	equ	0xFDE
   925                           postdec2	equ	0xFDD
   926                           fsr2h	equ	0xFDA
   927                           fsr2l	equ	0xFD9
   928                           status	equ	0xFD8
   929                           
   930                           	psect	bssBANK1
   931  000100                     __pbssBANK1:
   932                           	opt stack 0
   933  000100                     _realNumbers:
   934                           	opt stack 0
   935  000100                     	ds	128
   936  000180                     _FONA_BUFF:
   937                           	opt stack 0
   938  000180                     	ds	50
   939  0001B2                     _USART4_BUFF:
   940                           	opt stack 0
   941  0001B2                     	ds	50
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           prodh	equ	0xFF4
   947                           prodl	equ	0xFF3
   948                           intcon	equ	0xFF2
   949                           intcon2	equ	0xFF1
   950                           intcon3	equ	0xFF0
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           indf1	equ	0xFE7
   954                           postinc1	equ	0xFE6
   955                           postdec1	equ	0xFE5
   956                           fsr1h	equ	0xFE2
   957                           fsr1l	equ	0xFE1
   958                           indf2	equ	0xFDF
   959                           postinc2	equ	0xFDE
   960                           postdec2	equ	0xFDD
   961                           fsr2h	equ	0xFDA
   962                           fsr2l	equ	0xFD9
   963                           status	equ	0xFD8
   964                           
   965                           	psect	bssBANK2
   966  000200                     __pbssBANK2:
   967                           	opt stack 0
   968  000200                     _imaginaryNumbers:
   969                           	opt stack 0
   970  000200                     	ds	128
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           prodh	equ	0xFF4
   976                           prodl	equ	0xFF3
   977                           intcon	equ	0xFF2
   978                           intcon2	equ	0xFF1
   979                           intcon3	equ	0xFF0
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           indf1	equ	0xFE7
   983                           postinc1	equ	0xFE6
   984                           postdec1	equ	0xFE5
   985                           fsr1h	equ	0xFE2
   986                           fsr1l	equ	0xFE1
   987                           indf2	equ	0xFDF
   988                           postinc2	equ	0xFDE
   989                           postdec2	equ	0xFDD
   990                           fsr2h	equ	0xFDA
   991                           fsr2l	equ	0xFD9
   992                           status	equ	0xFD8
   993                           
   994                           	psect	bssBIGRAM
   995  000280                     __pbssBIGRAM:
   996                           	opt stack 0
   997  000280                     _PIXY_BUFF:
   998                           	opt stack 0
   999  000280                     	ds	500
  1000  000474                     _USB_BUFF:
  1001                           	opt stack 0
  1002  000474                     	ds	500
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           prodh	equ	0xFF4
  1008                           prodl	equ	0xFF3
  1009                           intcon	equ	0xFF2
  1010                           intcon2	equ	0xFF1
  1011                           intcon3	equ	0xFF0
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           indf1	equ	0xFE7
  1015                           postinc1	equ	0xFE6
  1016                           postdec1	equ	0xFE5
  1017                           fsr1h	equ	0xFE2
  1018                           fsr1l	equ	0xFE1
  1019                           indf2	equ	0xFDF
  1020                           postinc2	equ	0xFDE
  1021                           postdec2	equ	0xFDD
  1022                           fsr2h	equ	0xFDA
  1023                           fsr2l	equ	0xFD9
  1024                           status	equ	0xFD8
  1025                           
  1026                           	psect	cstackBANK0
  1027  000060                     __pcstackBANK0:
  1028                           	opt stack 0
  1029  000060                     LCD_printString@tempString:
  1030                           	opt stack 0
  1031                           
  1032                           ; 20 bytes @ 0x0
  1033  000060                     	ds	20
  1034  000074                     LCD_printString@string:
  1035                           	opt stack 0
  1036                           
  1037                           ; 20 bytes @ 0x14
  1038  000074                     	ds	20
  1039  000088                     LCD_printString@x:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x28
  1043  000088                     	ds	1
  1044  000089                     LCD_printString@val:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x29
  1048  000089                     	ds	2
  1049  00008B                     LCD_printString@tempString_590:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x2B
  1053  00008B                     	ds	2
  1054  00008D                     LCD_printString@aptr:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x2D
  1058  00008D                     	ds	1
  1059  00008E                     LCD_printString@i:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x2E
  1063  00008E                     	ds	2
  1064  000090                     LCD_printString@i_591:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x30
  1068  000090                     	ds	2
  1069  000092                     RCMode@left_speed:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x32
  1073  000092                     	ds	2
  1074  000094                     RCMode@right_speed:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x34
  1078  000094                     	ds	2
  1079  000096                     RCMode@type:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x36
  1083  000096                     	ds	1
  1084  000097                     RCMode@done:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x37
  1088  000097                     	ds	1
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           prodh	equ	0xFF4
  1094                           prodl	equ	0xFF3
  1095                           intcon	equ	0xFF2
  1096                           intcon2	equ	0xFF1
  1097                           intcon3	equ	0xFF0
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           indf1	equ	0xFE7
  1101                           postinc1	equ	0xFE6
  1102                           postdec1	equ	0xFE5
  1103                           fsr1h	equ	0xFE2
  1104                           fsr1l	equ	0xFE1
  1105                           indf2	equ	0xFDF
  1106                           postinc2	equ	0xFDE
  1107                           postdec2	equ	0xFDD
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8
  1111                           
  1112                           	psect	cstackCOMRAM
  1113  000001                     __pcstackCOMRAM:
  1114                           	opt stack 0
  1115  000001                     ??_encoderInterrupt:
  1116  000001                     
  1117                           ; 1 bytes @ 0x0
  1118  000001                     	ds	3
  1119  000004                     ??_communicationInterruptHandler:
  1120                           
  1121                           ; 0 bytes @ 0x3
  1122  000004                     	ds	2
  1123  000006                     ??_fft_collectData:
  1124  000006                     ?_fft_readBin:
  1125                           	opt stack 0
  1126  000006                     ?___wmul:
  1127                           	opt stack 0
  1128  000006                     ?___lwdiv:
  1129                           	opt stack 0
  1130  000006                     ?_millis:
  1131                           	opt stack 0
  1132  000006                     UART_transmitByte@data:
  1133                           	opt stack 0
  1134  000006                     settings_readButton@t:
  1135                           	opt stack 0
  1136  000006                     settings_auto@t:
  1137                           	opt stack 0
  1138  000006                     settings_wander@t:
  1139                           	opt stack 0
  1140  000006                     settings_selfTest@t:
  1141                           	opt stack 0
  1142  000006                     PS2_analog@button:
  1143                           	opt stack 0
  1144  000006                     OpenEPWM1@timer_source:
  1145                           	opt stack 0
  1146  000006                     SetOutputEPWM1@outputmode:
  1147                           	opt stack 0
  1148  000006                     OpenEPWM3@timer_source:
  1149                           	opt stack 0
  1150  000006                     SetOutputEPWM3@outputmode:
  1151                           	opt stack 0
  1152  000006                     fft_readBin@i:
  1153                           	opt stack 0
  1154  000006                     SetDCEPWM1@dutycycle:
  1155                           	opt stack 0
  1156  000006                     SetDCEPWM3@dutycycle:
  1157                           	opt stack 0
  1158  000006                     ___wmul@multiplier:
  1159                           	opt stack 0
  1160  000006                     ___lwdiv@dividend:
  1161                           	opt stack 0
  1162  000006                     strcat@to:
  1163                           	opt stack 0
  1164  000006                     delay_us@x:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x5
  1168  000006                     	ds	1
  1169  000007                     ??_OpenEPWM1:
  1170  000007                     ??_SetOutputEPWM1:
  1171  000007                     ??_OpenEPWM3:
  1172  000007                     ??_SetOutputEPWM3:
  1173  000007                     UART_transmitByte@transmitType:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x6
  1177  000007                     	ds	1
  1178  000008                     ??_fft_readBin:
  1179  000008                     ??_SetDCEPWM1:
  1180  000008                     ??_SetDCEPWM3:
  1181  000008                     OpenEPWM1@period:
  1182                           	opt stack 0
  1183  000008                     SetOutputEPWM1@eccpmx:
  1184                           	opt stack 0
  1185  000008                     OpenEPWM3@period:
  1186                           	opt stack 0
  1187  000008                     SetOutputEPWM3@eccpmx:
  1188                           	opt stack 0
  1189  000008                     ___wmul@multiplicand:
  1190                           	opt stack 0
  1191  000008                     ___lwdiv@divisor:
  1192                           	opt stack 0
  1193  000008                     strcat@from:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x7
  1197  000008                     	ds	1
  1198  000009                     SetOutputEPWM1@outputconfig:
  1199                           	opt stack 0
  1200  000009                     SetOutputEPWM3@outputconfig:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x8
  1204  000009                     	ds	1
  1205  00000A                     ??_PS2_shiftInOut:
  1206  00000A                     ___lwdiv@counter:
  1207                           	opt stack 0
  1208  00000A                     SetDCEPWM1@DCycle:
  1209                           	opt stack 0
  1210  00000A                     SetDCEPWM3@DCycle:
  1211                           	opt stack 0
  1212  00000A                     ___wmul@product:
  1213                           	opt stack 0
  1214  00000A                     strcat@cp:
  1215                           	opt stack 0
  1216  00000A                     delay_ms@x:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x9
  1220  00000A                     	ds	1
  1221  00000B                     ___lwdiv@quotient:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0xA
  1225  00000B                     	ds	1
  1226  00000C                     ?___awdiv:
  1227                           	opt stack 0
  1228  00000C                     PS2_shiftInOut@byte:
  1229                           	opt stack 0
  1230  00000C                     fft_collectData@i:
  1231                           	opt stack 0
  1232  00000C                     ___awdiv@dividend:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0xB
  1236  00000C                     	ds	1
  1237  00000D                     ?___lwmod:
  1238                           	opt stack 0
  1239  00000D                     PS2_shiftInOut@tmp:
  1240                           	opt stack 0
  1241  00000D                     ___lwmod@dividend:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0xC
  1245  00000D                     	ds	1
  1246  00000E                     ??_delay_ms:
  1247  00000E                     PS2_shiftInOut@i:
  1248                           	opt stack 0
  1249  00000E                     ___awdiv@divisor:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0xD
  1253  00000E                     	ds	1
  1254  00000F                     ___lwmod@divisor:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0xE
  1258  00000F                     	ds	1
  1259  000010                     ___awdiv@counter:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0xF
  1263  000010                     	ds	1
  1264  000011                     ___awdiv@sign:
  1265                           	opt stack 0
  1266  000011                     ___lwmod@counter:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x10
  1270  000011                     	ds	1
  1271  000012                     ?_sprintf:
  1272                           	opt stack 0
  1273  000012                     sprintf@f:
  1274                           	opt stack 0
  1275  000012                     ___awdiv@quotient:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x11
  1279  000012                     	ds	2
  1280  000014                     motorDrive_setSpeeds@rSpeed:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x13
  1284  000014                     	ds	1
  1285  000015                     ??_motorDrive_setSpeeds:
  1286                           
  1287                           ; 0 bytes @ 0x14
  1288  000015                     	ds	1
  1289  000016                     ??_sprintf:
  1290  000016                     delay_ms@time:
  1291                           	opt stack 0
  1292                           
  1293                           ; 4 bytes @ 0x15
  1294  000016                     	ds	1
  1295  000017                     motorDrive_setSpeeds@templ:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x16
  1299  000017                     	ds	1
  1300  000018                     sprintf@ap:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x17
  1304  000018                     	ds	1
  1305  000019                     sprintf@flag:
  1306                           	opt stack 0
  1307  000019                     motorDrive_setSpeeds@tempr:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x18
  1311  000019                     	ds	1
  1312  00001A                     LCD_placeCursor@y:
  1313                           	opt stack 0
  1314  00001A                     PS2_sendCommandString@len:
  1315                           	opt stack 0
  1316  00001A                     sprintf@prec:
  1317                           	opt stack 0
  1318  00001A                     debug@temp:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x19
  1322  00001A                     	ds	1
  1323  00001B                     ??_PS2_sendCommandString:
  1324  00001B                     ??_LCD_placeCursor:
  1325  00001B                     _motorDrive_setSpeeds$2455:
  1326                           	opt stack 0
  1327  00001B                     sprintf@_val:
  1328                           	opt stack 0
  1329                           
  1330                           ; 5 bytes @ 0x1A
  1331  00001B                     	ds	1
  1332  00001C                     debug@i:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x1B
  1336  00001C                     	ds	1
  1337  00001D                     LCD_placeCursor@x:
  1338                           	opt stack 0
  1339  00001D                     _motorDrive_setSpeeds$2456:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1C
  1343  00001D                     	ds	1
  1344  00001E                     LCD_placeCursor@address:
  1345                           	opt stack 0
  1346  00001E                     PS2_sendCommandString@y:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x1D
  1350  00001E                     	ds	1
  1351  00001F                     _motorDrive_setSpeeds$2457:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x1E
  1355  00001F                     	ds	1
  1356  000020                     PS2_sendCommandString@string:
  1357                           	opt stack 0
  1358  000020                     sprintf@sp:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x1F
  1362  000020                     	ds	1
  1363  000021                     ??_PS2_readGamepad:
  1364  000021                     sprintf@c:
  1365                           	opt stack 0
  1366  000021                     _motorDrive_setSpeeds$2458:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x20
  1370  000021                     	ds	1
  1371  000022                     ?_LCD_printString:
  1372                           	opt stack 0
  1373  000022                     LCD_printString@y:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x21
  1377  000022                     	ds	1
  1378  000023                     LCD_printString@input:
  1379                           	opt stack 0
  1380  000023                     _motorDrive_setSpeeds$2459:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x22
  1384  000023                     	ds	2
  1385  000025                     _motorDrive_setSpeeds$2460:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x24
  1389  000025                     	ds	1
  1390  000026                     PS2_readGamepad@dword2:
  1391                           	opt stack 0
  1392                           
  1393                           ; 12 bytes @ 0x25
  1394  000026                     	ds	1
  1395  000027                     _motorDrive_setSpeeds$2461:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x26
  1399  000027                     	ds	2
  1400  000029                     ??_LCD_printString:
  1401  000029                     motorDrive_setSpeeds@lSpeed:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x28
  1405  000029                     	ds	1
  1406  00002A                     
  1407                           ; 0 bytes @ 0x29
  1408  00002A                     	ds	1
  1409  00002B                     ??_selfTest:
  1410  00002B                     
  1411                           ; 0 bytes @ 0x2A
  1412  00002B                     	ds	7
  1413  000032                     PS2_readGamepad@dword:
  1414                           	opt stack 0
  1415                           
  1416                           ; 9 bytes @ 0x31
  1417  000032                     	ds	9
  1418  00003B                     PS2_readGamepad@temp:
  1419                           	opt stack 0
  1420                           
  1421                           ; 4 bytes @ 0x3A
  1422  00003B                     	ds	4
  1423  00003F                     PS2_readGamepad@i:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x3E
  1427  00003F                     	ds	2
  1428  000041                     PS2_readGamepad@i_2572:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x40
  1432  000041                     	ds	2
  1433  000043                     PS2_init@temp:
  1434                           	opt stack 0
  1435                           
  1436                           ; 9 bytes @ 0x42
  1437  000043                     	ds	9
  1438  00004C                     PS2_init@y:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x4B
  1442  00004C                     	ds	2
  1443  00004E                     PS2_init@i:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x4D
  1447  00004E                     	ds	2
  1448  000050                     ??_main:
  1449                           
  1450                           ; 0 bytes @ 0x4F
  1451  000050                     	ds	2
  1452  000052                     main@mode:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x51
  1456  000052                     	ds	1
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           prodh	equ	0xFF4
  1462                           prodl	equ	0xFF3
  1463                           intcon	equ	0xFF2
  1464                           intcon2	equ	0xFF1
  1465                           intcon3	equ	0xFF0
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           indf1	equ	0xFE7
  1469                           postinc1	equ	0xFE6
  1470                           postdec1	equ	0xFE5
  1471                           fsr1h	equ	0xFE2
  1472                           fsr1l	equ	0xFE1
  1473                           indf2	equ	0xFDF
  1474                           postinc2	equ	0xFDE
  1475                           postdec2	equ	0xFDD
  1476                           fsr2h	equ	0xFDA
  1477                           fsr2l	equ	0xFD9
  1478                           status	equ	0xFD8
  1479                           
  1480 ;;
  1481 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1482 ;;
  1483 ;; *************** function _main *****************
  1484 ;; Defined at:
  1485 ;;		line 130 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  mode            1   81[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;		None               void
  1492 ;; Registers used:
  1493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1503 ;;Total ram usage:        3 bytes
  1504 ;; Hardware stack levels required when called:   10
  1505 ;; This function calls:
  1506 ;;		_LCD_printString
  1507 ;;		_RCMode
  1508 ;;		_competitionMode
  1509 ;;		_debug
  1510 ;;		_delay_ms
  1511 ;;		_init
  1512 ;;		_selfTest
  1513 ;;		_settings_auto
  1514 ;;		_settings_readButton
  1515 ;;		_settings_selfTest
  1516 ;;		_settings_wander
  1517 ;;		_wanderMode
  1518 ;; This function is called by:
  1519 ;;		Startup code after reset
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text0
  1524  010B30                     __ptext0:
  1525                           	opt stack 0
  1526  010B30                     _main:
  1527                           	opt stack 20
  1528                           
  1529                           ;main.c: 154: IPEN = 1;
  1530                           
  1531                           ;incstack = 0
  1532  010B30  8ED0               	bsf	4048,7,c	;volatile
  1533                           
  1534                           ;main.c: 155: GIE = 1;
  1535  010B32  8EF2               	bsf	intcon,7,c	;volatile
  1536                           
  1537                           ;main.c: 156: init();
  1538  010B34  ECA0  F08B         	call	_init	;wreg free
  1539  010B38                     l5344:
  1540                           
  1541                           ;main.c: 157: debug();
  1542  010B38  ECC0  F087         	call	_debug	;wreg free
  1543  010B3C                     l5346:
  1544                           
  1545                           ;main.c: 164: {
  1546                           ;main.c: 166: mode = (settings_selfTest() << 2) + (settings_wander() << 1) + settings_au
      +                          to();
  1547  010B3C  ECE6  F08B         	call	_settings_auto	;wreg free
  1548  010B40  6E50               	movwf	??_main& (0+255),c
  1549  010B42  ECFB  F08B         	call	_settings_wander	;wreg free
  1550  010B46  0D02               	mullw	2
  1551  010B48  CFF3 F051          	movff	prodl,??_main+1
  1552  010B4C  EC01  F08C         	call	_settings_selfTest	;wreg free
  1553  010B50  0D04               	mullw	4
  1554  010B52  50F3               	movf	prodl,w,c
  1555  010B54  2451               	addwf	??_main+1,w,c
  1556  010B56  2450               	addwf	??_main,w,c
  1557  010B58  6E52               	movwf	main@mode,c
  1558                           
  1559                           ;main.c: 168: switch(mode)
  1560  010B5A  D036               	goto	l5362
  1561  010B5C                     l5348:
  1562                           
  1563                           ;main.c: 171: LCD_printString(0, 0, "Selected\nRC Mode");
  1564  010B5C  6A22               	clrf	LCD_printString@y,c
  1565  010B5E  0EFF               	movlw	high STR_9
  1566  010B60  6E24               	movwf	LCD_printString@input+1,c
  1567  010B62  0E71               	movlw	low STR_9
  1568  010B64  6E23               	movwf	LCD_printString@input,c
  1569  010B66  0E00               	movlw	0
  1570  010B68  EC00  F080         	call	_LCD_printString
  1571                           
  1572                           ;main.c: 172: break;
  1573  010B6C  D038               	goto	l5364
  1574  010B6E                     l5350:
  1575                           
  1576                           ;main.c: 175: LCD_printString(0, 0, "Selected\nMatch");
  1577  010B6E  6A22               	clrf	LCD_printString@y,c
  1578  010B70  0EFF               	movlw	high STR_10
  1579  010B72  6E24               	movwf	LCD_printString@input+1,c
  1580  010B74  0EC2               	movlw	low STR_10
  1581  010B76  6E23               	movwf	LCD_printString@input,c
  1582  010B78  0E00               	movlw	0
  1583  010B7A  EC00  F080         	call	_LCD_printString
  1584                           
  1585                           ;main.c: 176: break;
  1586  010B7E  D02F               	goto	l5364
  1587  010B80                     l5352:
  1588                           
  1589                           ;main.c: 179: LCD_printString(0, 0, "Selected\nWander");
  1590  010B80  6A22               	clrf	LCD_printString@y,c
  1591  010B82  0EFF               	movlw	high STR_11
  1592  010B84  6E24               	movwf	LCD_printString@input+1,c
  1593  010B86  0EA3               	movlw	low STR_11
  1594  010B88  6E23               	movwf	LCD_printString@input,c
  1595  010B8A  0E00               	movlw	0
  1596  010B8C  EC00  F080         	call	_LCD_printString
  1597                           
  1598                           ;main.c: 180: break;
  1599  010B90  D026               	goto	l5364
  1600  010B92                     l5354:
  1601                           
  1602                           ;main.c: 183: LCD_printString(0, 0, "Selected\nSelfTest");
  1603  010B92  6A22               	clrf	LCD_printString@y,c
  1604  010B94  0EFF               	movlw	high STR_12
  1605  010B96  6E24               	movwf	LCD_printString@input+1,c
  1606  010B98  0E3C               	movlw	low STR_12
  1607  010B9A  6E23               	movwf	LCD_printString@input,c
  1608  010B9C  0E00               	movlw	0
  1609  010B9E  EC00  F080         	call	_LCD_printString
  1610                           
  1611                           ;main.c: 184: break;
  1612  010BA2  D01D               	goto	l5364
  1613  010BA4                     l5356:
  1614                           
  1615                           ;main.c: 187: LCD_printString(0, 0, "Selected\nDebug");
  1616  010BA4  6A22               	clrf	LCD_printString@y,c
  1617  010BA6  0EFF               	movlw	high STR_13
  1618  010BA8  6E24               	movwf	LCD_printString@input+1,c
  1619  010BAA  0EB3               	movlw	low STR_13
  1620  010BAC  6E23               	movwf	LCD_printString@input,c
  1621  010BAE  0E00               	movlw	0
  1622  010BB0  EC00  F080         	call	_LCD_printString
  1623                           
  1624                           ;main.c: 188: break;
  1625  010BB4  D014               	goto	l5364
  1626  010BB6                     l5358:
  1627                           
  1628                           ;main.c: 191: LCD_printString(0, 0, "Selected\nUnknown");
  1629  010BB6  6A22               	clrf	LCD_printString@y,c
  1630  010BB8  0EFF               	movlw	high STR_14
  1631  010BBA  6E24               	movwf	LCD_printString@input+1,c
  1632  010BBC  0E82               	movlw	low STR_14
  1633  010BBE  6E23               	movwf	LCD_printString@input,c
  1634  010BC0  0E00               	movlw	0
  1635  010BC2  EC00  F080         	call	_LCD_printString
  1636                           
  1637                           ;main.c: 192: break;
  1638  010BC6  D00B               	goto	l5364
  1639  010BC8                     l5362:
  1640  010BC8  5052               	movf	main@mode,w,c
  1641                           
  1642                           ; Switch size 1, requested type "space"
  1643                           ; Number of cases is 5, Range of values is 0 to 5
  1644                           ; switch strategies available:
  1645                           ; Name         Instructions Cycles
  1646                           ; simple_byte           16     9 (average)
  1647                           ;	Chosen strategy is simple_byte
  1648  010BCA  E0C8               	bz	l5348
  1649  010BCC  0A01               	xorlw	1	; case 1
  1650  010BCE  E0CF               	bz	l5350
  1651  010BD0  0A03               	xorlw	3	; case 2
  1652  010BD2  E0D6               	bz	l5352
  1653  010BD4  0A06               	xorlw	6	; case 4
  1654  010BD6  E0DD               	bz	l5354
  1655  010BD8  0A01               	xorlw	1	; case 5
  1656  010BDA  E0E4               	bz	l5356
  1657  010BDC  D7EC               	goto	l5358
  1658  010BDE                     l5364:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 195: delay_ms(50);
  1662  010BDE  EC59  F084         	call	PL10	;call to abstracted procedure
  1663  010BE2  ECE8  F089         	call	_delay_ms	;wreg free
  1664                           
  1665                           ;main.c: 196: }while(settings_readButton() == 1 || mode > 5);
  1666  010BE6  ECED  F08B         	call	_settings_readButton	;wreg free
  1667  010BEA  6E50               	movwf	??_main& (0+255),c
  1668  010BEC  0450               	decf	??_main,w,c
  1669  010BEE  E0A6               	bz	l5346
  1670  010BF0  0E06               	movlw	6
  1671  010BF2  5C52               	subwf	main@mode,w,c
  1672  010BF4  E30D               	bnc	l5380
  1673  010BF6  D7A2               	goto	l5346
  1674  010BF8                     l5368:
  1675                           
  1676                           ;main.c: 201: RCMode();
  1677  010BF8  EC7D  F086         	call	_RCMode	;wreg free
  1678                           
  1679                           ;main.c: 202: break;
  1680  010BFC  D79F               	goto	l5346
  1681  010BFE                     l5370:
  1682                           
  1683                           ;main.c: 205: competitionMode();
  1684  010BFE  ECC4  F08B         	call	_competitionMode	;wreg free
  1685                           
  1686                           ;main.c: 206: break;
  1687  010C02  D79C               	goto	l5346
  1688  010C04                     l5372:
  1689                           
  1690                           ;main.c: 209: wanderMode();
  1691  010C04  ECBB  F08B         	call	_wanderMode	;wreg free
  1692                           
  1693                           ;main.c: 210: break;
  1694  010C08  D799               	goto	l5346
  1695  010C0A                     l5374:
  1696                           
  1697                           ;main.c: 213: selfTest();
  1698  010C0A  EC33  F08B         	call	_selfTest	;wreg free
  1699                           
  1700                           ;main.c: 214: break;
  1701  010C0E  D796               	goto	l5346
  1702  010C10                     l5380:
  1703  010C10  5052               	movf	main@mode,w,c
  1704                           
  1705                           ; Switch size 1, requested type "space"
  1706                           ; Number of cases is 5, Range of values is 0 to 5
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte           16     9 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  010C12  E0F2               	bz	l5368
  1712  010C14  0A01               	xorlw	1	; case 1
  1713  010C16  E0F3               	bz	l5370
  1714  010C18  0A03               	xorlw	3	; case 2
  1715  010C1A  E0F4               	bz	l5372
  1716  010C1C  0A06               	xorlw	6	; case 4
  1717  010C1E  E0F5               	bz	l5374
  1718  010C20  0A01               	xorlw	1	; case 5
  1719  010C22  E08A               	bz	l5344
  1720  010C24  D78B               	goto	l5346
  1721  010C26                     __end_of_main:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           intcon2	equ	0xFF1
  1731                           intcon3	equ	0xFF0
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           indf1	equ	0xFE7
  1735                           postinc1	equ	0xFE6
  1736                           postdec1	equ	0xFE5
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           postinc2	equ	0xFDE
  1741                           postdec2	equ	0xFDD
  1742                           fsr2h	equ	0xFDA
  1743                           fsr2l	equ	0xFD9
  1744                           status	equ	0xFD8
  1745                           
  1746 ;; *************** function _wanderMode *****************
  1747 ;; Defined at:
  1748 ;;		line 81 in file "main.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;		None               void
  1755 ;; Registers used:
  1756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1766 ;;Total ram usage:        0 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    7
  1769 ;; This function calls:
  1770 ;;		_LCD_printString
  1771 ;; This function is called by:
  1772 ;;		_main
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text1
  1777  011776                     __ptext1:
  1778                           	opt stack 0
  1779  011776                     _wanderMode:
  1780                           	opt stack 22
  1781                           
  1782                           ;main.c: 83: LCD_printString(0,0, "Wanderin\n---..---");
  1783                           
  1784                           ;incstack = 0
  1785  011776  6A22               	clrf	LCD_printString@y,c
  1786  011778  0EFF               	movlw	high STR_4
  1787  01177A  6E24               	movwf	LCD_printString@input+1,c
  1788  01177C  0E2A               	movlw	low STR_4
  1789  01177E  6E23               	movwf	LCD_printString@input,c
  1790  011780  0E00               	movlw	0
  1791  011782  EC00  F080         	call	_LCD_printString
  1792  011786                     l250:
  1793                           
  1794                           ;main.c: 85: {
  1795  011786  D7FF               	goto	l250
  1796  011788                     __end_of_wanderMode:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           prodh	equ	0xFF4
  1803                           prodl	equ	0xFF3
  1804                           intcon	equ	0xFF2
  1805                           intcon2	equ	0xFF1
  1806                           intcon3	equ	0xFF0
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           indf1	equ	0xFE7
  1810                           postinc1	equ	0xFE6
  1811                           postdec1	equ	0xFE5
  1812                           fsr1h	equ	0xFE2
  1813                           fsr1l	equ	0xFE1
  1814                           indf2	equ	0xFDF
  1815                           postinc2	equ	0xFDE
  1816                           postdec2	equ	0xFDD
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _settings_wander *****************
  1822 ;; Defined at:
  1823 ;;		line 80 in file "settings.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  t               1    5[COMRAM] unsigned char 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      unsigned char 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;Total ram usage:        1 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    3
  1844 ;; This function calls:
  1845 ;;		Nothing
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text2
  1852  0117F6                     __ptext2:
  1853                           	opt stack 0
  1854  0117F6                     _settings_wander:
  1855                           	opt stack 26
  1856                           
  1857                           ;settings.c: 82: char t = RG2;
  1858                           
  1859                           ;incstack = 0
  1860  0117F6  0E00               	movlw	0
  1861  0117F8  B486               	btfsc	3974,2,c	;volatile
  1862  0117FA  0E01               	movlw	1
  1863  0117FC  6E06               	movwf	settings_wander@t,c
  1864                           
  1865                           ;settings.c: 83: return t;
  1866  0117FE  5006               	movf	settings_wander@t,w,c
  1867  011800  0012               	return	
  1868  011802                     __end_of_settings_wander:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           prodh	equ	0xFF4
  1875                           prodl	equ	0xFF3
  1876                           intcon	equ	0xFF2
  1877                           intcon2	equ	0xFF1
  1878                           intcon3	equ	0xFF0
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           indf1	equ	0xFE7
  1882                           postinc1	equ	0xFE6
  1883                           postdec1	equ	0xFE5
  1884                           fsr1h	equ	0xFE2
  1885                           fsr1l	equ	0xFE1
  1886                           indf2	equ	0xFDF
  1887                           postinc2	equ	0xFDE
  1888                           postdec2	equ	0xFDD
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _settings_selfTest *****************
  1894 ;; Defined at:
  1895 ;;		line 94 in file "settings.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  t               1    5[COMRAM] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      unsigned char 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1913 ;;Total ram usage:        1 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    3
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text3
  1924  011802                     __ptext3:
  1925                           	opt stack 0
  1926  011802                     _settings_selfTest:
  1927                           	opt stack 26
  1928                           
  1929                           ;settings.c: 96: char t = RG0;
  1930                           
  1931                           ;incstack = 0
  1932  011802  0E00               	movlw	0
  1933  011804  B086               	btfsc	3974,0,c	;volatile
  1934  011806  0E01               	movlw	1
  1935  011808  6E06               	movwf	settings_selfTest@t,c
  1936                           
  1937                           ;settings.c: 97: return t;
  1938  01180A  5006               	movf	settings_selfTest@t,w,c
  1939  01180C  0012               	return	
  1940  01180E                     __end_of_settings_selfTest:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon	equ	0xFF2
  1949                           intcon2	equ	0xFF1
  1950                           intcon3	equ	0xFF0
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           indf1	equ	0xFE7
  1954                           postinc1	equ	0xFE6
  1955                           postdec1	equ	0xFE5
  1956                           fsr1h	equ	0xFE2
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           postdec2	equ	0xFDD
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _settings_auto *****************
  1966 ;; Defined at:
  1967 ;;		line 66 in file "settings.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  t               1    5[COMRAM] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      unsigned char 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1985 ;;Total ram usage:        1 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    3
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text4
  1996  0117CC                     __ptext4:
  1997                           	opt stack 0
  1998  0117CC                     _settings_auto:
  1999                           	opt stack 26
  2000                           
  2001                           ;settings.c: 68: char t = RL1;
  2002                           
  2003                           ;incstack = 0
  2004  0117CC  010E               	movlb	14
  2005  0117CE  0E00               	movlw	0
  2006  0117D0  B3E4               	btfsc	228,1,b	;volatile
  2007  0117D2  0E01               	movlw	1
  2008  0117D4  6E06               	movwf	settings_auto@t,c
  2009                           
  2010                           ;settings.c: 69: return t;
  2011  0117D6  5006               	movf	settings_auto@t,w,c
  2012  0117D8  0012               	return	
  2013  0117DA                     __end_of_settings_auto:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           prodh	equ	0xFF4
  2020                           prodl	equ	0xFF3
  2021                           intcon	equ	0xFF2
  2022                           intcon2	equ	0xFF1
  2023                           intcon3	equ	0xFF0
  2024                           postinc0	equ	0xFEE
  2025                           wreg	equ	0xFE8
  2026                           indf1	equ	0xFE7
  2027                           postinc1	equ	0xFE6
  2028                           postdec1	equ	0xFE5
  2029                           fsr1h	equ	0xFE2
  2030                           fsr1l	equ	0xFE1
  2031                           indf2	equ	0xFDF
  2032                           postinc2	equ	0xFDE
  2033                           postdec2	equ	0xFDD
  2034                           fsr2h	equ	0xFDA
  2035                           fsr2l	equ	0xFD9
  2036                           status	equ	0xFD8
  2037                           
  2038 ;; *************** function _selfTest *****************
  2039 ;; Defined at:
  2040 ;;		line 71 in file "main.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;		None
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;		None               void
  2047 ;; Registers used:
  2048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2058 ;;Total ram usage:        1 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    7
  2061 ;; This function calls:
  2062 ;;		_LCD_printString
  2063 ;;		_settings_readButton
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text5
  2070  011666                     __ptext5:
  2071                           	opt stack 0
  2072  011666                     _selfTest:
  2073                           	opt stack 22
  2074                           
  2075                           ;main.c: 75: LCD_printString(0,0, "Self Cal\nWait Plz");
  2076                           
  2077                           ;incstack = 0
  2078  011666  6A22               	clrf	LCD_printString@y,c
  2079  011668  0EFF               	movlw	high STR_3
  2080  01166A  6E24               	movwf	LCD_printString@input+1,c
  2081  01166C  0E4E               	movlw	low STR_3
  2082  01166E  6E23               	movwf	LCD_printString@input,c
  2083  011670  0E00               	movlw	0
  2084  011672  EC00  F080         	call	_LCD_printString
  2085  011676                     l5306:
  2086  011676  ECED  F08B         	call	_settings_readButton	;wreg free
  2087  01167A  0900               	iorlw	0
  2088  01167C  E0FC               	bz	l5306
  2089  01167E                     l5308:
  2090  01167E  ECED  F08B         	call	_settings_readButton	;wreg free
  2091  011682  6E2B               	movwf	??_selfTest& (0+255),c
  2092  011684  042B               	decf	??_selfTest,w,c
  2093  011686  A4D8               	btfss	status,2,c
  2094  011688  0012               	return	
  2095  01168A  D7F9               	goto	l5308
  2096  01168C                     __end_of_selfTest:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           prodh	equ	0xFF4
  2103                           prodl	equ	0xFF3
  2104                           intcon	equ	0xFF2
  2105                           intcon2	equ	0xFF1
  2106                           intcon3	equ	0xFF0
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           indf1	equ	0xFE7
  2110                           postinc1	equ	0xFE6
  2111                           postdec1	equ	0xFE5
  2112                           fsr1h	equ	0xFE2
  2113                           fsr1l	equ	0xFE1
  2114                           indf2	equ	0xFDF
  2115                           postinc2	equ	0xFDE
  2116                           postdec2	equ	0xFDD
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _settings_readButton *****************
  2122 ;; Defined at:
  2123 ;;		line 45 in file "settings.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  t               1    5[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      unsigned char 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2141 ;;Total ram usage:        1 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    3
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_selfTest
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text6
  2153  0117DA                     __ptext6:
  2154                           	opt stack 0
  2155  0117DA                     _settings_readButton:
  2156                           	opt stack 26
  2157                           
  2158                           ;settings.c: 47: char t = RL3;
  2159                           
  2160                           ;incstack = 0
  2161  0117DA  010E               	movlb	14
  2162  0117DC  0E00               	movlw	0
  2163  0117DE  B7E4               	btfsc	228,3,b	;volatile
  2164  0117E0  0E01               	movlw	1
  2165  0117E2  6E06               	movwf	settings_readButton@t,c
  2166                           
  2167                           ;settings.c: 48: return t;
  2168  0117E4  5006               	movf	settings_readButton@t,w,c
  2169  0117E6  0012               	return	
  2170  0117E8                     __end_of_settings_readButton:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           intcon2	equ	0xFF1
  2180                           intcon3	equ	0xFF0
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           indf1	equ	0xFE7
  2184                           postinc1	equ	0xFE6
  2185                           postdec1	equ	0xFE5
  2186                           fsr1h	equ	0xFE2
  2187                           fsr1l	equ	0xFE1
  2188                           indf2	equ	0xFDF
  2189                           postinc2	equ	0xFDE
  2190                           postdec2	equ	0xFDD
  2191                           fsr2h	equ	0xFDA
  2192                           fsr2l	equ	0xFD9
  2193                           status	equ	0xFD8
  2194                           
  2195 ;; *************** function _init *****************
  2196 ;; Defined at:
  2197 ;;		line 30 in file "main.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;		None               void
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : F/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;Total ram usage:        0 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    6
  2218 ;; This function calls:
  2219 ;;		_LCD_init4bit
  2220 ;;		_UART_init
  2221 ;;		_clearMillis
  2222 ;;		_encoders_init
  2223 ;;		_fft_init
  2224 ;;		_motorDrive_init
  2225 ;;		_settings_init
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text7
  2232  011740                     __ptext7:
  2233                           	opt stack 0
  2234  011740                     _init:
  2235                           	opt stack 23
  2236                           
  2237                           ;main.c: 32: settings_init();
  2238                           
  2239                           ;incstack = 0
  2240  011740  EC7E  F08B         	call	_settings_init	;wreg free
  2241                           
  2242                           ; BSR set to: 15
  2243                           ;main.c: 33: motorDrive_init();
  2244  011744  ECE7  F088         	call	_motorDrive_init	;wreg free
  2245                           
  2246                           ; BSR set to: 15
  2247                           ;main.c: 34: LCD_init4bit();
  2248  011748  EC8E  F083         	call	_LCD_init4bit	;wreg free
  2249                           
  2250                           ;main.c: 35: UART_init();
  2251  01174C  ECE2  F086         	call	_UART_init	;wreg free
  2252                           
  2253                           ; BSR set to: 14
  2254                           ;main.c: 36: encoders_init();
  2255  011750  EC46  F08B         	call	_encoders_init	;wreg free
  2256                           
  2257                           ; BSR set to: 14
  2258                           ;main.c: 37: fft_init();
  2259  011754  ECB4  F08A         	call	_fft_init	;wreg free
  2260                           
  2261                           ;main.c: 41: clearMillis();
  2262  011758  EFD6  F08B         	goto	_clearMillis	;wreg free
  2263  01175C                     __end_of_init:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           prodh	equ	0xFF4
  2270                           prodl	equ	0xFF3
  2271                           intcon	equ	0xFF2
  2272                           intcon2	equ	0xFF1
  2273                           intcon3	equ	0xFF0
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           indf1	equ	0xFE7
  2277                           postinc1	equ	0xFE6
  2278                           postdec1	equ	0xFE5
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _settings_init *****************
  2289 ;; Defined at:
  2290 ;;		line 16 in file "settings.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;		None               void
  2297 ;; Registers used:
  2298 ;;		wreg, status,2
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : F/F
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2308 ;;Total ram usage:        0 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    3
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_init
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text8
  2319  0116FC                     __ptext8:
  2320                           	opt stack 0
  2321  0116FC                     _settings_init:
  2322                           	opt stack 25
  2323                           
  2324                           ;settings.c: 18: CM1CONbits.CON = 0;
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;incstack = 0
  2328  0116FC  010F               	movlb	15	; () banked
  2329  0116FE  9F53               	bcf	83,7,b	;volatile
  2330                           
  2331                           ;settings.c: 19: ANCON1 = 0;
  2332  011700  010E               	movlb	14	; () banked
  2333  011702  6B47               	clrf	71,b	;volatile
  2334                           
  2335                           ;settings.c: 20: ANCON2 = 0;
  2336  011704  6B46               	clrf	70,b	;volatile
  2337                           
  2338                           ;settings.c: 22: TRISGbits.TRISG0 = 1;
  2339  011706  8098               	bsf	3992,0,c	;volatile
  2340                           
  2341                           ;settings.c: 23: TRISGbits.TRISG1 = 1;
  2342  011708  8298               	bsf	3992,1,c	;volatile
  2343                           
  2344                           ;settings.c: 24: TRISGbits.TRISG2 = 1;
  2345  01170A  8498               	bsf	3992,2,c	;volatile
  2346                           
  2347                           ;settings.c: 25: TRISGbits.TRISG3 = 1;
  2348  01170C  8698               	bsf	3992,3,c	;volatile
  2349                           
  2350                           ;settings.c: 26: TRISGbits.TRISG4 = 1;
  2351  01170E  8898               	bsf	3992,4,c	;volatile
  2352                           
  2353                           ;settings.c: 27: TRISLbits.TRISL1 = 1;
  2354  011710  83E6               	bsf	230,1,b	;volatile
  2355                           
  2356                           ;settings.c: 28: TRISLbits.TRISL2 = 1;
  2357  011712  85E6               	bsf	230,2,b	;volatile
  2358                           
  2359                           ;settings.c: 29: TRISLbits.TRISL3 = 1;
  2360  011714  87E6               	bsf	230,3,b	;volatile
  2361                           
  2362                           ; BSR set to: 14
  2363                           ;settings.c: 32: PADCFG1 = 0b00010001;
  2364  011716  0E11               	movlw	17
  2365  011718  010F               	movlb	15	; () banked
  2366  01171A  6F54               	movwf	84,b	;volatile
  2367                           
  2368                           ; BSR set to: 15
  2369  01171C  0C11               	retlw	17
  2370  01171E                     __end_of_settings_init:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           tblptrh	equ	0xFF7
  2374                           tblptrl	equ	0xFF6
  2375                           tablat	equ	0xFF5
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           intcon	equ	0xFF2
  2379                           intcon2	equ	0xFF1
  2380                           intcon3	equ	0xFF0
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           indf1	equ	0xFE7
  2384                           postinc1	equ	0xFE6
  2385                           postdec1	equ	0xFE5
  2386                           fsr1h	equ	0xFE2
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _motorDrive_init *****************
  2396 ;; Defined at:
  2397 ;;		line 15 in file "motorDrive.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;		None               void
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : F/F
  2408 ;;		On exit  : F/F
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    5
  2418 ;; This function calls:
  2419 ;;		_OpenEPWM1
  2420 ;;		_OpenEPWM3
  2421 ;;		_SetDCEPWM1
  2422 ;;		_SetDCEPWM3
  2423 ;;		_SetOutputEPWM1
  2424 ;;		_SetOutputEPWM3
  2425 ;;		_motorDrive_setSpeeds
  2426 ;; This function is called by:
  2427 ;;		_init
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text9
  2432  0111CE                     __ptext9:
  2433                           	opt stack 0
  2434  0111CE                     _motorDrive_init:
  2435                           	opt stack 23
  2436                           
  2437                           ; BSR set to: 15
  2438                           ;motorDrive.c: 22: IOLOCK = 0;
  2439                           
  2440                           ; BSR set to: 15
  2441                           ;incstack = 0
  2442  0111CE  9C66               	bcf	3942,6,c	;volatile
  2443                           
  2444                           ; BSR set to: 15
  2445                           ;motorDrive.c: 24: RPOR34_35 |= 0xF8;
  2446  0111D0  0EF8               	movlw	248
  2447  0111D2  010E               	movlb	14	; () banked
  2448  0111D4  1323               	iorwf	35,f,b	;volatile
  2449                           
  2450                           ; BSR set to: 14
  2451                           ;motorDrive.c: 25: TRISE6 = 0;
  2452  0111D6  9C96               	bcf	3990,6,c	;volatile
  2453                           
  2454                           ;motorDrive.c: 29: RPOR30_31 |= 0x4F;
  2455  0111D8  0E4F               	movlw	79
  2456  0111DA  1321               	iorwf	33,f,b	;volatile
  2457                           
  2458                           ; BSR set to: 14
  2459                           ;motorDrive.c: 30: TRISE7 = 0;
  2460  0111DC  9E96               	bcf	3990,7,c	;volatile
  2461                           
  2462                           ; BSR set to: 14
  2463                           ;motorDrive.c: 32: IOLOCK = 1;
  2464  0111DE  8C66               	bsf	3942,6,c	;volatile
  2465                           
  2466                           ; BSR set to: 14
  2467                           ;motorDrive.c: 38: TRISL0 = 0;
  2468  0111E0  91E6               	bcf	230,0,b	;volatile
  2469                           
  2470                           ; BSR set to: 14
  2471                           ;motorDrive.c: 39: TRISK1 = 0;
  2472  0111E2  93E9               	bcf	233,1,b	;volatile
  2473                           
  2474                           ; BSR set to: 14
  2475                           ;motorDrive.c: 43: TMR4ON = 1;
  2476  0111E4  010F               	movlb	15	; () banked
  2477  0111E6  8504               	bsf	4,2,b	;volatile
  2478                           
  2479                           ; BSR set to: 15
  2480                           ;motorDrive.c: 44: T4CKPS1 = 1;
  2481  0111E8  8304               	bsf	4,1,b	;volatile
  2482                           
  2483                           ; BSR set to: 15
  2484                           ;motorDrive.c: 46: TMR6ON = 1;
  2485  0111EA  853D               	bsf	61,2,b	;volatile
  2486                           
  2487                           ; BSR set to: 15
  2488                           ;motorDrive.c: 47: T6CKPS1 = 1;
  2489  0111EC  833D               	bsf	61,1,b	;volatile
  2490                           
  2491                           ; BSR set to: 15
  2492                           ;motorDrive.c: 50: OpenEPWM1(0x33, 0b10101111);
  2493  0111EE  0EAF               	movlw	175
  2494  0111F0  6E06               	movwf	OpenEPWM1@timer_source,c
  2495  0111F2  0E33               	movlw	51
  2496  0111F4  ECAE  F088         	call	_OpenEPWM1
  2497                           
  2498                           ; BSR set to: 15
  2499                           ;motorDrive.c: 51: SetDCEPWM1(0x0);
  2500  0111F8  0E00               	movlw	0
  2501  0111FA  6A07               	clrf	SetDCEPWM1@dutycycle+1,c
  2502  0111FC  6A06               	clrf	SetDCEPWM1@dutycycle,c
  2503  0111FE  EC97  F08A         	call	_SetDCEPWM1	;wreg free
  2504                           
  2505                           ;motorDrive.c: 52: SetOutputEPWM1( 0b00111111, 0b11111100);
  2506  011202  0EFC               	movlw	252
  2507  011204  6E06               	movwf	SetOutputEPWM1@outputmode,c
  2508  011206  0E3F               	movlw	63
  2509  011208  EC75  F088         	call	_SetOutputEPWM1
  2510                           
  2511                           ;motorDrive.c: 55: CCP1CON = 0b00001100;
  2512  01120C  0E0C               	movlw	12
  2513  01120E  6EB9               	movwf	4025,c	;volatile
  2514                           
  2515                           ;motorDrive.c: 56: CCPTMRS0 = 0b01001001;
  2516  011210  0E49               	movlw	73
  2517  011212  010F               	movlb	15	; () banked
  2518  011214  6F36               	movwf	54,b	;volatile
  2519                           
  2520                           ; BSR set to: 15
  2521                           ;motorDrive.c: 60: OpenEPWM3(0x33, 0b11101111);
  2522  011216  0EEF               	movlw	239
  2523  011218  6E06               	movwf	OpenEPWM3@timer_source,c
  2524  01121A  0E33               	movlw	51
  2525  01121C  ECFF  F087         	call	_OpenEPWM3
  2526                           
  2527                           ; BSR set to: 15
  2528                           ;motorDrive.c: 61: SetDCEPWM3(0x0);
  2529  011220  0E00               	movlw	0
  2530  011222  6A07               	clrf	SetDCEPWM3@dutycycle+1,c
  2531  011224  6A06               	clrf	SetDCEPWM3@dutycycle,c
  2532  011226  EC79  F08A         	call	_SetDCEPWM3	;wreg free
  2533                           
  2534                           ; BSR set to: 15
  2535                           ;motorDrive.c: 62: SetOutputEPWM3( 0b00111111, 0b11111100);
  2536  01122A  0EFC               	movlw	252
  2537  01122C  6E06               	movwf	SetOutputEPWM3@outputmode,c
  2538  01122E  0E3F               	movlw	63
  2539  011230  EC3C  F088         	call	_SetOutputEPWM3
  2540                           
  2541                           ; BSR set to: 15
  2542                           ;motorDrive.c: 64: motorDrive_setSpeeds(0,0);
  2543  011234  0E00               	movlw	0
  2544  011236  6A14               	clrf	motorDrive_setSpeeds@rSpeed,c
  2545  011238  EFC2  F081         	goto	_motorDrive_setSpeeds
  2546  01123C                     __end_of_motorDrive_init:
  2547                           	opt stack 0
  2548                           tblptru	equ	0xFF8
  2549                           tblptrh	equ	0xFF7
  2550                           tblptrl	equ	0xFF6
  2551                           tablat	equ	0xFF5
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           intcon	equ	0xFF2
  2555                           intcon2	equ	0xFF1
  2556                           intcon3	equ	0xFF0
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           indf1	equ	0xFE7
  2560                           postinc1	equ	0xFE6
  2561                           postdec1	equ	0xFE5
  2562                           fsr1h	equ	0xFE2
  2563                           fsr1l	equ	0xFE1
  2564                           indf2	equ	0xFDF
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _SetOutputEPWM3 *****************
  2572 ;; Defined at:
  2573 ;;		line 17 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setoc.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  outputconfig    1    wreg     unsigned char 
  2576 ;;  outputmode      1    5[COMRAM] unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2579 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2584 ;; Tracked objects:
  2585 ;;		On entry : F/F
  2586 ;;		On exit  : F/F
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2589 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;Total ram usage:        4 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    3
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_motorDrive_init
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text10
  2604  011078                     __ptext10:
  2605                           	opt stack 0
  2606  011078                     _SetOutputEPWM3:
  2607                           	opt stack 24
  2608                           
  2609                           ; BSR set to: 15
  2610                           ;incstack = 0
  2611                           ;SetOutputEPWM3@outputconfig stored from wreg
  2612  011078  6E09               	movwf	SetOutputEPWM3@outputconfig,c
  2613                           
  2614                           ; BSR set to: 15
  2615                           
  2616                           ; BSR set to: 15
  2617  01107A  0E3F               	movlw	63
  2618  01107C  1209               	iorwf	SetOutputEPWM3@outputconfig,f,c
  2619  01107E  0EFC               	movlw	252
  2620  011080  1206               	iorwf	SetOutputEPWM3@outputmode,f,c
  2621  011082  5149               	movf	73,w,b	;volatile
  2622  011084  09C0               	iorlw	192
  2623  011086  1409               	andwf	SetOutputEPWM3@outputconfig,w,c
  2624  011088  6F49               	movwf	73,b	;volatile
  2625  01108A  5149               	movf	73,w,b	;volatile
  2626  01108C  090F               	iorlw	15
  2627  01108E  1406               	andwf	SetOutputEPWM3@outputmode,w,c
  2628  011090  6F49               	movwf	73,b	;volatile
  2629                           
  2630                           ; BSR set to: 15
  2631  011092  0E05               	movlw	5
  2632  011094  6EF6               	movwf	tblptrl,c
  2633  011096                     	if	1	;There is more than 1 active tblptr byte
  2634  011096  6AF7               	clrf	tblptrh,c
  2635  011098                     	endif
  2636  011098                     	if	1	;There are 3 active tblptr bytes
  2637  011098  0E30               	movlw	48
  2638  01109A  6EF8               	movwf	tblptru,c
  2639  01109C                     	endif
  2640  01109C  0008               	tblrd		*
  2641  01109E  CFF5 F007          	movff	tablat,??_SetOutputEPWM3
  2642  0110A2  A207               	btfss	??_SetOutputEPWM3,1,c
  2643  0110A4  D002               	goto	l1258
  2644                           
  2645                           ; BSR set to: 15
  2646  0110A6  6808               	setf	SetOutputEPWM3@eccpmx,c
  2647  0110A8  D001               	goto	l2444
  2648  0110AA                     l1258:
  2649                           
  2650                           ; BSR set to: 15
  2651  0110AA  6A08               	clrf	SetOutputEPWM3@eccpmx,c
  2652  0110AC                     l2444:
  2653                           
  2654                           ; BSR set to: 15
  2655  0110AC  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2656  0110AE  0A3F               	xorlw	63
  2657  0110B0  E102               	bnz	l2448
  2658                           
  2659                           ; BSR set to: 15
  2660  0110B2  9098               	bcf	3992,0,c	;volatile
  2661  0110B4  0012               	return	
  2662  0110B6                     l2448:
  2663                           
  2664                           ; BSR set to: 15
  2665  0110B6  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2666  0110B8  0ABF               	xorlw	191
  2667  0110BA  E107               	bnz	l2456
  2668                           
  2669                           ; BSR set to: 15
  2670  0110BC  9098               	bcf	3992,0,c	;volatile
  2671                           
  2672                           ; BSR set to: 15
  2673  0110BE  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2674  0110C0  E002               	bz	l1263
  2675                           
  2676                           ; BSR set to: 15
  2677  0110C2  9896               	bcf	3990,4,c	;volatile
  2678  0110C4  0012               	return	
  2679  0110C6                     l1263:
  2680                           
  2681                           ; BSR set to: 15
  2682  0110C6  9A99               	bcf	3993,5,c	;volatile
  2683  0110C8  0012               	return	
  2684  0110CA                     l2456:
  2685                           
  2686                           ; BSR set to: 15
  2687  0110CA  5009               	movf	SetOutputEPWM3@outputconfig,w,c
  2688  0110CC  0A7F               	xorlw	127
  2689  0110CE  E003               	bz	l1268
  2690                           
  2691                           ; BSR set to: 15
  2692  0110D0  2809               	incf	SetOutputEPWM3@outputconfig,w,c
  2693  0110D2  A4D8               	btfss	status,2,c
  2694  0110D4  0012               	return	
  2695  0110D6                     l1268:
  2696                           
  2697                           ; BSR set to: 15
  2698  0110D6  9098               	bcf	3992,0,c	;volatile
  2699                           
  2700                           ; BSR set to: 15
  2701  0110D8  5008               	movf	SetOutputEPWM3@eccpmx,w,c
  2702  0110DA  E003               	bz	l1269
  2703                           
  2704                           ; BSR set to: 15
  2705  0110DC  9896               	bcf	3990,4,c	;volatile
  2706  0110DE  9696               	bcf	3990,3,c	;volatile
  2707  0110E0  D002               	goto	l1270
  2708  0110E2                     l1269:
  2709                           
  2710                           ; BSR set to: 15
  2711  0110E2  9A99               	bcf	3993,5,c	;volatile
  2712  0110E4  9899               	bcf	3993,4,c	;volatile
  2713  0110E6                     l1270:
  2714                           
  2715                           ; BSR set to: 15
  2716  0110E6  9698               	bcf	3992,3,c	;volatile
  2717                           
  2718                           ; BSR set to: 15
  2719  0110E8  0012               	return	
  2720  0110EA                     __end_of_SetOutputEPWM3:
  2721                           	opt stack 0
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           intcon	equ	0xFF2
  2729                           intcon2	equ	0xFF1
  2730                           intcon3	equ	0xFF0
  2731                           postinc0	equ	0xFEE
  2732                           wreg	equ	0xFE8
  2733                           indf1	equ	0xFE7
  2734                           postinc1	equ	0xFE6
  2735                           postdec1	equ	0xFE5
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           fsr2h	equ	0xFDA
  2742                           fsr2l	equ	0xFD9
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function _SetOutputEPWM1 *****************
  2746 ;; Defined at:
  2747 ;;		line 50 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setoc.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  outputconfig    1    wreg     unsigned char 
  2750 ;;  outputmode      1    5[COMRAM] unsigned char 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  outputconfig    1    8[COMRAM] unsigned char 
  2753 ;;  eccpmx          1    7[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;		None               void
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/F
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2763 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2766 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2767 ;;Total ram usage:        4 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    3
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_motorDrive_init
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text11
  2778  0110EA                     __ptext11:
  2779                           	opt stack 0
  2780  0110EA                     _SetOutputEPWM1:
  2781                           	opt stack 24
  2782                           
  2783                           ; BSR set to: 15
  2784                           ;incstack = 0
  2785                           ;SetOutputEPWM1@outputconfig stored from wreg
  2786  0110EA  6E09               	movwf	SetOutputEPWM1@outputconfig,c
  2787  0110EC  0E3F               	movlw	63
  2788  0110EE  1209               	iorwf	SetOutputEPWM1@outputconfig,f,c
  2789  0110F0  0EFC               	movlw	252
  2790  0110F2  1206               	iorwf	SetOutputEPWM1@outputmode,f,c
  2791  0110F4  50B9               	movf	4025,w,c	;volatile
  2792  0110F6  09C0               	iorlw	192
  2793  0110F8  1409               	andwf	SetOutputEPWM1@outputconfig,w,c
  2794  0110FA  6EB9               	movwf	4025,c	;volatile
  2795  0110FC  50B9               	movf	4025,w,c	;volatile
  2796  0110FE  090F               	iorlw	15
  2797  011100  1406               	andwf	SetOutputEPWM1@outputmode,w,c
  2798  011102  6EB9               	movwf	4025,c	;volatile
  2799  011104  0E05               	movlw	5
  2800  011106  6EF6               	movwf	tblptrl,c
  2801  011108                     	if	1	;There is more than 1 active tblptr byte
  2802  011108  6AF7               	clrf	tblptrh,c
  2803  01110A                     	endif
  2804  01110A                     	if	1	;There are 3 active tblptr bytes
  2805  01110A  0E30               	movlw	48
  2806  01110C  6EF8               	movwf	tblptru,c
  2807  01110E                     	endif
  2808  01110E  0008               	tblrd		*
  2809  011110  CFF5 F007          	movff	tablat,??_SetOutputEPWM1
  2810  011114  A207               	btfss	??_SetOutputEPWM1,1,c
  2811  011116  D002               	goto	l1197
  2812  011118  6808               	setf	SetOutputEPWM1@eccpmx,c
  2813  01111A  D001               	goto	l2394
  2814  01111C                     l1197:
  2815  01111C  6A08               	clrf	SetOutputEPWM1@eccpmx,c
  2816  01111E                     l2394:
  2817  01111E  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2818  011120  0A3F               	xorlw	63
  2819  011122  E102               	bnz	l2398
  2820  011124  9494               	bcf	3988,2,c	;volatile
  2821  011126  0012               	return	
  2822  011128                     l2398:
  2823  011128  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2824  01112A  0ABF               	xorlw	191
  2825  01112C  E107               	bnz	l2406
  2826  01112E  9494               	bcf	3988,2,c	;volatile
  2827  011130  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2828  011132  E002               	bz	l1202
  2829  011134  9C96               	bcf	3990,6,c	;volatile
  2830  011136  0012               	return	
  2831  011138                     l1202:
  2832  011138  9E99               	bcf	3993,7,c	;volatile
  2833  01113A  0012               	return	
  2834  01113C                     l2406:
  2835  01113C  5009               	movf	SetOutputEPWM1@outputconfig,w,c
  2836  01113E  0A7F               	xorlw	127
  2837  011140  E003               	bz	l1207
  2838  011142  2809               	incf	SetOutputEPWM1@outputconfig,w,c
  2839  011144  A4D8               	btfss	status,2,c
  2840  011146  0012               	return	
  2841  011148                     l1207:
  2842  011148  9494               	bcf	3988,2,c	;volatile
  2843  01114A  5008               	movf	SetOutputEPWM1@eccpmx,w,c
  2844  01114C  E003               	bz	l1208
  2845  01114E  9C96               	bcf	3990,6,c	;volatile
  2846  011150  9A96               	bcf	3990,5,c	;volatile
  2847  011152  D002               	goto	l1209
  2848  011154                     l1208:
  2849  011154  9E99               	bcf	3993,7,c	;volatile
  2850  011156  9C99               	bcf	3993,6,c	;volatile
  2851  011158                     l1209:
  2852  011158  9898               	bcf	3992,4,c	;volatile
  2853  01115A  0012               	return	
  2854  01115C                     __end_of_SetOutputEPWM1:
  2855                           	opt stack 0
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           intcon	equ	0xFF2
  2863                           intcon2	equ	0xFF1
  2864                           intcon3	equ	0xFF0
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           indf1	equ	0xFE7
  2868                           postinc1	equ	0xFE6
  2869                           postdec1	equ	0xFE5
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _OpenEPWM3 *****************
  2880 ;; Defined at:
  2881 ;;		line 14 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3open.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  period          1    wreg     unsigned char 
  2884 ;;  timer_source    1    5[COMRAM] unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  period          1    7[COMRAM] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;		None               void
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : F/F
  2893 ;;		On exit  : F/F
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2896 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2899 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2900 ;;Total ram usage:        3 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_motorDrive_init
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text12
  2911  010FFE                     __ptext12:
  2912                           	opt stack 0
  2913  010FFE                     _OpenEPWM3:
  2914                           	opt stack 24
  2915                           
  2916                           ;incstack = 0
  2917                           ;OpenEPWM3@period stored from wreg
  2918  010FFE  6E08               	movwf	OpenEPWM3@period,c
  2919                           
  2920                           ; BSR set to: 15
  2921  011000  0E0C               	movlw	12
  2922  011002  6F49               	movwf	73,b	;volatile
  2923                           
  2924                           ; BSR set to: 15
  2925  011004  0E3F               	movlw	63
  2926  011006  1736               	andwf	54,f,b	;volatile
  2927                           
  2928                           ; BSR set to: 15
  2929  011008  C006  F007         	movff	OpenEPWM3@timer_source,??_OpenEPWM3
  2930  01100C  0E30               	movlw	48
  2931  01100E  1607               	andwf	??_OpenEPWM3,f,c
  2932  011010  90D8               	bcf	status,0,c
  2933  011012  3607               	rlcf	??_OpenEPWM3,f,c
  2934  011014  90D8               	bcf	status,0,c
  2935  011016  3407               	rlcf	??_OpenEPWM3,w,c
  2936  011018  1336               	iorwf	54,f,b	;volatile
  2937                           
  2938                           ; BSR set to: 15
  2939  01101A  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  2940  01101E  0EC0               	movlw	192
  2941  011020  1607               	andwf	??_OpenEPWM3,f,c
  2942  011022  E105               	bnz	l2424
  2943                           
  2944                           ; BSR set to: 15
  2945  011024  94CA               	bcf	4042,2,c	;volatile
  2946  011026  C008  FFCB         	movff	OpenEPWM3@period,4043	;volatile
  2947  01102A  84CA               	bsf	4042,2,c	;volatile
  2948  01102C  0CC0               	retlw	192
  2949  01102E                     l2424:
  2950                           
  2951                           ; BSR set to: 15
  2952  01102E  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  2953  011032  0EC0               	movlw	192
  2954  011034  1607               	andwf	??_OpenEPWM3,f,c
  2955  011036  5007               	movf	??_OpenEPWM3,w,c
  2956  011038  0A40               	xorlw	64
  2957  01103A  E105               	bnz	l2428
  2958                           
  2959                           ; BSR set to: 15
  2960  01103C  9504               	bcf	4,2,b	;volatile
  2961  01103E  C008  FF05         	movff	OpenEPWM3@period,3845	;volatile
  2962  011042  8504               	bsf	4,2,b	;volatile
  2963  011044  0012               	return	
  2964  011046                     l2428:
  2965                           
  2966                           ; BSR set to: 15
  2967  011046  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  2968  01104A  0EC0               	movlw	192
  2969  01104C  1607               	andwf	??_OpenEPWM3,f,c
  2970  01104E  5007               	movf	??_OpenEPWM3,w,c
  2971  011050  0A80               	xorlw	128
  2972  011052  E105               	bnz	l2432
  2973                           
  2974                           ; BSR set to: 15
  2975  011054  953D               	bcf	61,2,b	;volatile
  2976  011056  C008  FF3E         	movff	OpenEPWM3@period,3902	;volatile
  2977  01105A  853D               	bsf	61,2,b	;volatile
  2978  01105C  0012               	return	
  2979  01105E                     l2432:
  2980                           
  2981                           ; BSR set to: 15
  2982  01105E  CF36 F007          	movff	3894,??_OpenEPWM3	;volatile
  2983  011062  0EC0               	movlw	192
  2984  011064  1607               	andwf	??_OpenEPWM3,f,c
  2985  011066  5007               	movf	??_OpenEPWM3,w,c
  2986  011068  0AC0               	xorlw	192
  2987  01106A  A4D8               	btfss	status,2,c
  2988  01106C  0012               	return	
  2989                           
  2990                           ; BSR set to: 15
  2991  01106E  953A               	bcf	58,2,b	;volatile
  2992  011070  C008  FF3B         	movff	OpenEPWM3@period,3899	;volatile
  2993  011074  853A               	bsf	58,2,b	;volatile
  2994  011076  0012               	return	
  2995  011078                     __end_of_OpenEPWM3:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           intcon2	equ	0xFF1
  3005                           intcon3	equ	0xFF0
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf1	equ	0xFE7
  3009                           postinc1	equ	0xFE6
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           postdec2	equ	0xFDD
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _OpenEPWM1 *****************
  3021 ;; Defined at:
  3022 ;;		line 26 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1open.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  period          1    wreg     unsigned char 
  3025 ;;  timer_source    1    5[COMRAM] unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  period          1    7[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;		None               void
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : F/F
  3034 ;;		On exit  : F/F
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3037 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3041 ;;Total ram usage:        3 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_motorDrive_init
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text13
  3052  01115C                     __ptext13:
  3053                           	opt stack 0
  3054  01115C                     _OpenEPWM1:
  3055                           	opt stack 24
  3056                           
  3057                           ; BSR set to: 15
  3058                           ;incstack = 0
  3059                           ;OpenEPWM1@period stored from wreg
  3060  01115C  6E08               	movwf	OpenEPWM1@period,c
  3061                           
  3062                           ; BSR set to: 15
  3063  01115E  0E0C               	movlw	12
  3064  011160  6EB9               	movwf	4025,c	;volatile
  3065                           
  3066                           ; BSR set to: 15
  3067  011162  0EFC               	movlw	252
  3068  011164  1736               	andwf	54,f,b	;volatile
  3069                           
  3070                           ; BSR set to: 15
  3071  011166  3806               	swapf	OpenEPWM1@timer_source,w,c
  3072  011168  46E8               	rlncf	wreg,f,c
  3073  01116A  0B1F               	andlw	31
  3074  01116C  0B03               	andlw	3
  3075  01116E  1336               	iorwf	54,f,b	;volatile
  3076                           
  3077                           ; BSR set to: 15
  3078  011170  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3079  011174  0E07               	movlw	7
  3080  011176  1607               	andwf	??_OpenEPWM1,f,c
  3081  011178  E105               	bnz	l2374
  3082                           
  3083                           ; BSR set to: 15
  3084  01117A  94CA               	bcf	4042,2,c	;volatile
  3085  01117C  C008  FFCB         	movff	OpenEPWM1@period,4043	;volatile
  3086  011180  84CA               	bsf	4042,2,c	;volatile
  3087  011182  0C07               	retlw	7
  3088  011184                     l2374:
  3089                           
  3090                           ; BSR set to: 15
  3091  011184  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3092  011188  0E07               	movlw	7
  3093  01118A  1607               	andwf	??_OpenEPWM1,f,c
  3094  01118C  5007               	movf	??_OpenEPWM1,w,c
  3095  01118E  0A01               	xorlw	1
  3096  011190  E105               	bnz	l2378
  3097                           
  3098                           ; BSR set to: 15
  3099  011192  9504               	bcf	4,2,b	;volatile
  3100  011194  C008  FF05         	movff	OpenEPWM1@period,3845	;volatile
  3101  011198  8504               	bsf	4,2,b	;volatile
  3102  01119A  0012               	return	
  3103  01119C                     l2378:
  3104                           
  3105                           ; BSR set to: 15
  3106  01119C  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3107  0111A0  0E07               	movlw	7
  3108  0111A2  1607               	andwf	??_OpenEPWM1,f,c
  3109  0111A4  5007               	movf	??_OpenEPWM1,w,c
  3110  0111A6  0A02               	xorlw	2
  3111  0111A8  E105               	bnz	l2382
  3112                           
  3113                           ; BSR set to: 15
  3114  0111AA  953D               	bcf	61,2,b	;volatile
  3115  0111AC  C008  FF3E         	movff	OpenEPWM1@period,3902	;volatile
  3116  0111B0  853D               	bsf	61,2,b	;volatile
  3117  0111B2  0012               	return	
  3118  0111B4                     l2382:
  3119                           
  3120                           ; BSR set to: 15
  3121  0111B4  CF36 F007          	movff	3894,??_OpenEPWM1	;volatile
  3122  0111B8  0E07               	movlw	7
  3123  0111BA  1607               	andwf	??_OpenEPWM1,f,c
  3124  0111BC  5007               	movf	??_OpenEPWM1,w,c
  3125  0111BE  0A03               	xorlw	3
  3126  0111C0  A4D8               	btfss	status,2,c
  3127  0111C2  0012               	return	
  3128                           
  3129                           ; BSR set to: 15
  3130  0111C4  953A               	bcf	58,2,b	;volatile
  3131  0111C6  C008  FF3B         	movff	OpenEPWM1@period,3899	;volatile
  3132  0111CA  853A               	bsf	58,2,b	;volatile
  3133  0111CC  0012               	return	
  3134  0111CE                     __end_of_OpenEPWM1:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           indf1	equ	0xFE7
  3148                           postinc1	equ	0xFE6
  3149                           postdec1	equ	0xFE5
  3150                           fsr1h	equ	0xFE2
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function _fft_init *****************
  3160 ;; Defined at:
  3161 ;;		line 9 in file "fft.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : F/E
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		_delay_us
  3184 ;; This function is called by:
  3185 ;;		_init
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text14
  3190  011568                     __ptext14:
  3191                           	opt stack 0
  3192  011568                     _fft_init:
  3193                           	opt stack 24
  3194                           
  3195                           ; BSR set to: 14
  3196                           ;fft.c: 12: ANCON3 = 0b00100000;
  3197                           
  3198                           ; BSR set to: 15
  3199                           ;incstack = 0
  3200  011568  0E20               	movlw	32
  3201  01156A  6F45               	movwf	69,b	;volatile
  3202                           
  3203                           ;fft.c: 15: ADCON1L = 0x70;
  3204  01156C  0E70               	movlw	112
  3205  01156E  6EC0               	movwf	4032,c	;volatile
  3206                           
  3207                           ; BSR set to: 14
  3208                           ;fft.c: 18: ADCSS0H = 0;
  3209  011570  6B83               	clrf	131,b	;volatile
  3210                           
  3211                           ;fft.c: 21: ADCON3H = 0x1;
  3212  011572  0E01               	movlw	1
  3213  011574  6F8B               	movwf	139,b	;volatile
  3214                           
  3215                           ;fft.c: 24: ADCON3L = 0x54;
  3216  011576  0E54               	movlw	84
  3217  011578  6F8A               	movwf	138,b	;volatile
  3218                           
  3219                           ; BSR set to: 14
  3220                           ;fft.c: 27: ADCON1Hbits.MODE12 = 0;
  3221  01157A  94C1               	bcf	4033,2,c	;volatile
  3222                           
  3223                           ; BSR set to: 14
  3224                           ;fft.c: 30: PVCFG0 = 0;
  3225  01157C  010E               	movlb	14	; () banked
  3226  01157E  9D8D               	bcf	141,6,b	;volatile
  3227                           
  3228                           ; BSR set to: 14
  3229                           ;fft.c: 31: PVCFG1 = 0;
  3230  011580  9F8D               	bcf	141,7,b	;volatile
  3231                           
  3232                           ; BSR set to: 14
  3233                           ;fft.c: 32: NVCFG0 = 0;
  3234  011582  9B8D               	bcf	141,5,b	;volatile
  3235                           
  3236                           ; BSR set to: 14
  3237                           ;fft.c: 35: ANSEL14 = 1;
  3238  011584  8D46               	bsf	70,6,b	;volatile
  3239                           
  3240                           ; BSR set to: 14
  3241                           ;fft.c: 36: TRISHbits.TRISH6 = 1;
  3242  011586  8C99               	bsf	3993,6,c	;volatile
  3243                           
  3244                           ;fft.c: 37: ADCHS0L = 0x0E;
  3245  011588  0E0E               	movlw	14
  3246  01158A  6F86               	movwf	134,b	;volatile
  3247                           
  3248                           ;fft.c: 38: ADCHS0H = 0x0E;
  3249  01158C  6F87               	movwf	135,b	;volatile
  3250                           
  3251                           ; BSR set to: 14
  3252                           ;fft.c: 40: ADCON2L = 0;
  3253  01158E  6B8C               	clrf	140,b	;volatile
  3254                           
  3255                           ; BSR set to: 14
  3256                           ;fft.c: 43: ADON = 1;
  3257  011590  8EC1               	bsf	4033,7,c	;volatile
  3258                           
  3259                           ; BSR set to: 14
  3260                           ;fft.c: 46: delay_us(50);
  3261  011592  0E32               	movlw	50
  3262  011594  6E06               	movwf	delay_us@x,c
  3263  011596  6A07               	clrf	delay_us@x+1,c
  3264  011598  6A08               	clrf	delay_us@x+2,c
  3265  01159A  6A09               	clrf	delay_us@x+3,c
  3266  01159C  EFEB  F08A         	goto	_delay_us	;wreg free
  3267  0115A0                     __end_of_fft_init:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           intcon2	equ	0xFF1
  3277                           intcon3	equ	0xFF0
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           indf1	equ	0xFE7
  3281                           postinc1	equ	0xFE6
  3282                           postdec1	equ	0xFE5
  3283                           fsr1h	equ	0xFE2
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _encoders_init *****************
  3293 ;; Defined at:
  3294 ;;		line 6 in file "encoders.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;		None               void
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0
  3303 ;; Tracked objects:
  3304 ;;		On entry : F/E
  3305 ;;		On exit  : F/E
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;Total ram usage:        0 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    3
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_init
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text15
  3323  01168C                     __ptext15:
  3324                           	opt stack 0
  3325  01168C                     _encoders_init:
  3326                           	opt stack 25
  3327                           
  3328                           ; BSR set to: 14
  3329                           ;encoders.c: 9: TRISBbits.TRISB0 = 1;
  3330                           
  3331                           ;incstack = 0
  3332  01168C  8093               	bsf	3987,0,c	;volatile
  3333                           
  3334                           ;encoders.c: 10: TRISBbits.TRISB1 = 1;
  3335  01168E  8293               	bsf	3987,1,c	;volatile
  3336                           
  3337                           ;encoders.c: 11: TRISBbits.TRISB2 = 1;
  3338  011690  8493               	bsf	3987,2,c	;volatile
  3339                           
  3340                           ;encoders.c: 12: TRISBbits.TRISB3 = 1;
  3341  011692  8693               	bsf	3987,3,c	;volatile
  3342                           
  3343                           ;encoders.c: 21: IOLOCK = 0;
  3344  011694  9C66               	bcf	3942,6,c	;volatile
  3345                           
  3346                           ; BSR set to: 14
  3347                           ;encoders.c: 22: RPINR26_27 &= 0xF2;
  3348  011696  0EF2               	movlw	242
  3349  011698  1737               	andwf	55,f,b	;volatile
  3350                           
  3351                           ;encoders.c: 23: RPINR28_29 &= 0xF1;
  3352  01169A  0EF1               	movlw	241
  3353  01169C  1738               	andwf	56,f,b	;volatile
  3354                           
  3355                           ; BSR set to: 14
  3356                           ;encoders.c: 24: IOLOCK = 1;
  3357  01169E  8C66               	bsf	3942,6,c	;volatile
  3358                           
  3359                           ; BSR set to: 14
  3360                           ;encoders.c: 26: INTCON2bits.INTEDG1 = 1;
  3361  0116A0  8AF1               	bsf	intcon2,5,c	;volatile
  3362                           
  3363                           ; BSR set to: 14
  3364                           ;encoders.c: 27: INTCON3bits.INT1IP = 0;
  3365  0116A2  9CF0               	bcf	intcon3,6,c	;volatile
  3366                           
  3367                           ; BSR set to: 14
  3368                           ;encoders.c: 28: INTCON3bits.INT1IF = 0;
  3369  0116A4  90F0               	bcf	intcon3,0,c	;volatile
  3370                           
  3371                           ; BSR set to: 14
  3372                           ;encoders.c: 29: INTCON3bits.INT1IE = 1;
  3373  0116A6  86F0               	bsf	intcon3,3,c	;volatile
  3374                           
  3375                           ; BSR set to: 14
  3376                           ;encoders.c: 32: INTCON2bits.INTEDG3 = 1;
  3377  0116A8  86F1               	bsf	intcon2,3,c	;volatile
  3378                           
  3379                           ; BSR set to: 14
  3380                           ;encoders.c: 33: INTCON2bits.INT3IP = 0;
  3381  0116AA  92F1               	bcf	intcon2,1,c	;volatile
  3382                           
  3383                           ; BSR set to: 14
  3384                           ;encoders.c: 34: INTCON3bits.INT3IF = 0;
  3385  0116AC  94F0               	bcf	intcon3,2,c	;volatile
  3386                           
  3387                           ; BSR set to: 14
  3388                           ;encoders.c: 35: INTCON3bits.INT3IE = 1;
  3389  0116AE  8AF0               	bsf	intcon3,5,c	;volatile
  3390                           
  3391                           ; BSR set to: 14
  3392  0116B0  0CF1               	retlw	241
  3393  0116B2                     __end_of_encoders_init:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           intcon2	equ	0xFF1
  3403                           intcon3	equ	0xFF0
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           indf1	equ	0xFE7
  3407                           postinc1	equ	0xFE6
  3408                           postdec1	equ	0xFE5
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function _clearMillis *****************
  3419 ;; Defined at:
  3420 ;;		line 115 in file "delays.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, status,2
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/E
  3431 ;;		On exit  : F/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    3
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_init
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text16
  3449  0117AC                     __ptext16:
  3450                           	opt stack 0
  3451  0117AC                     _clearMillis:
  3452                           	opt stack 25
  3453                           
  3454                           ;delays.c: 117: TMR0L = 193;
  3455                           
  3456                           ; BSR set to: 14
  3457                           ;incstack = 0
  3458  0117AC  0EC1               	movlw	193
  3459  0117AE  6ED6               	movwf	4054,c	;volatile
  3460                           
  3461                           ;delays.c: 118: millisCount = 0;
  3462  0117B0  0100               	movlb	0	; () banked
  3463  0117B2  6BB5               	clrf	_millisCount& (0+255),b
  3464  0117B4  6BB6               	clrf	(_millisCount+1)& (0+255),b
  3465  0117B6  6BB7               	clrf	(_millisCount+2)& (0+255),b
  3466  0117B8  6BB8               	clrf	(_millisCount+3)& (0+255),b
  3467                           
  3468                           ; BSR set to: 0
  3469  0117BA  0012               	return	
  3470  0117BC                     __end_of_clearMillis:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           intcon2	equ	0xFF1
  3480                           intcon3	equ	0xFF0
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           indf1	equ	0xFE7
  3484                           postinc1	equ	0xFE6
  3485                           postdec1	equ	0xFE5
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _UART_init *****************
  3496 ;; Defined at:
  3497 ;;		line 21 in file "UART.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/F
  3508 ;;		On exit  : F/E
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;Total ram usage:        0 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_init
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text17
  3526  010DC4                     __ptext17:
  3527                           	opt stack 0
  3528  010DC4                     _UART_init:
  3529                           	opt stack 25
  3530                           
  3531                           ;UART.c: 43: IOLOCK = 0;
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;incstack = 0
  3535  010DC4  9C66               	bcf	3942,6,c	;volatile
  3536                           
  3537                           ;UART.c: 45: RPINR6_7 &= 0xF6;
  3538  010DC6  0EF6               	movlw	246
  3539  010DC8  010E               	movlb	14	; () banked
  3540  010DCA  172D               	andwf	45,f,b	;volatile
  3541                           
  3542                           ;UART.c: 46: RPOR22_23 |= 0xF1;
  3543  010DCC  0EF1               	movlw	241
  3544  010DCE  131D               	iorwf	29,f,b	;volatile
  3545                           
  3546                           ;UART.c: 48: RPINR4_5 &= 0xF4;
  3547  010DD0  0EF4               	movlw	244
  3548  010DD2  172C               	andwf	44,f,b	;volatile
  3549                           
  3550                           ;UART.c: 49: RPOR10_11 |= 0x2F;
  3551  010DD4  0E2F               	movlw	47
  3552  010DD6  1317               	iorwf	23,f,b	;volatile
  3553                           
  3554                           ;UART.c: 51: RPINR0_1 &= 0xF6;
  3555  010DD8  0EF6               	movlw	246
  3556  010DDA  172A               	andwf	42,f,b	;volatile
  3557                           
  3558                           ;UART.c: 52: RPOR12_13 |= 0x3F;
  3559  010DDC  0E3F               	movlw	63
  3560  010DDE  1318               	iorwf	24,f,b	;volatile
  3561                           
  3562                           ; BSR set to: 14
  3563                           ;UART.c: 54: IOLOCK = 1;
  3564  010DE0  8C66               	bsf	3942,6,c	;volatile
  3565                           
  3566                           ; BSR set to: 14
  3567                           ;UART.c: 56: INTCONbits.GIE = 1;
  3568  010DE2  8EF2               	bsf	intcon,7,c	;volatile
  3569                           
  3570                           ; BSR set to: 14
  3571                           ;UART.c: 59: INTCONbits.PEIE = 1;
  3572  010DE4  8CF2               	bsf	intcon,6,c	;volatile
  3573                           
  3574                           ; BSR set to: 14
  3575                           ;UART.c: 69: SPBRG1 = 34;
  3576  010DE6  0E22               	movlw	34
  3577  010DE8  6EAF               	movwf	4015,c	;volatile
  3578                           
  3579                           ; BSR set to: 14
  3580                           ;UART.c: 70: SPBRGH1 = 0;
  3581  010DEA  010F               	movlb	15	; () banked
  3582  010DEC  6B30               	clrf	48,b	;volatile
  3583                           
  3584                           ; BSR set to: 15
  3585                           ;UART.c: 72: TXSTA1bits.BRGH = 0;
  3586  010DEE  94AC               	bcf	4012,2,c	;volatile
  3587                           
  3588                           ; BSR set to: 15
  3589                           ;UART.c: 74: BAUDCON1bits.ABDOVF = 0;
  3590  010DF0  9E67               	bcf	3943,7,c	;volatile
  3591                           
  3592                           ; BSR set to: 15
  3593                           ;UART.c: 75: BAUDCON1bits.BRG16 = 1;
  3594  010DF2  8667               	bsf	3943,3,c	;volatile
  3595                           
  3596                           ; BSR set to: 15
  3597                           ;UART.c: 76: BAUDCON1bits.RCIDL = 0;
  3598  010DF4  9C67               	bcf	3943,6,c	;volatile
  3599                           
  3600                           ; BSR set to: 15
  3601                           ;UART.c: 77: BAUDCON1bits.RXDTP = 0;
  3602  010DF6  9A67               	bcf	3943,5,c	;volatile
  3603                           
  3604                           ; BSR set to: 15
  3605                           ;UART.c: 79: TXSTA1bits.SYNC = 0;
  3606  010DF8  98AC               	bcf	4012,4,c	;volatile
  3607                           
  3608                           ; BSR set to: 15
  3609                           ;UART.c: 80: RCSTA1bits.SPEN = 1;
  3610  010DFA  8EAB               	bsf	4011,7,c	;volatile
  3611                           
  3612                           ; BSR set to: 15
  3613                           ;UART.c: 81: RCSTA1bits.RX9 = 0;
  3614  010DFC  9CAB               	bcf	4011,6,c	;volatile
  3615                           
  3616                           ; BSR set to: 15
  3617                           ;UART.c: 82: RCSTA1bits.CREN = 1;
  3618  010DFE  88AB               	bsf	4011,4,c	;volatile
  3619                           
  3620                           ; BSR set to: 15
  3621                           ;UART.c: 84: TXSTA1bits.TXEN = 1;
  3622  010E00  8AAC               	bsf	4012,5,c	;volatile
  3623                           
  3624                           ; BSR set to: 15
  3625                           ;UART.c: 85: TXSTA1bits.TX9 = 0;
  3626  010E02  9CAC               	bcf	4012,6,c	;volatile
  3627                           
  3628                           ; BSR set to: 15
  3629                           ;UART.c: 88: TX1IE = 0;
  3630  010E04  989D               	bcf	3997,4,c	;volatile
  3631                           
  3632                           ; BSR set to: 15
  3633                           ;UART.c: 89: RC1IE = 1;
  3634  010E06  8A9D               	bsf	3997,5,c	;volatile
  3635                           
  3636                           ; BSR set to: 15
  3637                           ;UART.c: 99: SPBRG2 = 34;
  3638  010E08  0E22               	movlw	34
  3639  010E0A  6F1F               	movwf	31,b	;volatile
  3640                           
  3641                           ; BSR set to: 15
  3642                           ;UART.c: 100: SPBRGH2 = 0;
  3643  010E0C  6B20               	clrf	32,b	;volatile
  3644                           
  3645                           ; BSR set to: 15
  3646                           ;UART.c: 102: TXSTA2bits.BRGH = 0;
  3647  010E0E  9532               	bcf	50,2,b	;volatile
  3648                           
  3649                           ; BSR set to: 15
  3650                           ;UART.c: 104: BAUDCON2bits.ABDOVF = 0;
  3651  010E10  9F31               	bcf	49,7,b	;volatile
  3652                           
  3653                           ; BSR set to: 15
  3654                           ;UART.c: 105: BAUDCON2bits.BRG16 = 1;
  3655  010E12  8731               	bsf	49,3,b	;volatile
  3656                           
  3657                           ; BSR set to: 15
  3658                           ;UART.c: 106: BAUDCON2bits.RCIDL = 0;
  3659  010E14  9D31               	bcf	49,6,b	;volatile
  3660                           
  3661                           ; BSR set to: 15
  3662                           ;UART.c: 107: BAUDCON2bits.RXDTP = 0;
  3663  010E16  9B31               	bcf	49,5,b	;volatile
  3664                           
  3665                           ; BSR set to: 15
  3666                           ;UART.c: 109: TXSTA2bits.SYNC = 0;
  3667  010E18  9932               	bcf	50,4,b	;volatile
  3668                           
  3669                           ; BSR set to: 15
  3670                           ;UART.c: 110: RCSTA2bits.SPEN = 1;
  3671  010E1A  8F33               	bsf	51,7,b	;volatile
  3672                           
  3673                           ; BSR set to: 15
  3674                           ;UART.c: 111: RCSTA2bits.RX9 = 0;
  3675  010E1C  9D33               	bcf	51,6,b	;volatile
  3676                           
  3677                           ; BSR set to: 15
  3678                           ;UART.c: 112: RCSTA2bits.CREN = 1;
  3679  010E1E  8933               	bsf	51,4,b	;volatile
  3680                           
  3681                           ; BSR set to: 15
  3682                           ;UART.c: 114: TXSTA2bits.TXEN = 1;
  3683  010E20  8B32               	bsf	50,5,b	;volatile
  3684                           
  3685                           ; BSR set to: 15
  3686                           ;UART.c: 115: TXSTA2bits.TX9 = 0;
  3687  010E22  9D32               	bcf	50,6,b	;volatile
  3688                           
  3689                           ; BSR set to: 15
  3690                           ;UART.c: 118: TX2IE = 0;
  3691  010E24  98A3               	bcf	4003,4,c	;volatile
  3692                           
  3693                           ; BSR set to: 15
  3694                           ;UART.c: 119: RC2IE = 1;
  3695  010E26  8AA3               	bsf	4003,5,c	;volatile
  3696                           
  3697                           ; BSR set to: 15
  3698                           ;UART.c: 129: SPBRG3 = 34;
  3699  010E28  0E22               	movlw	34
  3700  010E2A  6F2B               	movwf	43,b	;volatile
  3701                           
  3702                           ; BSR set to: 15
  3703                           ;UART.c: 130: SPBRGH3 = 0;
  3704  010E2C  6B2C               	clrf	44,b	;volatile
  3705                           
  3706                           ; BSR set to: 15
  3707                           ;UART.c: 132: TXSTA3bits.BRGH = 0;
  3708  010E2E  952E               	bcf	46,2,b	;volatile
  3709                           
  3710                           ; BSR set to: 15
  3711                           ;UART.c: 134: BAUDCON3bits.ABDOVF = 0;
  3712  010E30  9F2D               	bcf	45,7,b	;volatile
  3713                           
  3714                           ; BSR set to: 15
  3715                           ;UART.c: 135: BAUDCON3bits.BRG16 = 1;
  3716  010E32  872D               	bsf	45,3,b	;volatile
  3717                           
  3718                           ; BSR set to: 15
  3719                           ;UART.c: 136: BAUDCON3bits.RCIDL = 0;
  3720  010E34  9D2D               	bcf	45,6,b	;volatile
  3721                           
  3722                           ; BSR set to: 15
  3723                           ;UART.c: 137: BAUDCON3bits.RXDTP = 0;
  3724  010E36  9B2D               	bcf	45,5,b	;volatile
  3725                           
  3726                           ; BSR set to: 15
  3727                           ;UART.c: 139: TXSTA3bits.SYNC = 0;
  3728  010E38  992E               	bcf	46,4,b	;volatile
  3729                           
  3730                           ; BSR set to: 15
  3731                           ;UART.c: 140: RCSTA3bits.SPEN = 1;
  3732  010E3A  8F2F               	bsf	47,7,b	;volatile
  3733                           
  3734                           ; BSR set to: 15
  3735                           ;UART.c: 141: RCSTA3bits.RX9 = 0;
  3736  010E3C  9D2F               	bcf	47,6,b	;volatile
  3737                           
  3738                           ; BSR set to: 15
  3739                           ;UART.c: 142: RCSTA3bits.CREN = 1;
  3740  010E3E  892F               	bsf	47,4,b	;volatile
  3741                           
  3742                           ; BSR set to: 15
  3743                           ;UART.c: 144: TXSTA3bits.TXEN = 1;
  3744  010E40  8B2E               	bsf	46,5,b	;volatile
  3745                           
  3746                           ; BSR set to: 15
  3747                           ;UART.c: 145: TXSTA3bits.TX9 = 0;
  3748  010E42  9D2E               	bcf	46,6,b	;volatile
  3749                           
  3750                           ; BSR set to: 15
  3751                           ;UART.c: 147: TX3IE = 0;
  3752  010E44  9861               	bcf	3937,4,c	;volatile
  3753                           
  3754                           ; BSR set to: 15
  3755                           ;UART.c: 148: RC3IE = 1;
  3756  010E46  8A61               	bsf	3937,5,c	;volatile
  3757                           
  3758                           ; BSR set to: 15
  3759                           ;UART.c: 158: TRISDbits.TRISD4 = 1;
  3760  010E48  8895               	bsf	3989,4,c	;volatile
  3761                           
  3762                           ; BSR set to: 15
  3763                           ;UART.c: 159: TRISDbits.TRISD2 = 0;
  3764  010E4A  9495               	bcf	3989,2,c	;volatile
  3765                           
  3766                           ; BSR set to: 15
  3767                           ;UART.c: 162: SPBRG4 = 34;
  3768  010E4C  0E22               	movlw	34
  3769  010E4E  010E               	movlb	14	; () banked
  3770  010E50  6FFB               	movwf	251,b	;volatile
  3771                           
  3772                           ; BSR set to: 14
  3773                           ;UART.c: 163: SPBRGH4 = 0;
  3774  010E52  6BFC               	clrf	252,b	;volatile
  3775                           
  3776                           ; BSR set to: 14
  3777                           ;UART.c: 165: TXSTA4bits.BRGH = 0;
  3778  010E54  95FE               	bcf	254,2,b	;volatile
  3779                           
  3780                           ; BSR set to: 14
  3781                           ;UART.c: 167: BAUDCON4bits.ABDOVF = 0;
  3782  010E56  9FFD               	bcf	253,7,b	;volatile
  3783                           
  3784                           ; BSR set to: 14
  3785                           ;UART.c: 168: BAUDCON4bits.BRG16 = 1;
  3786  010E58  87FD               	bsf	253,3,b	;volatile
  3787                           
  3788                           ; BSR set to: 14
  3789                           ;UART.c: 169: BAUDCON4bits.RCIDL = 0;
  3790  010E5A  9DFD               	bcf	253,6,b	;volatile
  3791                           
  3792                           ; BSR set to: 14
  3793                           ;UART.c: 170: BAUDCON4bits.RXDTP = 0;
  3794  010E5C  9BFD               	bcf	253,5,b	;volatile
  3795                           
  3796                           ; BSR set to: 14
  3797                           ;UART.c: 172: TXSTA4bits.SYNC = 0;
  3798  010E5E  99FE               	bcf	254,4,b	;volatile
  3799                           
  3800                           ; BSR set to: 14
  3801                           ;UART.c: 173: RCSTA4bits.SPEN = 1;
  3802  010E60  8FFF               	bsf	255,7,b	;volatile
  3803                           
  3804                           ; BSR set to: 14
  3805                           ;UART.c: 174: RCSTA4bits.RX9 = 0;
  3806  010E62  9DFF               	bcf	255,6,b	;volatile
  3807                           
  3808                           ; BSR set to: 14
  3809                           ;UART.c: 175: RCSTA4bits.CREN = 1;
  3810  010E64  89FF               	bsf	255,4,b	;volatile
  3811                           
  3812                           ; BSR set to: 14
  3813                           ;UART.c: 177: TXSTA4bits.TXEN = 1;
  3814  010E66  8BFE               	bsf	254,5,b	;volatile
  3815                           
  3816                           ; BSR set to: 14
  3817                           ;UART.c: 178: TXSTA4bits.TX9 = 0;
  3818  010E68  9DFE               	bcf	254,6,b	;volatile
  3819                           
  3820                           ; BSR set to: 14
  3821                           ;UART.c: 181: TX4IE = 0;
  3822  010E6A  9C61               	bcf	3937,6,c	;volatile
  3823                           
  3824                           ; BSR set to: 14
  3825                           ;UART.c: 182: RC4IE = 1;
  3826  010E6C  8E61               	bsf	3937,7,c	;volatile
  3827                           
  3828                           ; BSR set to: 14
  3829  010E6E  0012               	return	
  3830  010E70                     __end_of_UART_init:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           intcon2	equ	0xFF1
  3840                           intcon3	equ	0xFF0
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           indf1	equ	0xFE7
  3844                           postinc1	equ	0xFE6
  3845                           postdec1	equ	0xFE5
  3846                           fsr1h	equ	0xFE2
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _LCD_init4bit *****************
  3856 ;; Defined at:
  3857 ;;		line 47 in file "LCD.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;		None               void
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : F/F
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3875 ;;Total ram usage:        0 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    5
  3878 ;; This function calls:
  3879 ;;		_delay_init
  3880 ;;		_delay_ms
  3881 ;;		_delay_us
  3882 ;; This function is called by:
  3883 ;;		_init
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text18
  3888  01071C                     __ptext18:
  3889                           	opt stack 0
  3890  01071C                     _LCD_init4bit:
  3891                           	opt stack 23
  3892                           
  3893                           ; BSR set to: 15
  3894                           ;LCD.c: 50: mode = 1;
  3895                           
  3896                           ; BSR set to: 14
  3897                           ;incstack = 0
  3898  01071C  0E01               	movlw	1
  3899  01071E  6E58               	movwf	_mode,c	;volatile
  3900                           
  3901                           ; BSR set to: 15
  3902                           ;LCD.c: 52: ANSEL21 = 0;
  3903  010720  010E               	movlb	14	; () banked
  3904  010722  9B45               	bcf	69,5,b	;volatile
  3905                           
  3906                           ; BSR set to: 14
  3907                           ;LCD.c: 53: ANSEL6 = 0;
  3908  010724  9D47               	bcf	71,6,b	;volatile
  3909                           
  3910                           ; BSR set to: 14
  3911                           ;LCD.c: 54: ANSEL11 = 0;
  3912  010726  9746               	bcf	70,3,b	;volatile
  3913                           
  3914                           ; BSR set to: 14
  3915                           ;LCD.c: 55: ANSEL10 = 0;
  3916  010728  9546               	bcf	70,2,b	;volatile
  3917                           
  3918                           ; BSR set to: 14
  3919                           ;LCD.c: 56: ANSEL9 = 0;
  3920  01072A  9346               	bcf	70,1,b	;volatile
  3921                           
  3922                           ; BSR set to: 14
  3923                           ;LCD.c: 58: MEMCONbits.EBDIS = 1;
  3924  01072C  8FE3               	bsf	227,7,b	;volatile
  3925                           
  3926                           ; BSR set to: 14
  3927                           ;LCD.c: 59: PSPCONbits.PSPMODE = 0;
  3928  01072E  98A7               	bcf	4007,4,c	;volatile
  3929                           
  3930                           ; BSR set to: 14
  3931                           ;LCD.c: 60: LCDMD = 0;
  3932  010730  97F1               	bcf	241,3,b	;volatile
  3933                           
  3934                           ; BSR set to: 14
  3935                           ;LCD.c: 61: LCDCONbits.WERR = 0;
  3936  010732  9BD9               	bcf	217,5,b	;volatile
  3937                           
  3938                           ; BSR set to: 14
  3939                           ;LCD.c: 62: CPEN = 0;
  3940  010734  9FD8               	bcf	216,7,b	;volatile
  3941                           
  3942                           ; BSR set to: 14
  3943                           ;LCD.c: 63: LCDA = 0;
  3944  010736  9BDA               	bcf	218,5,b	;volatile
  3945                           
  3946                           ; BSR set to: 14
  3947                           ;LCD.c: 65: PORTEbits.RE2 = 0;
  3948  010738  9484               	bcf	3972,2,c	;volatile
  3949                           
  3950                           ; BSR set to: 14
  3951                           ;LCD.c: 66: PORTEbits.RE0 = 0;
  3952  01073A  9084               	bcf	3972,0,c	;volatile
  3953                           
  3954                           ; BSR set to: 14
  3955                           ;LCD.c: 67: PORTEbits.RE1 = 0;
  3956  01073C  9284               	bcf	3972,1,c	;volatile
  3957                           
  3958                           ; BSR set to: 14
  3959                           ;LCD.c: 68: PORTHbits.RH5 = 0;
  3960  01073E  9A87               	bcf	3975,5,c	;volatile
  3961                           
  3962                           ; BSR set to: 14
  3963                           ;LCD.c: 70: PORTEbits.RE4 = 0;
  3964  010740  9884               	bcf	3972,4,c	;volatile
  3965                           
  3966                           ; BSR set to: 14
  3967                           ;LCD.c: 71: PORTDbits.RD0 = 0;
  3968  010742  9083               	bcf	3971,0,c	;volatile
  3969                           
  3970                           ; BSR set to: 14
  3971                           ;LCD.c: 72: PORTGbits.RG7 = 0;
  3972  010744  9E86               	bcf	3974,7,c	;volatile
  3973                           
  3974                           ; BSR set to: 14
  3975                           ;LCD.c: 76: TRISDbits.TRISD0 = 0;
  3976  010746  9095               	bcf	3989,0,c	;volatile
  3977                           
  3978                           ; BSR set to: 14
  3979                           ;LCD.c: 77: TRISEbits.TRISE0 = 0;
  3980  010748  9096               	bcf	3990,0,c	;volatile
  3981                           
  3982                           ; BSR set to: 14
  3983                           ;LCD.c: 78: TRISEbits.TRISE1 = 0;
  3984  01074A  9296               	bcf	3990,1,c	;volatile
  3985                           
  3986                           ; BSR set to: 14
  3987                           ;LCD.c: 79: TRISEbits.TRISE2 = 0;
  3988  01074C  9496               	bcf	3990,2,c	;volatile
  3989                           
  3990                           ; BSR set to: 14
  3991                           ;LCD.c: 80: TRISEbits.TRISE3 = 0;
  3992  01074E  9696               	bcf	3990,3,c	;volatile
  3993                           
  3994                           ; BSR set to: 14
  3995                           ;LCD.c: 81: TRISEbits.TRISE4 = 0;
  3996  010750  9896               	bcf	3990,4,c	;volatile
  3997                           
  3998                           ; BSR set to: 14
  3999                           ;LCD.c: 82: TRISHbits.TRISH5 = 0;
  4000  010752  9A99               	bcf	3993,5,c	;volatile
  4001                           
  4002                           ; BSR set to: 14
  4003                           ;LCD.c: 84: delay_init();
  4004  010754  EC06  F08B         	call	_delay_init	;wreg free
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;LCD.c: 85: delay_ms(100);
  4008  010758  0E64               	movlw	100
  4009  01075A  6E0A               	movwf	delay_ms@x,c
  4010  01075C  0E00               	movlw	0
  4011  01075E  6A0B               	clrf	delay_ms@x+1,c
  4012  010760  6A0C               	clrf	delay_ms@x+2,c
  4013  010762  6A0D               	clrf	delay_ms@x+3,c
  4014  010764  ECE8  F089         	call	_delay_ms	;wreg free
  4015                           
  4016                           ;LCD.c: 87: PORTDbits.RD0 = 0;
  4017  010768  9083               	bcf	3971,0,c	;volatile
  4018                           
  4019                           ;LCD.c: 88: PORTGbits.RG7 = 0;
  4020  01076A  9E86               	bcf	3974,7,c	;volatile
  4021                           
  4022                           ;LCD.c: 91: delay_us(40);;
  4023  01076C  D89C               	call	PL2	;call to abstracted procedure
  4024  01076E  ECEB  F08A         	call	_delay_us	;wreg free
  4025                           
  4026                           ;LCD.c: 92: PORTEbits.RE4 = 1;
  4027  010772  8884               	bsf	3972,4,c	;volatile
  4028                           
  4029                           ;LCD.c: 93: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTEb
      +                          its.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4030  010774  9A87               	bcf	3975,5,c	;volatile
  4031  010776  9284               	bcf	3972,1,c	;volatile
  4032  010778  8084               	bsf	3972,0,c	;volatile
  4033  01077A  8484               	bsf	3972,2,c	;volatile
  4034                           
  4035                           ;LCD.c: 94: delay_us(40);;
  4036  01077C  D894               	call	PL2	;call to abstracted procedure
  4037  01077E  ECEB  F08A         	call	_delay_us	;wreg free
  4038                           
  4039                           ;LCD.c: 95: PORTEbits.RE4 = 0;
  4040  010782  9884               	bcf	3972,4,c	;volatile
  4041                           
  4042                           ;LCD.c: 97: delay_ms(50);
  4043  010784  D896               	call	PL10	;call to abstracted procedure
  4044  010786  ECE8  F089         	call	_delay_ms	;wreg free
  4045                           
  4046                           ;LCD.c: 100: delay_us(40);;
  4047  01078A  D88D               	call	PL2	;call to abstracted procedure
  4048  01078C  ECEB  F08A         	call	_delay_us	;wreg free
  4049                           
  4050                           ;LCD.c: 101: PORTEbits.RE4 = 1;
  4051  010790  8884               	bsf	3972,4,c	;volatile
  4052                           
  4053                           ;LCD.c: 102: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4054  010792  9A87               	bcf	3975,5,c	;volatile
  4055  010794  9284               	bcf	3972,1,c	;volatile
  4056  010796  8084               	bsf	3972,0,c	;volatile
  4057  010798  8484               	bsf	3972,2,c	;volatile
  4058                           
  4059                           ;LCD.c: 103: delay_us(40);;
  4060  01079A  D885               	call	PL2	;call to abstracted procedure
  4061  01079C  ECEB  F08A         	call	_delay_us	;wreg free
  4062                           
  4063                           ;LCD.c: 104: PORTEbits.RE4 = 0;
  4064  0107A0  9884               	bcf	3972,4,c	;volatile
  4065                           
  4066                           ;LCD.c: 106: delay_ms(50);
  4067  0107A2  D887               	call	PL10	;call to abstracted procedure
  4068  0107A4  ECE8  F089         	call	_delay_ms	;wreg free
  4069                           
  4070                           ;LCD.c: 109: delay_us(40);;
  4071  0107A8  D87E               	call	PL2	;call to abstracted procedure
  4072  0107AA  ECEB  F08A         	call	_delay_us	;wreg free
  4073                           
  4074                           ;LCD.c: 110: PORTEbits.RE4 = 1;
  4075  0107AE  8884               	bsf	3972,4,c	;volatile
  4076                           
  4077                           ;LCD.c: 111: { PORTHbits.RH5 = ((0x3 >> 3) & 1); PORTEbits.RE1 = ((0x3 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x3 >> 1) & 1); PORTEbits.RE2 = (0x3 & 1); };
  4078  0107B0  9A87               	bcf	3975,5,c	;volatile
  4079  0107B2  9284               	bcf	3972,1,c	;volatile
  4080  0107B4  8084               	bsf	3972,0,c	;volatile
  4081  0107B6  8484               	bsf	3972,2,c	;volatile
  4082                           
  4083                           ;LCD.c: 112: delay_us(40);;
  4084  0107B8  D876               	call	PL2	;call to abstracted procedure
  4085  0107BA  ECEB  F08A         	call	_delay_us	;wreg free
  4086                           
  4087                           ;LCD.c: 113: PORTEbits.RE4 = 0;
  4088  0107BE  9884               	bcf	3972,4,c	;volatile
  4089                           
  4090                           ;LCD.c: 115: delay_ms(50);
  4091  0107C0  D878               	call	PL10	;call to abstracted procedure
  4092  0107C2  ECE8  F089         	call	_delay_ms	;wreg free
  4093                           
  4094                           ;LCD.c: 118: delay_us(40);;
  4095  0107C6  D86F               	call	PL2	;call to abstracted procedure
  4096  0107C8  ECEB  F08A         	call	_delay_us	;wreg free
  4097                           
  4098                           ;LCD.c: 119: PORTEbits.RE4 = 1;
  4099  0107CC  8884               	bsf	3972,4,c	;volatile
  4100                           
  4101                           ;LCD.c: 120: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4102  0107CE  9A87               	bcf	3975,5,c	;volatile
  4103  0107D0  9284               	bcf	3972,1,c	;volatile
  4104  0107D2  8084               	bsf	3972,0,c	;volatile
  4105  0107D4  9484               	bcf	3972,2,c	;volatile
  4106                           
  4107                           ;LCD.c: 121: delay_us(40);;
  4108  0107D6  D867               	call	PL2	;call to abstracted procedure
  4109  0107D8  ECEB  F08A         	call	_delay_us	;wreg free
  4110                           
  4111                           ;LCD.c: 122: PORTEbits.RE4 = 0;
  4112  0107DC  9884               	bcf	3972,4,c	;volatile
  4113                           
  4114                           ;LCD.c: 124: delay_ms(50);
  4115  0107DE  D869               	call	PL10	;call to abstracted procedure
  4116  0107E0  ECE8  F089         	call	_delay_ms	;wreg free
  4117                           
  4118                           ;LCD.c: 127: delay_us(40);;
  4119  0107E4  D860               	call	PL2	;call to abstracted procedure
  4120  0107E6  ECEB  F08A         	call	_delay_us	;wreg free
  4121                           
  4122                           ;LCD.c: 128: PORTEbits.RE4 = 1;
  4123  0107EA  8884               	bsf	3972,4,c	;volatile
  4124                           
  4125                           ;LCD.c: 129: { PORTHbits.RH5 = ((0x2 >> 3) & 1); PORTEbits.RE1 = ((0x2 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x2 >> 1) & 1); PORTEbits.RE2 = (0x2 & 1); };
  4126  0107EC  9A87               	bcf	3975,5,c	;volatile
  4127  0107EE  9284               	bcf	3972,1,c	;volatile
  4128  0107F0  8084               	bsf	3972,0,c	;volatile
  4129  0107F2  9484               	bcf	3972,2,c	;volatile
  4130                           
  4131                           ;LCD.c: 130: delay_us(40);;
  4132  0107F4  D858               	call	PL2	;call to abstracted procedure
  4133  0107F6  ECEB  F08A         	call	_delay_us	;wreg free
  4134                           
  4135                           ;LCD.c: 131: PORTEbits.RE4 = 0;
  4136  0107FA  9884               	bcf	3972,4,c	;volatile
  4137                           
  4138                           ;LCD.c: 133: delay_us(40);;
  4139  0107FC  D854               	call	PL2	;call to abstracted procedure
  4140  0107FE  ECEB  F08A         	call	_delay_us	;wreg free
  4141                           
  4142                           ;LCD.c: 134: PORTEbits.RE4 = 1;
  4143  010802  8884               	bsf	3972,4,c	;volatile
  4144                           
  4145                           ;LCD.c: 135: { PORTHbits.RH5 = ((0x8 >> 3) & 1); PORTEbits.RE1 = ((0x8 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x8 >> 1) & 1); PORTEbits.RE2 = (0x8 & 1); };
  4146  010804  8A87               	bsf	3975,5,c	;volatile
  4147  010806  9284               	bcf	3972,1,c	;volatile
  4148  010808  9084               	bcf	3972,0,c	;volatile
  4149  01080A  9484               	bcf	3972,2,c	;volatile
  4150                           
  4151                           ;LCD.c: 136: delay_us(40);;
  4152  01080C  D84C               	call	PL2	;call to abstracted procedure
  4153  01080E  ECEB  F08A         	call	_delay_us	;wreg free
  4154                           
  4155                           ;LCD.c: 137: PORTEbits.RE4 = 0;
  4156  010812  9884               	bcf	3972,4,c	;volatile
  4157                           
  4158                           ;LCD.c: 140: delay_us(40);;
  4159  010814  D848               	call	PL2	;call to abstracted procedure
  4160  010816  ECEB  F08A         	call	_delay_us	;wreg free
  4161                           
  4162                           ;LCD.c: 141: PORTEbits.RE4 = 1;
  4163  01081A  8884               	bsf	3972,4,c	;volatile
  4164                           
  4165                           ;LCD.c: 142: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4166  01081C  9A87               	bcf	3975,5,c	;volatile
  4167  01081E  9284               	bcf	3972,1,c	;volatile
  4168  010820  9084               	bcf	3972,0,c	;volatile
  4169  010822  9484               	bcf	3972,2,c	;volatile
  4170                           
  4171                           ;LCD.c: 143: delay_us(40);;
  4172  010824  D840               	call	PL2	;call to abstracted procedure
  4173  010826  ECEB  F08A         	call	_delay_us	;wreg free
  4174                           
  4175                           ;LCD.c: 144: PORTEbits.RE4 = 0;
  4176  01082A  9884               	bcf	3972,4,c	;volatile
  4177                           
  4178                           ;LCD.c: 146: delay_us(40);;
  4179  01082C  D83C               	call	PL2	;call to abstracted procedure
  4180  01082E  ECEB  F08A         	call	_delay_us	;wreg free
  4181                           
  4182                           ;LCD.c: 147: PORTEbits.RE4 = 1;
  4183  010832  8884               	bsf	3972,4,c	;volatile
  4184                           
  4185                           ;LCD.c: 148: { PORTHbits.RH5 = ((0xF >> 3) & 1); PORTEbits.RE1 = ((0xF >> 2) & 1); PORTE
      +                          bits.RE0 = ((0xF >> 1) & 1); PORTEbits.RE2 = (0xF & 1); };
  4186  010834  8A87               	bsf	3975,5,c	;volatile
  4187  010836  8284               	bsf	3972,1,c	;volatile
  4188  010838  8084               	bsf	3972,0,c	;volatile
  4189  01083A  8484               	bsf	3972,2,c	;volatile
  4190                           
  4191                           ;LCD.c: 149: delay_us(40);;
  4192  01083C  D834               	call	PL2	;call to abstracted procedure
  4193  01083E  ECEB  F08A         	call	_delay_us	;wreg free
  4194                           
  4195                           ;LCD.c: 150: PORTEbits.RE4 = 0;
  4196  010842  9884               	bcf	3972,4,c	;volatile
  4197                           
  4198                           ;LCD.c: 153: delay_us(40);;
  4199  010844  D830               	call	PL2	;call to abstracted procedure
  4200  010846  ECEB  F08A         	call	_delay_us	;wreg free
  4201                           
  4202                           ;LCD.c: 154: PORTEbits.RE4 = 1;
  4203  01084A  8884               	bsf	3972,4,c	;volatile
  4204                           
  4205                           ;LCD.c: 155: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4206  01084C  9A87               	bcf	3975,5,c	;volatile
  4207  01084E  9284               	bcf	3972,1,c	;volatile
  4208  010850  9084               	bcf	3972,0,c	;volatile
  4209  010852  9484               	bcf	3972,2,c	;volatile
  4210                           
  4211                           ;LCD.c: 156: delay_us(40);;
  4212  010854  D828               	call	PL2	;call to abstracted procedure
  4213  010856  ECEB  F08A         	call	_delay_us	;wreg free
  4214                           
  4215                           ;LCD.c: 157: PORTEbits.RE4 = 0;
  4216  01085A  9884               	bcf	3972,4,c	;volatile
  4217                           
  4218                           ;LCD.c: 159: delay_us(40);;
  4219  01085C  D824               	call	PL2	;call to abstracted procedure
  4220  01085E  ECEB  F08A         	call	_delay_us	;wreg free
  4221                           
  4222                           ;LCD.c: 160: PORTEbits.RE4 = 1;
  4223  010862  8884               	bsf	3972,4,c	;volatile
  4224                           
  4225                           ;LCD.c: 161: { PORTHbits.RH5 = ((0x1 >> 3) & 1); PORTEbits.RE1 = ((0x1 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x1 >> 1) & 1); PORTEbits.RE2 = (0x1 & 1); };
  4226  010864  9A87               	bcf	3975,5,c	;volatile
  4227  010866  9284               	bcf	3972,1,c	;volatile
  4228  010868  9084               	bcf	3972,0,c	;volatile
  4229  01086A  8484               	bsf	3972,2,c	;volatile
  4230                           
  4231                           ;LCD.c: 162: delay_us(40);;
  4232  01086C  D81C               	call	PL2	;call to abstracted procedure
  4233  01086E  ECEB  F08A         	call	_delay_us	;wreg free
  4234                           
  4235                           ;LCD.c: 163: PORTEbits.RE4 = 0;
  4236  010872  9884               	bcf	3972,4,c	;volatile
  4237                           
  4238                           ;LCD.c: 166: delay_us(40);;
  4239  010874  D818               	call	PL2	;call to abstracted procedure
  4240  010876  ECEB  F08A         	call	_delay_us	;wreg free
  4241                           
  4242                           ;LCD.c: 167: PORTEbits.RE4 = 1;
  4243  01087A  8884               	bsf	3972,4,c	;volatile
  4244                           
  4245                           ;LCD.c: 168: { PORTHbits.RH5 = ((0x0 >> 3) & 1); PORTEbits.RE1 = ((0x0 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x0 >> 1) & 1); PORTEbits.RE2 = (0x0 & 1); };
  4246  01087C  9A87               	bcf	3975,5,c	;volatile
  4247  01087E  9284               	bcf	3972,1,c	;volatile
  4248  010880  9084               	bcf	3972,0,c	;volatile
  4249  010882  9484               	bcf	3972,2,c	;volatile
  4250                           
  4251                           ;LCD.c: 169: delay_us(40);;
  4252  010884  D810               	call	PL2	;call to abstracted procedure
  4253  010886  ECEB  F08A         	call	_delay_us	;wreg free
  4254                           
  4255                           ;LCD.c: 170: PORTEbits.RE4 = 0;
  4256  01088A  9884               	bcf	3972,4,c	;volatile
  4257                           
  4258                           ;LCD.c: 172: delay_us(40);;
  4259  01088C  D80C               	call	PL2	;call to abstracted procedure
  4260  01088E  ECEB  F08A         	call	_delay_us	;wreg free
  4261                           
  4262                           ;LCD.c: 173: PORTEbits.RE4 = 1;
  4263  010892  8884               	bsf	3972,4,c	;volatile
  4264                           
  4265                           ;LCD.c: 174: { PORTHbits.RH5 = ((0x6 >> 3) & 1); PORTEbits.RE1 = ((0x6 >> 2) & 1); PORTE
      +                          bits.RE0 = ((0x6 >> 1) & 1); PORTEbits.RE2 = (0x6 & 1); };
  4266  010894  9A87               	bcf	3975,5,c	;volatile
  4267  010896  8284               	bsf	3972,1,c	;volatile
  4268  010898  8084               	bsf	3972,0,c	;volatile
  4269  01089A  9484               	bcf	3972,2,c	;volatile
  4270                           
  4271                           ;LCD.c: 175: delay_us(40);;
  4272  01089C  D804               	call	PL2	;call to abstracted procedure
  4273  01089E  ECEB  F08A         	call	_delay_us	;wreg free
  4274                           
  4275                           ;LCD.c: 176: PORTEbits.RE4 = 0;
  4276  0108A2  9884               	bcf	3972,4,c	;volatile
  4277  0108A4  0012               	return	
  4278  0108A6                     __end_of_LCD_init4bit:
  4279                           	opt stack 0
  4280  0108A6                     PL2:
  4281                           	opt stack 22
  4282  0108A6  0E28               	movlw	40
  4283  0108A8  6E06               	movwf	delay_us@x,c
  4284  0108AA  6A07               	clrf	delay_us@x+1,c
  4285  0108AC  6A08               	clrf	delay_us@x+2,c
  4286  0108AE  6A09               	clrf	delay_us@x+3,c
  4287  0108B0  0C00               	retlw	0
  4288  0108B2                     __end_ofPL2:
  4289                           	opt stack 0
  4290  0108B2                     PL10:
  4291                           	opt stack 23
  4292  0108B2  0E32               	movlw	50
  4293  0108B4  6E0A               	movwf	delay_ms@x,c
  4294  0108B6  6A0B               	clrf	delay_ms@x+1,c
  4295  0108B8  6A0C               	clrf	delay_ms@x+2,c
  4296  0108BA  6A0D               	clrf	delay_ms@x+3,c
  4297  0108BC  0C00               	retlw	0
  4298  0108BE                     __end_ofPL10:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           intcon2	equ	0xFF1
  4308                           intcon3	equ	0xFF0
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           indf1	equ	0xFE7
  4312                           postinc1	equ	0xFE6
  4313                           postdec1	equ	0xFE5
  4314                           fsr1h	equ	0xFE2
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _delay_init *****************
  4324 ;; Defined at:
  4325 ;;		line 7 in file "delays.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;		None               void
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0
  4334 ;; Tracked objects:
  4335 ;;		On entry : F/E
  4336 ;;		On exit  : F/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    3
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_LCD_init4bit
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text19
  4354  01160C                     __ptext19:
  4355                           	opt stack 0
  4356  01160C                     _delay_init:
  4357                           	opt stack 24
  4358                           
  4359                           ; BSR set to: 14
  4360                           ;delays.c: 9: static int config = 0;
  4361                           ;delays.c: 12: if(config == 1)
  4362                           
  4363                           ;incstack = 0
  4364  01160C  0100               	movlb	0	; () banked
  4365  01160E  05C3               	decf	delay_init@config& (0+255),w,b
  4366  011610  11C4               	iorwf	(delay_init@config+1)& (0+255),w,b
  4367  011612  B4D8               	btfsc	status,2,c
  4368  011614  0012               	return	
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;delays.c: 15: }
  4372                           ;delays.c: 18: TMR3CS0 = 1;
  4373  011616  8CB1               	bsf	4017,6,c	;volatile
  4374                           
  4375                           ;delays.c: 19: TMR3CS1 = 1;
  4376  011618  8EB1               	bsf	4017,7,c	;volatile
  4377                           
  4378                           ;delays.c: 22: T3CKPS0 = 0;
  4379  01161A  98B1               	bcf	4017,4,c	;volatile
  4380                           
  4381                           ;delays.c: 23: T3CKPS1 = 0;
  4382  01161C  9AB1               	bcf	4017,5,c	;volatile
  4383                           
  4384                           ;delays.c: 26: RD163 = 1;
  4385  01161E  8EB1               	bsf	4017,7,c	;volatile
  4386                           
  4387                           ;delays.c: 29: TMR3IE = 0;
  4388  011620  92A0               	bcf	4000,1,c	;volatile
  4389                           
  4390                           ;delays.c: 32: TMR3ON = 1;
  4391  011622  80B1               	bsf	4017,0,c	;volatile
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;delays.c: 34: config = 1;
  4395  011624  0E00               	movlw	0
  4396  011626  6FC4               	movwf	(delay_init@config+1)& (0+255),b
  4397  011628  0E01               	movlw	1
  4398  01162A  6FC3               	movwf	delay_init@config& (0+255),b
  4399                           
  4400                           ;delays.c: 42: T0CON = 0b11010111;
  4401  01162C  0ED7               	movlw	215
  4402  01162E  6ED5               	movwf	4053,c	;volatile
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;delays.c: 43: TMR0IP = 1;
  4406  011630  84F1               	bsf	intcon2,2,c	;volatile
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;delays.c: 44: TMR0IF = 0;
  4410  011632  94F2               	bcf	intcon,2,c	;volatile
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;delays.c: 45: TMR0IE = 1;
  4414  011634  8AF2               	bsf	intcon,5,c	;volatile
  4415                           
  4416                           ;delays.c: 46: TMR0L = 193;
  4417  011636  0EC1               	movlw	193
  4418  011638  6ED6               	movwf	4054,c	;volatile
  4419                           
  4420                           ; BSR set to: 0
  4421  01163A  0CC1               	retlw	193
  4422  01163C                     __end_of_delay_init:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           prodh	equ	0xFF4
  4429                           prodl	equ	0xFF3
  4430                           intcon	equ	0xFF2
  4431                           intcon2	equ	0xFF1
  4432                           intcon3	equ	0xFF0
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           indf1	equ	0xFE7
  4436                           postinc1	equ	0xFE6
  4437                           postdec1	equ	0xFE5
  4438                           fsr1h	equ	0xFE2
  4439                           fsr1l	equ	0xFE1
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           postdec2	equ	0xFDD
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _debug *****************
  4448 ;; Defined at:
  4449 ;;		line 44 in file "main.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  temp            2   25[COMRAM] int 
  4454 ;;  i               2   27[COMRAM] int 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4467 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4468 ;;Total ram usage:        4 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    5
  4471 ;; This function calls:
  4472 ;;		_UART_transmitByte
  4473 ;;		_delay_ms
  4474 ;;		_fft_collectData
  4475 ;;		_fft_readBin
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text20
  4482  010F80                     __ptext20:
  4483                           	opt stack 0
  4484  010F80                     _debug:
  4485                           	opt stack 24
  4486  010F80                     l230:
  4487                           
  4488                           ;main.c: 48: {
  4489                           ;main.c: 49: fft_collectData();
  4490  010F80  EC38  F087         	call	_fft_collectData	;wreg free
  4491                           
  4492                           ;main.c: 52: for(int i = 1; i < 32; i++)
  4493  010F84  6A1D               	clrf	debug@i+1,c
  4494  010F86  0E01               	movlw	1
  4495  010F88  6E1C               	movwf	debug@i,c
  4496  010F8A                     l5288:
  4497                           
  4498                           ;main.c: 53: {
  4499                           ;main.c: 56: int temp = fft_readBin(i);
  4500  010F8A  C01C  F006         	movff	debug@i,fft_readBin@i
  4501  010F8E  C01D  F007         	movff	debug@i+1,fft_readBin@i+1
  4502  010F92  EC6C  F08B         	call	_fft_readBin	;wreg free
  4503  010F96  C006  F01A         	movff	?_fft_readBin,debug@temp
  4504  010F9A  C007  F01B         	movff	?_fft_readBin+1,debug@temp+1
  4505                           
  4506                           ;main.c: 57: while(temp > 0)
  4507  010F9E  D00A               	goto	l5294
  4508  010FA0                     l5290:
  4509                           
  4510                           ;main.c: 58: {
  4511                           ;main.c: 59: UART_transmitByte(USB,47+i);
  4512  010FA0  501C               	movf	debug@i,w,c
  4513  010FA2  0F2F               	addlw	47
  4514  010FA4  6E06               	movwf	UART_transmitByte@data,c
  4515  010FA6  0E01               	movlw	1
  4516  010FA8  ECD0  F08A         	call	_UART_transmitByte
  4517                           
  4518                           ;main.c: 60: temp -= 4;
  4519  010FAC  0EFC               	movlw	252
  4520  010FAE  261A               	addwf	debug@temp,f,c
  4521  010FB0  0EFF               	movlw	255
  4522  010FB2  221B               	addwfc	debug@temp+1,f,c
  4523  010FB4                     l5294:
  4524  010FB4  501B               	movf	debug@temp+1,w,c
  4525  010FB6  0A80               	xorlw	128
  4526  010FB8  6EF3               	movwf	prodl,c
  4527  010FBA  0E80               	movlw	128
  4528  010FBC  5CF3               	subwf	prodl,w,c
  4529  010FBE  0E01               	movlw	1
  4530  010FC0  B4D8               	btfsc	status,2,c
  4531  010FC2  5C1A               	subwf	debug@temp,w,c
  4532  010FC4  E2ED               	bc	l5290
  4533                           
  4534                           ;main.c: 61: }
  4535                           ;main.c: 62: UART_transmitByte(USB,'\n');
  4536  010FC6  0E0A               	movlw	10
  4537  010FC8  6E06               	movwf	UART_transmitByte@data,c
  4538  010FCA  0E01               	movlw	1
  4539  010FCC  ECD0  F08A         	call	_UART_transmitByte
  4540                           
  4541                           ;main.c: 63: UART_transmitByte(USB,'\r');
  4542  010FD0  0E0D               	movlw	13
  4543  010FD2  6E06               	movwf	UART_transmitByte@data,c
  4544  010FD4  0E01               	movlw	1
  4545  010FD6  ECD0  F08A         	call	_UART_transmitByte
  4546  010FDA  4A1C               	infsnz	debug@i,f,c
  4547  010FDC  2A1D               	incf	debug@i+1,f,c
  4548  010FDE  501D               	movf	debug@i+1,w,c
  4549  010FE0  0A80               	xorlw	128
  4550  010FE2  0F80               	addlw	-128
  4551  010FE4  0E20               	movlw	32
  4552  010FE6  B4D8               	btfsc	status,2,c
  4553  010FE8  5C1C               	subwf	debug@i,w,c
  4554  010FEA  E3CF               	bnc	l5288
  4555                           
  4556                           ;main.c: 65: }
  4557                           ;main.c: 66: delay_ms(100);
  4558  010FEC  0E64               	movlw	100
  4559  010FEE  6E0A               	movwf	delay_ms@x,c
  4560  010FF0  0E00               	movlw	0
  4561  010FF2  6A0B               	clrf	delay_ms@x+1,c
  4562  010FF4  6A0C               	clrf	delay_ms@x+2,c
  4563  010FF6  6A0D               	clrf	delay_ms@x+3,c
  4564  010FF8  ECE8  F089         	call	_delay_ms	;wreg free
  4565  010FFC  D7C1               	goto	l230
  4566  010FFE                     __end_of_debug:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           intcon2	equ	0xFF1
  4576                           intcon3	equ	0xFF0
  4577                           postinc0	equ	0xFEE
  4578                           wreg	equ	0xFE8
  4579                           indf1	equ	0xFE7
  4580                           postinc1	equ	0xFE6
  4581                           postdec1	equ	0xFE5
  4582                           fsr1h	equ	0xFE2
  4583                           fsr1l	equ	0xFE1
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           fsr2h	equ	0xFDA
  4588                           fsr2l	equ	0xFD9
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function _fft_readBin *****************
  4592 ;; Defined at:
  4593 ;;		line 273 in file "fft.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  i               2    5[COMRAM] int 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  2    5[COMRAM] short 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4610 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    3
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_debug
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text21
  4622  0116D8                     __ptext21:
  4623                           	opt stack 0
  4624  0116D8                     _fft_readBin:
  4625                           	opt stack 25
  4626                           
  4627                           ;fft.c: 275: return realNumbers[i];
  4628                           
  4629                           ;incstack = 0
  4630  0116D8  0E00               	movlw	low _realNumbers
  4631  0116DA  6E08               	movwf	??_fft_readBin& (0+255),c
  4632  0116DC  0E01               	movlw	high _realNumbers
  4633  0116DE  6E09               	movwf	(??_fft_readBin+1)& (0+255),c
  4634  0116E0  90D8               	bcf	status,0,c
  4635  0116E2  3406               	rlcf	fft_readBin@i,w,c
  4636  0116E4  6ED9               	movwf	fsr2l,c
  4637  0116E6  3407               	rlcf	fft_readBin@i+1,w,c
  4638  0116E8  6EDA               	movwf	fsr2h,c
  4639  0116EA  5008               	movf	??_fft_readBin,w,c
  4640  0116EC  26D9               	addwf	fsr2l,f,c
  4641  0116EE  5009               	movf	??_fft_readBin+1,w,c
  4642  0116F0  22DA               	addwfc	fsr2h,f,c
  4643  0116F2  CFDE F006          	movff	postinc2,?_fft_readBin
  4644  0116F6  CFDD F007          	movff	postdec2,?_fft_readBin+1
  4645  0116FA  0012               	return	
  4646  0116FC                     __end_of_fft_readBin:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           intcon2	equ	0xFF1
  4656                           intcon3	equ	0xFF0
  4657                           postinc0	equ	0xFEE
  4658                           wreg	equ	0xFE8
  4659                           indf1	equ	0xFE7
  4660                           postinc1	equ	0xFE6
  4661                           postdec1	equ	0xFE5
  4662                           fsr1h	equ	0xFE2
  4663                           fsr1l	equ	0xFE1
  4664                           indf2	equ	0xFDF
  4665                           postinc2	equ	0xFDE
  4666                           postdec2	equ	0xFDD
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function _fft_collectData *****************
  4672 ;; Defined at:
  4673 ;;		line 161 in file "fft.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;		None
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  i               2   11[COMRAM] short 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;		None               void
  4680 ;; Registers used:
  4681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4689 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4690 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;Total ram usage:        8 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    3
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		_debug
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text22
  4702  010E70                     __ptext22:
  4703                           	opt stack 0
  4704  010E70                     _fft_collectData:
  4705                           	opt stack 25
  4706                           
  4707                           ;fft.c: 163: short i = 0;
  4708                           
  4709                           ;incstack = 0
  4710  010E70  6A0C               	clrf	fft_collectData@i,c
  4711  010E72  6A0D               	clrf	fft_collectData@i+1,c
  4712                           
  4713                           ;fft.c: 165: TRISFbits.TRISF2 = 0;
  4714  010E74  9497               	bcf	3991,2,c	;volatile
  4715                           
  4716                           ;fft.c: 167: GIE = 0;
  4717  010E76  9EF2               	bcf	intcon,7,c	;volatile
  4718                           
  4719                           ;fft.c: 168: for (i = 0; i < 64; i++)
  4720  010E78  6A0C               	clrf	fft_collectData@i,c
  4721  010E7A  6A0D               	clrf	fft_collectData@i+1,c
  4722  010E7C                     l762:
  4723                           
  4724                           ;fft.c: 169: {
  4725                           ;fft.c: 172: SAMP = 1;
  4726  010E7C  82C0               	bsf	4032,1,c	;volatile
  4727  010E7E                     l764:
  4728  010E7E  A0C0               	btfss	4032,0,c	;volatile
  4729  010E80  D7FE               	goto	l764
  4730                           
  4731                           ;fft.c: 177: DONE = 0;
  4732  010E82  90C0               	bcf	4032,0,c	;volatile
  4733  010E84  F000               	nop		;# 
  4734  010E86  F000               	nop		;# 
  4735  010E88  F000               	nop		;# 
  4736  010E8A  F000               	nop		;# 
  4737                           
  4738                           ;fft.c: 185: realNumbers[i] = ADCBUF0 - 512;
  4739  010E8C  6A06               	clrf	??_fft_collectData& (0+255),c
  4740  010E8E  0EFE               	movlw	254
  4741  010E90  6E07               	movwf	(??_fft_collectData+1)& (0+255),c
  4742  010E92  CFC2 F008          	movff	4034,??_fft_collectData+2	;volatile
  4743  010E96  CFC3 F009          	movff	4035,??_fft_collectData+3	;volatile
  4744  010E9A  5006               	movf	??_fft_collectData,w,c
  4745  010E9C  2608               	addwf	??_fft_collectData+2,f,c
  4746  010E9E  5007               	movf	??_fft_collectData+1,w,c
  4747  010EA0  2209               	addwfc	??_fft_collectData+3,f,c
  4748  010EA2  0E00               	movlw	low _realNumbers
  4749  010EA4  6E0A               	movwf	(??_fft_collectData+4)& (0+255),c
  4750  010EA6  0E01               	movlw	high _realNumbers
  4751  010EA8  6E0B               	movwf	(??_fft_collectData+5)& (0+255),c
  4752  010EAA  90D8               	bcf	status,0,c
  4753  010EAC  340C               	rlcf	fft_collectData@i,w,c
  4754  010EAE  6ED9               	movwf	fsr2l,c
  4755  010EB0  340D               	rlcf	fft_collectData@i+1,w,c
  4756  010EB2  6EDA               	movwf	fsr2h,c
  4757  010EB4  500A               	movf	??_fft_collectData+4,w,c
  4758  010EB6  26D9               	addwf	fsr2l,f,c
  4759  010EB8  500B               	movf	??_fft_collectData+5,w,c
  4760  010EBA  22DA               	addwfc	fsr2h,f,c
  4761  010EBC  C008  FFDE         	movff	??_fft_collectData+2,postinc2
  4762  010EC0  C009  FFDD         	movff	??_fft_collectData+3,postdec2
  4763                           
  4764                           ;fft.c: 188: imaginaryNumbers[i] = 0;
  4765  010EC4  0E00               	movlw	low _imaginaryNumbers
  4766  010EC6  6E06               	movwf	??_fft_collectData& (0+255),c
  4767  010EC8  0E02               	movlw	high _imaginaryNumbers
  4768  010ECA  6E07               	movwf	(??_fft_collectData+1)& (0+255),c
  4769  010ECC  90D8               	bcf	status,0,c
  4770  010ECE  340C               	rlcf	fft_collectData@i,w,c
  4771  010ED0  6ED9               	movwf	fsr2l,c
  4772  010ED2  340D               	rlcf	fft_collectData@i+1,w,c
  4773  010ED4  6EDA               	movwf	fsr2h,c
  4774  010ED6  5006               	movf	??_fft_collectData,w,c
  4775  010ED8  26D9               	addwf	fsr2l,f,c
  4776  010EDA  5007               	movf	??_fft_collectData+1,w,c
  4777  010EDC  22DA               	addwfc	fsr2h,f,c
  4778  010EDE  6ADE               	clrf	postinc2,c
  4779  010EE0  6ADD               	clrf	postdec2,c
  4780  010EE2  4A0C               	infsnz	fft_collectData@i,f,c
  4781  010EE4  2A0D               	incf	fft_collectData@i+1,f,c
  4782  010EE6  500D               	movf	fft_collectData@i+1,w,c
  4783  010EE8  0A80               	xorlw	128
  4784  010EEA  0F80               	addlw	-128
  4785  010EEC  0E40               	movlw	64
  4786  010EEE  B4D8               	btfsc	status,2,c
  4787  010EF0  5C0C               	subwf	fft_collectData@i,w,c
  4788  010EF2  E3C4               	bnc	l762
  4789                           
  4790                           ;fft.c: 199: }
  4791                           ;fft.c: 200: GIE = 1;
  4792  010EF4  8EF2               	bsf	intcon,7,c	;volatile
  4793  010EF6  0012               	return	
  4794  010EF8                     __end_of_fft_collectData:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           intcon2	equ	0xFF1
  4804                           intcon3	equ	0xFF0
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           indf1	equ	0xFE7
  4808                           postinc1	equ	0xFE6
  4809                           postdec1	equ	0xFE5
  4810                           fsr1h	equ	0xFE2
  4811                           fsr1l	equ	0xFE1
  4812                           indf2	equ	0xFDF
  4813                           postinc2	equ	0xFDE
  4814                           postdec2	equ	0xFDD
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function _UART_transmitByte *****************
  4820 ;; Defined at:
  4821 ;;		line 185 in file "UART.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;  transmitType    1    wreg     enum E16307
  4824 ;;  data            1    5[COMRAM] unsigned char 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  transmitType    1    6[COMRAM] enum E16307
  4827 ;; Return value:  Size  Location     Type
  4828 ;;		None               void
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4836 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4840 ;;Total ram usage:        2 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    3
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_debug
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text23
  4851  0115A0                     __ptext23:
  4852                           	opt stack 0
  4853  0115A0                     _UART_transmitByte:
  4854                           	opt stack 25
  4855                           
  4856                           ;incstack = 0
  4857                           ;UART_transmitByte@transmitType stored from wreg
  4858  0115A0  6E07               	movwf	UART_transmitByte@transmitType,c
  4859                           
  4860                           ;UART.c: 187: switch (transmitType)
  4861  0115A2  D011               	goto	l3060
  4862  0115A4                     l546:
  4863  0115A4  010E               	movlb	14	; () banked
  4864  0115A6  A3FE               	btfss	254,1,b	;volatile
  4865  0115A8  D7FD               	goto	l546
  4866                           
  4867                           ; BSR set to: 14
  4868                           ;UART.c: 191: TXREG4 = data;
  4869  0115AA  C006  FEF9         	movff	UART_transmitByte@data,3833	;volatile
  4870                           
  4871                           ;UART.c: 192: break;
  4872  0115AE  0012               	return	
  4873  0115B0                     l551:
  4874  0115B0  A2AC               	btfss	4012,1,c	;volatile
  4875  0115B2  D7FE               	goto	l551
  4876                           
  4877                           ;UART.c: 195: TXREG1 = data;
  4878  0115B4  C006  FFAD         	movff	UART_transmitByte@data,4013	;volatile
  4879                           
  4880                           ;UART.c: 196: break;
  4881  0115B8  0012               	return	
  4882  0115BA                     l555:
  4883  0115BA  010F               	movlb	15	; () banked
  4884  0115BC  A332               	btfss	50,1,b	;volatile
  4885  0115BE  D7FD               	goto	l555
  4886                           
  4887                           ; BSR set to: 15
  4888                           ;UART.c: 199: TXREG2 = data;
  4889  0115C0  C006  FF1D         	movff	UART_transmitByte@data,3869	;volatile
  4890                           
  4891                           ;UART.c: 200: break;
  4892  0115C4  0012               	return	
  4893  0115C6                     l3060:
  4894  0115C6  5007               	movf	UART_transmitByte@transmitType,w,c
  4895                           
  4896                           ; Switch size 1, requested type "space"
  4897                           ; Number of cases is 3, Range of values is 0 to 2
  4898                           ; switch strategies available:
  4899                           ; Name         Instructions Cycles
  4900                           ; simple_byte           10     6 (average)
  4901                           ;	Chosen strategy is simple_byte
  4902  0115C8  E0ED               	bz	l546
  4903  0115CA  0A01               	xorlw	1	; case 1
  4904  0115CC  E0F1               	bz	l551
  4905  0115CE  0A03               	xorlw	3	; case 2
  4906  0115D0  A4D8               	btfss	status,2,c
  4907  0115D2  0012               	return	
  4908  0115D4  D7F2               	goto	l555
  4909  0115D6                     __end_of_UART_transmitByte:
  4910                           	opt stack 0
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           intcon2	equ	0xFF1
  4919                           intcon3	equ	0xFF0
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           indf1	equ	0xFE7
  4923                           postinc1	equ	0xFE6
  4924                           postdec1	equ	0xFE5
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function _competitionMode *****************
  4935 ;; Defined at:
  4936 ;;		line 90 in file "main.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;		None               void
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4954 ;;Total ram usage:        0 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    7
  4957 ;; This function calls:
  4958 ;;		_LCD_printString
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text24
  4965  011788                     __ptext24:
  4966                           	opt stack 0
  4967  011788                     _competitionMode:
  4968                           	opt stack 22
  4969                           
  4970                           ;main.c: 92: LCD_printString(0,0, "We are\nwinning!");
  4971                           
  4972                           ;incstack = 0
  4973  011788  6A22               	clrf	LCD_printString@y,c
  4974  01178A  0EFF               	movlw	high STR_5
  4975  01178C  6E24               	movwf	LCD_printString@input+1,c
  4976  01178E  0E93               	movlw	low STR_5
  4977  011790  6E23               	movwf	LCD_printString@input,c
  4978  011792  0E00               	movlw	0
  4979  011794  EC00  F080         	call	_LCD_printString
  4980  011798                     l256:
  4981                           
  4982                           ;main.c: 94: {
  4983  011798  D7FF               	goto	l256
  4984  01179A                     __end_of_competitionMode:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           intcon2	equ	0xFF1
  4994                           intcon3	equ	0xFF0
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           indf1	equ	0xFE7
  4998                           postinc1	equ	0xFE6
  4999                           postdec1	equ	0xFE5
  5000                           fsr1h	equ	0xFE2
  5001                           fsr1l	equ	0xFE1
  5002                           indf2	equ	0xFDF
  5003                           postinc2	equ	0xFDE
  5004                           postdec2	equ	0xFDD
  5005                           fsr2h	equ	0xFDA
  5006                           fsr2l	equ	0xFD9
  5007                           status	equ	0xFD8
  5008                           
  5009 ;; *************** function _RCMode *****************
  5010 ;; Defined at:
  5011 ;;		line 99 in file "main.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;		None
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;  right_speed     2   52[BANK0 ] int 
  5016 ;;  left_speed      2   50[BANK0 ] int 
  5017 ;;  done            1   55[BANK0 ] unsigned char 
  5018 ;;  type            1   54[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;		None               void
  5021 ;; Registers used:
  5022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5029 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5032 ;;Total ram usage:        6 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    9
  5035 ;; This function calls:
  5036 ;;		_LCD_printString
  5037 ;;		_PS2_analog
  5038 ;;		_PS2_init
  5039 ;;		_PS2_readGamepad
  5040 ;;		_PS2_readType
  5041 ;;		___awdiv
  5042 ;;		_delay_ms
  5043 ;;		_motorDrive_setSpeeds
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text25
  5050  010CFA                     __ptext25:
  5051                           	opt stack 0
  5052  010CFA                     _RCMode:
  5053                           	opt stack 20
  5054                           
  5055                           ;main.c: 101: LCD_printString(0,0, "RC Mode\nSearch..");
  5056                           
  5057                           ;incstack = 0
  5058  010CFA  6A22               	clrf	LCD_printString@y,c
  5059  010CFC  0EFF               	movlw	high STR_6
  5060  010CFE  6E24               	movwf	LCD_printString@input+1,c
  5061  010D00  0E60               	movlw	low STR_6
  5062  010D02  6E23               	movwf	LCD_printString@input,c
  5063  010D04  0E00               	movlw	0
  5064  010D06  EC00  F080         	call	_LCD_printString
  5065  010D0A                     l5316:
  5066                           
  5067                           ;main.c: 102: char done = PS2_init();
  5068  010D0A  EC13  F086         	call	_PS2_init	;wreg free
  5069  010D0E  6F97               	movwf	RCMode@done& (0+255),b
  5070                           
  5071                           ;main.c: 103: while( done != 0 )
  5072  010D10  D015               	goto	l5324
  5073  010D12                     l5318:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;main.c: 104: {
  5077                           ;main.c: 105: LCD_printString(0,0, "RC Mode\nERR: %i  ",done);
  5078  010D12  6A22               	clrf	LCD_printString@y,c
  5079  010D14  0EFF               	movlw	high STR_7
  5080  010D16  6E24               	movwf	LCD_printString@input+1,c
  5081  010D18  0E18               	movlw	low STR_7
  5082  010D1A  6E23               	movwf	LCD_printString@input,c
  5083  010D1C  C097  F025         	movff	RCMode@done,?_LCD_printString+3
  5084  010D20  6A26               	clrf	?_LCD_printString+4,c
  5085  010D22  0E00               	movlw	0
  5086  010D24  EC00  F080         	call	_LCD_printString
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;main.c: 106: delay_ms(500);
  5090  010D28  0EF4               	movlw	244
  5091  010D2A  6E0A               	movwf	delay_ms@x,c
  5092  010D2C  0E01               	movlw	1
  5093  010D2E  6E0B               	movwf	delay_ms@x+1,c
  5094  010D30  0E00               	movlw	0
  5095  010D32  6A0C               	clrf	delay_ms@x+2,c
  5096  010D34  6A0D               	clrf	delay_ms@x+3,c
  5097  010D36  ECE8  F089         	call	_delay_ms	;wreg free
  5098  010D3A  D7E7               	goto	l5316
  5099  010D3C                     l5324:
  5100                           
  5101                           ; BSR set to: 0
  5102  010D3C  6797               	tstfsz	RCMode@done& (0+255),b
  5103  010D3E  D7E9               	goto	l5318
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;main.c: 108: }
  5107                           ;main.c: 110: char type = PS2_readType();
  5108  010D40  ECAE  F08B         	call	_PS2_readType	;wreg free
  5109  010D44  6F96               	movwf	RCMode@type& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;main.c: 112: LCD_printString(0,0, "ana:%i\ntype %i",PS2_analog(7),type);
  5113  010D46  6A22               	clrf	LCD_printString@y,c
  5114  010D48  0EFF               	movlw	high STR_8
  5115  010D4A  6E24               	movwf	LCD_printString@input+1,c
  5116  010D4C  0ED1               	movlw	low STR_8
  5117  010D4E  6E23               	movwf	LCD_printString@input,c
  5118  010D50  0E07               	movlw	7
  5119  010D52  ECDE  F08B         	call	_PS2_analog
  5120  010D56  6E25               	movwf	?_LCD_printString+3,c
  5121  010D58  6A26               	clrf	?_LCD_printString+4,c
  5122  010D5A  C096  F027         	movff	RCMode@type,?_LCD_printString+5
  5123  010D5E  6A28               	clrf	?_LCD_printString+6,c
  5124  010D60  0E00               	movlw	0
  5125  010D62  EC00  F080         	call	_LCD_printString
  5126  010D66                     l5330:
  5127                           
  5128                           ;main.c: 117: {
  5129                           ;main.c: 118: PS2_readGamepad();
  5130  010D66  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  5131                           
  5132                           ;main.c: 120: int left_speed = ((PS2_analog(8) * 120) / 255) - 60;
  5133  010D6A  0E08               	movlw	8
  5134  010D6C  ECDE  F08B         	call	_PS2_analog
  5135  010D70  D820               	call	PL32	;call to abstracted procedure
  5136  010D72  EC7C  F087         	call	___awdiv	;wreg free
  5137  010D76  0EC4               	movlw	196
  5138  010D78  240C               	addwf	?___awdiv,w,c
  5139  010D7A  0100               	movlb	0	; () banked
  5140  010D7C  6F92               	movwf	RCMode@left_speed& (0+255),b
  5141  010D7E  0EFF               	movlw	255
  5142  010D80  200D               	addwfc	?___awdiv+1,w,c
  5143  010D82  6F93               	movwf	(RCMode@left_speed+1)& (0+255),b
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;main.c: 121: int right_speed = ((PS2_analog(6) * 120) / 255) - 60;
  5147  010D84  0E06               	movlw	6
  5148  010D86  ECDE  F08B         	call	_PS2_analog
  5149  010D8A  D813               	call	PL32	;call to abstracted procedure
  5150  010D8C  EC7C  F087         	call	___awdiv	;wreg free
  5151  010D90  0EC4               	movlw	196
  5152  010D92  240C               	addwf	?___awdiv,w,c
  5153  010D94  0100               	movlb	0	; () banked
  5154  010D96  6F94               	movwf	RCMode@right_speed& (0+255),b
  5155  010D98  0EFF               	movlw	255
  5156  010D9A  200D               	addwfc	?___awdiv+1,w,c
  5157  010D9C  6F95               	movwf	(RCMode@right_speed+1)& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;main.c: 125: motorDrive_setSpeeds(right_speed, left_speed);
  5161  010D9E  C092  F014         	movff	RCMode@left_speed,motorDrive_setSpeeds@rSpeed
  5162  010DA2  5194               	movf	RCMode@right_speed& (0+255),w,b
  5163  010DA4  ECC2  F081         	call	_motorDrive_setSpeeds
  5164                           
  5165                           ; BSR set to: 15
  5166                           ;main.c: 126: delay_ms(50);
  5167  010DA8  EC59  F084         	call	PL10	;call to abstracted procedure
  5168  010DAC  ECE8  F089         	call	_delay_ms	;wreg free
  5169  010DB0  D7DA               	goto	l5330
  5170  010DB2                     __end_of_RCMode:
  5171                           	opt stack 0
  5172  010DB2                     PL32:
  5173                           	opt stack 20
  5174  010DB2  0D78               	mullw	120
  5175  010DB4  CFF3 F00C          	movff	prodl,___awdiv@dividend
  5176  010DB8  CFF4 F00D          	movff	prodh,___awdiv@dividend+1
  5177  010DBC  0E00               	movlw	0
  5178  010DBE  6A0F               	clrf	___awdiv@divisor+1,c
  5179  010DC0  680E               	setf	___awdiv@divisor,c
  5180  010DC2  0012               	return	
  5181  010DC4                     __end_ofPL32:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           intcon	equ	0xFF2
  5190                           intcon2	equ	0xFF1
  5191                           intcon3	equ	0xFF0
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           indf1	equ	0xFE7
  5195                           postinc1	equ	0xFE6
  5196                           postdec1	equ	0xFE5
  5197                           fsr1h	equ	0xFE2
  5198                           fsr1l	equ	0xFE1
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function _motorDrive_setSpeeds *****************
  5207 ;; Defined at:
  5208 ;;		line 68 in file "motorDrive.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  lSpeed          1    wreg     char 
  5211 ;;  rSpeed          1   19[COMRAM] char 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  lSpeed          1   40[COMRAM] char 
  5214 ;;  tempr           2   24[COMRAM] int 
  5215 ;;  templ           2   22[COMRAM] int 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/F
  5222 ;;		On exit  : F/F
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5226 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5228 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5229 ;;Total ram usage:       22 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    4
  5232 ;; This function calls:
  5233 ;;		_SetDCEPWM1
  5234 ;;		_SetDCEPWM3
  5235 ;;		___awdiv
  5236 ;;		___wmul
  5237 ;; This function is called by:
  5238 ;;		_RCMode
  5239 ;;		_motorDrive_init
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text26
  5244  010384                     __ptext26:
  5245                           	opt stack 0
  5246  010384                     _motorDrive_setSpeeds:
  5247                           	opt stack 23
  5248                           
  5249                           ;incstack = 0
  5250                           ;motorDrive_setSpeeds@lSpeed stored from wreg
  5251  010384  6E29               	movwf	motorDrive_setSpeeds@lSpeed,c
  5252                           
  5253                           ;motorDrive.c: 70: PORTLbits.RL0 = (lSpeed >> 7 ) & 0x1 ^ 0x1;
  5254  010386  D8DF               	call	PL40	;call to abstracted procedure
  5255  010388                     u2595:
  5256  010388  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5257  01038A  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5258  01038C  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5259  01038E  D7FC               	goto	u2595
  5260  010390  0E01               	movlw	1
  5261  010392  1615               	andwf	??_motorDrive_setSpeeds,f,c
  5262  010394  1A15               	xorwf	??_motorDrive_setSpeeds,f,c
  5263  010396  010E               	movlb	14	; () banked
  5264  010398  51E4               	movf	228,w,b	;volatile
  5265  01039A  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  5266  01039C  0BFE               	andlw	-2
  5267  01039E  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  5268  0103A0  6FE4               	movwf	228,b	;volatile
  5269                           
  5270                           ;motorDrive.c: 71: PORTKbits.RK1 = (rSpeed >> 7 ) & 0x1;
  5271  0103A2  D8D6               	call	PL42	;call to abstracted procedure
  5272  0103A4                     u2605:
  5273  0103A4  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5274  0103A6  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5275  0103A8  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5276  0103AA  D7FC               	goto	u2605
  5277  0103AC  0E01               	movlw	1
  5278  0103AE  1615               	andwf	??_motorDrive_setSpeeds,f,c
  5279  0103B0  4615               	rlncf	??_motorDrive_setSpeeds,f,c
  5280  0103B2  51E7               	movf	231,w,b	;volatile
  5281  0103B4  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  5282  0103B6  0BFD               	andlw	-3
  5283  0103B8  1815               	xorwf	??_motorDrive_setSpeeds,w,c
  5284  0103BA  6FE7               	movwf	231,b	;volatile
  5285                           
  5286                           ;motorDrive.c: 73: lSpeed = ((lSpeed < 100) ? lSpeed : 100);
  5287  0103BC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5288  0103BE  0A80               	xorlw	128
  5289  0103C0  0F1C               	addlw	-228
  5290  0103C2  E304               	bnc	l4700
  5291                           
  5292                           ; BSR set to: 14
  5293  0103C4  6A1C               	clrf	_motorDrive_setSpeeds$2455+1,c
  5294  0103C6  0E64               	movlw	100
  5295  0103C8  6E1B               	movwf	_motorDrive_setSpeeds$2455,c
  5296  0103CA  D005               	goto	l4702
  5297  0103CC                     l4700:
  5298                           
  5299                           ; BSR set to: 14
  5300  0103CC  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5301  0103CE  6E1B               	movwf	_motorDrive_setSpeeds$2455,c
  5302  0103D0  6A1C               	clrf	_motorDrive_setSpeeds$2455+1,c
  5303  0103D2  BE1B               	btfsc	_motorDrive_setSpeeds$2455,7,c
  5304  0103D4  061C               	decf	_motorDrive_setSpeeds$2455+1,f,c
  5305  0103D6                     l4702:
  5306                           
  5307                           ; BSR set to: 14
  5308  0103D6  C01B  F029         	movff	_motorDrive_setSpeeds$2455,motorDrive_setSpeeds@lSpeed
  5309                           
  5310                           ; BSR set to: 14
  5311                           ;motorDrive.c: 74: rSpeed = ((rSpeed < 100) ? rSpeed : 100);
  5312  0103DA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5313  0103DC  0A80               	xorlw	128
  5314  0103DE  0F1C               	addlw	-228
  5315  0103E0  E304               	bnc	l4708
  5316                           
  5317                           ; BSR set to: 14
  5318  0103E2  6A1E               	clrf	_motorDrive_setSpeeds$2456+1,c
  5319  0103E4  0E64               	movlw	100
  5320  0103E6  6E1D               	movwf	_motorDrive_setSpeeds$2456,c
  5321  0103E8  D005               	goto	l4710
  5322  0103EA                     l4708:
  5323                           
  5324                           ; BSR set to: 14
  5325  0103EA  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5326  0103EC  6E1D               	movwf	_motorDrive_setSpeeds$2456,c
  5327  0103EE  6A1E               	clrf	_motorDrive_setSpeeds$2456+1,c
  5328  0103F0  BE1D               	btfsc	_motorDrive_setSpeeds$2456,7,c
  5329  0103F2  061E               	decf	_motorDrive_setSpeeds$2456+1,f,c
  5330  0103F4                     l4710:
  5331                           
  5332                           ; BSR set to: 14
  5333  0103F4  C01D  F014         	movff	_motorDrive_setSpeeds$2456,motorDrive_setSpeeds@rSpeed
  5334                           
  5335                           ; BSR set to: 14
  5336                           ;motorDrive.c: 76: lSpeed = ((lSpeed > -100) ? lSpeed : -100);
  5337  0103F8  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5338  0103FA  0A80               	xorlw	128
  5339  0103FC  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  5340  0103FE  0E9D               	movlw	157
  5341  010400  0A80               	xorlw	128
  5342  010402  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  5343  010404  E204               	bc	l4716
  5344                           
  5345                           ; BSR set to: 14
  5346  010406  6820               	setf	_motorDrive_setSpeeds$2457+1,c
  5347  010408  0E9C               	movlw	156
  5348  01040A  6E1F               	movwf	_motorDrive_setSpeeds$2457,c
  5349  01040C  D005               	goto	l4718
  5350  01040E                     l4716:
  5351                           
  5352                           ; BSR set to: 14
  5353  01040E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5354  010410  6E1F               	movwf	_motorDrive_setSpeeds$2457,c
  5355  010412  6A20               	clrf	_motorDrive_setSpeeds$2457+1,c
  5356  010414  BE1F               	btfsc	_motorDrive_setSpeeds$2457,7,c
  5357  010416  0620               	decf	_motorDrive_setSpeeds$2457+1,f,c
  5358  010418                     l4718:
  5359                           
  5360                           ; BSR set to: 14
  5361  010418  C01F  F029         	movff	_motorDrive_setSpeeds$2457,motorDrive_setSpeeds@lSpeed
  5362                           
  5363                           ; BSR set to: 14
  5364                           ;motorDrive.c: 77: rSpeed = ((rSpeed > -100) ? rSpeed : -100);
  5365  01041C  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5366  01041E  0A80               	xorlw	128
  5367  010420  6E15               	movwf	??_motorDrive_setSpeeds& (0+255),c
  5368  010422  0E9D               	movlw	157
  5369  010424  0A80               	xorlw	128
  5370  010426  5C15               	subwf	??_motorDrive_setSpeeds,w,c
  5371  010428  E204               	bc	l4724
  5372                           
  5373                           ; BSR set to: 14
  5374  01042A  6822               	setf	_motorDrive_setSpeeds$2458+1,c
  5375  01042C  0E9C               	movlw	156
  5376  01042E  6E21               	movwf	_motorDrive_setSpeeds$2458,c
  5377  010430  D005               	goto	l4726
  5378  010432                     l4724:
  5379                           
  5380                           ; BSR set to: 14
  5381  010432  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5382  010434  6E21               	movwf	_motorDrive_setSpeeds$2458,c
  5383  010436  6A22               	clrf	_motorDrive_setSpeeds$2458+1,c
  5384  010438  BE21               	btfsc	_motorDrive_setSpeeds$2458,7,c
  5385  01043A  0622               	decf	_motorDrive_setSpeeds$2458+1,f,c
  5386  01043C                     l4726:
  5387                           
  5388                           ; BSR set to: 14
  5389  01043C  C021  F014         	movff	_motorDrive_setSpeeds$2458,motorDrive_setSpeeds@rSpeed
  5390                           
  5391                           ; BSR set to: 14
  5392                           ;motorDrive.c: 79: lSpeed = ((lSpeed >> 7 ) & 0x1) ? ((lSpeed < 0) ? (lSpeed*-1) : lSpee
      +                          d) : 100-lSpeed;
  5393  010440  D882               	call	PL40	;call to abstracted procedure
  5394  010442                     u2655:
  5395  010442  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5396  010444  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5397  010446  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5398  010448  D7FC               	goto	u2655
  5399  01044A  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5400  01044C  D00E               	goto	l859
  5401                           
  5402                           ; BSR set to: 14
  5403  01044E  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5404  010452  6A16               	clrf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5405  010454  BE15               	btfsc	??_motorDrive_setSpeeds& (0+255),7,c
  5406  010456  0616               	decf	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5407  010458  5015               	movf	??_motorDrive_setSpeeds,w,c
  5408  01045A  0864               	sublw	100
  5409  01045C  6E23               	movwf	_motorDrive_setSpeeds$2459,c
  5410  01045E  5016               	movf	??_motorDrive_setSpeeds+1,w,c
  5411  010460  A0D8               	btfss	status,0,c
  5412  010462  2AE8               	incf	wreg,f,c
  5413  010464  0800               	sublw	0
  5414  010466  6E24               	movwf	_motorDrive_setSpeeds$2459+1,c
  5415  010468  D01E               	goto	l4738
  5416  01046A                     l859:
  5417                           
  5418                           ; BSR set to: 14
  5419  01046A  BE29               	btfsc	motorDrive_setSpeeds@lSpeed,7,c
  5420  01046C  D006               	goto	l4734
  5421                           
  5422                           ; BSR set to: 14
  5423  01046E  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5424  010470  6E25               	movwf	_motorDrive_setSpeeds$2460,c
  5425  010472  6A26               	clrf	_motorDrive_setSpeeds$2460+1,c
  5426  010474  BE25               	btfsc	_motorDrive_setSpeeds$2460,7,c
  5427  010476  0626               	decf	_motorDrive_setSpeeds$2460+1,f,c
  5428  010478  D012               	goto	l4736
  5429  01047A                     l4734:
  5430                           
  5431                           ; BSR set to: 14
  5432  01047A  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5433  01047C  6E06               	movwf	___wmul@multiplier,c
  5434  01047E  6A07               	clrf	___wmul@multiplier+1,c
  5435  010480  BE06               	btfsc	___wmul@multiplier,7,c
  5436  010482  0607               	decf	___wmul@multiplier+1,f,c
  5437  010484  6A09               	clrf	___wmul@multiplicand+1,c
  5438  010486  0E01               	movlw	1
  5439  010488  6E08               	movwf	___wmul@multiplicand,c
  5440  01048A  EC59  F08B         	call	___wmul	;wreg free
  5441  01048E  1E06               	comf	?___wmul,f,c
  5442  010490  1E07               	comf	?___wmul+1,f,c
  5443  010492  4A06               	infsnz	?___wmul,f,c
  5444  010494  2A07               	incf	?___wmul+1,f,c
  5445  010496  C006  F025         	movff	?___wmul,_motorDrive_setSpeeds$2460
  5446  01049A  C007  F026         	movff	?___wmul+1,_motorDrive_setSpeeds$2460+1
  5447  01049E                     l4736:
  5448  01049E  C025  F023         	movff	_motorDrive_setSpeeds$2460,_motorDrive_setSpeeds$2459
  5449  0104A2  C026  F024         	movff	_motorDrive_setSpeeds$2460+1,_motorDrive_setSpeeds$2459+1
  5450  0104A6                     l4738:
  5451  0104A6  C023  F029         	movff	_motorDrive_setSpeeds$2459,motorDrive_setSpeeds@lSpeed
  5452                           
  5453                           ;motorDrive.c: 80: rSpeed = ((rSpeed >> 7 ) & 0x1) ? 100 + rSpeed : rSpeed;
  5454  0104AA  D852               	call	PL42	;call to abstracted procedure
  5455  0104AC                     u2685:
  5456  0104AC  3415               	rlcf	??_motorDrive_setSpeeds,w,c
  5457  0104AE  3215               	rrcf	??_motorDrive_setSpeeds,f,c
  5458  0104B0  2E16               	decfsz	(??_motorDrive_setSpeeds+1)& (0+255),f,c
  5459  0104B2  D7FC               	goto	u2685
  5460  0104B4  B015               	btfsc	??_motorDrive_setSpeeds,0,c
  5461  0104B6  D006               	goto	l4744
  5462  0104B8  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5463  0104BA  6E27               	movwf	_motorDrive_setSpeeds$2461,c
  5464  0104BC  6A28               	clrf	_motorDrive_setSpeeds$2461+1,c
  5465  0104BE  BE27               	btfsc	_motorDrive_setSpeeds$2461,7,c
  5466  0104C0  0628               	decf	_motorDrive_setSpeeds$2461+1,f,c
  5467  0104C2  D009               	goto	l4746
  5468  0104C4                     l4744:
  5469  0104C4  0E64               	movlw	100
  5470  0104C6  2414               	addwf	motorDrive_setSpeeds@rSpeed,w,c
  5471  0104C8  6E27               	movwf	_motorDrive_setSpeeds$2461,c
  5472  0104CA  6AE8               	clrf	wreg,c
  5473  0104CC  B0D8               	btfsc	status,0,c
  5474  0104CE  2AE8               	incf	wreg,f,c
  5475  0104D0  BE14               	btfsc	motorDrive_setSpeeds@rSpeed,7,c
  5476  0104D2  06E8               	decf	wreg,f,c
  5477  0104D4  6E28               	movwf	_motorDrive_setSpeeds$2461+1,c
  5478  0104D6                     l4746:
  5479  0104D6  C027  F014         	movff	_motorDrive_setSpeeds$2461,motorDrive_setSpeeds@rSpeed
  5480                           
  5481                           ;motorDrive.c: 82: int templ = ((0xD0 * lSpeed) / 100);
  5482  0104DA  5029               	movf	motorDrive_setSpeeds@lSpeed,w,c
  5483  0104DC  D82C               	call	PL36	;call to abstracted procedure
  5484  0104DE  EC59  F08B         	call	___wmul	;wreg free
  5485  0104E2  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5486  0104E6  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5487  0104EA  6A0F               	clrf	___awdiv@divisor+1,c
  5488  0104EC  0E64               	movlw	100
  5489  0104EE  6E0E               	movwf	___awdiv@divisor,c
  5490  0104F0  EC7C  F087         	call	___awdiv	;wreg free
  5491  0104F4  C00C  F017         	movff	?___awdiv,motorDrive_setSpeeds@templ
  5492  0104F8  C00D  F018         	movff	?___awdiv+1,motorDrive_setSpeeds@templ+1
  5493                           
  5494                           ;motorDrive.c: 83: int tempr = ((0xD0 * rSpeed) / 100);
  5495  0104FC  5014               	movf	motorDrive_setSpeeds@rSpeed,w,c
  5496  0104FE  D81B               	call	PL36	;call to abstracted procedure
  5497  010500  EC59  F08B         	call	___wmul	;wreg free
  5498  010504  C006  F00C         	movff	?___wmul,___awdiv@dividend
  5499  010508  C007  F00D         	movff	?___wmul+1,___awdiv@dividend+1
  5500  01050C  6A0F               	clrf	___awdiv@divisor+1,c
  5501  01050E  0E64               	movlw	100
  5502  010510  6E0E               	movwf	___awdiv@divisor,c
  5503  010512  EC7C  F087         	call	___awdiv	;wreg free
  5504  010516  C00C  F019         	movff	?___awdiv,motorDrive_setSpeeds@tempr
  5505  01051A  C00D  F01A         	movff	?___awdiv+1,motorDrive_setSpeeds@tempr+1
  5506                           
  5507                           ;motorDrive.c: 85: SetDCEPWM1(tempr);
  5508  01051E  C019  F006         	movff	motorDrive_setSpeeds@tempr,SetDCEPWM1@dutycycle
  5509  010522  C01A  F007         	movff	motorDrive_setSpeeds@tempr+1,SetDCEPWM1@dutycycle+1
  5510  010526  EC97  F08A         	call	_SetDCEPWM1	;wreg free
  5511                           
  5512                           ;motorDrive.c: 86: SetDCEPWM3(templ);
  5513  01052A  C017  F006         	movff	motorDrive_setSpeeds@templ,SetDCEPWM3@dutycycle
  5514  01052E  C018  F007         	movff	motorDrive_setSpeeds@templ+1,SetDCEPWM3@dutycycle+1
  5515  010532  EF79  F08A         	goto	_SetDCEPWM3	;wreg free
  5516  010536                     __end_of_motorDrive_setSpeeds:
  5517                           	opt stack 0
  5518  010536                     PL36:
  5519                           	opt stack 23
  5520  010536  6E06               	movwf	___wmul@multiplier,c
  5521  010538  6A07               	clrf	___wmul@multiplier+1,c
  5522  01053A  BE06               	btfsc	___wmul@multiplier,7,c
  5523  01053C  0607               	decf	___wmul@multiplier+1,f,c
  5524  01053E  6A09               	clrf	___wmul@multiplicand+1,c
  5525  010540  0ED0               	movlw	208
  5526  010542  6E08               	movwf	___wmul@multiplicand,c
  5527  010544  0CD0               	retlw	208
  5528  010546                     __end_ofPL36:
  5529                           	opt stack 0
  5530  010546                     PL40:
  5531                           	opt stack 23
  5532  010546  C029  F015         	movff	motorDrive_setSpeeds@lSpeed,??_motorDrive_setSpeeds
  5533  01054A  0E07               	movlw	7
  5534  01054C  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5535  01054E  0C07               	retlw	7
  5536  010550                     __end_ofPL40:
  5537                           	opt stack 0
  5538  010550                     PL42:
  5539                           	opt stack 23
  5540  010550  C014  F015         	movff	motorDrive_setSpeeds@rSpeed,??_motorDrive_setSpeeds
  5541  010554  0E07               	movlw	7
  5542  010556  6E16               	movwf	(??_motorDrive_setSpeeds+1)& (0+255),c
  5543  010558  0C07               	retlw	7
  5544  01055A                     __end_ofPL42:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon2	equ	0xFF1
  5554                           intcon3	equ	0xFF0
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           indf1	equ	0xFE7
  5558                           postinc1	equ	0xFE6
  5559                           postdec1	equ	0xFE5
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function ___wmul *****************
  5570 ;; Defined at:
  5571 ;;		line 15 in file "/Applications/microchip/xc8/v1.33/sources/common/Umul16.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  multiplier      2    5[COMRAM] unsigned int 
  5574 ;;  multiplicand    2    7[COMRAM] unsigned int 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  product         2    9[COMRAM] unsigned int 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2    5[COMRAM] unsigned int 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, prodl, prodh
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/E
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5586 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5589 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5590 ;;Total ram usage:        6 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    3
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_motorDrive_setSpeeds
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text27
  5601  0116B2                     __ptext27:
  5602                           	opt stack 0
  5603  0116B2                     ___wmul:
  5604                           	opt stack 23
  5605                           
  5606                           ; BSR set to: 15
  5607                           ;incstack = 0
  5608  0116B2  5006               	movf	___wmul@multiplier,w,c
  5609  0116B4  0208               	mulwf	___wmul@multiplicand,c
  5610  0116B6  CFF3 F00A          	movff	prodl,___wmul@product
  5611  0116BA  CFF4 F00B          	movff	prodh,___wmul@product+1
  5612  0116BE  5006               	movf	___wmul@multiplier,w,c
  5613  0116C0  0209               	mulwf	___wmul@multiplicand+1,c
  5614  0116C2  50F3               	movf	prodl,w,c
  5615  0116C4  260B               	addwf	___wmul@product+1,f,c
  5616  0116C6  5007               	movf	___wmul@multiplier+1,w,c
  5617  0116C8  0208               	mulwf	___wmul@multiplicand,c
  5618  0116CA  50F3               	movf	prodl,w,c
  5619  0116CC  260B               	addwf	___wmul@product+1,f,c
  5620  0116CE  C00A  F006         	movff	___wmul@product,?___wmul
  5621  0116D2  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  5622  0116D6  0012               	return	
  5623  0116D8                     __end_of___wmul:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           intcon	equ	0xFF2
  5632                           intcon2	equ	0xFF1
  5633                           intcon3	equ	0xFF0
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           indf1	equ	0xFE7
  5637                           postinc1	equ	0xFE6
  5638                           postdec1	equ	0xFE5
  5639                           fsr1h	equ	0xFE2
  5640                           fsr1l	equ	0xFE1
  5641                           indf2	equ	0xFDF
  5642                           postinc2	equ	0xFDE
  5643                           postdec2	equ	0xFDD
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function ___awdiv *****************
  5649 ;; Defined at:
  5650 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/awdiv.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  dividend        2   11[COMRAM] int 
  5653 ;;  divisor         2   13[COMRAM] int 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  quotient        2   17[COMRAM] int 
  5656 ;;  sign            1   16[COMRAM] unsigned char 
  5657 ;;  counter         1   15[COMRAM] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  2   11[COMRAM] int 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, prodl
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5668 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5670 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5671 ;;Total ram usage:        8 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    3
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_RCMode
  5678 ;;		_motorDrive_setSpeeds
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text28
  5683  010EF8                     __ptext28:
  5684                           	opt stack 0
  5685  010EF8                     ___awdiv:
  5686                           	opt stack 23
  5687                           
  5688                           ;incstack = 0
  5689  010EF8  6A11               	clrf	___awdiv@sign,c
  5690  010EFA  500F               	movf	___awdiv@divisor+1,w,c
  5691  010EFC  EC93  F085         	call	PL34	;call to abstracted procedure
  5692  010F00  B4D8               	btfsc	status,2,c
  5693  010F02  5C0E               	subwf	___awdiv@divisor,w,c
  5694  010F04  E206               	bc	l4462
  5695  010F06  6C0E               	negf	___awdiv@divisor,c
  5696  010F08  1E0F               	comf	___awdiv@divisor+1,f,c
  5697  010F0A  B0D8               	btfsc	status,0,c
  5698  010F0C  2A0F               	incf	___awdiv@divisor+1,f,c
  5699  010F0E  0E01               	movlw	1
  5700  010F10  6E11               	movwf	___awdiv@sign,c
  5701  010F12                     l4462:
  5702  010F12  500D               	movf	___awdiv@dividend+1,w,c
  5703  010F14  EC93  F085         	call	PL34	;call to abstracted procedure
  5704  010F18  B4D8               	btfsc	status,2,c
  5705  010F1A  5C0C               	subwf	___awdiv@dividend,w,c
  5706  010F1C  E206               	bc	l4468
  5707  010F1E  6C0C               	negf	___awdiv@dividend,c
  5708  010F20  1E0D               	comf	___awdiv@dividend+1,f,c
  5709  010F22  B0D8               	btfsc	status,0,c
  5710  010F24  2A0D               	incf	___awdiv@dividend+1,f,c
  5711  010F26  0E01               	movlw	1
  5712  010F28  1A11               	xorwf	___awdiv@sign,f,c
  5713  010F2A                     l4468:
  5714  010F2A  6A12               	clrf	___awdiv@quotient,c
  5715  010F2C  6A13               	clrf	___awdiv@quotient+1,c
  5716  010F2E  500F               	movf	___awdiv@divisor+1,w,c
  5717  010F30  100E               	iorwf	___awdiv@divisor,w,c
  5718  010F32  E01B               	bz	l4490
  5719  010F34  0E01               	movlw	1
  5720  010F36  6E10               	movwf	___awdiv@counter,c
  5721  010F38  D004               	goto	l4476
  5722  010F3A                     l4474:
  5723  010F3A  90D8               	bcf	status,0,c
  5724  010F3C  360E               	rlcf	___awdiv@divisor,f,c
  5725  010F3E  360F               	rlcf	___awdiv@divisor+1,f,c
  5726  010F40  2A10               	incf	___awdiv@counter,f,c
  5727  010F42                     l4476:
  5728  010F42  AE0F               	btfss	___awdiv@divisor+1,7,c
  5729  010F44  D7FA               	goto	l4474
  5730  010F46                     l4478:
  5731  010F46  90D8               	bcf	status,0,c
  5732  010F48  3612               	rlcf	___awdiv@quotient,f,c
  5733  010F4A  3613               	rlcf	___awdiv@quotient+1,f,c
  5734  010F4C  500E               	movf	___awdiv@divisor,w,c
  5735  010F4E  5C0C               	subwf	___awdiv@dividend,w,c
  5736  010F50  500F               	movf	___awdiv@divisor+1,w,c
  5737  010F52  580D               	subwfb	___awdiv@dividend+1,w,c
  5738  010F54  E305               	bnc	l4486
  5739  010F56  500E               	movf	___awdiv@divisor,w,c
  5740  010F58  5E0C               	subwf	___awdiv@dividend,f,c
  5741  010F5A  500F               	movf	___awdiv@divisor+1,w,c
  5742  010F5C  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5743  010F5E  8012               	bsf	___awdiv@quotient,0,c
  5744  010F60                     l4486:
  5745  010F60  90D8               	bcf	status,0,c
  5746  010F62  320F               	rrcf	___awdiv@divisor+1,f,c
  5747  010F64  320E               	rrcf	___awdiv@divisor,f,c
  5748  010F66  2E10               	decfsz	___awdiv@counter,f,c
  5749  010F68  D7EE               	goto	l4478
  5750  010F6A                     l4490:
  5751  010F6A  5011               	movf	___awdiv@sign,w,c
  5752  010F6C  E004               	bz	l4494
  5753  010F6E  6C12               	negf	___awdiv@quotient,c
  5754  010F70  1E13               	comf	___awdiv@quotient+1,f,c
  5755  010F72  B0D8               	btfsc	status,0,c
  5756  010F74  2A13               	incf	___awdiv@quotient+1,f,c
  5757  010F76                     l4494:
  5758  010F76  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5759  010F7A  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5760  010F7E  0012               	return	
  5761  010F80                     __end_of___awdiv:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           intcon2	equ	0xFF1
  5771                           intcon3	equ	0xFF0
  5772                           postinc0	equ	0xFEE
  5773                           wreg	equ	0xFE8
  5774                           indf1	equ	0xFE7
  5775                           postinc1	equ	0xFE6
  5776                           postdec1	equ	0xFE5
  5777                           fsr1h	equ	0xFE2
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _SetDCEPWM3 *****************
  5787 ;; Defined at:
  5788 ;;		line 16 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew3setdc.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5793 ;; Return value:  Size  Location     Type
  5794 ;;		None               void
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/F
  5799 ;;		On exit  : F/F
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5806 ;;Total ram usage:        6 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    3
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_motorDrive_init
  5813 ;;		_motorDrive_setSpeeds
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           	psect	text29
  5818  0114F2                     __ptext29:
  5819                           	opt stack 0
  5820  0114F2                     _SetDCEPWM3:
  5821                           	opt stack 23
  5822                           
  5823                           ;incstack = 0
  5824  0114F2  C006  F008         	movff	SetDCEPWM3@dutycycle,??_SetDCEPWM3
  5825  0114F6  C007  F009         	movff	SetDCEPWM3@dutycycle+1,??_SetDCEPWM3+1
  5826  0114FA  0E06               	movlw	6
  5827  0114FC                     u2265:
  5828  0114FC  90D8               	bcf	status,0,c
  5829  0114FE  3608               	rlcf	??_SetDCEPWM3,f,c
  5830  011500  3609               	rlcf	??_SetDCEPWM3+1,f,c
  5831  011502  2EE8               	decfsz	wreg,f,c
  5832  011504  D7FB               	goto	u2265
  5833  011506  C008  F00A         	movff	??_SetDCEPWM3,SetDCEPWM3@DCycle
  5834  01150A  C009  F00B         	movff	??_SetDCEPWM3+1,SetDCEPWM3@DCycle+1
  5835  01150E  C00B  FF4A         	movff	SetDCEPWM3@DCycle+1,3914	;volatile
  5836  011512  C00A  F008         	movff	SetDCEPWM3@DCycle,??_SetDCEPWM3
  5837  011516  90D8               	bcf	status,0,c
  5838  011518  3208               	rrcf	??_SetDCEPWM3,f,c
  5839  01151A  90D8               	bcf	status,0,c
  5840  01151C  3208               	rrcf	??_SetDCEPWM3,f,c
  5841  01151E  0E30               	movlw	48
  5842  011520  1608               	andwf	??_SetDCEPWM3,f,c
  5843  011522  010F               	movlb	15	; () banked
  5844  011524  5149               	movf	73,w,b	;volatile
  5845  011526  0BCF               	andlw	207
  5846  011528  1008               	iorwf	??_SetDCEPWM3,w,c
  5847  01152A  6F49               	movwf	73,b	;volatile
  5848                           
  5849                           ; BSR set to: 15
  5850  01152C  0012               	return	
  5851  01152E                     __end_of_SetDCEPWM3:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           prodh	equ	0xFF4
  5858                           prodl	equ	0xFF3
  5859                           intcon	equ	0xFF2
  5860                           intcon2	equ	0xFF1
  5861                           intcon3	equ	0xFF0
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           indf1	equ	0xFE7
  5865                           postinc1	equ	0xFE6
  5866                           postdec1	equ	0xFE5
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _SetDCEPWM1 *****************
  5877 ;; Defined at:
  5878 ;;		line 32 in file "/Applications/microchip/xc8/v1.33/sources/pic18/plib/PWM/ew1setdc.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  dutycycle       2    5[COMRAM] unsigned int 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  DCycle          2    9[COMRAM] struct PWMDC
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/F
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5896 ;;Total ram usage:        6 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    3
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_motorDrive_init
  5903 ;;		_motorDrive_setSpeeds
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text30
  5908  01152E                     __ptext30:
  5909                           	opt stack 0
  5910  01152E                     _SetDCEPWM1:
  5911                           	opt stack 23
  5912                           
  5913                           ; BSR set to: 15
  5914                           ;incstack = 0
  5915  01152E  C006  F008         	movff	SetDCEPWM1@dutycycle,??_SetDCEPWM1
  5916  011532  C007  F009         	movff	SetDCEPWM1@dutycycle+1,??_SetDCEPWM1+1
  5917  011536  0E06               	movlw	6
  5918  011538                     u2255:
  5919  011538  90D8               	bcf	status,0,c
  5920  01153A  3608               	rlcf	??_SetDCEPWM1,f,c
  5921  01153C  3609               	rlcf	??_SetDCEPWM1+1,f,c
  5922  01153E  2EE8               	decfsz	wreg,f,c
  5923  011540  D7FB               	goto	u2255
  5924  011542  C008  F00A         	movff	??_SetDCEPWM1,SetDCEPWM1@DCycle
  5925  011546  C009  F00B         	movff	??_SetDCEPWM1+1,SetDCEPWM1@DCycle+1
  5926  01154A  C00B  FFBA         	movff	SetDCEPWM1@DCycle+1,4026	;volatile
  5927  01154E  C00A  F008         	movff	SetDCEPWM1@DCycle,??_SetDCEPWM1
  5928  011552  90D8               	bcf	status,0,c
  5929  011554  3208               	rrcf	??_SetDCEPWM1,f,c
  5930  011556  90D8               	bcf	status,0,c
  5931  011558  3208               	rrcf	??_SetDCEPWM1,f,c
  5932  01155A  0E30               	movlw	48
  5933  01155C  1608               	andwf	??_SetDCEPWM1,f,c
  5934  01155E  50B9               	movf	4025,w,c	;volatile
  5935  011560  0BCF               	andlw	207
  5936  011562  1008               	iorwf	??_SetDCEPWM1,w,c
  5937  011564  6EB9               	movwf	4025,c	;volatile
  5938  011566  0012               	return	
  5939  011568                     __end_of_SetDCEPWM1:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           prodh	equ	0xFF4
  5946                           prodl	equ	0xFF3
  5947                           intcon	equ	0xFF2
  5948                           intcon2	equ	0xFF1
  5949                           intcon3	equ	0xFF0
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf1	equ	0xFE7
  5953                           postinc1	equ	0xFE6
  5954                           postdec1	equ	0xFE5
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _PS2_readType *****************
  5965 ;; Defined at:
  5966 ;;		line 172 in file "PS2.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0
  5975 ;; Tracked objects:
  5976 ;;		On entry : F/0
  5977 ;;		On exit  : F/0
  5978 ;;		Unchanged: F/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5984 ;;Total ram usage:        0 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    3
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_RCMode
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           	psect	text31
  5995  01175C                     __ptext31:
  5996                           	opt stack 0
  5997  01175C                     _PS2_readType:
  5998                           	opt stack 25
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;PS2.c: 174: if(controller_type == 0x03)
  6002                           
  6003                           ;incstack = 0
  6004  01175C  5057               	movf	_controller_type,w,c	;volatile
  6005  01175E  0A03               	xorlw	3
  6006  011760  E101               	bnz	l5244
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;PS2.c: 175: return 1;
  6010  011762  0C01               	retlw	1
  6011  011764                     l5244:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;PS2.c: 176: else if(controller_type == 0x01)
  6015  011764  0457               	decf	_controller_type,w,c	;volatile
  6016  011766  E101               	bnz	l5252
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;PS2.c: 177: return 2;
  6020  011768  0C02               	retlw	2
  6021  01176A                     l5252:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;PS2.c: 178: else if(controller_type == 0x0C)
  6025  01176A  5057               	movf	_controller_type,w,c	;volatile
  6026  01176C  0A0C               	xorlw	12
  6027  01176E  E101               	bnz	l5258
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;PS2.c: 179: return 3;
  6031  011770  0C03               	retlw	3
  6032  011772                     l5258:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;PS2.c: 181: return controller_type;
  6036  011772  5057               	movf	_controller_type,w,c	;volatile
  6037                           
  6038                           ; BSR set to: 0
  6039  011774  0012               	return	
  6040  011776                     __end_of_PS2_readType:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           indf1	equ	0xFE7
  6054                           postinc1	equ	0xFE6
  6055                           postdec1	equ	0xFE5
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _PS2_init *****************
  6066 ;; Defined at:
  6067 ;;		line 14 in file "PS2.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  i               2   77[COMRAM] int 
  6072 ;;  y               2   75[COMRAM] int 
  6073 ;;  temp            9   66[COMRAM] unsigned char [9]
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      unsigned char 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : F/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6084 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6086 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6087 ;;Total ram usage:       13 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    8
  6090 ;; This function calls:
  6091 ;;		_PS2_readGamepad
  6092 ;;		_PS2_sendCommandString
  6093 ;;		_PS2_shiftInOut
  6094 ;;		_delay_us
  6095 ;; This function is called by:
  6096 ;;		_RCMode
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text32
  6101  010C26                     __ptext32:
  6102                           	opt stack 0
  6103  010C26                     _PS2_init:
  6104                           	opt stack 20
  6105                           
  6106                           ;PS2.c: 16: char temp[sizeof(type_read)];
  6107                           ;PS2.c: 18: TRISFbits.TRISF2 = 0;
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;incstack = 0
  6111  010C26  9497               	bcf	3991,2,c	;volatile
  6112                           
  6113                           ;PS2.c: 19: TRISFbits.TRISF3 = 1;
  6114  010C28  8697               	bsf	3991,3,c	;volatile
  6115                           
  6116                           ;PS2.c: 20: TRISFbits.TRISF5 = 0;
  6117  010C2A  9A97               	bcf	3991,5,c	;volatile
  6118                           
  6119                           ;PS2.c: 21: TRISFbits.TRISF6 = 0;
  6120  010C2C  9C97               	bcf	3991,6,c	;volatile
  6121                           
  6122                           ;PS2.c: 24: PORTFbits.RF2 = 1;
  6123  010C2E  8485               	bsf	3973,2,c	;volatile
  6124                           
  6125                           ;PS2.c: 25: PORTFbits.RF5 = 1;
  6126  010C30  8A85               	bsf	3973,5,c	;volatile
  6127                           
  6128                           ;PS2.c: 27: PS2_readGamepad();
  6129  010C32  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  6130                           
  6131                           ;PS2.c: 28: PS2_readGamepad();
  6132  010C36  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  6133                           
  6134                           ;PS2.c: 30: if(PS2data[1] != 0x41 && PS2data[1] != 0x73 && PS2data[1] != 0x79)
  6135  010C3A  0100               	movlb	0	; () banked
  6136  010C3C  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6137  010C3E  0A41               	xorlw	65
  6138  010C40  E007               	bz	l5182
  6139                           
  6140                           ; BSR set to: 0
  6141  010C42  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6142  010C44  0A73               	xorlw	115
  6143  010C46  E004               	bz	l5182
  6144                           
  6145                           ; BSR set to: 0
  6146  010C48  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6147  010C4A  0A79               	xorlw	121
  6148  010C4C  E001               	bz	l5182
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;PS2.c: 31: {
  6152                           ;PS2.c: 32: return 1;
  6153  010C4E  0C01               	retlw	1
  6154  010C50                     l5182:
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;PS2.c: 33: }
  6158                           ;PS2.c: 36: read_delay = 1;
  6159  010C50  0E01               	movlw	1
  6160  010C52  6E59               	movwf	_read_delay,c	;volatile
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;PS2.c: 38: for(int y = 0; y <= 10; y++)
  6164  010C54  6A4C               	clrf	PS2_init@y,c
  6165  010C56  6A4D               	clrf	PS2_init@y+1,c
  6166  010C58                     l5190:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;PS2.c: 39: {
  6170                           ;PS2.c: 40: PS2_sendCommandString(enter_config, sizeof(enter_config));
  6171  010C58  0E05               	movlw	5
  6172  010C5A  6E1A               	movwf	PS2_sendCommandString@len,c
  6173  010C5C  0EEA               	movlw	_enter_config& (0+255)
  6174  010C5E  EC38  F08A         	call	_PS2_sendCommandString
  6175                           
  6176                           ;PS2.c: 43: delay_us(4);
  6177  010C62  D845               	call	PL24	;call to abstracted procedure
  6178  010C64  ECEB  F08A         	call	_delay_us	;wreg free
  6179                           
  6180                           ;PS2.c: 45: PORTFbits.RF2 = 1;
  6181  010C68  8485               	bsf	3973,2,c	;volatile
  6182                           
  6183                           ;PS2.c: 46: PORTFbits.RF5 = 1;
  6184  010C6A  8A85               	bsf	3973,5,c	;volatile
  6185                           
  6186                           ;PS2.c: 47: PORTFbits.RF6 = 0;
  6187  010C6C  9C85               	bcf	3973,6,c	;volatile
  6188                           
  6189                           ;PS2.c: 49: delay_us(4);
  6190  010C6E  D83F               	call	PL24	;call to abstracted procedure
  6191  010C70  ECEB  F08A         	call	_delay_us	;wreg free
  6192                           
  6193                           ;PS2.c: 51: for (int i = 0; i<9; i++)
  6194  010C74  6A4E               	clrf	PS2_init@i,c
  6195  010C76  6A4F               	clrf	PS2_init@i+1,c
  6196  010C78                     l5208:
  6197                           
  6198                           ;PS2.c: 52: {
  6199                           ;PS2.c: 53: temp[i] = PS2_shiftInOut(type_read[i]);
  6200  010C78  504E               	movf	PS2_init@i,w,c
  6201  010C7A  0F43               	addlw	low PS2_init@temp
  6202  010C7C  6ED9               	movwf	fsr2l,c
  6203  010C7E  6ADA               	clrf	fsr2h,c
  6204  010C80  504E               	movf	PS2_init@i,w,c
  6205  010C82  0100               	movlb	0	; () banked
  6206  010C84  0FCF               	addlw	low _type_read	;volatile
  6207  010C86  6EE1               	movwf	fsr1l,c
  6208  010C88  6AE2               	clrf	fsr1h,c
  6209  010C8A  50E7               	movf	indf1,w,c
  6210  010C8C  EC1E  F089         	call	_PS2_shiftInOut
  6211  010C90  6EDF               	movwf	indf2,c
  6212  010C92  4A4E               	infsnz	PS2_init@i,f,c
  6213  010C94  2A4F               	incf	PS2_init@i+1,f,c
  6214  010C96  504F               	movf	PS2_init@i+1,w,c
  6215  010C98  0A80               	xorlw	128
  6216  010C9A  0F80               	addlw	-128
  6217  010C9C  0E09               	movlw	9
  6218  010C9E  B4D8               	btfsc	status,2,c
  6219  010CA0  5C4E               	subwf	PS2_init@i,w,c
  6220  010CA2  E3EA               	bnc	l5208
  6221                           
  6222                           ;PS2.c: 54: }
  6223                           ;PS2.c: 56: PORTFbits.RF6 = 1;
  6224  010CA4  8C85               	bsf	3973,6,c	;volatile
  6225                           
  6226                           ;PS2.c: 58: controller_type = temp[3];
  6227  010CA6  C046  F057         	movff	PS2_init@temp+3,_controller_type	;volatile
  6228                           
  6229                           ;PS2.c: 60: PS2_sendCommandString(set_mode, sizeof(set_mode));
  6230  010CAA  0E09               	movlw	9
  6231  010CAC  6E1A               	movwf	PS2_sendCommandString@len,c
  6232  010CAE  0100               	movlb	0	; () banked
  6233  010CB0  0EE1               	movlw	_set_mode& (0+255)
  6234  010CB2  EC38  F08A         	call	_PS2_sendCommandString
  6235                           
  6236                           ;PS2.c: 62: PS2_sendCommandString(exit_config, sizeof(exit_config));
  6237  010CB6  0E09               	movlw	9
  6238  010CB8  6E1A               	movwf	PS2_sendCommandString@len,c
  6239  010CBA  0100               	movlb	0	; () banked
  6240  010CBC  0ED8               	movlw	_exit_config& (0+255)
  6241  010CBE  EC38  F08A         	call	_PS2_sendCommandString
  6242                           
  6243                           ;PS2.c: 64: PS2_readGamepad();
  6244  010CC2  EC5F  F084         	call	_PS2_readGamepad	;wreg free
  6245                           
  6246                           ;PS2.c: 66: if(PS2data[1] == 0x73)
  6247  010CC6  0100               	movlb	0	; () banked
  6248  010CC8  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6249  010CCA  0A73               	xorlw	115
  6250  010CCC  E00F               	bz	l5232
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;PS2.c: 69: if(y == 10)
  6254  010CCE  504C               	movf	PS2_init@y,w,c
  6255  010CD0  0A0A               	xorlw	10
  6256  010CD2  104D               	iorwf	PS2_init@y+1,w,c
  6257  010CD4  E101               	bnz	l5228
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;PS2.c: 70: {
  6261                           ;PS2.c: 71: return 2;
  6262  010CD6  0C02               	retlw	2
  6263  010CD8                     l5228:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;PS2.c: 72: }
  6267                           ;PS2.c: 73: read_delay += 1;
  6268  010CD8  2A59               	incf	_read_delay,f,c	;volatile
  6269  010CDA  4A4C               	infsnz	PS2_init@y,f,c
  6270  010CDC  2A4D               	incf	PS2_init@y+1,f,c
  6271                           
  6272                           ; BSR set to: 0
  6273  010CDE  504D               	movf	PS2_init@y+1,w,c
  6274  010CE0  0A80               	xorlw	128
  6275  010CE2  0F80               	addlw	-128
  6276  010CE4  0E0B               	movlw	11
  6277  010CE6  B4D8               	btfsc	status,2,c
  6278  010CE8  5C4C               	subwf	PS2_init@y,w,c
  6279  010CEA  E3B6               	bnc	l5190
  6280  010CEC                     l5232:
  6281                           
  6282                           ; BSR set to: 0
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;PS2.c: 74: }
  6286                           ;PS2.c: 75: return 0;
  6287  010CEC  0C00               	retlw	0
  6288  010CEE                     __end_of_PS2_init:
  6289                           	opt stack 0
  6290  010CEE                     PL24:
  6291                           	opt stack 20
  6292  010CEE  0E04               	movlw	4
  6293  010CF0  6E06               	movwf	delay_us@x,c
  6294  010CF2  6A07               	clrf	delay_us@x+1,c
  6295  010CF4  6A08               	clrf	delay_us@x+2,c
  6296  010CF6  6A09               	clrf	delay_us@x+3,c
  6297  010CF8  0C00               	retlw	0
  6298  010CFA                     __end_ofPL24:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           intcon3	equ	0xFF0
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           indf1	equ	0xFE7
  6312                           postinc1	equ	0xFE6
  6313                           postdec1	equ	0xFE5
  6314                           fsr1h	equ	0xFE2
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function _PS2_readGamepad *****************
  6324 ;; Defined at:
  6325 ;;		line 78 in file "PS2.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;		None
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  i               2   64[COMRAM] int 
  6330 ;;  i               2   62[COMRAM] int 
  6331 ;;  dword2         12   37[COMRAM] unsigned char [12]
  6332 ;;  dword           9   49[COMRAM] unsigned char [9]
  6333 ;;  temp            4   58[COMRAM] long 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;		None               void
  6336 ;; Registers used:
  6337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6344 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6345 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6346 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6347 ;;Total ram usage:       34 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    7
  6350 ;; This function calls:
  6351 ;;		_PS2_reconfig
  6352 ;;		_PS2_shiftInOut
  6353 ;;		_delay_ms
  6354 ;;		_delay_us
  6355 ;;		_millis
  6356 ;; This function is called by:
  6357 ;;		_RCMode
  6358 ;;		_PS2_init
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text33
  6363  0108BE                     __ptext33:
  6364                           	opt stack 0
  6365  0108BE                     _PS2_readGamepad:
  6366                           	opt stack 21
  6367                           
  6368                           ;PS2.c: 80: long temp = millis() - last_read;
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;incstack = 0
  6372  0108BE  ECCD  F08B         	call	_millis	;wreg free
  6373  0108C2  C006  F021         	movff	?_millis,??_PS2_readGamepad
  6374  0108C6  C007  F022         	movff	?_millis+1,??_PS2_readGamepad+1
  6375  0108CA  C008  F023         	movff	?_millis+2,??_PS2_readGamepad+2
  6376  0108CE  C009  F024         	movff	?_millis+3,??_PS2_readGamepad+3
  6377  0108D2  0100               	movlb	0	; () banked
  6378  0108D4  51AD               	movf	_last_read& (0+255),w,b	;volatile
  6379  0108D6  5C21               	subwf	??_PS2_readGamepad,w,c
  6380  0108D8  6E3B               	movwf	PS2_readGamepad@temp,c
  6381  0108DA  51AE               	movf	(_last_read+1)& (0+255),w,b	;volatile
  6382  0108DC  5822               	subwfb	??_PS2_readGamepad+1,w,c
  6383  0108DE  6E3C               	movwf	PS2_readGamepad@temp+1,c
  6384  0108E0  51AF               	movf	(_last_read+2)& (0+255),w,b	;volatile
  6385  0108E2  5823               	subwfb	??_PS2_readGamepad+2,w,c
  6386  0108E4  6E3D               	movwf	PS2_readGamepad@temp+2,c
  6387  0108E6  51B0               	movf	(_last_read+3)& (0+255),w,b	;volatile
  6388  0108E8  5824               	subwfb	??_PS2_readGamepad+3,w,c
  6389  0108EA  6E3E               	movwf	PS2_readGamepad@temp+3,c
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;PS2.c: 82: if (temp > 1500)
  6393  0108EC  503E               	movf	PS2_readGamepad@temp+3,w,c
  6394  0108EE  0A80               	xorlw	128
  6395  0108F0  0F80               	addlw	128
  6396  0108F2  E108               	bnz	u2525
  6397  0108F4  0E00               	movlw	0
  6398  0108F6  5C3D               	subwf	PS2_readGamepad@temp+2,w,c
  6399  0108F8  E105               	bnz	u2525
  6400  0108FA  0E05               	movlw	5
  6401  0108FC  5C3C               	subwf	PS2_readGamepad@temp+1,w,c
  6402  0108FE  E102               	bnz	u2525
  6403  010900  0EDD               	movlw	221
  6404  010902  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6405  010904                     u2525:
  6406  010904  B0D8               	btfsc	status,0,c
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;PS2.c: 83: {
  6410                           ;PS2.c: 84: PS2_reconfig();
  6411  010906  EC8F  F08B         	call	_PS2_reconfig	;wreg free
  6412                           
  6413                           ;PS2.c: 85: }
  6414                           ;PS2.c: 87: if(temp < read_delay)
  6415  01090A  C059  F021         	movff	_read_delay,??_PS2_readGamepad	;volatile
  6416  01090E  6A22               	clrf	(??_PS2_readGamepad+1)& (0+255),c
  6417  010910  6A23               	clrf	(??_PS2_readGamepad+2)& (0+255),c
  6418  010912  6A24               	clrf	(??_PS2_readGamepad+3)& (0+255),c
  6419  010914  503E               	movf	PS2_readGamepad@temp+3,w,c
  6420  010916  0A80               	xorlw	128
  6421  010918  6E25               	movwf	(??_PS2_readGamepad+4)& (0+255),c
  6422  01091A  5021               	movf	??_PS2_readGamepad,w,c
  6423  01091C  5C3B               	subwf	PS2_readGamepad@temp,w,c
  6424  01091E  5022               	movf	??_PS2_readGamepad+1,w,c
  6425  010920  583C               	subwfb	PS2_readGamepad@temp+1,w,c
  6426  010922  5023               	movf	??_PS2_readGamepad+2,w,c
  6427  010924  583D               	subwfb	PS2_readGamepad@temp+2,w,c
  6428  010926  5024               	movf	??_PS2_readGamepad+3,w,c
  6429  010928  0A80               	xorlw	128
  6430  01092A  5825               	subwfb	(??_PS2_readGamepad+4)& (0+255),w,c
  6431  01092C  E20E               	bc	l4654
  6432                           
  6433                           ;PS2.c: 88: {
  6434                           ;PS2.c: 89: delay_ms(read_delay - temp);
  6435  01092E  503B               	movf	PS2_readGamepad@temp,w,c
  6436  010930  5C59               	subwf	_read_delay,w,c	;volatile
  6437  010932  6E0A               	movwf	delay_ms@x,c
  6438  010934  503C               	movf	PS2_readGamepad@temp+1,w,c
  6439  010936  6A0B               	clrf	delay_ms@x+1,c
  6440  010938  5A0B               	subwfb	delay_ms@x+1,f,c
  6441  01093A  503D               	movf	PS2_readGamepad@temp+2,w,c
  6442  01093C  6A0C               	clrf	delay_ms@x+2,c
  6443  01093E  5A0C               	subwfb	delay_ms@x+2,f,c
  6444  010940  503E               	movf	PS2_readGamepad@temp+3,w,c
  6445  010942  6A0D               	clrf	delay_ms@x+3,c
  6446  010944  5A0D               	subwfb	delay_ms@x+3,f,c
  6447  010946  ECE8  F089         	call	_delay_ms	;wreg free
  6448  01094A                     l4654:
  6449                           
  6450                           ;PS2.c: 90: }
  6451                           ;PS2.c: 92: last_buttons = buttons;
  6452  01094A  C0BD  F0BF         	movff	_buttons,_last_buttons	;volatile
  6453  01094E  C0BE  F0C0         	movff	_buttons+1,_last_buttons+1	;volatile
  6454                           
  6455                           ;PS2.c: 94: PORTFbits.RF2 = 1;
  6456  010952  8485               	bsf	3973,2,c	;volatile
  6457                           
  6458                           ;PS2.c: 95: PORTFbits.RF5 = 1;
  6459  010954  8A85               	bsf	3973,5,c	;volatile
  6460                           
  6461                           ;PS2.c: 96: PORTFbits.RF6 = 0;
  6462  010956  9C85               	bcf	3973,6,c	;volatile
  6463                           
  6464                           ;PS2.c: 98: delay_us(4);
  6465  010958  EC77  F086         	call	PL24	;call to abstracted procedure
  6466  01095C  ECEB  F08A         	call	_delay_us	;wreg free
  6467                           
  6468                           ;PS2.c: 101: char dword[9] = {0x01,0x42,0,0,0x00,0,0,0,0};
  6469  010960  EE20  F0C6         	lfsr	2,PS2_readGamepad@F16091
  6470  010964  EE10  F032         	lfsr	1,PS2_readGamepad@dword
  6471  010968  0E09               	movlw	9
  6472  01096A                     u2541:
  6473  01096A  CFDE FFE6          	movff	postinc2,postinc1
  6474  01096E  2EE8               	decfsz	wreg,f,c
  6475  010970  D7FC               	goto	u2541
  6476                           
  6477                           ;PS2.c: 102: char dword2[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  6478  010972  EE20  F026         	lfsr	2,PS2_readGamepad@dword2
  6479  010976  0E0C               	movlw	12
  6480  010978                     u2551:
  6481  010978  6ADE               	clrf	postinc2,c
  6482  01097A  2EE8               	decfsz	wreg,f,c
  6483  01097C  D7FD               	goto	u2551
  6484                           
  6485                           ;PS2.c: 105: for (int i = 0; i<9; i++)
  6486  01097E  6A3F               	clrf	PS2_readGamepad@i,c
  6487  010980  6A40               	clrf	PS2_readGamepad@i+1,c
  6488  010982                     l4672:
  6489                           
  6490                           ;PS2.c: 106: {
  6491                           ;PS2.c: 107: PS2data[i] = PS2_shiftInOut(dword[i]);
  6492  010982  503F               	movf	PS2_readGamepad@i,w,c
  6493  010984  0100               	movlb	0	; () banked
  6494  010986  0F98               	addlw	low _PS2data	;volatile
  6495  010988  6ED9               	movwf	fsr2l,c
  6496  01098A  6ADA               	clrf	fsr2h,c
  6497  01098C  503F               	movf	PS2_readGamepad@i,w,c
  6498  01098E  0F32               	addlw	low PS2_readGamepad@dword
  6499  010990  6EE1               	movwf	fsr1l,c
  6500  010992  6AE2               	clrf	fsr1h,c
  6501  010994  50E7               	movf	indf1,w,c
  6502  010996  EC1E  F089         	call	_PS2_shiftInOut
  6503  01099A  6EDF               	movwf	indf2,c
  6504  01099C  4A3F               	infsnz	PS2_readGamepad@i,f,c
  6505  01099E  2A40               	incf	PS2_readGamepad@i+1,f,c
  6506  0109A0  5040               	movf	PS2_readGamepad@i+1,w,c
  6507  0109A2  0A80               	xorlw	128
  6508  0109A4  0F80               	addlw	-128
  6509  0109A6  0E09               	movlw	9
  6510  0109A8  B4D8               	btfsc	status,2,c
  6511  0109AA  5C3F               	subwf	PS2_readGamepad@i,w,c
  6512  0109AC  E3EA               	bnc	l4672
  6513                           
  6514                           ;PS2.c: 108: }
  6515                           ;PS2.c: 110: if(PS2data[1] == 0x79)
  6516  0109AE  0100               	movlb	0	; () banked
  6517  0109B0  5199               	movf	(_PS2data+1)& (0+255),w,b	;volatile
  6518  0109B2  0A79               	xorlw	121
  6519  0109B4  E118               	bnz	l931
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;PS2.c: 111: {
  6523                           ;PS2.c: 112: for (int i = 0; i<12; i++)
  6524  0109B6  6A41               	clrf	PS2_readGamepad@i_2572,c
  6525  0109B8  6A42               	clrf	PS2_readGamepad@i_2572+1,c
  6526  0109BA                     l4686:
  6527                           
  6528                           ;PS2.c: 113: {
  6529                           ;PS2.c: 114: PS2data[i+9] = PS2_shiftInOut(dword2[i]);
  6530  0109BA  5041               	movf	PS2_readGamepad@i_2572,w,c
  6531  0109BC  0100               	movlb	0	; () banked
  6532  0109BE  0FA1               	addlw	low (_PS2data+9)	;volatile
  6533  0109C0  6ED9               	movwf	fsr2l,c
  6534  0109C2  6ADA               	clrf	fsr2h,c
  6535  0109C4  5041               	movf	PS2_readGamepad@i_2572,w,c
  6536  0109C6  0F26               	addlw	low PS2_readGamepad@dword2
  6537  0109C8  6EE1               	movwf	fsr1l,c
  6538  0109CA  6AE2               	clrf	fsr1h,c
  6539  0109CC  50E7               	movf	indf1,w,c
  6540  0109CE  EC1E  F089         	call	_PS2_shiftInOut
  6541  0109D2  6EDF               	movwf	indf2,c
  6542  0109D4  4A41               	infsnz	PS2_readGamepad@i_2572,f,c
  6543  0109D6  2A42               	incf	PS2_readGamepad@i_2572+1,f,c
  6544  0109D8  5042               	movf	PS2_readGamepad@i_2572+1,w,c
  6545  0109DA  0A80               	xorlw	128
  6546  0109DC  0F80               	addlw	-128
  6547  0109DE  0E0C               	movlw	12
  6548  0109E0  B4D8               	btfsc	status,2,c
  6549  0109E2  5C41               	subwf	PS2_readGamepad@i_2572,w,c
  6550  0109E4  E3EA               	bnc	l4686
  6551  0109E6                     l931:
  6552                           
  6553                           ;PS2.c: 115: }
  6554                           ;PS2.c: 116: }
  6555                           ;PS2.c: 118: PORTFbits.RF6 = 1;
  6556  0109E6  8C85               	bsf	3973,6,c	;volatile
  6557                           
  6558                           ;PS2.c: 120: buttons = *(unsigned int*)(PS2data+3);
  6559  0109E8  0100               	movlb	0	; () banked
  6560  0109EA  EE20  F09B         	lfsr	2,_PS2data+3	;volatile
  6561  0109EE  CFDE F0BD          	movff	postinc2,_buttons	;volatile
  6562  0109F2  CFDD F0BE          	movff	postdec2,_buttons+1	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;PS2.c: 121: last_read = millis();
  6566  0109F6  ECCD  F08B         	call	_millis	;wreg free
  6567  0109FA  C006  F0AD         	movff	?_millis,_last_read	;volatile
  6568  0109FE  C007  F0AE         	movff	?_millis+1,_last_read+1	;volatile
  6569  010A02  C008  F0AF         	movff	?_millis+2,_last_read+2	;volatile
  6570  010A06  C009  F0B0         	movff	?_millis+3,_last_read+3	;volatile
  6571  010A0A  0012               	return	
  6572  010A0C                     __end_of_PS2_readGamepad:
  6573                           	opt stack 0
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           intcon2	equ	0xFF1
  6582                           intcon3	equ	0xFF0
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           indf1	equ	0xFE7
  6586                           postinc1	equ	0xFE6
  6587                           postdec1	equ	0xFE5
  6588                           fsr1h	equ	0xFE2
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _PS2_reconfig *****************
  6598 ;; Defined at:
  6599 ;;		line 124 in file "PS2.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : F/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;Total ram usage:        0 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    6
  6620 ;; This function calls:
  6621 ;;		_PS2_sendCommandString
  6622 ;; This function is called by:
  6623 ;;		_PS2_readGamepad
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text34
  6628  01171E                     __ptext34:
  6629                           	opt stack 0
  6630  01171E                     _PS2_reconfig:
  6631                           	opt stack 21
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;PS2.c: 126: PS2_sendCommandString(enter_config, sizeof(enter_config));
  6635                           
  6636                           ;incstack = 0
  6637  01171E  0E05               	movlw	5
  6638  011720  6E1A               	movwf	PS2_sendCommandString@len,c
  6639  011722  0EEA               	movlw	_enter_config& (0+255)
  6640  011724  EC38  F08A         	call	_PS2_sendCommandString
  6641                           
  6642                           ;PS2.c: 127: PS2_sendCommandString(set_mode, sizeof(set_mode));
  6643  011728  0E09               	movlw	9
  6644  01172A  6E1A               	movwf	PS2_sendCommandString@len,c
  6645  01172C  0100               	movlb	0	; () banked
  6646  01172E  0EE1               	movlw	_set_mode& (0+255)
  6647  011730  EC38  F08A         	call	_PS2_sendCommandString
  6648                           
  6649                           ;PS2.c: 128: PS2_sendCommandString(exit_config, sizeof(exit_config));
  6650  011734  0E09               	movlw	9
  6651  011736  6E1A               	movwf	PS2_sendCommandString@len,c
  6652  011738  0100               	movlb	0	; () banked
  6653  01173A  0ED8               	movlw	_exit_config& (0+255)
  6654  01173C  EF38  F08A         	goto	_PS2_sendCommandString
  6655  011740                     __end_of_PS2_reconfig:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           intcon2	equ	0xFF1
  6665                           intcon3	equ	0xFF0
  6666                           postinc0	equ	0xFEE
  6667                           wreg	equ	0xFE8
  6668                           indf1	equ	0xFE7
  6669                           postinc1	equ	0xFE6
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _PS2_sendCommandString *****************
  6681 ;; Defined at:
  6682 ;;		line 131 in file "PS2.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  string          1    wreg     PTR unsigned char 
  6685 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6686 ;;  len             1   25[COMRAM] unsigned char 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  string          1   31[COMRAM] PTR unsigned char 
  6689 ;;		 -> exit_config(9), set_mode(9), enter_config(5), 
  6690 ;;  y               2   29[COMRAM] int 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;		None               void
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : F/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6700 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6701 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6702 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6703 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;Total ram usage:        7 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    5
  6707 ;; This function calls:
  6708 ;;		_PS2_shiftInOut
  6709 ;;		_delay_ms
  6710 ;; This function is called by:
  6711 ;;		_PS2_init
  6712 ;;		_PS2_reconfig
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text35
  6717  011470                     __ptext35:
  6718                           	opt stack 0
  6719  011470                     _PS2_sendCommandString:
  6720                           	opt stack 21
  6721                           
  6722                           ;incstack = 0
  6723                           ;PS2_sendCommandString@string stored from wreg
  6724  011470  6E20               	movwf	PS2_sendCommandString@string,c
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;PS2.c: 133: PORTFbits.RF6 = 0;
  6728  011472  9C85               	bcf	3973,6,c	;volatile
  6729                           
  6730                           ;PS2.c: 134: for (int y=0; y < len; y++)
  6731  011474  6A1E               	clrf	PS2_sendCommandString@y,c
  6732  011476  6A1F               	clrf	PS2_sendCommandString@y+1,c
  6733  011478  D009               	goto	l4434
  6734  01147A                     l4430:
  6735                           
  6736                           ;PS2.c: 135: {
  6737                           ;PS2.c: 136: PS2_shiftInOut(string[y]);
  6738  01147A  5020               	movf	PS2_sendCommandString@string,w,c
  6739  01147C  241E               	addwf	PS2_sendCommandString@y,w,c
  6740  01147E  6ED9               	movwf	fsr2l,c
  6741  011480  6ADA               	clrf	fsr2h,c
  6742  011482  50DF               	movf	indf2,w,c
  6743  011484  EC1E  F089         	call	_PS2_shiftInOut
  6744  011488  4A1E               	infsnz	PS2_sendCommandString@y,f,c
  6745  01148A  2A1F               	incf	PS2_sendCommandString@y+1,f,c
  6746  01148C                     l4434:
  6747  01148C  501A               	movf	PS2_sendCommandString@len,w,c
  6748  01148E  6E1B               	movwf	??_PS2_sendCommandString& (0+255),c
  6749  011490  6A1C               	clrf	(??_PS2_sendCommandString+1)& (0+255),c
  6750  011492  501F               	movf	PS2_sendCommandString@y+1,w,c
  6751  011494  0A80               	xorlw	128
  6752  011496  6E1D               	movwf	(??_PS2_sendCommandString+2)& (0+255),c
  6753  011498  501B               	movf	??_PS2_sendCommandString,w,c
  6754  01149A  5C1E               	subwf	PS2_sendCommandString@y,w,c
  6755  01149C  501C               	movf	??_PS2_sendCommandString+1,w,c
  6756  01149E  0A80               	xorlw	128
  6757  0114A0  581D               	subwfb	(??_PS2_sendCommandString+2)& (0+255),w,c
  6758  0114A2  E3EB               	bnc	l4430
  6759                           
  6760                           ;PS2.c: 137: }
  6761                           ;PS2.c: 139: PORTFbits.RF6 = 1;
  6762  0114A4  8C85               	bsf	3973,6,c	;volatile
  6763                           
  6764                           ;PS2.c: 140: delay_ms(read_delay);
  6765  0114A6  5059               	movf	_read_delay,w,c	;volatile
  6766  0114A8  6E0A               	movwf	delay_ms@x,c
  6767  0114AA  6A0B               	clrf	delay_ms@x+1,c
  6768  0114AC  6A0C               	clrf	delay_ms@x+2,c
  6769  0114AE  6A0D               	clrf	delay_ms@x+3,c
  6770  0114B0  EFE8  F089         	goto	_delay_ms	;wreg free
  6771  0114B4                     __end_of_PS2_sendCommandString:
  6772                           	opt stack 0
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           intcon2	equ	0xFF1
  6781                           intcon3	equ	0xFF0
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf1	equ	0xFE7
  6785                           postinc1	equ	0xFE6
  6786                           postdec1	equ	0xFE5
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _PS2_shiftInOut *****************
  6797 ;; Defined at:
  6798 ;;		line 143 in file "PS2.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  byte            1    wreg     unsigned char 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  byte            1   11[COMRAM] unsigned char 
  6803 ;;  i               1   13[COMRAM] unsigned char 
  6804 ;;  tmp             1   12[COMRAM] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      unsigned char 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6817 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6818 ;;Total ram usage:        5 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    4
  6821 ;; This function calls:
  6822 ;;		_delay_us
  6823 ;; This function is called by:
  6824 ;;		_PS2_init
  6825 ;;		_PS2_readGamepad
  6826 ;;		_PS2_sendCommandString
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text36
  6831  01123C                     __ptext36:
  6832                           	opt stack 0
  6833  01123C                     _PS2_shiftInOut:
  6834                           	opt stack 23
  6835                           
  6836                           ;incstack = 0
  6837                           ;PS2_shiftInOut@byte stored from wreg
  6838  01123C  6E0C               	movwf	PS2_shiftInOut@byte,c
  6839                           
  6840                           ;PS2.c: 145: unsigned char tmp = 0;
  6841  01123E  6A0D               	clrf	PS2_shiftInOut@tmp,c
  6842                           
  6843                           ;PS2.c: 146: for(unsigned char i = 0; i < 8; i++)
  6844  011240  6A0E               	clrf	PS2_shiftInOut@i,c
  6845  011242                     l4408:
  6846                           
  6847                           ;PS2.c: 147: {
  6848                           ;PS2.c: 148: if((byte & (1<<i)))
  6849  011242  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6850  011246  0E01               	movlw	1
  6851  011248  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6852  01124A  2A0A               	incf	??_PS2_shiftInOut,f,c
  6853  01124C  D002               	goto	u2194
  6854  01124E                     u2195:
  6855  01124E  90D8               	bcf	status,0,c
  6856  011250  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6857  011252                     u2194:
  6858  011252  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6859  011254  D7FC               	goto	u2195
  6860  011256  500B               	movf	??_PS2_shiftInOut+1,w,c
  6861  011258  140C               	andwf	PS2_shiftInOut@byte,w,c
  6862  01125A  E002               	bz	l948
  6863                           
  6864                           ;PS2.c: 149: {
  6865                           ;PS2.c: 150: PORTFbits.RF2 = 1;
  6866  01125C  8485               	bsf	3973,2,c	;volatile
  6867                           
  6868                           ;PS2.c: 151: }
  6869  01125E  D001               	goto	l949
  6870  011260                     l948:
  6871                           
  6872                           ;PS2.c: 152: else
  6873                           ;PS2.c: 153: {
  6874                           ;PS2.c: 154: PORTFbits.RF2 = 0;
  6875  011260  9485               	bcf	3973,2,c	;volatile
  6876  011262                     l949:
  6877                           
  6878                           ;PS2.c: 155: }
  6879                           ;PS2.c: 157: PORTFbits.RF5 = 0;
  6880  011262  9A85               	bcf	3973,5,c	;volatile
  6881                           
  6882                           ;PS2.c: 158: delay_us(5);
  6883  011264  0E05               	movlw	5
  6884  011266  6E06               	movwf	delay_us@x,c
  6885  011268  0E00               	movlw	0
  6886  01126A  6A07               	clrf	delay_us@x+1,c
  6887  01126C  6A08               	clrf	delay_us@x+2,c
  6888  01126E  6A09               	clrf	delay_us@x+3,c
  6889  011270  ECEB  F08A         	call	_delay_us	;wreg free
  6890                           
  6891                           ;PS2.c: 160: if(PORTFbits.RF3 == 1)
  6892  011274  A685               	btfss	3973,3,c	;volatile
  6893  011276  D00C               	goto	l4418
  6894                           
  6895                           ;PS2.c: 161: {
  6896                           ;PS2.c: 162: tmp |= (0x1 << i);;
  6897  011278  C00E  F00A         	movff	PS2_shiftInOut@i,??_PS2_shiftInOut
  6898  01127C  0E01               	movlw	1
  6899  01127E  6E0B               	movwf	(??_PS2_shiftInOut+1)& (0+255),c
  6900  011280  2A0A               	incf	??_PS2_shiftInOut,f,c
  6901  011282  D002               	goto	u2224
  6902  011284                     u2225:
  6903  011284  90D8               	bcf	status,0,c
  6904  011286  360B               	rlcf	??_PS2_shiftInOut+1,f,c
  6905  011288                     u2224:
  6906  011288  2E0A               	decfsz	??_PS2_shiftInOut,f,c
  6907  01128A  D7FC               	goto	u2225
  6908  01128C  500B               	movf	??_PS2_shiftInOut+1,w,c
  6909  01128E  120D               	iorwf	PS2_shiftInOut@tmp,f,c
  6910  011290                     l4418:
  6911                           
  6912                           ;PS2.c: 163: }
  6913                           ;PS2.c: 165: PORTFbits.RF5 = 1;
  6914  011290  8A85               	bsf	3973,5,c	;volatile
  6915  011292  2A0E               	incf	PS2_shiftInOut@i,f,c
  6916  011294  0E07               	movlw	7
  6917  011296  640E               	cpfsgt	PS2_shiftInOut@i,c
  6918  011298  D7D4               	goto	l4408
  6919                           
  6920                           ;PS2.c: 166: }
  6921                           ;PS2.c: 167: PORTFbits.RF2 = 1;
  6922  01129A  8485               	bsf	3973,2,c	;volatile
  6923                           
  6924                           ;PS2.c: 168: delay_us(4);
  6925  01129C  EC77  F086         	call	PL24	;call to abstracted procedure
  6926  0112A0  ECEB  F08A         	call	_delay_us	;wreg free
  6927                           
  6928                           ;PS2.c: 169: return tmp;
  6929  0112A4  500D               	movf	PS2_shiftInOut@tmp,w,c
  6930  0112A6  0012               	return	
  6931  0112A8                     __end_of_PS2_shiftInOut:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           prodh	equ	0xFF4
  6938                           prodl	equ	0xFF3
  6939                           intcon	equ	0xFF2
  6940                           intcon2	equ	0xFF1
  6941                           intcon3	equ	0xFF0
  6942                           postinc0	equ	0xFEE
  6943                           wreg	equ	0xFE8
  6944                           indf1	equ	0xFE7
  6945                           postinc1	equ	0xFE6
  6946                           postdec1	equ	0xFE5
  6947                           fsr1h	equ	0xFE2
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           postinc2	equ	0xFDE
  6951                           postdec2	equ	0xFDD
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8
  6955                           
  6956 ;; *************** function _PS2_analog *****************
  6957 ;; Defined at:
  6958 ;;		line 242 in file "PS2.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  button          1    wreg     unsigned char 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  button          1    5[COMRAM] unsigned char 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      unsigned char 
  6965 ;; Registers used:
  6966 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : F/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6976 ;;Total ram usage:        1 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    3
  6979 ;; This function calls:
  6980 ;;		Nothing
  6981 ;; This function is called by:
  6982 ;;		_RCMode
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	text37
  6987  0117BC                     __ptext37:
  6988                           	opt stack 0
  6989  0117BC                     _PS2_analog:
  6990                           	opt stack 25
  6991                           
  6992                           ;incstack = 0
  6993                           ;PS2_analog@button stored from wreg
  6994  0117BC  6E06               	movwf	PS2_analog@button,c
  6995                           
  6996                           ;PS2.c: 244: return PS2data[button];
  6997  0117BE  5006               	movf	PS2_analog@button,w,c
  6998  0117C0  0100               	movlb	0	; () banked
  6999  0117C2  0F98               	addlw	low _PS2data	;volatile
  7000  0117C4  6ED9               	movwf	fsr2l,c
  7001  0117C6  6ADA               	clrf	fsr2h,c
  7002  0117C8  50DF               	movf	indf2,w,c
  7003                           
  7004                           ; BSR set to: 0
  7005  0117CA  0012               	return	
  7006  0117CC                     __end_of_PS2_analog:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           indf1	equ	0xFE7
  7020                           postinc1	equ	0xFE6
  7021                           postdec1	equ	0xFE5
  7022                           fsr1h	equ	0xFE2
  7023                           fsr1l	equ	0xFE1
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function _LCD_printString *****************
  7032 ;; Defined at:
  7033 ;;		line 312 in file "LCD.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  x               1    wreg     unsigned char 
  7036 ;;  y               1   33[COMRAM] unsigned char 
  7037 ;;  input           2   34[COMRAM] PTR unsigned char 
  7038 ;;		 -> STR_14(17), STR_13(15), STR_12(18), STR_11(16), 
  7039 ;;		 -> STR_10(15), STR_9(17), STR_8(15), STR_7(18), 
  7040 ;;		 -> STR_6(17), STR_5(16), STR_4(18), STR_3(18), 
  7041 ;;		 -> LCD_printBin@string(9), LCD_printVal@temp(3), LCD_printChar@string(2), 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  x               1   40[BANK0 ] unsigned char 
  7044 ;;  tempString     20    0[BANK0 ] unsigned char [20]
  7045 ;;  val             2   41[BANK0 ] int 
  7046 ;;  tempString      2   43[BANK0 ] unsigned char [2]
  7047 ;;  i               2   48[BANK0 ] int 
  7048 ;;  i               2   46[BANK0 ] int 
  7049 ;;  string         20   20[BANK0 ] unsigned char [20]
  7050 ;;  aptr            1   45[BANK0 ] PTR void [1]
  7051 ;;		 -> ?_LCD_printString(0), 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;		None               void
  7054 ;; Registers used:
  7055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : F/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7061 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7062 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7064 ;;      Totals:         9      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;Total ram usage:       59 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    6
  7068 ;; This function calls:
  7069 ;;		_LCD_placeCursor
  7070 ;;		_delay_ms
  7071 ;;		_delay_us
  7072 ;;		_sprintf
  7073 ;;		_strcat
  7074 ;; This function is called by:
  7075 ;;		_selfTest
  7076 ;;		_wanderMode
  7077 ;;		_competitionMode
  7078 ;;		_RCMode
  7079 ;;		_main
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text38
  7084  010000                     __ptext38:
  7085                           	opt stack 0
  7086  010000                     _LCD_printString:
  7087                           	opt stack 22
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;incstack = 0
  7091                           ;LCD_printString@x stored from wreg
  7092  010000  0100               	movlb	0	; () banked
  7093  010002  6F88               	movwf	LCD_printString@x& (0+255),b
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;LCD.c: 314: char string[20] = "\0";
  7097  010004  EE20  F074         	lfsr	2,LCD_printString@string
  7098  010008  0E14               	movlw	20
  7099  01000A                     u2701:
  7100  01000A  6ADE               	clrf	postinc2,c
  7101  01000C  2EE8               	decfsz	wreg,f,c
  7102  01000E  D7FD               	goto	u2701
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;LCD.c: 316: va_list aptr;
  7106                           ;LCD.c: 317: *aptr = __va_start();
  7107  010010  0E25               	movlw	low (?_LCD_printString+3)
  7108  010012  6F8D               	movwf	LCD_printString@aptr& (0+255),b
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;LCD.c: 319: LCD_placeCursor(x,y);
  7112  010014  C022  F01A         	movff	LCD_printString@y,LCD_placeCursor@y
  7113  010018  5188               	movf	LCD_printString@x& (0+255),w,b
  7114  01001A  ECAD  F082         	call	_LCD_placeCursor
  7115                           
  7116                           ;LCD.c: 322: for(int i = 0; input[i] != '\0' && i < 200; i++)
  7117  01001E  0100               	movlb	0	; () banked
  7118  010020  6B8E               	clrf	LCD_printString@i& (0+255),b
  7119  010022  6B8F               	clrf	(LCD_printString@i+1)& (0+255),b
  7120  010024  D07B               	goto	l5048
  7121  010026                     l5024:
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;LCD.c: 323: {
  7125                           ;LCD.c: 324: if(input[i] == '%')
  7126  010026  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  7127  01002A  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  7128  01002E  D998               	call	PL12	;call to abstracted procedure
  7129  010030  64F7               	cpfsgt	tblptrh,c
  7130  010032  D003               	bra	u2717
  7131  010034  0008               	tblrd		*
  7132  010036  50F5               	movf	tablat,w,c
  7133  010038  D005               	bra	u2710
  7134  01003A                     u2717:
  7135  01003A  CFF6 FFE1          	movff	tblptrl,fsr1l
  7136  01003E  CFF7 FFE2          	movff	tblptrh,fsr1h
  7137  010042  50E7               	movf	indf1,w,c
  7138  010044                     u2710:
  7139  010044  0A25               	xorlw	37
  7140  010046  E14C               	bnz	l5040
  7141                           
  7142                           ;LCD.c: 325: {
  7143                           ;LCD.c: 326: if(input[i+1] == '%')
  7144  010048  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  7145  01004C  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  7146  010050  0100               	movlb	0	; () banked
  7147  010052  518E               	movf	LCD_printString@i& (0+255),w,b
  7148  010054  2629               	addwf	??_LCD_printString,f,c
  7149  010056  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7150  010058  222A               	addwfc	??_LCD_printString+1,f,c
  7151  01005A  2A29               	incf	??_LCD_printString,f,c
  7152  01005C  0E00               	movlw	0
  7153  01005E  222A               	addwfc	??_LCD_printString+1,f,c
  7154  010060  C029  FFF6         	movff	??_LCD_printString,tblptrl
  7155  010064  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  7156  010068  0E00               	movlw	low (__mediumconst shr (0+16))
  7157  01006A  6EF8               	movwf	tblptru,c
  7158  01006C  0E0D               	movlw	(high __ramtop+-1)
  7159  01006E  64F7               	cpfsgt	tblptrh,c
  7160  010070  D003               	bra	u2737
  7161  010072  0008               	tblrd		*
  7162  010074  50F5               	movf	tablat,w,c
  7163  010076  D005               	bra	u2730
  7164  010078                     u2737:
  7165  010078  CFF6 FFE1          	movff	tblptrl,fsr1l
  7166  01007C  CFF7 FFE2          	movff	tblptrh,fsr1h
  7167  010080  50E7               	movf	indf1,w,c
  7168  010082                     u2730:
  7169  010082  0A25               	xorlw	37
  7170  010084  E10B               	bnz	l5030
  7171                           
  7172                           ;LCD.c: 327: {
  7173                           ;LCD.c: 328: strcat(string, "%");
  7174  010086  6A07               	clrf	strcat@to+1,c
  7175  010088  0100               	movlb	0	; () banked
  7176  01008A  0E74               	movlw	low LCD_printString@string
  7177  01008C  6E06               	movwf	strcat@to,c
  7178  01008E  0EFF               	movlw	high STR_1
  7179  010090  6E09               	movwf	strcat@from+1,c
  7180  010092  0EFC               	movlw	low STR_1
  7181  010094  6E08               	movwf	strcat@from,c
  7182  010096  ECBC  F089         	call	_strcat	;wreg free
  7183                           
  7184                           ;LCD.c: 329: }
  7185  01009A  D01E               	goto	l5038
  7186  01009C                     l5030:
  7187                           
  7188                           ;LCD.c: 330: else
  7189                           ;LCD.c: 331: {
  7190                           ;LCD.c: 332: int val = (*(int *)__va_arg((*(int **)aptr), (int)0));
  7191  01009C  0100               	movlb	0	; () banked
  7192  01009E  518D               	movf	LCD_printString@aptr& (0+255),w,b
  7193  0100A0  6ED9               	movwf	fsr2l,c
  7194  0100A2  6ADA               	clrf	fsr2h,c
  7195  0100A4  CFDE F089          	movff	postinc2,LCD_printString@val
  7196  0100A8  CFDD F08A          	movff	postdec2,LCD_printString@val+1
  7197                           
  7198                           ; BSR set to: 0
  7199  0100AC  0E02               	movlw	2
  7200  0100AE  278D               	addwf	LCD_printString@aptr& (0+255),f,b
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;LCD.c: 333: char tempString[20];
  7204                           ;LCD.c: 334: sprintf(tempString,"%i",val);
  7205  0100B0  0EFF               	movlw	high (STR_8+12)
  7206  0100B2  6E13               	movwf	sprintf@f+1,c
  7207  0100B4  0EDD               	movlw	low (STR_8+12)
  7208  0100B6  6E12               	movwf	sprintf@f,c
  7209  0100B8  C089  F014         	movff	LCD_printString@val,?_sprintf+2
  7210  0100BC  C08A  F015         	movff	LCD_printString@val+1,?_sprintf+3
  7211  0100C0  0E60               	movlw	LCD_printString@tempString& (0+255)
  7212  0100C2  EC06  F085         	call	_sprintf
  7213                           
  7214                           ;LCD.c: 335: strcat(string, tempString);
  7215  0100C6  6A07               	clrf	strcat@to+1,c
  7216  0100C8  0100               	movlb	0	; () banked
  7217  0100CA  0E74               	movlw	low LCD_printString@string
  7218  0100CC  6E06               	movwf	strcat@to,c
  7219  0100CE  6A09               	clrf	strcat@from+1,c
  7220  0100D0  0E60               	movlw	low LCD_printString@tempString
  7221  0100D2  6E08               	movwf	strcat@from,c
  7222  0100D4  ECBC  F089         	call	_strcat	;wreg free
  7223  0100D8                     l5038:
  7224                           
  7225                           ;LCD.c: 336: }
  7226                           ;LCD.c: 337: i++;
  7227  0100D8  0100               	movlb	0	; () banked
  7228  0100DA  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  7229  0100DC  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  7230                           
  7231                           ;LCD.c: 338: }
  7232  0100DE  D01B               	goto	l5046
  7233  0100E0                     l5040:
  7234                           
  7235                           ;LCD.c: 339: else
  7236                           ;LCD.c: 340: {
  7237                           ;LCD.c: 341: char tempString[2];
  7238                           ;LCD.c: 342: tempString[0] = input[i];
  7239  0100E0  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  7240  0100E4  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  7241  0100E8  0100               	movlb	0	; () banked
  7242  0100EA  D93A               	call	PL12	;call to abstracted procedure
  7243  0100EC  64F7               	cpfsgt	tblptrh,c
  7244  0100EE  D003               	bra	u2757
  7245  0100F0  0008               	tblrd		*
  7246  0100F2  50F5               	movf	tablat,w,c
  7247  0100F4  D005               	bra	u2750
  7248  0100F6                     u2757:
  7249  0100F6  CFF6 FFE1          	movff	tblptrl,fsr1l
  7250  0100FA  CFF7 FFE2          	movff	tblptrh,fsr1h
  7251  0100FE  50E7               	movf	indf1,w,c
  7252  010100                     u2750:
  7253  010100  0100               	movlb	0	; () banked
  7254  010102  6F8B               	movwf	LCD_printString@tempString_590& (0+255),b
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;LCD.c: 343: tempString[1] = '\0';
  7258  010104  6B8C               	clrf	(LCD_printString@tempString_590+1)& (0+255),b
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;LCD.c: 344: strcat(string,tempString);
  7262  010106  6A07               	clrf	strcat@to+1,c
  7263  010108  0E74               	movlw	low LCD_printString@string
  7264  01010A  6E06               	movwf	strcat@to,c
  7265  01010C  6A09               	clrf	strcat@from+1,c
  7266  01010E  0E8B               	movlw	low LCD_printString@tempString_590
  7267  010110  6E08               	movwf	strcat@from,c
  7268  010112  ECBC  F089         	call	_strcat	;wreg free
  7269  010116                     l5046:
  7270  010116  0100               	movlb	0	; () banked
  7271  010118  4B8E               	infsnz	LCD_printString@i& (0+255),f,b
  7272  01011A  2B8F               	incf	(LCD_printString@i+1)& (0+255),f,b
  7273  01011C                     l5048:
  7274                           
  7275                           ; BSR set to: 0
  7276  01011C  C023  F029         	movff	LCD_printString@input,??_LCD_printString
  7277  010120  C024  F02A         	movff	LCD_printString@input+1,??_LCD_printString+1
  7278  010124  D91D               	call	PL12	;call to abstracted procedure
  7279  010126  64F7               	cpfsgt	tblptrh,c
  7280  010128  D003               	bra	u2767
  7281  01012A  0008               	tblrd		*
  7282  01012C  50F5               	movf	tablat,w,c
  7283  01012E  D005               	bra	u2760
  7284  010130                     u2767:
  7285  010130  CFF6 FFE1          	movff	tblptrl,fsr1l
  7286  010134  CFF7 FFE2          	movff	tblptrh,fsr1h
  7287  010138  50E7               	movf	indf1,w,c
  7288  01013A                     u2760:
  7289  01013A  0900               	iorlw	0
  7290  01013C  E009               	bz	l108
  7291  01013E  0100               	movlb	0	; () banked
  7292  010140  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7293  010142  0A80               	xorlw	128
  7294  010144  0F80               	addlw	-128
  7295  010146  0EC8               	movlw	200
  7296  010148  B4D8               	btfsc	status,2,c
  7297  01014A  5D8E               	subwf	LCD_printString@i& (0+255),w,b
  7298  01014C  E201 D76B          	bnc	l5024
  7299  010150                     l108:
  7300                           
  7301                           ;LCD.c: 345: }
  7302                           ;LCD.c: 346: }
  7303                           ;LCD.c: 348: ;
  7304                           ;LCD.c: 351: for(int i = 0; string[i] != '\0' && i < 200; i++)
  7305  010150  0100               	movlb	0	; () banked
  7306  010152  6B90               	clrf	LCD_printString@i_591& (0+255),b
  7307  010154  6B91               	clrf	(LCD_printString@i_591+1)& (0+255),b
  7308  010156  D099               	goto	l5102
  7309  010158                     l5052:
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;LCD.c: 352: {
  7313                           ;LCD.c: 353: if(string[i] == '\n')
  7314  010158  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7315  01015A  0F74               	addlw	low LCD_printString@string
  7316  01015C  6ED9               	movwf	fsr2l,c
  7317  01015E  6ADA               	clrf	fsr2h,c
  7318  010160  0E0A               	movlw	10
  7319  010162  62DF               	cpfseq	indf2,c
  7320  010164  D006               	goto	l5056
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;LCD.c: 354: {
  7324                           ;LCD.c: 355: LCD_placeCursor(0,y+1);
  7325  010166  2822               	incf	LCD_printString@y,w,c
  7326  010168  6E1A               	movwf	LCD_placeCursor@y,c
  7327  01016A  0E00               	movlw	0
  7328  01016C  ECAD  F082         	call	_LCD_placeCursor
  7329                           
  7330                           ;LCD.c: 356: }
  7331  010170  D089               	goto	l5100
  7332  010172                     l5056:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;LCD.c: 357: else
  7336                           ;LCD.c: 358: {
  7337                           ;LCD.c: 359: delay_ms(2);
  7338  010172  D902               	call	PL38	;call to abstracted procedure
  7339  010174  ECE8  F089         	call	_delay_ms	;wreg free
  7340                           
  7341                           ;LCD.c: 360: PORTDbits.RD0 = 1;
  7342  010178  8083               	bsf	3971,0,c	;volatile
  7343                           
  7344                           ;LCD.c: 362: switch(mode)
  7345  01017A  D07B               	goto	l5094
  7346  01017C                     l5060:
  7347                           
  7348                           ;LCD.c: 365: delay_us(40);;
  7349  01017C  EC53  F084         	call	PL2	;call to abstracted procedure
  7350  010180  ECEB  F08A         	call	_delay_us	;wreg free
  7351                           
  7352                           ;LCD.c: 366: PORTEbits.RE4 = 1;
  7353  010184  8884               	bsf	3972,4,c	;volatile
  7354                           
  7355                           ;LCD.c: 367: { PORTHbits.RH5 = (((string[i] >> 4) >> 3) & 1); PORTEbits.RE1 = (((string[
      +                          i] >> 4) >> 2) & 1); PORTEbits.RE0 = (((string[i] >> 4) >> 1) & 1); PORTEbits.RE2 = ((st
      +                          ring[i] >> 4) & 1); };
  7356  010186  0100               	movlb	0	; () banked
  7357  010188  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7358  01018A  0F74               	addlw	low LCD_printString@string
  7359  01018C  6ED9               	movwf	fsr2l,c
  7360                           
  7361                           ; BSR set to: 0
  7362                           
  7363                           ; BSR set to: 0
  7364                           
  7365                           ; BSR set to: 0
  7366  01018E  D88D               	call	PL4	;call to abstracted procedure
  7367                           
  7368                           ;LCD.c: 368: delay_us(40);;
  7369  010190  EC53  F084         	call	PL2	;call to abstracted procedure
  7370  010194  ECEB  F08A         	call	_delay_us	;wreg free
  7371                           
  7372                           ;LCD.c: 369: PORTEbits.RE4 = 0;
  7373  010198  9884               	bcf	3972,4,c	;volatile
  7374                           
  7375                           ;LCD.c: 371: delay_us(40);;
  7376  01019A  EC53  F084         	call	PL2	;call to abstracted procedure
  7377  01019E  ECEB  F08A         	call	_delay_us	;wreg free
  7378                           
  7379                           ;LCD.c: 372: PORTEbits.RE4 = 1;
  7380  0101A2  8884               	bsf	3972,4,c	;volatile
  7381                           
  7382                           ;LCD.c: 373: { PORTHbits.RH5 = (((string[i] & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((strin
      +                          g[i] & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((string[i] & 0x0F) >> 1) & 1); PORTEbits.RE2 
      +                          = ((string[i] & 0x0F) & 1); };
  7383  0101A4  0100               	movlb	0	; () banked
  7384  0101A6  D8CB               	call	PL6	;call to abstracted procedure
  7385  0101A8  90D8               	bcf	status,0,c
  7386  0101AA  3229               	rrcf	??_LCD_printString,f,c
  7387  0101AC  90D8               	bcf	status,0,c
  7388  0101AE  3229               	rrcf	??_LCD_printString,f,c
  7389  0101B0  0E01               	movlw	1
  7390  0101B2  1629               	andwf	??_LCD_printString,f,c
  7391  0101B4  3A29               	swapf	??_LCD_printString,f,c
  7392  0101B6  4629               	rlncf	??_LCD_printString,f,c
  7393  0101B8  5087               	movf	3975,w,c	;volatile
  7394  0101BA  1829               	xorwf	??_LCD_printString,w,c
  7395  0101BC  0BDF               	andlw	-33
  7396  0101BE  1829               	xorwf	??_LCD_printString,w,c
  7397  0101C0  6E87               	movwf	3975,c	;volatile
  7398                           
  7399                           ; BSR set to: 0
  7400  0101C2  D8BD               	call	PL6	;call to abstracted procedure
  7401  0101C4  90D8               	bcf	status,0,c
  7402  0101C6  3229               	rrcf	??_LCD_printString,f,c
  7403  0101C8  0E01               	movlw	1
  7404  0101CA  1629               	andwf	??_LCD_printString,f,c
  7405  0101CC  4629               	rlncf	??_LCD_printString,f,c
  7406  0101CE  5084               	movf	3972,w,c	;volatile
  7407  0101D0  1829               	xorwf	??_LCD_printString,w,c
  7408  0101D2  0BFD               	andlw	-3
  7409  0101D4  1829               	xorwf	??_LCD_printString,w,c
  7410  0101D6  6E84               	movwf	3972,c	;volatile
  7411                           
  7412                           ; BSR set to: 0
  7413  0101D8  D8B2               	call	PL6	;call to abstracted procedure
  7414  0101DA  0E01               	movlw	1
  7415  0101DC  1629               	andwf	??_LCD_printString,f,c
  7416  0101DE  5084               	movf	3972,w,c	;volatile
  7417  0101E0  1829               	xorwf	??_LCD_printString,w,c
  7418  0101E2  0BFE               	andlw	-2
  7419  0101E4  1829               	xorwf	??_LCD_printString,w,c
  7420  0101E6  6E84               	movwf	3972,c	;volatile
  7421                           
  7422                           ; BSR set to: 0
  7423  0101E8  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7424  0101EA  D8B2               	call	PL8	;call to abstracted procedure
  7425  0101EC  4629               	rlncf	??_LCD_printString,f,c
  7426  0101EE  4629               	rlncf	??_LCD_printString,f,c
  7427  0101F0  5084               	movf	3972,w,c	;volatile
  7428  0101F2  1829               	xorwf	??_LCD_printString,w,c
  7429  0101F4  0BFB               	andlw	-5
  7430  0101F6  1829               	xorwf	??_LCD_printString,w,c
  7431  0101F8  6E84               	movwf	3972,c	;volatile
  7432                           
  7433                           ;LCD.c: 374: delay_us(40);;
  7434  0101FA  EC53  F084         	call	PL2	;call to abstracted procedure
  7435  0101FE  ECEB  F08A         	call	_delay_us	;wreg free
  7436  010202  D035               	goto	L1
  7437  010204                     l116:
  7438  010204  F000               	nop		;# 
  7439                           
  7440                           ;LCD.c: 380: PORTEbits.RE4 = 1;
  7441  010206  8884               	bsf	3972,4,c	;volatile
  7442                           
  7443                           ;LCD.c: 381: { PORTHbits.RH5 = ((string[i] >> 7) & 1); PORTEbits.RE1 = ((string[i] >> 6)
      +                           & 1); PORTEbits.RE0 = ((string[i] >> 5) & 1); PORTEbits.RE2 = ((string[i] >> 4) & 1); P
      +                          ORTHbits.RH0 = ((string[i] >> 3) & 1); PORTHbits.RH1 = ((string[i] >> 2) & 1); PORTHbit
  7444  010208  0100               	movlb	0	; () banked
  7445  01020A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7446  01020C  0F74               	addlw	low LCD_printString@string
  7447  01020E  6ED9               	movwf	fsr2l,c
  7448  010210  D84C               	call	PL4	;call to abstracted procedure
  7449  010212  D895               	call	PL6	;call to abstracted procedure
  7450  010214  90D8               	bcf	status,0,c
  7451  010216  3229               	rrcf	??_LCD_printString,f,c
  7452  010218  90D8               	bcf	status,0,c
  7453  01021A  3229               	rrcf	??_LCD_printString,f,c
  7454  01021C  0E01               	movlw	1
  7455  01021E  1629               	andwf	??_LCD_printString,f,c
  7456  010220  5087               	movf	3975,w,c	;volatile
  7457  010222  1829               	xorwf	??_LCD_printString,w,c
  7458  010224  0BFE               	andlw	-2
  7459  010226  1829               	xorwf	??_LCD_printString,w,c
  7460  010228  6E87               	movwf	3975,c	;volatile
  7461  01022A  D889               	call	PL6	;call to abstracted procedure
  7462  01022C  90D8               	bcf	status,0,c
  7463  01022E  3229               	rrcf	??_LCD_printString,f,c
  7464  010230  0E01               	movlw	1
  7465  010232  1629               	andwf	??_LCD_printString,f,c
  7466  010234  4629               	rlncf	??_LCD_printString,f,c
  7467  010236  5087               	movf	3975,w,c	;volatile
  7468  010238  1829               	xorwf	??_LCD_printString,w,c
  7469  01023A  0BFD               	andlw	-3
  7470  01023C  1829               	xorwf	??_LCD_printString,w,c
  7471  01023E  6E87               	movwf	3975,c	;volatile
  7472  010240  D87E               	call	PL6	;call to abstracted procedure
  7473  010242  0E01               	movlw	1
  7474  010244  1629               	andwf	??_LCD_printString,f,c
  7475  010246  4629               	rlncf	??_LCD_printString,f,c
  7476  010248  4629               	rlncf	??_LCD_printString,f,c
  7477  01024A  5087               	movf	3975,w,c	;volatile
  7478  01024C  1829               	xorwf	??_LCD_printString,w,c
  7479  01024E  0BFB               	andlw	-5
  7480  010250  1829               	xorwf	??_LCD_printString,w,c
  7481  010252  6E87               	movwf	3975,c	;volatile
  7482  010254  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7483  010256  D87C               	call	PL8	;call to abstracted procedure
  7484  010258  3A29               	swapf	??_LCD_printString,f,c
  7485  01025A  4629               	rlncf	??_LCD_printString,f,c
  7486  01025C  5084               	movf	3972,w,c	;volatile
  7487  01025E  1829               	xorwf	??_LCD_printString,w,c
  7488  010260  0BDF               	andlw	-33
  7489  010262  1829               	xorwf	??_LCD_printString,w,c
  7490  010264  6E84               	movwf	3972,c	;volatile
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;LCD.c: 382: delay_us(40);;
  7494  010266  EC53  F084         	call	PL2	;call to abstracted procedure
  7495  01026A  ECEB  F08A         	call	_delay_us	;wreg free
  7496  01026E                     L1:
  7497                           
  7498                           ;LCD.c: 383: PORTEbits.RE4 = 0;
  7499  01026E  9884               	bcf	3972,4,c	;volatile
  7500                           
  7501                           ;LCD.c: 384: break;
  7502  010270  D005               	goto	l5096
  7503  010272                     l5094:
  7504  010272  5058               	movf	_mode,w,c	;volatile
  7505                           
  7506                           ; Switch size 1, requested type "space"
  7507                           ; Number of cases is 2, Range of values is 1 to 2
  7508                           ; switch strategies available:
  7509                           ; Name         Instructions Cycles
  7510                           ; simple_byte            7     4 (average)
  7511                           ;	Chosen strategy is simple_byte
  7512  010274  0A01               	xorlw	1	; case 1
  7513  010276  E082               	bz	l5060
  7514  010278  0A03               	xorlw	3	; case 2
  7515  01027A  E0C4               	bz	l116
  7516  01027C                     l5096:
  7517                           
  7518                           ;LCD.c: 386: delay_ms(2);
  7519  01027C  D87D               	call	PL38	;call to abstracted procedure
  7520  01027E  ECE8  F089         	call	_delay_ms	;wreg free
  7521                           
  7522                           ;LCD.c: 387: PORTDbits.RD0 = 0;
  7523  010282  9083               	bcf	3971,0,c	;volatile
  7524  010284                     l5100:
  7525  010284  0100               	movlb	0	; () banked
  7526  010286  4B90               	infsnz	LCD_printString@i_591& (0+255),f,b
  7527  010288  2B91               	incf	(LCD_printString@i_591+1)& (0+255),f,b
  7528  01028A                     l5102:
  7529                           
  7530                           ; BSR set to: 0
  7531  01028A  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7532  01028C  0F74               	addlw	low LCD_printString@string
  7533  01028E  6ED9               	movwf	fsr2l,c
  7534  010290  6ADA               	clrf	fsr2h,c
  7535  010292  50DF               	movf	indf2,w,c
  7536  010294  B4D8               	btfsc	status,2,c
  7537  010296  0012               	return	
  7538                           
  7539                           ; BSR set to: 0
  7540  010298  5191               	movf	(LCD_printString@i_591+1)& (0+255),w,b
  7541  01029A  0A80               	xorlw	128
  7542  01029C  0F80               	addlw	-128
  7543  01029E  0EC8               	movlw	200
  7544  0102A0  B4D8               	btfsc	status,2,c
  7545  0102A2  5D90               	subwf	LCD_printString@i_591& (0+255),w,b
  7546  0102A4  B0D8               	btfsc	status,0,c
  7547  0102A6  0012               	return	
  7548  0102A8  D757               	goto	l5052
  7549  0102AA                     __end_of_LCD_printString:
  7550                           	opt stack 0
  7551  0102AA                     PL4:
  7552                           	opt stack 22
  7553  0102AA  6ADA               	clrf	fsr2h,c
  7554  0102AC  50DF               	movf	indf2,w,c
  7555  0102AE  6E29               	movwf	??_LCD_printString& (0+255),c
  7556  0102B0  0E00               	movlw	0
  7557  0102B2  BE29               	btfsc	??_LCD_printString,7,c
  7558  0102B4  0E01               	movlw	1
  7559  0102B6  6E29               	movwf	??_LCD_printString,c
  7560  0102B8  0E01               	movlw	1
  7561  0102BA  1629               	andwf	??_LCD_printString,f,c
  7562  0102BC  3A29               	swapf	??_LCD_printString,f,c
  7563  0102BE  4629               	rlncf	??_LCD_printString,f,c
  7564  0102C0  5087               	movf	3975,w,c	;volatile
  7565  0102C2  1829               	xorwf	??_LCD_printString,w,c
  7566  0102C4  0BDF               	andlw	-33
  7567  0102C6  1829               	xorwf	??_LCD_printString,w,c
  7568  0102C8  6E87               	movwf	3975,c	;volatile
  7569  0102CA  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7570  0102CC  0F74               	addlw	low LCD_printString@string
  7571  0102CE  6ED9               	movwf	fsr2l,c
  7572  0102D0  6ADA               	clrf	fsr2h,c
  7573  0102D2  50DF               	movf	indf2,w,c
  7574  0102D4  6E29               	movwf	??_LCD_printString& (0+255),c
  7575  0102D6  0E06               	movlw	6
  7576  0102D8  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7577  0102DA                     u2825:
  7578  0102DA  90D8               	bcf	status,0,c
  7579  0102DC  3229               	rrcf	??_LCD_printString,f,c
  7580  0102DE  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7581  0102E0  D7FC               	goto	u2825
  7582  0102E2  0E01               	movlw	1
  7583  0102E4  1629               	andwf	??_LCD_printString,f,c
  7584  0102E6  4629               	rlncf	??_LCD_printString,f,c
  7585  0102E8  5084               	movf	3972,w,c	;volatile
  7586  0102EA  1829               	xorwf	??_LCD_printString,w,c
  7587  0102EC  0BFD               	andlw	-3
  7588  0102EE  1829               	xorwf	??_LCD_printString,w,c
  7589  0102F0  6E84               	movwf	3972,c	;volatile
  7590  0102F2  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7591  0102F4  0F74               	addlw	low LCD_printString@string
  7592  0102F6  6ED9               	movwf	fsr2l,c
  7593  0102F8  6ADA               	clrf	fsr2h,c
  7594  0102FA  50DF               	movf	indf2,w,c
  7595  0102FC  6E29               	movwf	??_LCD_printString& (0+255),c
  7596  0102FE  0E05               	movlw	5
  7597  010300  6E2A               	movwf	(??_LCD_printString+1)& (0+255),c
  7598  010302                     u2835:
  7599  010302  90D8               	bcf	status,0,c
  7600  010304  3229               	rrcf	??_LCD_printString,f,c
  7601  010306  2E2A               	decfsz	(??_LCD_printString+1)& (0+255),f,c
  7602  010308  D7FC               	goto	u2835
  7603  01030A  0E01               	movlw	1
  7604  01030C  1629               	andwf	??_LCD_printString,f,c
  7605  01030E  5084               	movf	3972,w,c	;volatile
  7606  010310  1829               	xorwf	??_LCD_printString,w,c
  7607  010312  0BFE               	andlw	-2
  7608  010314  1829               	xorwf	??_LCD_printString,w,c
  7609  010316  6E84               	movwf	3972,c	;volatile
  7610  010318  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7611  01031A  0F74               	addlw	low LCD_printString@string
  7612  01031C  6ED9               	movwf	fsr2l,c
  7613  01031E  6ADA               	clrf	fsr2h,c
  7614  010320  50DF               	movf	indf2,w,c
  7615  010322  6E29               	movwf	??_LCD_printString& (0+255),c
  7616  010324  3A29               	swapf	??_LCD_printString,f,c
  7617  010326  0E0F               	movlw	15
  7618  010328  1629               	andwf	??_LCD_printString,f,c
  7619  01032A  0E01               	movlw	1
  7620  01032C  1629               	andwf	??_LCD_printString,f,c
  7621  01032E  4629               	rlncf	??_LCD_printString,f,c
  7622  010330  4629               	rlncf	??_LCD_printString,f,c
  7623  010332  5084               	movf	3972,w,c	;volatile
  7624  010334  1829               	xorwf	??_LCD_printString,w,c
  7625  010336  0BFB               	andlw	-5
  7626  010338  1829               	xorwf	??_LCD_printString,w,c
  7627  01033A  6E84               	movwf	3972,c	;volatile
  7628  01033C  0012               	return	
  7629  01033E                     __end_ofPL4:
  7630                           	opt stack 0
  7631  01033E                     PL6:
  7632                           	opt stack 22
  7633  01033E  5190               	movf	LCD_printString@i_591& (0+255),w,b
  7634  010340  0F74               	addlw	low LCD_printString@string
  7635  010342  6ED9               	movwf	fsr2l,c
  7636  010344  6ADA               	clrf	fsr2h,c
  7637  010346  50DF               	movf	indf2,w,c
  7638  010348  6E29               	movwf	??_LCD_printString& (0+255),c
  7639  01034A  90D8               	bcf	status,0,c
  7640  01034C  3229               	rrcf	??_LCD_printString,f,c
  7641  01034E  0012               	return	
  7642  010350                     __end_ofPL6:
  7643                           	opt stack 0
  7644  010350                     PL8:
  7645                           	opt stack 22
  7646  010350  0F74               	addlw	low LCD_printString@string
  7647  010352  6ED9               	movwf	fsr2l,c
  7648  010354  6ADA               	clrf	fsr2h,c
  7649  010356  50DF               	movf	indf2,w,c
  7650  010358  6E29               	movwf	??_LCD_printString& (0+255),c
  7651  01035A  0E01               	movlw	1
  7652  01035C  1629               	andwf	??_LCD_printString,f,c
  7653  01035E  0C01               	retlw	1
  7654  010360                     __end_ofPL8:
  7655                           	opt stack 0
  7656  010360                     PL12:
  7657                           	opt stack 22
  7658  010360  518E               	movf	LCD_printString@i& (0+255),w,b
  7659  010362  2629               	addwf	??_LCD_printString,f,c
  7660  010364  518F               	movf	(LCD_printString@i+1)& (0+255),w,b
  7661  010366  222A               	addwfc	??_LCD_printString+1,f,c
  7662  010368  C029  FFF6         	movff	??_LCD_printString,tblptrl
  7663  01036C  C02A  FFF7         	movff	??_LCD_printString+1,tblptrh
  7664  010370  0E00               	movlw	low (__mediumconst shr (0+16))
  7665  010372  6EF8               	movwf	tblptru,c
  7666  010374  0E0D               	movlw	(high __ramtop+-1)
  7667  010376  0012               	return	
  7668  010378                     __end_ofPL12:
  7669                           	opt stack 0
  7670  010378                     PL38:
  7671                           	opt stack 22
  7672  010378  0E02               	movlw	2
  7673  01037A  6E0A               	movwf	delay_ms@x,c
  7674  01037C  6A0B               	clrf	delay_ms@x+1,c
  7675  01037E  6A0C               	clrf	delay_ms@x+2,c
  7676  010380  6A0D               	clrf	delay_ms@x+3,c
  7677  010382  0C00               	retlw	0
  7678  010384                     __end_ofPL38:
  7679                           	opt stack 0
  7680                           tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           prodh	equ	0xFF4
  7685                           prodl	equ	0xFF3
  7686                           intcon	equ	0xFF2
  7687                           intcon2	equ	0xFF1
  7688                           intcon3	equ	0xFF0
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf1	equ	0xFE7
  7692                           postinc1	equ	0xFE6
  7693                           postdec1	equ	0xFE5
  7694                           fsr1h	equ	0xFE2
  7695                           fsr1l	equ	0xFE1
  7696                           indf2	equ	0xFDF
  7697                           postinc2	equ	0xFDE
  7698                           postdec2	equ	0xFDD
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8
  7702                           
  7703 ;; *************** function _strcat *****************
  7704 ;; Defined at:
  7705 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcat.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  to              2    5[COMRAM] PTR unsigned char 
  7708 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7709 ;;  from            2    7[COMRAM] PTR const unsigned char 
  7710 ;;		 -> UART_transmitString@tempString_1943(2), UART_transmitString@tempString(20), STR_15(2), LCD_printString@tempStrin
      +g_590(2), 
  7711 ;;		 -> LCD_printString@tempString(20), STR_1(2), 
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;  cp              2    9[COMRAM] PTR unsigned char 
  7714 ;;		 -> UART_transmitString@string(200), LCD_printString@string(20), 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  2    5[COMRAM] PTR unsigned char 
  7717 ;; Registers used:
  7718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7719 ;; Tracked objects:
  7720 ;;		On entry : F/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7727 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7728 ;;Total ram usage:        6 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    3
  7731 ;; This function calls:
  7732 ;;		Nothing
  7733 ;; This function is called by:
  7734 ;;		_LCD_printString
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           	psect	text39
  7739  011378                     __ptext39:
  7740                           	opt stack 0
  7741  011378                     _strcat:
  7742                           	opt stack 24
  7743                           
  7744                           ; BSR set to: 0
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;incstack = 0
  7748  011378  C007  F00B         	movff	strcat@to+1,strcat@cp+1
  7749  01137C  C006  F00A         	movff	strcat@to,strcat@cp
  7750  011380  D002               	goto	l4580
  7751  011382                     l4578:
  7752                           
  7753                           ; BSR set to: 0
  7754  011382  4A0A               	infsnz	strcat@cp,f,c
  7755  011384  2A0B               	incf	strcat@cp+1,f,c
  7756  011386                     l4580:
  7757                           
  7758                           ; BSR set to: 0
  7759  011386  C00A  FFD9         	movff	strcat@cp,fsr2l
  7760  01138A  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7761  01138E  50DF               	movf	indf2,w,c
  7762  011390  E005               	bz	l4584
  7763  011392  D7F7               	goto	l4578
  7764  011394                     l4582:
  7765  011394  4A0A               	infsnz	strcat@cp,f,c
  7766  011396  2A0B               	incf	strcat@cp+1,f,c
  7767  011398  4A08               	infsnz	strcat@from,f,c
  7768  01139A  2A09               	incf	strcat@from+1,f,c
  7769  01139C                     l4584:
  7770  01139C  C008  FFF6         	movff	strcat@from,tblptrl
  7771  0113A0  C009  FFF7         	movff	strcat@from+1,tblptrh
  7772  0113A4  0E00               	movlw	low (__mediumconst shr (0+16))
  7773  0113A6  6EF8               	movwf	tblptru,c
  7774  0113A8  C00A  FFD9         	movff	strcat@cp,fsr2l
  7775  0113AC  C00B  FFDA         	movff	strcat@cp+1,fsr2h
  7776  0113B0  0E0D               	movlw	(high __ramtop+-1)
  7777  0113B2  64F7               	cpfsgt	tblptrh,c
  7778  0113B4  D003               	bra	u2437
  7779  0113B6  0008               	tblrd		*
  7780  0113B8  50F5               	movf	tablat,w,c
  7781  0113BA  D005               	bra	u2430
  7782  0113BC                     u2437:
  7783  0113BC  CFF6 FFE1          	movff	tblptrl,fsr1l
  7784  0113C0  CFF7 FFE2          	movff	tblptrh,fsr1h
  7785  0113C4  50E7               	movf	indf1,w,c
  7786  0113C6                     u2430:
  7787  0113C6  6EDF               	movwf	indf2,c
  7788  0113C8  50DF               	movf	indf2,w,c
  7789  0113CA  B4D8               	btfsc	status,2,c
  7790  0113CC  0012               	return	
  7791  0113CE  D7E2               	goto	l4582
  7792  0113D0                     __end_of_strcat:
  7793                           	opt stack 0
  7794                           tblptru	equ	0xFF8
  7795                           tblptrh	equ	0xFF7
  7796                           tblptrl	equ	0xFF6
  7797                           tablat	equ	0xFF5
  7798                           prodh	equ	0xFF4
  7799                           prodl	equ	0xFF3
  7800                           intcon	equ	0xFF2
  7801                           intcon2	equ	0xFF1
  7802                           intcon3	equ	0xFF0
  7803                           postinc0	equ	0xFEE
  7804                           wreg	equ	0xFE8
  7805                           indf1	equ	0xFE7
  7806                           postinc1	equ	0xFE6
  7807                           postdec1	equ	0xFE5
  7808                           fsr1h	equ	0xFE2
  7809                           fsr1l	equ	0xFE1
  7810                           indf2	equ	0xFDF
  7811                           postinc2	equ	0xFDE
  7812                           postdec2	equ	0xFDD
  7813                           fsr2h	equ	0xFDA
  7814                           fsr2l	equ	0xFD9
  7815                           status	equ	0xFD8
  7816                           
  7817 ;; *************** function _sprintf *****************
  7818 ;; Defined at:
  7819 ;;		line 492 in file "/Applications/microchip/xc8/v1.33/sources/common/doprnt.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;  sp              1    wreg     PTR unsigned char 
  7822 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7823 ;;  f               2   17[COMRAM] PTR const unsigned char 
  7824 ;;		 -> STR_16(3), STR_2(3), 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  sp              1   31[COMRAM] PTR unsigned char 
  7827 ;;		 -> UART_transmitString@tempString(20), LCD_printString@tempString(20), 
  7828 ;;  _val            5   26[COMRAM] struct .
  7829 ;;  c               1   32[COMRAM] char 
  7830 ;;  prec            1   25[COMRAM] char 
  7831 ;;  flag            1   24[COMRAM] unsigned char 
  7832 ;;  ap              1   23[COMRAM] PTR void [1]
  7833 ;;		 -> ?_sprintf(2), 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  2   17[COMRAM] int 
  7836 ;; Registers used:
  7837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : F/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7843 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7844 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7845 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7846 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7847 ;;Total ram usage:       16 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		___lwdiv
  7852 ;;		___lwmod
  7853 ;; This function is called by:
  7854 ;;		_LCD_printString
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text40
  7859  010A0C                     __ptext40:
  7860                           	opt stack 0
  7861  010A0C                     _sprintf:
  7862                           	opt stack 23
  7863                           
  7864                           ;incstack = 0
  7865                           ;sprintf@sp stored from wreg
  7866  010A0C  6E20               	movwf	sprintf@sp,c
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;doprnt.c: 494: va_list ap;
  7870                           ;doprnt.c: 499: signed char c;
  7871                           ;doprnt.c: 506: signed char prec;
  7872                           ;doprnt.c: 508: unsigned char flag;
  7873                           ;doprnt.c: 527: union {
  7874                           ;doprnt.c: 528: unsigned int _val;
  7875                           ;doprnt.c: 529: struct {
  7876                           ;doprnt.c: 530: const char * _cp;
  7877                           ;doprnt.c: 531: unsigned _len;
  7878                           ;doprnt.c: 532: } _str;
  7879                           ;doprnt.c: 533: } _val;
  7880                           ;doprnt.c: 542: *ap = __va_start();
  7881  010A0E  0E14               	movlw	low (?_sprintf+2)
  7882  010A10  6E18               	movwf	sprintf@ap,c
  7883                           
  7884                           ;doprnt.c: 545: while(c = *f++) {
  7885  010A12  D068               	goto	l4638
  7886  010A14                     l4588:
  7887                           
  7888                           ;doprnt.c: 547: if(c != '%')
  7889  010A14  5021               	movf	sprintf@c,w,c
  7890  010A16  0A25               	xorlw	37
  7891  010A18  E007               	bz	l1130
  7892                           
  7893                           ;doprnt.c: 549: {
  7894                           ;doprnt.c: 550: ((*sp++ = (c)));
  7895  010A1A  5020               	movf	sprintf@sp,w,c
  7896  010A1C  6ED9               	movwf	fsr2l,c
  7897  010A1E  6ADA               	clrf	fsr2h,c
  7898  010A20  C021  FFDF         	movff	sprintf@c,indf2
  7899  010A24  2A20               	incf	sprintf@sp,f,c
  7900                           
  7901                           ;doprnt.c: 551: continue;
  7902  010A26  D05E               	goto	l4638
  7903  010A28                     l1130:
  7904                           
  7905                           ;doprnt.c: 552: }
  7906                           ;doprnt.c: 557: flag = 0;
  7907  010A28  6A19               	clrf	sprintf@flag,c
  7908                           
  7909                           ;doprnt.c: 644: switch(c = *f++) {
  7910  010A2A  D865               	call	PL26	;call to abstracted procedure
  7911  010A2C  5021               	movf	sprintf@c& (0+255),w,c
  7912                           
  7913                           ; Switch size 1, requested type "space"
  7914                           ; Number of cases is 3, Range of values is 0 to 105
  7915                           ; switch strategies available:
  7916                           ; Name         Instructions Cycles
  7917                           ; simple_byte           10     6 (average)
  7918                           ;	Chosen strategy is simple_byte
  7919  010A2E  E05D               	bz	l4640
  7920  010A30  0A64               	xorlw	100	; case 100
  7921  010A32  E002               	bz	l4598
  7922  010A34  0A0D               	xorlw	13	; case 105
  7923  010A36  E156               	bnz	l4638
  7924  010A38                     l4598:
  7925                           
  7926                           ;doprnt.c: 1262: {
  7927                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7928  010A38  5018               	movf	sprintf@ap,w,c
  7929  010A3A  6ED9               	movwf	fsr2l,c
  7930  010A3C  6ADA               	clrf	fsr2h,c
  7931  010A3E  CFDE F01B          	movff	postinc2,sprintf@_val
  7932  010A42  CFDD F01C          	movff	postdec2,sprintf@_val+1
  7933  010A46  0E02               	movlw	2
  7934  010A48  2618               	addwf	sprintf@ap,f,c
  7935                           
  7936                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  7937  010A4A  501C               	movf	sprintf@_val+1,w,c
  7938  010A4C  D86C               	call	PL34	;call to abstracted procedure
  7939  010A4E  B4D8               	btfsc	status,2,c
  7940  010A50  5C1B               	subwf	sprintf@_val,w,c
  7941  010A52  E206               	bc	l4608
  7942                           
  7943                           ;doprnt.c: 1271: flag |= 0x03;
  7944  010A54  0E03               	movlw	3
  7945  010A56  1219               	iorwf	sprintf@flag,f,c
  7946                           
  7947                           ;doprnt.c: 1272: _val._val = -_val._val;
  7948  010A58  6C1B               	negf	sprintf@_val,c
  7949  010A5A  1E1C               	comf	sprintf@_val+1,f,c
  7950  010A5C  B0D8               	btfsc	status,0,c
  7951  010A5E  2A1C               	incf	sprintf@_val+1,f,c
  7952  010A60                     l4608:
  7953                           
  7954                           ;doprnt.c: 1273: }
  7955                           ;doprnt.c: 1275: }
  7956                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7957  010A60  0E01               	movlw	1
  7958  010A62  6E21               	movwf	sprintf@c,c
  7959  010A64                     l4614:
  7960                           
  7961                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7962  010A64  5021               	movf	sprintf@c,w,c
  7963  010A66  D853               	call	PL28	;call to abstracted procedure
  7964  010A68  CFF5 F016          	movff	tablat,??_sprintf
  7965  010A6C  0009               	tblrd		*+
  7966  010A6E  CFF5 F017          	movff	tablat,??_sprintf+1
  7967  010A72  5016               	movf	??_sprintf,w,c
  7968  010A74  5C1B               	subwf	sprintf@_val,w,c
  7969  010A76  5017               	movf	??_sprintf+1,w,c
  7970  010A78  581C               	subwfb	sprintf@_val+1,w,c
  7971  010A7A  E304               	bnc	l4622
  7972  010A7C  2A21               	incf	sprintf@c,f,c
  7973  010A7E  5021               	movf	sprintf@c,w,c
  7974  010A80  0A05               	xorlw	5
  7975  010A82  E1F0               	bnz	l4614
  7976  010A84                     l4622:
  7977                           
  7978                           ;doprnt.c: 1431: {
  7979                           ;doprnt.c: 1447: if(flag & 0x03)
  7980  010A84  C019  F016         	movff	sprintf@flag,??_sprintf
  7981  010A88  0E03               	movlw	3
  7982  010A8A  1616               	andwf	??_sprintf,f,c
  7983  010A8C  E006               	bz	l4628
  7984                           
  7985                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  7986  010A8E  5020               	movf	sprintf@sp,w,c
  7987  010A90  6ED9               	movwf	fsr2l,c
  7988  010A92  6ADA               	clrf	fsr2h,c
  7989  010A94  0E2D               	movlw	45
  7990  010A96  6EDF               	movwf	indf2,c
  7991  010A98  2A20               	incf	sprintf@sp,f,c
  7992  010A9A                     l4628:
  7993                           
  7994                           ;doprnt.c: 1478: }
  7995                           ;doprnt.c: 1481: prec = c;
  7996  010A9A  C021  F01A         	movff	sprintf@c,sprintf@prec
  7997                           
  7998                           ;doprnt.c: 1483: while(prec--) {
  7999  010A9E  D01F               	goto	l4636
  8000  010AA0                     l4630:
  8001                           
  8002                           ;doprnt.c: 1487: {
  8003                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  8004  010AA0  501A               	movf	sprintf@prec,w,c
  8005  010AA2  D835               	call	PL28	;call to abstracted procedure
  8006  010AA4  CFF5 F008          	movff	tablat,___lwdiv@divisor
  8007  010AA8  000A               	tblrd		*-
  8008  010AAA  CFF5 F009          	movff	tablat,___lwdiv@divisor+1
  8009  010AAE  C01B  F006         	movff	sprintf@_val,___lwdiv@dividend
  8010  010AB2  C01C  F007         	movff	sprintf@_val+1,___lwdiv@dividend+1
  8011  010AB6  EC13  F08A         	call	___lwdiv	;wreg free
  8012  010ABA  C006  F00D         	movff	?___lwdiv,___lwmod@dividend
  8013  010ABE  C007  F00E         	movff	?___lwdiv+1,___lwmod@dividend+1
  8014  010AC2  6A10               	clrf	___lwmod@divisor+1,c
  8015  010AC4  0E0A               	movlw	10
  8016  010AC6  6E0F               	movwf	___lwmod@divisor,c
  8017  010AC8  EC5A  F08A         	call	___lwmod	;wreg free
  8018  010ACC  500D               	movf	?___lwmod,w,c
  8019  010ACE  0F30               	addlw	48
  8020  010AD0  6E21               	movwf	sprintf@c,c
  8021                           
  8022                           ;doprnt.c: 1532: }
  8023                           ;doprnt.c: 1533: ((*sp++ = (c)));
  8024  010AD2  5020               	movf	sprintf@sp,w,c
  8025  010AD4  6ED9               	movwf	fsr2l,c
  8026  010AD6  6ADA               	clrf	fsr2h,c
  8027  010AD8  C021  FFDF         	movff	sprintf@c,indf2
  8028  010ADC  2A20               	incf	sprintf@sp,f,c
  8029  010ADE                     l4636:
  8030  010ADE  061A               	decf	sprintf@prec,f,c
  8031  010AE0  281A               	incf	sprintf@prec& (0+255),w,c
  8032  010AE2  E1DE               	bnz	l4630
  8033  010AE4                     l4638:
  8034  010AE4  D808               	call	PL26	;call to abstracted procedure
  8035  010AE6  6621               	tstfsz	sprintf@c& (0+255),c
  8036  010AE8  D795               	goto	l4588
  8037  010AEA                     l4640:
  8038                           
  8039                           ;doprnt.c: 1547: *sp = 0;
  8040  010AEA  5020               	movf	sprintf@sp,w,c
  8041  010AEC  6ED9               	movwf	fsr2l,c
  8042  010AEE  6ADA               	clrf	fsr2h,c
  8043  010AF0  0E00               	movlw	0
  8044  010AF2  6EDF               	movwf	indf2,c
  8045  010AF4  0C00               	retlw	0
  8046  010AF6                     __end_of_sprintf:
  8047                           	opt stack 0
  8048  010AF6                     PL26:
  8049                           	opt stack 23
  8050  010AF6  C012  FFF6         	movff	sprintf@f,tblptrl
  8051  010AFA  C013  FFF7         	movff	sprintf@f+1,tblptrh
  8052  010AFE  4A12               	infsnz	sprintf@f,f,c
  8053  010B00  2A13               	incf	sprintf@f+1,f,c
  8054  010B02                     	if	0	;tblptru may be non-zero
  8055  010B02                     	endif
  8056  010B02                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8057  010B02  0E00               	movlw	low (__mediumconst shr (0+16))
  8058  010B04  6EF8               	movwf	tblptru,c
  8059  010B06                     	endif
  8060  010B06  0008               	tblrd		*
  8061  010B08  CFF5 F021          	movff	tablat,sprintf@c
  8062  010B0C  0012               	return	
  8063  010B0E                     __end_ofPL26:
  8064                           	opt stack 0
  8065  010B0E                     PL28:
  8066                           	opt stack 23
  8067  010B0E  0D02               	mullw	2
  8068  010B10  0ED9               	movlw	low _dpowers
  8069  010B12  24F3               	addwf	prodl,w,c
  8070  010B14  6EF6               	movwf	tblptrl,c
  8071  010B16  0EFE               	movlw	high _dpowers
  8072  010B18  20F4               	addwfc	prodh,w,c
  8073  010B1A  6EF7               	movwf	tblptrh,c
  8074  010B1C                     	if	1	;There are 3 active tblptr bytes
  8075  010B1C  6AF8               	clrf	tblptru,c
  8076  010B1E  0E00               	movlw	low (__mediumconst shr (0+16))
  8077  010B20  22F8               	addwfc	tblptru,f,c
  8078  010B22                     	endif
  8079  010B22  0009               	tblrd		*+
  8080  010B24  0012               	return	
  8081  010B26                     __end_ofPL28:
  8082                           	opt stack 0
  8083  010B26                     PL34:
  8084                           	opt stack 23
  8085  010B26  0A80               	xorlw	128
  8086  010B28  6EF3               	movwf	prodl,c
  8087  010B2A  0E80               	movlw	128
  8088  010B2C  5CF3               	subwf	prodl,w,c
  8089  010B2E  0C00               	retlw	0
  8090  010B30                     __end_ofPL34:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           indf1	equ	0xFE7
  8104                           postinc1	equ	0xFE6
  8105                           postdec1	equ	0xFE5
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           
  8115 ;; *************** function ___lwmod *****************
  8116 ;; Defined at:
  8117 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwmod.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  dividend        2   12[COMRAM] unsigned int 
  8120 ;;  divisor         2   14[COMRAM] unsigned int 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  counter         1   16[COMRAM] unsigned char 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  2   12[COMRAM] unsigned int 
  8125 ;; Registers used:
  8126 ;;		wreg, status,2, status,0
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8135 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8136 ;;Total ram usage:        5 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    3
  8139 ;; This function calls:
  8140 ;;		Nothing
  8141 ;; This function is called by:
  8142 ;;		_sprintf
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text41
  8147  0114B4                     __ptext41:
  8148                           	opt stack 0
  8149  0114B4                     ___lwmod:
  8150                           	opt stack 23
  8151                           
  8152                           ;incstack = 0
  8153  0114B4  5010               	movf	___lwmod@divisor+1,w,c
  8154  0114B6  100F               	iorwf	___lwmod@divisor,w,c
  8155  0114B8  E017               	bz	l1845
  8156  0114BA  0E01               	movlw	1
  8157  0114BC  6E11               	movwf	___lwmod@counter,c
  8158  0114BE  D004               	goto	l4526
  8159  0114C0                     l4524:
  8160  0114C0  90D8               	bcf	status,0,c
  8161  0114C2  360F               	rlcf	___lwmod@divisor,f,c
  8162  0114C4  3610               	rlcf	___lwmod@divisor+1,f,c
  8163  0114C6  2A11               	incf	___lwmod@counter,f,c
  8164  0114C8                     l4526:
  8165  0114C8  AE10               	btfss	___lwmod@divisor+1,7,c
  8166  0114CA  D7FA               	goto	l4524
  8167  0114CC                     l4528:
  8168  0114CC  500F               	movf	___lwmod@divisor,w,c
  8169  0114CE  5C0D               	subwf	___lwmod@dividend,w,c
  8170  0114D0  5010               	movf	___lwmod@divisor+1,w,c
  8171  0114D2  580E               	subwfb	___lwmod@dividend+1,w,c
  8172  0114D4  E304               	bnc	l4532
  8173  0114D6  500F               	movf	___lwmod@divisor,w,c
  8174  0114D8  5E0D               	subwf	___lwmod@dividend,f,c
  8175  0114DA  5010               	movf	___lwmod@divisor+1,w,c
  8176  0114DC  5A0E               	subwfb	___lwmod@dividend+1,f,c
  8177  0114DE                     l4532:
  8178  0114DE  90D8               	bcf	status,0,c
  8179  0114E0  3210               	rrcf	___lwmod@divisor+1,f,c
  8180  0114E2  320F               	rrcf	___lwmod@divisor,f,c
  8181  0114E4  2E11               	decfsz	___lwmod@counter,f,c
  8182  0114E6  D7F2               	goto	l4528
  8183  0114E8                     l1845:
  8184  0114E8  C00D  F00D         	movff	___lwmod@dividend,?___lwmod
  8185  0114EC  C00E  F00E         	movff	___lwmod@dividend+1,?___lwmod+1
  8186  0114F0  0012               	return	
  8187  0114F2                     __end_of___lwmod:
  8188                           	opt stack 0
  8189                           tblptru	equ	0xFF8
  8190                           tblptrh	equ	0xFF7
  8191                           tblptrl	equ	0xFF6
  8192                           tablat	equ	0xFF5
  8193                           prodh	equ	0xFF4
  8194                           prodl	equ	0xFF3
  8195                           intcon	equ	0xFF2
  8196                           intcon2	equ	0xFF1
  8197                           intcon3	equ	0xFF0
  8198                           postinc0	equ	0xFEE
  8199                           wreg	equ	0xFE8
  8200                           indf1	equ	0xFE7
  8201                           postinc1	equ	0xFE6
  8202                           postdec1	equ	0xFE5
  8203                           fsr1h	equ	0xFE2
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function ___lwdiv *****************
  8213 ;; Defined at:
  8214 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/lwdiv.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  dividend        2    5[COMRAM] unsigned int 
  8217 ;;  divisor         2    7[COMRAM] unsigned int 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  quotient        2   10[COMRAM] unsigned int 
  8220 ;;  counter         1    9[COMRAM] unsigned char 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  2    5[COMRAM] unsigned int 
  8223 ;; Registers used:
  8224 ;;		wreg, status,2, status,0
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8231 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8233 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8234 ;;Total ram usage:        7 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    3
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_sprintf
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           	psect	text42
  8245  011426                     __ptext42:
  8246                           	opt stack 0
  8247  011426                     ___lwdiv:
  8248                           	opt stack 23
  8249                           
  8250                           ;incstack = 0
  8251  011426  6A0B               	clrf	___lwdiv@quotient,c
  8252  011428  6A0C               	clrf	___lwdiv@quotient+1,c
  8253  01142A  5009               	movf	___lwdiv@divisor+1,w,c
  8254  01142C  1008               	iorwf	___lwdiv@divisor,w,c
  8255  01142E  E01B               	bz	l1835
  8256  011430  0E01               	movlw	1
  8257  011432  6E0A               	movwf	___lwdiv@counter,c
  8258  011434  D004               	goto	l4506
  8259  011436                     l4504:
  8260  011436  90D8               	bcf	status,0,c
  8261  011438  3608               	rlcf	___lwdiv@divisor,f,c
  8262  01143A  3609               	rlcf	___lwdiv@divisor+1,f,c
  8263  01143C  2A0A               	incf	___lwdiv@counter,f,c
  8264  01143E                     l4506:
  8265  01143E  AE09               	btfss	___lwdiv@divisor+1,7,c
  8266  011440  D7FA               	goto	l4504
  8267  011442                     l4508:
  8268  011442  90D8               	bcf	status,0,c
  8269  011444  360B               	rlcf	___lwdiv@quotient,f,c
  8270  011446  360C               	rlcf	___lwdiv@quotient+1,f,c
  8271  011448  5008               	movf	___lwdiv@divisor,w,c
  8272  01144A  5C06               	subwf	___lwdiv@dividend,w,c
  8273  01144C  5009               	movf	___lwdiv@divisor+1,w,c
  8274  01144E  5807               	subwfb	___lwdiv@dividend+1,w,c
  8275  011450  E305               	bnc	l4516
  8276  011452  5008               	movf	___lwdiv@divisor,w,c
  8277  011454  5E06               	subwf	___lwdiv@dividend,f,c
  8278  011456  5009               	movf	___lwdiv@divisor+1,w,c
  8279  011458  5A07               	subwfb	___lwdiv@dividend+1,f,c
  8280  01145A  800B               	bsf	___lwdiv@quotient,0,c
  8281  01145C                     l4516:
  8282  01145C  90D8               	bcf	status,0,c
  8283  01145E  3209               	rrcf	___lwdiv@divisor+1,f,c
  8284  011460  3208               	rrcf	___lwdiv@divisor,f,c
  8285  011462  2E0A               	decfsz	___lwdiv@counter,f,c
  8286  011464  D7EE               	goto	l4508
  8287  011466                     l1835:
  8288  011466  C00B  F006         	movff	___lwdiv@quotient,?___lwdiv
  8289  01146A  C00C  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8290  01146E  0012               	return	
  8291  011470                     __end_of___lwdiv:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           intcon3	equ	0xFF0
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           indf1	equ	0xFE7
  8305                           postinc1	equ	0xFE6
  8306                           postdec1	equ	0xFE5
  8307                           fsr1h	equ	0xFE2
  8308                           fsr1l	equ	0xFE1
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           postdec2	equ	0xFDD
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function _LCD_placeCursor *****************
  8317 ;; Defined at:
  8318 ;;		line 279 in file "LCD.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  x               1    wreg     unsigned char 
  8321 ;;  y               1   25[COMRAM] unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  x               1   28[COMRAM] unsigned char 
  8324 ;;  address         1   29[COMRAM] unsigned char 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;		None               void
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : F/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8334 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8337 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8338 ;;Total ram usage:        5 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    5
  8341 ;; This function calls:
  8342 ;;		_delay_ms
  8343 ;;		_delay_us
  8344 ;; This function is called by:
  8345 ;;		_LCD_printString
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           	psect	text43
  8350  01055A                     __ptext43:
  8351                           	opt stack 0
  8352  01055A                     _LCD_placeCursor:
  8353                           	opt stack 22
  8354                           
  8355                           ;incstack = 0
  8356                           ;LCD_placeCursor@x stored from wreg
  8357  01055A  6E1D               	movwf	LCD_placeCursor@x,c
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;LCD.c: 283: char address = 0x80 + x + (0x40 * y);
  8361  01055C  501A               	movf	LCD_placeCursor@y,w,c
  8362  01055E  0D40               	mullw	64
  8363  010560  50F3               	movf	prodl,w,c
  8364  010562  241D               	addwf	LCD_placeCursor@x,w,c
  8365  010564  0F80               	addlw	128
  8366  010566  6E1E               	movwf	LCD_placeCursor@address,c
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;LCD.c: 284: delay_ms(3);
  8370  010568  0E03               	movlw	3
  8371  01056A  6E0A               	movwf	delay_ms@x,c
  8372  01056C  0E00               	movlw	0
  8373  01056E  6A0B               	clrf	delay_ms@x+1,c
  8374  010570  6A0C               	clrf	delay_ms@x+2,c
  8375  010572  6A0D               	clrf	delay_ms@x+3,c
  8376  010574  ECE8  F089         	call	_delay_ms	;wreg free
  8377                           
  8378                           ;LCD.c: 285: switch(mode)
  8379  010578  D093               	goto	l4574
  8380  01057A                     l4540:
  8381                           
  8382                           ;LCD.c: 288: delay_us(40);;
  8383  01057A  EC53  F084         	call	PL2	;call to abstracted procedure
  8384  01057E  ECEB  F08A         	call	_delay_us	;wreg free
  8385                           
  8386                           ;LCD.c: 289: PORTEbits.RE4 = 1;
  8387  010582  8884               	bsf	3972,4,c	;volatile
  8388                           
  8389                           ;LCD.c: 290: { PORTHbits.RH5 = ((0x80 + (address >> 4) >> 3) & 1); PORTEbits.RE1 = ((0x8
      +                          0 + (address >> 4) >> 2) & 1); PORTEbits.RE0 = ((0x80 + (address >> 4) >> 1) & 1); PORTE
      +                          bits.RE2 = (0x80 + (address >> 4) & 1); };
  8390  010584  D8A1               	call	PL16	;call to abstracted procedure
  8391  010586  90D8               	bcf	status,0,c
  8392  010588  321B               	rrcf	??_LCD_placeCursor,f,c
  8393  01058A  90D8               	bcf	status,0,c
  8394  01058C  321B               	rrcf	??_LCD_placeCursor,f,c
  8395  01058E  90D8               	bcf	status,0,c
  8396  010590  321B               	rrcf	??_LCD_placeCursor,f,c
  8397  010592  D88E               	call	PL14	;call to abstracted procedure
  8398  010594  3A1B               	swapf	??_LCD_placeCursor,f,c
  8399  010596  0E0F               	movlw	15
  8400  010598  161B               	andwf	??_LCD_placeCursor,f,c
  8401  01059A  0E80               	movlw	128
  8402  01059C  261B               	addwf	??_LCD_placeCursor,f,c
  8403  01059E  90D8               	bcf	status,0,c
  8404  0105A0  321B               	rrcf	??_LCD_placeCursor,f,c
  8405  0105A2  90D8               	bcf	status,0,c
  8406  0105A4  321B               	rrcf	??_LCD_placeCursor,f,c
  8407  0105A6  0E01               	movlw	1
  8408  0105A8  D897               	call	PL18	;call to abstracted procedure
  8409  0105AA  D88E               	call	PL16	;call to abstracted procedure
  8410  0105AC  90D8               	bcf	status,0,c
  8411  0105AE  321B               	rrcf	??_LCD_placeCursor,f,c
  8412  0105B0  0E01               	movlw	1
  8413  0105B2  D8A4               	call	PL22	;call to abstracted procedure
  8414  0105B4  D889               	call	PL16	;call to abstracted procedure
  8415  0105B6  D898               	call	PL20	;call to abstracted procedure
  8416                           
  8417                           ;LCD.c: 291: delay_us(40);;
  8418  0105B8  EC53  F084         	call	PL2	;call to abstracted procedure
  8419  0105BC  ECEB  F08A         	call	_delay_us	;wreg free
  8420                           
  8421                           ;LCD.c: 292: PORTEbits.RE4 = 0;
  8422  0105C0  9884               	bcf	3972,4,c	;volatile
  8423                           
  8424                           ;LCD.c: 294: delay_us(40);;
  8425  0105C2  EC53  F084         	call	PL2	;call to abstracted procedure
  8426  0105C6  ECEB  F08A         	call	_delay_us	;wreg free
  8427                           
  8428                           ;LCD.c: 295: PORTEbits.RE4 = 1;
  8429  0105CA  8884               	bsf	3972,4,c	;volatile
  8430                           
  8431                           ;LCD.c: 296: { PORTHbits.RH5 = (((address & 0x0F) >> 3) & 1); PORTEbits.RE1 = (((address
      +                           & 0x0F) >> 2) & 1); PORTEbits.RE0 = (((address & 0x0F) >> 1) & 1); PORTEbits.RE2 = ((ad
      +                          dress & 0x0F) & 1); };
  8432  0105CC  D89E               	call	PL30	;call to abstracted procedure
  8433  0105CE  D870               	call	PL14	;call to abstracted procedure
  8434  0105D0  90D8               	bcf	status,0,c
  8435  0105D2  321B               	rrcf	??_LCD_placeCursor,f,c
  8436  0105D4  90D8               	bcf	status,0,c
  8437  0105D6  321B               	rrcf	??_LCD_placeCursor,f,c
  8438  0105D8  0E01               	movlw	1
  8439  0105DA  D87E               	call	PL18	;call to abstracted procedure
  8440  0105DC  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8441  0105E0  90D8               	bcf	status,0,c
  8442  0105E2  321B               	rrcf	??_LCD_placeCursor,f,c
  8443  0105E4  0E01               	movlw	1
  8444  0105E6  D88A               	call	PL22	;call to abstracted procedure
  8445  0105E8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8446  0105EC  D87D               	call	PL20	;call to abstracted procedure
  8447                           
  8448                           ;LCD.c: 297: delay_us(40);;
  8449  0105EE  EC53  F084         	call	PL2	;call to abstracted procedure
  8450  0105F2  ECEB  F08A         	call	_delay_us	;wreg free
  8451                           
  8452                           ;LCD.c: 298: PORTEbits.RE4 = 0;
  8453  0105F6  9884               	bcf	3972,4,c	;volatile
  8454                           
  8455                           ;LCD.c: 299: break;
  8456  0105F8  0012               	return	
  8457  0105FA                     l94:
  8458  0105FA  F000               	nop		;# 
  8459                           
  8460                           ;LCD.c: 303: PORTEbits.RE4 = 1;
  8461  0105FC  8884               	bsf	3972,4,c	;volatile
  8462                           
  8463                           ;LCD.c: 304: { PORTHbits.RH5 = ((address >> 7) & 1); PORTEbits.RE1 = ((address >> 6) & 1
      +                          ); PORTEbits.RE0 = ((address >> 5) & 1); PORTEbits.RE2 = ((address >> 4) & 1); PORTHbits
      +                          .RH0 = ((address >> 3) & 1); PORTHbits.RH1 = ((address >> 2) & 1); PORTHbits.RH2 = ((ad
  8464  0105FE  6A1B               	clrf	??_LCD_placeCursor& (0+255),c
  8465  010600  AE1E               	btfss	LCD_placeCursor@address,7,c
  8466  010602  D001               	bra	u2395
  8467  010604  2A1B               	incf	??_LCD_placeCursor& (0+255),f,c
  8468  010606                     u2395:
  8469  010606  D854               	call	PL14	;call to abstracted procedure
  8470  010608  0E06               	movlw	6
  8471  01060A  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8472  01060C                     u2405:
  8473  01060C  90D8               	bcf	status,0,c
  8474  01060E  321B               	rrcf	??_LCD_placeCursor,f,c
  8475  010610  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8476  010612  D7FC               	goto	u2405
  8477  010614  0E01               	movlw	1
  8478  010616  D860               	call	PL18	;call to abstracted procedure
  8479  010618  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8480  01061C  0E05               	movlw	5
  8481  01061E  6E1C               	movwf	(??_LCD_placeCursor+1)& (0+255),c
  8482  010620                     u2415:
  8483  010620  90D8               	bcf	status,0,c
  8484  010622  321B               	rrcf	??_LCD_placeCursor,f,c
  8485  010624  2E1C               	decfsz	(??_LCD_placeCursor+1)& (0+255),f,c
  8486  010626  D7FC               	goto	u2415
  8487  010628  0E01               	movlw	1
  8488  01062A  D868               	call	PL22	;call to abstracted procedure
  8489  01062C  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8490  010630  3A1B               	swapf	??_LCD_placeCursor,f,c
  8491  010632  0E0F               	movlw	15
  8492  010634  161B               	andwf	??_LCD_placeCursor,f,c
  8493  010636  D858               	call	PL20	;call to abstracted procedure
  8494  010638  D868               	call	PL30	;call to abstracted procedure
  8495  01063A  0E01               	movlw	1
  8496  01063C  161B               	andwf	??_LCD_placeCursor,f,c
  8497  01063E  5087               	movf	3975,w,c	;volatile
  8498  010640  181B               	xorwf	??_LCD_placeCursor,w,c
  8499  010642  0BFE               	andlw	-2
  8500  010644  181B               	xorwf	??_LCD_placeCursor,w,c
  8501  010646  6E87               	movwf	3975,c	;volatile
  8502  010648  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8503  01064C  90D8               	bcf	status,0,c
  8504  01064E  321B               	rrcf	??_LCD_placeCursor,f,c
  8505  010650  90D8               	bcf	status,0,c
  8506  010652  321B               	rrcf	??_LCD_placeCursor,f,c
  8507  010654  0E01               	movlw	1
  8508  010656  161B               	andwf	??_LCD_placeCursor,f,c
  8509  010658  461B               	rlncf	??_LCD_placeCursor,f,c
  8510  01065A  5087               	movf	3975,w,c	;volatile
  8511  01065C  181B               	xorwf	??_LCD_placeCursor,w,c
  8512  01065E  0BFD               	andlw	-3
  8513  010660  181B               	xorwf	??_LCD_placeCursor,w,c
  8514  010662  6E87               	movwf	3975,c	;volatile
  8515  010664  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8516  010668  90D8               	bcf	status,0,c
  8517  01066A  321B               	rrcf	??_LCD_placeCursor,f,c
  8518  01066C  0E01               	movlw	1
  8519  01066E  161B               	andwf	??_LCD_placeCursor,f,c
  8520  010670  461B               	rlncf	??_LCD_placeCursor,f,c
  8521  010672  461B               	rlncf	??_LCD_placeCursor,f,c
  8522  010674  5087               	movf	3975,w,c	;volatile
  8523  010676  181B               	xorwf	??_LCD_placeCursor,w,c
  8524  010678  0BFB               	andlw	-5
  8525  01067A  181B               	xorwf	??_LCD_placeCursor,w,c
  8526  01067C  6E87               	movwf	3975,c	;volatile
  8527  01067E  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8528  010682  0E01               	movlw	1
  8529  010684  161B               	andwf	??_LCD_placeCursor,f,c
  8530  010686  3A1B               	swapf	??_LCD_placeCursor,f,c
  8531  010688  461B               	rlncf	??_LCD_placeCursor,f,c
  8532  01068A  5084               	movf	3972,w,c	;volatile
  8533  01068C  181B               	xorwf	??_LCD_placeCursor,w,c
  8534  01068E  0BDF               	andlw	-33
  8535  010690  181B               	xorwf	??_LCD_placeCursor,w,c
  8536  010692  6E84               	movwf	3972,c	;volatile
  8537                           
  8538                           ;LCD.c: 305: delay_us(40);;
  8539  010694  EC53  F084         	call	PL2	;call to abstracted procedure
  8540  010698  ECEB  F08A         	call	_delay_us	;wreg free
  8541                           
  8542                           ;LCD.c: 306: PORTEbits.RE4 = 0;
  8543  01069C  9884               	bcf	3972,4,c	;volatile
  8544                           
  8545                           ;LCD.c: 307: break;
  8546  01069E  0012               	return	
  8547  0106A0                     l4574:
  8548  0106A0  5058               	movf	_mode,w,c	;volatile
  8549                           
  8550                           ; Switch size 1, requested type "space"
  8551                           ; Number of cases is 2, Range of values is 1 to 2
  8552                           ; switch strategies available:
  8553                           ; Name         Instructions Cycles
  8554                           ; simple_byte            7     4 (average)
  8555                           ;	Chosen strategy is simple_byte
  8556  0106A2  0A01               	xorlw	1	; case 1
  8557  0106A4  E101 D769          	bz	l4540
  8558  0106A8  0A03               	xorlw	3	; case 2
  8559  0106AA  A4D8               	btfss	status,2,c
  8560  0106AC  0012               	return	
  8561  0106AE  D7A5               	goto	l94
  8562  0106B0                     __end_of_LCD_placeCursor:
  8563                           	opt stack 0
  8564  0106B0                     PL14:
  8565                           	opt stack 22
  8566  0106B0  0E01               	movlw	1
  8567  0106B2  161B               	andwf	??_LCD_placeCursor,f,c
  8568  0106B4  3A1B               	swapf	??_LCD_placeCursor,f,c
  8569  0106B6  461B               	rlncf	??_LCD_placeCursor,f,c
  8570  0106B8  5087               	movf	3975,w,c	;volatile
  8571  0106BA  181B               	xorwf	??_LCD_placeCursor,w,c
  8572  0106BC  0BDF               	andlw	-33
  8573  0106BE  181B               	xorwf	??_LCD_placeCursor,w,c
  8574  0106C0  6E87               	movwf	3975,c	;volatile
  8575  0106C2  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8576  0106C6  0012               	return	
  8577  0106C8                     __end_ofPL14:
  8578                           	opt stack 0
  8579  0106C8                     PL16:
  8580                           	opt stack 22
  8581  0106C8  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8582  0106CC  3A1B               	swapf	??_LCD_placeCursor,f,c
  8583  0106CE  0E0F               	movlw	15
  8584  0106D0  161B               	andwf	??_LCD_placeCursor,f,c
  8585  0106D2  0E80               	movlw	128
  8586  0106D4  261B               	addwf	??_LCD_placeCursor,f,c
  8587  0106D6  0C80               	retlw	128
  8588  0106D8                     __end_ofPL16:
  8589                           	opt stack 0
  8590  0106D8                     PL18:
  8591                           	opt stack 22
  8592  0106D8  161B               	andwf	??_LCD_placeCursor,f,c
  8593  0106DA  461B               	rlncf	??_LCD_placeCursor,f,c
  8594  0106DC  5084               	movf	3972,w,c	;volatile
  8595  0106DE  181B               	xorwf	??_LCD_placeCursor,w,c
  8596  0106E0  0BFD               	andlw	-3
  8597  0106E2  181B               	xorwf	??_LCD_placeCursor,w,c
  8598  0106E4  6E84               	movwf	3972,c	;volatile
  8599  0106E6  0012               	return	
  8600  0106E8                     __end_ofPL18:
  8601                           	opt stack 0
  8602  0106E8                     PL20:
  8603                           	opt stack 22
  8604  0106E8  0E01               	movlw	1
  8605  0106EA  161B               	andwf	??_LCD_placeCursor,f,c
  8606  0106EC  461B               	rlncf	??_LCD_placeCursor,f,c
  8607  0106EE  461B               	rlncf	??_LCD_placeCursor,f,c
  8608  0106F0  5084               	movf	3972,w,c	;volatile
  8609  0106F2  181B               	xorwf	??_LCD_placeCursor,w,c
  8610  0106F4  0BFB               	andlw	-5
  8611  0106F6  181B               	xorwf	??_LCD_placeCursor,w,c
  8612  0106F8  6E84               	movwf	3972,c	;volatile
  8613  0106FA  0012               	return	
  8614  0106FC                     __end_ofPL20:
  8615                           	opt stack 0
  8616  0106FC                     PL22:
  8617                           	opt stack 22
  8618  0106FC  161B               	andwf	??_LCD_placeCursor,f,c
  8619  0106FE  5084               	movf	3972,w,c	;volatile
  8620  010700  181B               	xorwf	??_LCD_placeCursor,w,c
  8621  010702  0BFE               	andlw	-2
  8622  010704  181B               	xorwf	??_LCD_placeCursor,w,c
  8623  010706  6E84               	movwf	3972,c	;volatile
  8624  010708  0012               	return	
  8625  01070A                     __end_ofPL22:
  8626                           	opt stack 0
  8627  01070A                     PL30:
  8628                           	opt stack 22
  8629  01070A  C01E  F01B         	movff	LCD_placeCursor@address,??_LCD_placeCursor
  8630  01070E  90D8               	bcf	status,0,c
  8631  010710  321B               	rrcf	??_LCD_placeCursor,f,c
  8632  010712  90D8               	bcf	status,0,c
  8633  010714  321B               	rrcf	??_LCD_placeCursor,f,c
  8634  010716  90D8               	bcf	status,0,c
  8635  010718  321B               	rrcf	??_LCD_placeCursor,f,c
  8636  01071A  0012               	return	
  8637  01071C                     __end_ofPL30:
  8638                           	opt stack 0
  8639                           tblptru	equ	0xFF8
  8640                           tblptrh	equ	0xFF7
  8641                           tblptrl	equ	0xFF6
  8642                           tablat	equ	0xFF5
  8643                           prodh	equ	0xFF4
  8644                           prodl	equ	0xFF3
  8645                           intcon	equ	0xFF2
  8646                           intcon2	equ	0xFF1
  8647                           intcon3	equ	0xFF0
  8648                           postinc0	equ	0xFEE
  8649                           wreg	equ	0xFE8
  8650                           indf1	equ	0xFE7
  8651                           postinc1	equ	0xFE6
  8652                           postdec1	equ	0xFE5
  8653                           fsr1h	equ	0xFE2
  8654                           fsr1l	equ	0xFE1
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           postdec2	equ	0xFDD
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _delay_us *****************
  8663 ;; Defined at:
  8664 ;;		line 51 in file "delays.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  x               4    5[COMRAM] long 
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;		None               void
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/E
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8681 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8682 ;;Total ram usage:        4 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    3
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_LCD_init4bit
  8689 ;;		_LCD_placeCursor
  8690 ;;		_LCD_printString
  8691 ;;		_fft_init
  8692 ;;		_PS2_init
  8693 ;;		_PS2_readGamepad
  8694 ;;		_PS2_shiftInOut
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text44
  8699  0115D6                     __ptext44:
  8700                           	opt stack 0
  8701  0115D6                     _delay_us:
  8702                           	opt stack 24
  8703                           
  8704                           ;delays.c: 53: x -= 3;
  8705                           
  8706                           ;incstack = 0
  8707  0115D6  0EFD               	movlw	253
  8708  0115D8  D005               	goto	L2
  8709  0115DA                     l4390:
  8710                           
  8711                           ;delays.c: 55: {
  8712                           ;delays.c: 56: _delay((unsigned long)((1)*(64000000/4000000.0)));
  8713  0115DA  0E05               	movlw	5
  8714  0115DC                     u3037:
  8715  0115DC  2EE8               	decfsz	wreg,f,c
  8716  0115DE  D7FE               	goto	u3037
  8717  0115E0  F000               	nop	
  8718                           
  8719                           ;delays.c: 57: x -= 2;
  8720  0115E2  0EFE               	movlw	254
  8721  0115E4                     L2:
  8722  0115E4  2606               	addwf	delay_us@x,f,c
  8723  0115E6  0EFF               	movlw	255
  8724  0115E8  2207               	addwfc	delay_us@x+1,f,c
  8725  0115EA  2208               	addwfc	delay_us@x+2,f,c
  8726  0115EC  2209               	addwfc	delay_us@x+3,f,c
  8727  0115EE  5009               	movf	delay_us@x+3,w,c
  8728  0115F0  0A80               	xorlw	128
  8729  0115F2  0F80               	addlw	128
  8730  0115F4  E108               	bnz	u2175
  8731  0115F6  0E00               	movlw	0
  8732  0115F8  5C08               	subwf	delay_us@x+2,w,c
  8733  0115FA  E105               	bnz	u2175
  8734  0115FC  0E00               	movlw	0
  8735  0115FE  5C07               	subwf	delay_us@x+1,w,c
  8736  011600  E102               	bnz	u2175
  8737  011602  0E01               	movlw	1
  8738  011604  5C06               	subwf	delay_us@x,w,c
  8739  011606                     u2175:
  8740  011606  A0D8               	btfss	status,0,c
  8741  011608  0012               	return	
  8742  01160A  D7E7               	goto	l4390
  8743  01160C                     __end_of_delay_us:
  8744                           	opt stack 0
  8745                           tblptru	equ	0xFF8
  8746                           tblptrh	equ	0xFF7
  8747                           tblptrl	equ	0xFF6
  8748                           tablat	equ	0xFF5
  8749                           prodh	equ	0xFF4
  8750                           prodl	equ	0xFF3
  8751                           intcon	equ	0xFF2
  8752                           intcon2	equ	0xFF1
  8753                           intcon3	equ	0xFF0
  8754                           postinc0	equ	0xFEE
  8755                           wreg	equ	0xFE8
  8756                           indf1	equ	0xFE7
  8757                           postinc1	equ	0xFE6
  8758                           postdec1	equ	0xFE5
  8759                           fsr1h	equ	0xFE2
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _delay_ms *****************
  8769 ;; Defined at:
  8770 ;;		line 62 in file "delays.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  x               4    9[COMRAM] long 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  time            4   21[COMRAM] unsigned long 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;		None               void
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8785 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8786 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8787 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8788 ;;Total ram usage:       16 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    4
  8791 ;; This function calls:
  8792 ;;		_millis
  8793 ;; This function is called by:
  8794 ;;		_LCD_init4bit
  8795 ;;		_LCD_placeCursor
  8796 ;;		_LCD_printString
  8797 ;;		_debug
  8798 ;;		_RCMode
  8799 ;;		_main
  8800 ;;		_PS2_readGamepad
  8801 ;;		_PS2_sendCommandString
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text45
  8806  0113D0                     __ptext45:
  8807                           	opt stack 0
  8808  0113D0                     _delay_ms:
  8809                           	opt stack 23
  8810                           
  8811                           ;delays.c: 64: unsigned long time = millis();
  8812                           
  8813                           ;incstack = 0
  8814  0113D0  ECCD  F08B         	call	_millis	;wreg free
  8815  0113D4  C006  F016         	movff	?_millis,delay_ms@time
  8816  0113D8  C007  F017         	movff	?_millis+1,delay_ms@time+1
  8817  0113DC  C008  F018         	movff	?_millis+2,delay_ms@time+2
  8818  0113E0  C009  F019         	movff	?_millis+3,delay_ms@time+3
  8819  0113E4                     l4400:
  8820  0113E4  ECCD  F08B         	call	_millis	;wreg free
  8821  0113E8  C006  F00E         	movff	?_millis,??_delay_ms
  8822  0113EC  C007  F00F         	movff	?_millis+1,??_delay_ms+1
  8823  0113F0  C008  F010         	movff	?_millis+2,??_delay_ms+2
  8824  0113F4  C009  F011         	movff	?_millis+3,??_delay_ms+3
  8825  0113F8  5016               	movf	delay_ms@time,w,c
  8826  0113FA  5C0E               	subwf	??_delay_ms,w,c
  8827  0113FC  6E12               	movwf	(??_delay_ms+4)& (0+255),c
  8828  0113FE  5017               	movf	delay_ms@time+1,w,c
  8829  011400  580F               	subwfb	??_delay_ms+1,w,c
  8830  011402  6E13               	movwf	(??_delay_ms+5)& (0+255),c
  8831  011404  5018               	movf	delay_ms@time+2,w,c
  8832  011406  5810               	subwfb	??_delay_ms+2,w,c
  8833  011408  6E14               	movwf	(??_delay_ms+6)& (0+255),c
  8834  01140A  5019               	movf	delay_ms@time+3,w,c
  8835  01140C  5811               	subwfb	??_delay_ms+3,w,c
  8836  01140E  6E15               	movwf	(??_delay_ms+7)& (0+255),c
  8837  011410  500A               	movf	delay_ms@x,w,c
  8838  011412  5C12               	subwf	??_delay_ms+4,w,c
  8839  011414  500B               	movf	delay_ms@x+1,w,c
  8840  011416  5813               	subwfb	??_delay_ms+5,w,c
  8841  011418  500C               	movf	delay_ms@x+2,w,c
  8842  01141A  5814               	subwfb	??_delay_ms+6,w,c
  8843  01141C  500D               	movf	delay_ms@x+3,w,c
  8844  01141E  5815               	subwfb	??_delay_ms+7,w,c
  8845  011420  B0D8               	btfsc	status,0,c
  8846  011422  0012               	return	
  8847  011424  D7DF               	goto	l4400
  8848  011426                     __end_of_delay_ms:
  8849                           	opt stack 0
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           intcon3	equ	0xFF0
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           indf1	equ	0xFE7
  8862                           postinc1	equ	0xFE6
  8863                           postdec1	equ	0xFE5
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _millis *****************
  8874 ;; Defined at:
  8875 ;;		line 110 in file "delays.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  4    5[COMRAM] unsigned long 
  8882 ;; Registers used:
  8883 ;;		None
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8893 ;;Total ram usage:        4 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    3
  8896 ;; This function calls:
  8897 ;;		Nothing
  8898 ;; This function is called by:
  8899 ;;		_delay_ms
  8900 ;;		_PS2_readGamepad
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text46
  8905  01179A                     __ptext46:
  8906                           	opt stack 0
  8907  01179A                     _millis:
  8908                           	opt stack 23
  8909                           
  8910                           ;delays.c: 112: return millisCount;
  8911                           
  8912                           ;incstack = 0
  8913  01179A  C0B5  F006         	movff	_millisCount,?_millis
  8914  01179E  C0B6  F007         	movff	_millisCount+1,?_millis+1
  8915  0117A2  C0B7  F008         	movff	_millisCount+2,?_millis+2
  8916  0117A6  C0B8  F009         	movff	_millisCount+3,?_millis+3
  8917  0117AA  0012               	return	
  8918  0117AC                     __end_of_millis:
  8919                           	opt stack 0
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           intcon2	equ	0xFF1
  8928                           intcon3	equ	0xFF0
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           indf1	equ	0xFE7
  8932                           postinc1	equ	0xFE6
  8933                           postdec1	equ	0xFE5
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           fsr2h	equ	0xFDA
  8940                           fsr2l	equ	0xFD9
  8941                           status	equ	0xFD8
  8942                           
  8943 ;; *************** function _encoderInterrupt *****************
  8944 ;; Defined at:
  8945 ;;		line 40 in file "encoders.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8962 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8963 ;;Total ram usage:        3 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    2
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		Interrupt level 1
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	intcodelo
  8974  000018                     __pintcodelo:
  8975                           	opt stack 0
  8976  000018                     _encoderInterrupt:
  8977                           	opt stack 20
  8978                           
  8979                           ;incstack = 0
  8980  000018  CFD8 F001          	movff	status,??_encoderInterrupt
  8981  00001C  CFE8 F002          	movff	wreg,??_encoderInterrupt+1
  8982  000020  CFE0 F003          	movff	bsr,??_encoderInterrupt+2
  8983                           
  8984                           ;encoders.c: 42: if(INT1IF == 1)
  8985  000024  A0F0               	btfss	intcon3,0,c	;volatile
  8986  000026  D00E               	goto	i1l409
  8987                           
  8988                           ;encoders.c: 43: {
  8989                           ;encoders.c: 44: if(PORTBbits.RB0 == 1)
  8990  000028  A081               	btfss	3969,0,c	;volatile
  8991  00002A  D004               	goto	i1l4376
  8992                           
  8993                           ;encoders.c: 45: {
  8994                           ;encoders.c: 46: left_count--;
  8995  00002C  0EFF               	movlw	255
  8996  00002E  0100               	movlb	0	; () banked
  8997  000030  07B1               	decf	_left_count& (0+255),f,b	;volatile
  8998  000032  D003               	goto	L5
  8999  000034                     i1l4376:
  9000                           
  9001                           ;encoders.c: 48: else
  9002                           ;encoders.c: 49: {
  9003                           ;encoders.c: 50: left_count++;
  9004  000034  0100               	movlb	0	; () banked
  9005  000036  2BB1               	incf	_left_count& (0+255),f,b	;volatile
  9006  000038  0E00               	movlw	0
  9007  00003A                     L5:
  9008  00003A  23B2               	addwfc	(_left_count+1)& (0+255),f,b	;volatile
  9009  00003C  23B3               	addwfc	(_left_count+2)& (0+255),f,b	;volatile
  9010  00003E  23B4               	addwfc	(_left_count+3)& (0+255),f,b	;volatile
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;encoders.c: 51: }
  9014                           ;encoders.c: 52: INT1IF = 0;
  9015  000040  90F0               	bcf	intcon3,0,c	;volatile
  9016                           
  9017                           ;encoders.c: 53: }
  9018  000042  D00F               	goto	i1l416
  9019  000044                     i1l409:
  9020                           
  9021                           ;encoders.c: 54: else if(INT3IF == 1)
  9022  000044  A4F0               	btfss	intcon3,2,c	;volatile
  9023  000046  D00D               	goto	i1l416
  9024                           
  9025                           ;encoders.c: 55: {
  9026                           ;encoders.c: 56: if(PORTBbits.RB2 == 1)
  9027  000048  A481               	btfss	3969,2,c	;volatile
  9028  00004A  D004               	goto	i1l4384
  9029                           
  9030                           ;encoders.c: 57: {
  9031                           ;encoders.c: 58: right_count--;
  9032  00004C  0EFF               	movlw	255
  9033  00004E  0100               	movlb	0	; () banked
  9034  000050  07B9               	decf	_right_count& (0+255),f,b	;volatile
  9035  000052  D003               	goto	L6
  9036  000054                     i1l4384:
  9037                           
  9038                           ;encoders.c: 60: else
  9039                           ;encoders.c: 61: {
  9040                           ;encoders.c: 62: right_count++;
  9041  000054  0100               	movlb	0	; () banked
  9042  000056  2BB9               	incf	_right_count& (0+255),f,b	;volatile
  9043  000058  0E00               	movlw	0
  9044  00005A                     L6:
  9045  00005A  23BA               	addwfc	(_right_count+1)& (0+255),f,b	;volatile
  9046  00005C  23BB               	addwfc	(_right_count+2)& (0+255),f,b	;volatile
  9047  00005E  23BC               	addwfc	(_right_count+3)& (0+255),f,b	;volatile
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;encoders.c: 63: }
  9051                           ;encoders.c: 64: INT3IF = 0;
  9052  000060  94F0               	bcf	intcon3,2,c	;volatile
  9053  000062                     i1l416:
  9054  000062  C003  FFE0         	movff	??_encoderInterrupt+2,bsr
  9055  000066  C002  FFE8         	movff	??_encoderInterrupt+1,wreg
  9056  00006A  C001  FFD8         	movff	??_encoderInterrupt,status
  9057  00006E  0010               	retfie	
  9058  000070                     __end_of_encoderInterrupt:
  9059                           	opt stack 0
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           intcon	equ	0xFF2
  9067                           intcon2	equ	0xFF1
  9068                           intcon3	equ	0xFF0
  9069                           postinc0	equ	0xFEE
  9070                           wreg	equ	0xFE8
  9071                           indf1	equ	0xFE7
  9072                           postinc1	equ	0xFE6
  9073                           postdec1	equ	0xFE5
  9074                           fsr1h	equ	0xFE2
  9075                           fsr1l	equ	0xFE1
  9076                           bsr	equ	0xFE0
  9077                           indf2	equ	0xFDF
  9078                           postinc2	equ	0xFDE
  9079                           postdec2	equ	0xFDD
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _communicationInterruptHandler *****************
  9085 ;; Defined at:
  9086 ;;		line 226 in file "main.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;		None               void
  9093 ;; Registers used:
  9094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9104 ;;Total ram usage:        2 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    1
  9107 ;; This function calls:
  9108 ;;		_tickMillis
  9109 ;; This function is called by:
  9110 ;;		Interrupt level 2
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	intcode
  9115  000008                     __pintcode:
  9116                           	opt stack 0
  9117  000008                     _communicationInterruptHandler:
  9118                           	opt stack 20
  9119                           
  9120                           ;incstack = 0
  9121  000008  CFD9 F004          	movff	fsr2l,??_communicationInterruptHandler
  9122  00000C  CFDA F005          	movff	fsr2h,??_communicationInterruptHandler+1
  9123  000010  EF89  F089         	goto	int_func
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           intcon3	equ	0xFF0
  9133                           postinc0	equ	0xFEE
  9134                           wreg	equ	0xFE8
  9135                           indf1	equ	0xFE7
  9136                           postinc1	equ	0xFE6
  9137                           postdec1	equ	0xFE5
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           bsr	equ	0xFE0
  9141                           indf2	equ	0xFDF
  9142                           postinc2	equ	0xFDE
  9143                           postdec2	equ	0xFDD
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148                           	psect	intcode_body
  9149  011312                     __pintcode_body:
  9150                           	opt stack 20
  9151  011312                     int_func:
  9152                           	opt stack 20
  9153                           
  9154                           ;main.c: 228: if(TMR0IF == 1)
  9155  011312  A4F2               	btfss	intcon,2,c	;volatile
  9156  011314  D007               	goto	i2l298
  9157                           
  9158                           ;main.c: 229: {
  9159                           ;main.c: 230: TMR0L = 193;
  9160  011316  0EC1               	movlw	193
  9161  011318  6ED6               	movwf	4054,c	;volatile
  9162                           
  9163                           ;main.c: 231: TMR0IF = 0;
  9164  01131A  94F2               	bcf	intcon,2,c	;volatile
  9165                           
  9166                           ;main.c: 232: TMR0IE = 1;
  9167  01131C  8AF2               	bsf	intcon,5,c	;volatile
  9168                           
  9169                           ;main.c: 233: tickMillis();
  9170  01131E  ECF4  F08B         	call	_tickMillis	;wreg free
  9171  011322  D025               	goto	i2l296
  9172  011324                     i2l298:
  9173                           
  9174                           ;main.c: 247: }
  9175                           ;main.c: 248: if(PIR1bits.RC1IF)
  9176  011324  AA9E               	btfss	3998,5,c	;volatile
  9177  011326  D00A               	goto	i2l4358
  9178                           
  9179                           ;main.c: 249: {
  9180                           ;main.c: 250: FONA_BUFF[FONA_INDEX] = RCREG1;
  9181  011328  0101               	movlb	1	; () banked
  9182  01132A  0E80               	movlw	low _FONA_BUFF	;volatile
  9183  01132C  2453               	addwf	_FONA_INDEX,w,c	;volatile
  9184  01132E  6ED9               	movwf	fsr2l,c
  9185  011330  6ADA               	clrf	fsr2h,c
  9186  011332  0E01               	movlw	high _FONA_BUFF	;volatile
  9187  011334  22DA               	addwfc	fsr2h,f,c
  9188  011336  CFAE FFDF          	movff	4014,indf2	;volatile
  9189                           
  9190                           ; BSR set to: 1
  9191                           ;main.c: 251: FONA_INDEX++;
  9192  01133A  2A53               	incf	_FONA_INDEX,f,c	;volatile
  9193  01133C                     i2l4358:
  9194                           
  9195                           ;main.c: 252: }
  9196                           ;main.c: 253: if(PIR3bits.RC2IF)
  9197  01133C  50A4               	movf	4004,w,c	;volatile
  9198                           
  9199                           ;main.c: 256: }
  9200                           ;main.c: 257: if(PIR6bits.RC3IF)
  9201                           
  9202                           ;main.c: 254: {
  9203  01133E  AAA6               	btfss	4006,5,c	;volatile
  9204  011340  D00A               	goto	i2l4364
  9205                           
  9206                           ;main.c: 258: {
  9207                           ;main.c: 259: PIXY_BUFF[PIXY_INDEX] = RCREG3;
  9208  011342  0E80               	movlw	low _PIXY_BUFF
  9209  011344  2454               	addwf	_PIXY_INDEX,w,c	;volatile
  9210  011346  6ED9               	movwf	fsr2l,c
  9211  011348  6ADA               	clrf	fsr2h,c
  9212  01134A  0E02               	movlw	high _PIXY_BUFF
  9213  01134C  22DA               	addwfc	fsr2h,f,c
  9214  01134E  010F               	movlb	15	; () banked
  9215  011350  CF2A FFDF          	movff	3882,indf2	;volatile
  9216                           
  9217                           ; BSR set to: 15
  9218                           ;main.c: 260: PIXY_INDEX++;
  9219  011354  2A54               	incf	_PIXY_INDEX,f,c	;volatile
  9220  011356                     i2l4364:
  9221                           
  9222                           ;main.c: 261: }
  9223                           ;main.c: 262: if(PIR6bits.RC4IF)
  9224  011356  AEA6               	btfss	4006,7,c	;volatile
  9225  011358  D00A               	goto	i2l296
  9226                           
  9227                           ;main.c: 263: {
  9228                           ;main.c: 264: USB_BUFF[USB_INDEX] = RCREG4;
  9229  01135A  0E74               	movlw	low _USB_BUFF
  9230  01135C  2456               	addwf	_USB_INDEX,w,c	;volatile
  9231  01135E  6ED9               	movwf	fsr2l,c
  9232  011360  6ADA               	clrf	fsr2h,c
  9233  011362  0E04               	movlw	high _USB_BUFF
  9234  011364  22DA               	addwfc	fsr2h,f,c
  9235  011366  010E               	movlb	14	; () banked
  9236  011368  CEFA FFDF          	movff	3834,indf2	;volatile
  9237                           
  9238                           ; BSR set to: 14
  9239                           ;main.c: 265: USB_INDEX++;
  9240  01136C  2A56               	incf	_USB_INDEX,f,c	;volatile
  9241  01136E                     i2l296:
  9242  01136E  C005  FFDA         	movff	??_communicationInterruptHandler+1,fsr2h
  9243  011372  C004  FFD9         	movff	??_communicationInterruptHandler,fsr2l
  9244  011376  0011               	retfie		f
  9245  011378                     __end_of_communicationInterruptHandler:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           intcon	equ	0xFF2
  9254                           intcon2	equ	0xFF1
  9255                           intcon3	equ	0xFF0
  9256                           postinc0	equ	0xFEE
  9257                           wreg	equ	0xFE8
  9258                           indf1	equ	0xFE7
  9259                           postinc1	equ	0xFE6
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           bsr	equ	0xFE0
  9264                           indf2	equ	0xFDF
  9265                           postinc2	equ	0xFDE
  9266                           postdec2	equ	0xFDD
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           
  9271 ;; *************** function _tickMillis *****************
  9272 ;; Defined at:
  9273 ;;		line 121 in file "delays.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;		None
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;		None               void
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : F/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9291 ;;Total ram usage:        0 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_communicationInterruptHandler
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text49
  9301  0117E8                     __ptext49:
  9302                           	opt stack 0
  9303  0117E8                     _tickMillis:
  9304                           	opt stack 20
  9305                           
  9306                           ;delays.c: 123: ++millisCount;
  9307                           
  9308                           ;incstack = 0
  9309  0117E8  0100               	movlb	0	; () banked
  9310  0117EA  2BB5               	incf	_millisCount& (0+255),f,b
  9311  0117EC  0E00               	movlw	0
  9312  0117EE  23B6               	addwfc	(_millisCount+1)& (0+255),f,b
  9313  0117F0  23B7               	addwfc	(_millisCount+2)& (0+255),f,b
  9314  0117F2  23B8               	addwfc	(_millisCount+3)& (0+255),f,b
  9315                           
  9316                           ; BSR set to: 0
  9317  0117F4  0C00               	retlw	0
  9318  0117F6                     __end_of_tickMillis:
  9319                           	opt stack 0
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           intcon2	equ	0xFF1
  9328                           intcon3	equ	0xFF0
  9329                           postinc0	equ	0xFEE
  9330                           wreg	equ	0xFE8
  9331                           indf1	equ	0xFE7
  9332                           postinc1	equ	0xFE6
  9333                           postdec1	equ	0xFE5
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           bsr	equ	0xFE0
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           intcon2	equ	0xFF1
  9351                           intcon3	equ	0xFF0
  9352                           postinc0	equ	0xFEE
  9353                           wreg	equ	0xFE8
  9354                           indf1	equ	0xFE7
  9355                           postinc1	equ	0xFE6
  9356                           postdec1	equ	0xFE5
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           bsr	equ	0xFE0
  9360                           indf2	equ	0xFDF
  9361                           postinc2	equ	0xFDE
  9362                           postdec2	equ	0xFDD
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367                           	psect	rparam
  9368  0000                     tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           postinc0	equ	0xFEE
  9378                           wreg	equ	0xFE8
  9379                           indf1	equ	0xFE7
  9380                           postinc1	equ	0xFE6
  9381                           postdec1	equ	0xFE5
  9382                           fsr1h	equ	0xFE2
  9383                           fsr1l	equ	0xFE1
  9384                           bsr	equ	0xFE0
  9385                           indf2	equ	0xFDF
  9386                           postinc2	equ	0xFDE
  9387                           postdec2	equ	0xFDD
  9388                           fsr2h	equ	0xFDA
  9389                           fsr2l	equ	0xFD9
  9390                           status	equ	0xFD8
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon2	equ	0xFF1
  9399                           intcon3	equ	0xFF0
  9400                           postinc0	equ	0xFEE
  9401                           wreg	equ	0xFE8
  9402                           indf1	equ	0xFE7
  9403                           postinc1	equ	0xFE6
  9404                           postdec1	equ	0xFE5
  9405                           fsr1h	equ	0xFE2
  9406                           fsr1l	equ	0xFE1
  9407                           bsr	equ	0xFE0
  9408                           indf2	equ	0xFDF
  9409                           postinc2	equ	0xFDE
  9410                           postdec2	equ	0xFDD
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8


Data Sizes:
    Strings     250
    Constant    43
    Data        41
    BSS         1409
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      89
    BANK0           160     56     143
    BANK1           256      0     228
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> UART_transmitString@tempString_1943(COMRAM[2]), UART_transmitString@tempString(COMRAM[20]), STR_15(CODE[2]), LCD_printString@tempString_590(BANK0[2]), 
		 -> LCD_printString@tempString(BANK0[20]), STR_1(CODE[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_16(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> UART_transmitString@tempString(COMRAM[20]), LCD_printString@tempString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S3657$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    PS2_sendCommandString@string	PTR unsigned char  size(1) Largest target is 9
		 -> exit_config(BANK0[9]), set_mode(BANK0[9]), enter_config(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 21
		 -> FONA_CheckStrength@genString(COMRAM[21]), FONA_Text@genString(COMRAM[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 200
		 -> UART_transmitString@string(BANK1[200]), LCD_printString@string(BANK0[20]), 

    LCD_printString@input	PTR unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[17]), STR_13(CODE[15]), STR_12(CODE[18]), STR_11(CODE[16]), 
		 -> STR_10(CODE[15]), STR_9(CODE[17]), STR_8(CODE[15]), STR_7(CODE[18]), 
		 -> STR_6(CODE[17]), STR_5(CODE[16]), STR_4(CODE[18]), STR_3(CODE[18]), 
		 -> LCD_printBin@string(COMRAM[9]), LCD_printVal@temp(COMRAM[3]), LCD_printChar@string(COMRAM[2]), 

    LCD_printString@aptr	PTR void [1] size(1) Largest target is 0
		 -> ?_LCD_printString(COMRAM[0]), 


Critical Paths under _main in COMRAM

    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _motorDrive_init->_motorDrive_setSpeeds
    _fft_init->_delay_us
    _LCD_init4bit->_delay_ms
    _debug->_delay_ms
    _competitionMode->_LCD_printString
    _RCMode->_PS2_init
    _motorDrive_setSpeeds->___awdiv
    ___awdiv->___wmul
    _PS2_init->_PS2_readGamepad
    _PS2_reconfig->_PS2_sendCommandString
    _PS2_sendCommandString->_delay_ms
    _PS2_shiftInOut->_delay_us
    _LCD_printString->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_placeCursor->_delay_ms
    _delay_ms->_millis

Critical Paths under _communicationInterruptHandler in COMRAM

    None.

Critical Paths under _encoderInterrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_RCMode
    _wanderMode->_LCD_printString
    _selfTest->_LCD_printString
    _competitionMode->_LCD_printString
    _RCMode->_LCD_printString

Critical Paths under _communicationInterruptHandler in BANK0

    None.

Critical Paths under _encoderInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _communicationInterruptHandler in BANK1

    None.

Critical Paths under _encoderInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _communicationInterruptHandler in BANK2

    None.

Critical Paths under _encoderInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _communicationInterruptHandler in BANK3

    None.

Critical Paths under _encoderInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _communicationInterruptHandler in BANK4

    None.

Critical Paths under _encoderInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _communicationInterruptHandler in BANK5

    None.

Critical Paths under _encoderInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _communicationInterruptHandler in BANK6

    None.

Critical Paths under _encoderInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _communicationInterruptHandler in BANK7

    None.

Critical Paths under _encoderInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _communicationInterruptHandler in BANK8

    None.

Critical Paths under _encoderInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _communicationInterruptHandler in BANK9

    None.

Critical Paths under _encoderInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _communicationInterruptHandler in BANK10

    None.

Critical Paths under _encoderInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _communicationInterruptHandler in BANK11

    None.

Critical Paths under _encoderInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _communicationInterruptHandler in BANK12

    None.

Critical Paths under _encoderInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _communicationInterruptHandler in BANK13

    None.

Critical Paths under _encoderInterrupt in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  161626
                                             79 COMRAM     3     3      0
                    _LCD_printString
                             _RCMode
                    _competitionMode
                              _debug
                           _delay_ms
                               _init
                           _selfTest
                      _settings_auto
                _settings_readButton
                  _settings_selfTest
                    _settings_wander
                         _wanderMode
 ---------------------------------------------------------------------------------
 (1) _wanderMode                                           0     0      0   18028
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _settings_wander                                      1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_selfTest                                    1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _settings_auto                                        1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _selfTest                                             1     1      0   18043
                                             42 COMRAM     1     1      0
                    _LCD_printString
                _settings_readButton
 ---------------------------------------------------------------------------------
 (1) _settings_readButton                                  1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   14232
                       _LCD_init4bit
                          _UART_init
                        _clearMillis
                      _encoders_init
                           _fft_init
                    _motorDrive_init
                      _settings_init
 ---------------------------------------------------------------------------------
 (2) _settings_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motorDrive_init                                      0     0      0    5202
                          _OpenEPWM1
                          _OpenEPWM3
                         _SetDCEPWM1
                         _SetDCEPWM3
                     _SetOutputEPWM1
                     _SetOutputEPWM3
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM3                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _SetOutputEPWM1                                       4     3      1     173
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM3                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _OpenEPWM1                                            3     2      1     128
                                              5 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _fft_init                                             0     0      0    3744
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _encoders_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_init4bit                                         0     0      0    5286
                         _delay_init
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _debug                                                4     4      0    2375
                                             25 COMRAM     4     4      0
                  _UART_transmitByte
                           _delay_ms
                    _fft_collectData
                        _fft_readBin
 ---------------------------------------------------------------------------------
 (2) _fft_readBin                                          4     2      2      86
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _fft_collectData                                      8     8      0      91
                                              5 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _UART_transmitByte                                    2     1      1     489
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _competitionMode                                      0     0      0   18028
                    _LCD_printString
 ---------------------------------------------------------------------------------
 (1) _RCMode                                               6     6      0   71194
                                             50 BANK0      6     6      0
                    _LCD_printString
                         _PS2_analog
                           _PS2_init
                    _PS2_readGamepad
                       _PS2_readType
                            ___awdiv
                           _delay_ms
               _motorDrive_setSpeeds
 ---------------------------------------------------------------------------------
 (3) _motorDrive_setSpeeds                                22    21      1    4094
                                             19 COMRAM    22    21      1
                         _SetDCEPWM1
                         _SetDCEPWM3
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1264
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1205
                                             11 COMRAM     8     4      4
                         _PS2_analog (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM3                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _SetDCEPWM1                                           6     4      2     253
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PS2_readType                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PS2_init                                            13    13      0   30192
                                             66 COMRAM    13    13      0
                    _PS2_readGamepad
              _PS2_sendCommandString
                     _PS2_shiftInOut
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_readGamepad                                     34    34      0   15932
                                             32 COMRAM    34    34      0
                       _PS2_reconfig
                     _PS2_shiftInOut
                           _delay_ms
                           _delay_us
                             _millis
 ---------------------------------------------------------------------------------
 (3) _PS2_reconfig                                         0     0      0    6274
              _PS2_sendCommandString
 ---------------------------------------------------------------------------------
 (4) _PS2_sendCommandString                                7     6      1    6274
                                             25 COMRAM     7     6      1
                     _PS2_shiftInOut
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _PS2_shiftInOut                                       5     5      0    3942
                                              9 COMRAM     5     5      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _PS2_analog                                           1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCD_printString                                     59    52      7   18028
                                             33 COMRAM     9     2      7
                                              0 BANK0     50    50      0
                    _LCD_placeCursor
                         _PS2_analog (ARG)
                           _delay_ms
                           _delay_us
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     947
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             16    12      4    1677
                                             17 COMRAM    16    12      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             12 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                              5 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _LCD_placeCursor                                      5     4      1    6001
                                             25 COMRAM     5     4      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             4     0      4    3744
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                            16    12      4    1542
                                              9 COMRAM    16    12      4
                             _millis
 ---------------------------------------------------------------------------------
 (4) _millis                                               4     0      4       0
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _encoderInterrupt                                     3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _communicationInterruptHandler                        2     2      0       0
                                              3 COMRAM     2     2      0
                         _tickMillis
 ---------------------------------------------------------------------------------
 (10) _tickMillis                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_printString
     _LCD_placeCursor
       _delay_ms
         _millis
       _delay_us
     _PS2_analog (ARG)
     _delay_ms (ARG)
       _millis
     _delay_us (ARG)
     _sprintf (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat (ARG)
   _RCMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _PS2_analog
     _PS2_init
       _PS2_readGamepad
         _PS2_reconfig
           _PS2_sendCommandString
             _PS2_shiftInOut
               _delay_us
             _delay_ms
               _millis
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
         _delay_us
         _millis
       _PS2_sendCommandString
         _PS2_shiftInOut
           _delay_us
         _delay_ms
           _millis
       _PS2_shiftInOut
         _delay_us
       _delay_us
     _PS2_readGamepad
       _PS2_reconfig
         _PS2_sendCommandString
           _PS2_shiftInOut
             _delay_us
           _delay_ms
             _millis
       _PS2_shiftInOut
         _delay_us
       _delay_ms
         _millis
       _delay_us
       _millis
     _PS2_readType
     ___awdiv
       _PS2_analog (ARG)
       ___wmul (ARG)
     _delay_ms
       _millis
     _motorDrive_setSpeeds
       _SetDCEPWM1
       _SetDCEPWM3
       ___awdiv
         _PS2_analog (ARG)
         ___wmul (ARG)
       ___wmul
   _competitionMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
   _debug
     _UART_transmitByte
     _delay_ms
       _millis
     _fft_collectData
     _fft_readBin
   _delay_ms
     _millis
   _init
     _LCD_init4bit
       _delay_init
       _delay_ms
         _millis
       _delay_us
     _UART_init
     _clearMillis
     _encoders_init
     _fft_init
       _delay_us
     _motorDrive_init
       _OpenEPWM1
       _OpenEPWM3
       _SetDCEPWM1
       _SetDCEPWM3
       _SetOutputEPWM1
       _SetOutputEPWM3
       _motorDrive_setSpeeds
         _SetDCEPWM1
         _SetDCEPWM3
         ___awdiv
           _PS2_analog (ARG)
           ___wmul (ARG)
         ___wmul
     _settings_init
   _selfTest
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)
     _settings_readButton
   _settings_auto
   _settings_readButton
   _settings_selfTest
   _settings_wander
   _wanderMode
     _LCD_printString
       _LCD_placeCursor
         _delay_ms
           _millis
         _delay_us
       _PS2_analog (ARG)
       _delay_ms (ARG)
         _millis
       _delay_us (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
       _strcat (ARG)

 _encoderInterrupt (ROOT)

 _communicationInterruptHandler (ROOT)
   _tickMillis

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0     3E8      33       28.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      80      10       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     38      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     52      59       1       93.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24C       8        0.0%
DATA                 0      0     634       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri May  8 09:48:44 2015

                            __CFG_BW$16 000000                             __CFG_ABW$MM 000000  
                                    PL2 08A6                                      PL4 02AA  
                                    PL6 033E                                      PL8 0350  
                                    l94 05FA                            ___awdiv@sign 0011  
                                    bsr 000FE0                     ___wmul@multiplicand 0008  
                           __CFG_BORV$1 000000                          _SetOutputEPWM1 10EA  
                        _SetOutputEPWM3 1078                            __CFG_CP0$OFF 000000  
                                   PL10 08B2                                     PL20 06E8  
                                   PL12 0360                                     PL30 070A  
                                   PL22 06FC                                     PL14 06B0  
                                   PL40 0546                                     PL32 0DB2  
                                   PL24 0CEE                                     PL16 06C8  
                                   PL42 0550                                     PL34 0B26  
                                   PL26 0AF6                                     PL18 06D8  
                                   PL36 0536                                     PL28 0B0E  
                                   PL38 0378                                     l116 0204  
                                   l108 0150                                     l230 0F80  
                                   l250 1786                                     l256 1798  
                                   l551 15B0                                     l546 15A4  
                                   l555 15BA                                     l762 0E7C  
                                   l931 09E6                                     l764 0E7E  
                                   l859 046A                                     l948 1260  
                                   l949 1262                                     _GIE 007F97  
                                   _RG0 007C30                                     _RG1 007C31  
                                   _RG2 007C32                                     _RG3 007C33  
                                   _RG4 007C34                                     _RL1 007721  
                                   _RL2 007722                                     _RL3 007723  
                                   _PR2 000FCB                                     _PR4 000F05  
                                   _PR6 000F3E                            fft_readBin@i 0006  
                                   _PR8 000F3B                                     wreg 000FE8  
                            _TXSTA1bits 000FAC                              _TXSTA2bits 000F32  
                            _TXSTA3bits 000F2E                              _TXSTA4bits 000EFE  
                                  l1130 0A28                                    l1202 1138  
                                  l1207 1148                                    l1208 1154  
                                  l1209 1158                                    l1270 10E6  
                                  l1263 10C6                                    l1258 10AA  
                                  l3060 15C6                                    l1268 10D6  
                                  l1197 111C                                    l1269 10E2  
                                  l2406 113C                                    l2432 105E  
                                  l2424 102E                                    l5100 0284  
                                  l2428 1046                                    l2444 10AC  
                                  l5102 028A                                    l5030 009C  
                                  l2382 11B4                                    l2374 1184  
                                  l4400 13E4                                    l5040 00E0  
                                  l5024 0026                                    l2456 10CA  
                                  l2448 10B6                                    l2378 119C  
                                  l2394 111E                                    l1835 1466  
                                  l5060 017C                                    l5052 0158  
                                  l1845 14E8                                    l5046 0116  
                                  l5038 00D8                                    l4430 147A  
                                  l2398 1128                                    l4504 1436  
                                  l5056 0172                                    l5048 011C  
                                  l4408 1242                                    l5232 0CEC  
                                  l5208 0C78                                    l4506 143E  
                                  l4418 1290                                    l4434 148C  
                                  l5330 0D66                                    l5306 1676  
                                  l4540 057A                                    l4516 145C  
                                  l4508 1442                                    l4532 14DE  
                                  l4524 14C0                                    l5228 0CD8  
                                  l5252 176A                                    l5244 1764  
                                  l4700 03CC                                    l5324 0D3C  
                                  l5316 0D0A                                    l5308 167E  
                                  l4390 15DA                                    l4526 14C8  
                                  l4630 0AA0                                    l4622 0A84  
                                  l4614 0A64                                    l5094 0272  
                                  l5190 0C58                                    l5182 0C50  
                                  l4462 0F12                                    l4710 03F4  
                                  l4702 03D6                                    l5318 0D12  
                                  l5350 0B6E                                    l4528 14CC  
                                  l4608 0A60                                    l4640 0AEA  
                                  l5096 027C                                    l5352 0B80  
                                  l5344 0B38                                    l5258 1772  
                                  l4474 0F3A                                    l4490 0F6A  
                                  l5290 0FA0                                    l5370 0BFE  
                                  l5354 0B92                                    l5362 0BC8  
                                  l5346 0B3C                                    l4636 0ADE  
                                  l4628 0A9A                                    l4580 1386  
                                  l4476 0F42                                    l4468 0F2A  
                                  l4724 0432                                    l4716 040E  
                                  l4708 03EA                                    l5372 0C04  
                                  l5380 0C10                                    l5356 0BA4  
                                  l5364 0BDE                                    l5348 0B5C  
                                  l4574 06A0                                    l4638 0AE4  
                                  l4582 1394                                    l4654 094A  
                                  l4494 0F76                                    l4486 0F60  
                                  l4478 0F46                                    l4734 047A  
                                  l4726 043C                                    l4718 0418  
                                  l5294 0FB4                                    l5374 0C0A  
                                  l5358 0BB6                                    l4584 139C  
                                  l4672 0982                                    l4744 04C4  
                                  l4736 049E                                    l5288 0F8A  
                                  l5368 0BF8                                    l4578 1382  
                                  l4746 04D6                                    l4738 04A6  
                                  l4588 0A14                                    l4598 0A38  
                                  l4686 09BA                                    _ADON 007E0F  
                                  STR_1 FFFC                                    STR_2 FFDD  
                                  STR_3 FF4E                                    STR_4 FF2A  
                                  STR_5 FF93                                    STR_6 FF60  
                                  STR_7 FF18                                    STR_8 FFD1  
                                  STR_9 FF71                                    _CPEN 0076C7  
                                  _LCDA 0076D5                                    _DONE 007E00  
                                  u2224 1288                                    u2225 1284  
                                  u3037 15DC                                    u2405 060C  
                                  u2430 13C6                                    u2175 1606  
                                  u2415 0620                                    u2255 1538  
                                  u2265 14FC                                    u2194 1252  
                                  u2195 124E                                    u2437 13BC  
                                  u2701 000A                                    u2541 096A  
                                  u2525 0904                                    u2605 03A4  
                                  u2710 0044                                    u2551 0978  
                                  _IPEN 007E87                                    u2730 0082  
                                  u2395 0606                                    u2717 003A  
                                  u2750 0100                                    u2655 0442  
                                  u2760 013A                                    u2825 02DA  
                                  u2737 0078                                    u2835 0302  
                                  u2595 0388                                    u2757 00F6  
                                  u2685 04AC                                    u2767 0130  
                                  _SAMP 007E01                                    _main 0B30  
                                  _init 1740                                    _mode 0058  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                         __CFG_BOREN$ON 000000                                    prodh 000FF4  
                                  prodl 000FF3                      __CFG_WDTWIN$PS25_0 000000  
                                  start 0070                           __CFG_IESO$OFF 000000  
                    __CFG_LS48MHZ$SYSX2 000000                         _motorDrive_init 11CE  
                __end_of_SetOutputEPWM1 115C                  __end_of_SetOutputEPWM3 10EA  
           __end_of_settings_readButton 17E8                        RCMode@left_speed 0092  
                          _BAUDCON1bits 000F67                         _competitionMode 1788  
                          _BAUDCON2bits 000F31                            _BAUDCON3bits 000F2D  
                          _BAUDCON4bits 000EFD                           __CFG_WAIT$OFF 000000  
                           ?_PS2_analog 0001                                   ?_main 0001  
                                 ?_init 0001                         __end_of___awdiv 0F80  
                 OpenEPWM3@timer_source 0006                                   STR_10 FFC2  
                                 STR_11 FFA3                                   STR_20 FFEA  
                                 STR_12 FF3C                                   STR_13 FFB3  
                                 STR_14 FF82                                   STR_17 FFE0  
                                 STR_18 FFF3                                   STR_19 FF04  
              __size_of_fft_collectData 0088                                   _RD163 007D8F  
                                 _T0CON 000FD5                         ___awdiv@divisor 000E  
                                 _LCDMD 00778B                                   _RC1IE 007CED  
                                 _RC2IE 007D1D                                   _RC3IE 007B0D  
                      fft_collectData@i 000C                                   _RC4IE 007B0F  
                       __end_of___lwdiv 1470                                   i1l416 0062  
                                 i1l409 0044                         __end_of___lwmod 14F2  
                                 i2l296 136E                                   i2l298 1324  
                       ___awdiv@counter 0010                                   _TX1IE 007CEC  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TX2IE 007D1C                                   _TMR3L 000FB2  
                                 _TX3IE 007B0C                                   _TX4IE 007B0E  
                         ?_LCD_init4bit 0001                           __CFG_WPSA$128 000000  
                      __end_of_PS2_init 0CEE                          __CFG_EASHFT$ON 000000  
                       ??_encoders_init 0006                                   _debug 0F80  
                    __size_of_UART_init 00AC                         __end_of_dpowers FEE3  
                       ??_settings_auto 0006                         ??_settings_init 0006  
                                 _spbrg 00C1                                   tablat 000FF5  
                                 status 000FD8                         __end_of_sprintf 0AF6  
                            _SetDCEPWM1 152E                              _SetDCEPWM3 14F2  
                  __size_of_clearMillis 0010                         __initialization 12A8  
                   PS2_readGamepad@temp 003B                            __end_of_main 0C26  
                          __end_of_init 175C                 __size_of_PS2_shiftInOut 006C  
                       ?_SetOutputEPWM1 0006                         ?_SetOutputEPWM3 0006  
                                ??_main 0050                                  ??_init 002A  
                         __activetblptr 000003                          ??_LCD_init4bit 001A  
                   __CFG_WPEND$WPENDMEM 000000                          __CFG_RETEN$OFF 000000  
              __size_of_PS2_readGamepad 014E                    _motorDrive_setSpeeds 0384  
                                ?_debug 0001                                  _CCPR1L 000FBA  
                                _CCPR3L 000F4A                          __CFG_VBTBOR$ON 000000  
                                _ANCON1 000E47                                  _ANCON2 000E46  
                                _ANCON3 000E45                        ___awdiv@dividend 000C  
              __size_of_LCD_placeCursor 0156                                  _ANSEL6 00723E  
                                _ANSEL9 007231                                  _INT1IF 007F80  
                                _INT3IF 007F82                                  i1l4384 0054  
                                i1l4376 0034                                  _IOLOCK 007B36  
                        __CFG_WDTEN$OFF 000000                                  i2l4364 1356  
                                i2l4358 133C                                  _RCREG1 000FAE  
                                _RCREG3 000F2A                                  _RCREG4 000EFA  
                      _encoderInterrupt 0018                                  _NVCFG0 00746D  
                                _PVCFG0 00746E                                  _PVCFG1 00746F  
               __end_of_motorDrive_init 123C                                  _TMR0IE 007F95  
                                _SPBRG1 000FAF                                  _TMR0IF 007F92  
                                _SPBRG2 000F1F                                  _SPBRG3 000F2B  
                                _SPBRG4 000EFB                                  _TMR0IP 007F8A  
                                _TMR3IE 007D01                                  _TMR3ON 007D88  
                                _TMR4ON 007822                                  _TMR6ON 0079EA  
                                _RCMode 0CFA                                  _TRISE0 007CB0  
                                _TRISE1 007CB1                                  _TRISE2 007CB2  
                                _TRISE3 007CB3                                  _TRISE4 007CB4  
                                _TRISE5 007CB5                                  _TRISH0 007CC8  
                                _TRISE6 007CB6                                  _TRISH1 007CC9  
                                _TRISE7 007CB7                                  _TRISH2 007CCA  
                                _TRISH3 007CCB                                  _TRISG7 007CC7  
                                _TRISK1 007749                                  _TRISL0 007730  
                   __size_of_PS2_analog 0010                                  _TXREG1 000FAD  
                                _TXREG2 000F1D                                  _TXREG4 000EF9  
                      __end_of_delay_ms 1426                        __end_of_delay_us 160C  
                  __size_of_fft_readBin 0024                          __CFG_XINST$OFF 000000  
               __end_of_competitionMode 179A                      __size_of_OpenEPWM1 0072  
                    __size_of_OpenEPWM3 007A                        __end_of_fft_init 15A0  
                        settings_auto@t 0006                                  ___wmul 16B2  
        __size_of_PS2_sendCommandString 0044                       __end_of_UART_init 0E70  
                             ??___awdiv 0010                          __CFG_STVREN$ON 000000  
         __end_of_PS2_sendCommandString 14B4                               ??___lwdiv 000A  
                  settings_readButton@t 0006                               ??___lwmod 0011  
                                _config 00C5                                  debug@i 001C  
                                _millis 179A                                  clear_0 12B0  
                                clear_1 12C2                                  clear_2 12CE  
                                clear_3 12DA                                  clear_4 12E6  
                      ___awdiv@quotient 0012                         __CFG_CLKOEN$OFF 000000  
                                _strcat 1378                        __end_of_selfTest 168C  
                 ?_motorDrive_setSpeeds 0014                            __mediumconst FED8  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                       ??_fft_collectData 0006  
                       __CFG_DSBITEN$ON 000000                               ??_sprintf 0016  
                       __CFG_DSBOREN$ON 000000                              __accesstop 0060  
               __end_of__initialization 130C                      __CFG_DSWDTOSC$LPRC 000000  
                       __CFG_T5GSEL$T5G 000000                         __CFG_IOL1WAY$ON 000000  
                           ?_SetDCEPWM1 0006                             ?_SetDCEPWM3 0006  
                  PS2_readGamepad@dword 0032                          __pcstackCOMRAM 0001  
                          __pidataBANK0 163C                               ?_PS2_init 0001  
                LCD_placeCursor@address 001E                           __end_of_debug 0FFE  
              __size_of_settings_wander 000C                         __CFG_DSWDTEN$ON 000000  
                            __end_ofPL2 08B2                              __end_ofPL4 033E  
                            __end_ofPL6 0350                              __end_ofPL8 0360  
                     RCMode@right_speed 0094                       __CFG_PLLDIV$NODIV 000000  
                       OpenEPWM1@period 0008                         OpenEPWM3@period 0008  
                     __end_of_OpenEPWM1 11CE                       __end_of_OpenEPWM3 1078  
                               ??_debug 001A                __size_of_LCD_printString 02AA  
                            __pbssBANK0 0098                              __pbssBANK1 0100  
                            __pbssBANK2 0200                       ??_PS2_readGamepad 0021  
                      ?_motorDrive_init 0001                                 ?_RCMode 0001  
                     ??_LCD_placeCursor 001B                    __end_of_LCD_init4bit 08A6  
                            _delay_init 160C                        ?_competitionMode 0001  
                        _PS2_shiftInOut 123C                              ??_PS2_init 0043  
                               ?___wmul 0006                      settings_selfTest@t 0006  
                               _ADCBUF0 000FC2                                 _ADCHS0H 000E87  
                               _ADCHS0L 000E86                                 _ADCON3H 000E8B  
                               _ADCON1L 000FC0                                 _ADCON2L 000E8C  
                               _ADCON3L 000E8A                                 _ADCSS0H 000E83  
                               _CCP1CON 000FB9                                 _CCP3CON 000F49  
                             PS2_init@i 004E                               PS2_init@y 004C  
                               ?_millis 0006                            ??_PS2_analog 0006  
                               _ANSEL10 007232                                 _ANSEL11 007233  
                               _ANSEL21 00722D                                 _ANSEL14 007236  
                               _ANSEL16 007228                                 _ANSEL17 007229  
                               _ANSEL18 00722A                                 _ANSEL19 00722B  
                               ?_strcat 0006                           ?_PS2_readType 0001  
                               _T3CKPS0 007D8C                                 _T3CKPS1 007D8D  
                               _T4CKPS1 007821                                 _PADCFG1 000F54  
                               _T6CKPS1 0079E9                  ??_motorDrive_setSpeeds 0015  
                         ?_PS2_reconfig 0001                         __CFG_WDTCLK$FRC 000000  
                             ?_delay_ms 000A                               ?_delay_us 0006  
                   __size_of_SetDCEPWM1 003A                     __size_of_SetDCEPWM3 003C  
                               _TMR3CS0 007D8E                                 _TMR3CS1 007D8F  
                               _SPBRGH1 000F30                                 _SPBRGH2 000F20  
                               _SPBRGH3 000F2C                                 _SPBRGH4 000EFC  
                               _PS2data 0098                                 _SSP1ADD 000FC8  
                               _SSP2ADD 000F02                                 _SSP1BUF 000FC9  
                               _SSP2BUF 000F03                               ?_fft_init 0001  
              SetOutputEPWM1@outputmode 0006                      PS2_shiftInOut@byte 000C  
                       __size_of_RCMode 00B8                      __end_of_PS2_analog 17CC  
                      PS2_readGamepad@i 003F                        ??_SetOutputEPWM1 0007  
                      ??_SetOutputEPWM3 0007                              _left_count 00B1  
                __end_of_PS2_shiftInOut 12A8                               ?_selfTest 0001  
                               __Hparam 0000                                 __Lparam 0000  
                               ___awdiv 0EF8                         __size_of___wmul 0026  
                               ___lwdiv 1426                                 ___lwmod 14B4  
                               __pcinit 12A8                              _read_delay 0059  
                       __size_of_millis 0012                                 __ramtop 0E00  
              __end_of_encoderInterrupt 0070                          ??_PS2_readType 0006  
                      delay_init@config 00C3                                 __ptext0 0B30  
                               __ptext1 1776                                 __ptext2 17F6  
                               __ptext3 1802                                 __ptext4 17CC  
                               __ptext5 1666                                 __ptext6 17DA  
                               __ptext7 1740                                 __ptext8 16FC  
                               __ptext9 11CE                         PS2_shiftInOut@i 000E  
                       __size_of_strcat 0058                          ??_PS2_reconfig 0021  
                               _dpowers FED9                               _T2CONbits 000FCA  
                     ??_settings_wander 0006            __size_of_settings_readButton 000E  
                               _buttons 00BD                               _FONA_BUFF 0180  
                             _T4CONbits 000F04                              ??_delay_ms 000E  
                            ??_delay_us 000A                               _T6CONbits 000F3D  
                             _T8CONbits 000F3A                              ??_fft_init 000A  
                               _sprintf 0A0C                        LCD_placeCursor@x 001D  
                      LCD_placeCursor@y 001A                          __pintcode_body 1312  
                  end_of_initialization 130C                   __end_of_encoders_init 16B2  
                 __end_of_settings_auto 17DA                   __end_of_settings_init 171E  
              SetOutputEPWM3@outputmode 0006               LCD_printString@tempString 0060  
                               int_func 1312                           ??_clearMillis 0006  
                            _tickMillis 17E8                    LCD_printString@i_591 0090  
                       _controller_type 0057                       ??_LCD_printString 0029  
             motorDrive_setSpeeds@templ 0017               motorDrive_setSpeeds@tempr 0019  
                            ??_selfTest 002B                         ?_PS2_shiftInOut 0001  
                           ?_delay_init 0001                    LCD_printString@input 0023  
                               postdec1 000FE5                                 postdec2 000FDD  
                            _wanderMode 1776                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                             _RPOR10_11 000E17                        __CFG_FSCM$CSDCMD 000000  
                             _RPOR12_13 000E18                               _RPOR30_31 000E21  
                             _RPOR22_23 000E1D                               _RPOR34_35 000E23  
                PS2_sendCommandString@y 001E                               _PIXY_BUFF 0280  
                       _fft_collectData 0E70                               _PORTBbits 000F81  
                             _UART_init 0DC4                               _PORTDbits 000F83  
                             _PORTEbits 000F84                               _PORTFbits 000F85  
                             _PORTGbits 000F86                               _PORTHbits 000F87  
                 PS2_readGamepad@F16091 00C6                               _PORTJbits 000F88  
                             _PORTKbits 000EE7                               _PORTLbits 000EE4  
                      __CFG_FOSC$FRCPLL 000000                             _ADCON1Hbits 000FC1  
                             _TRISBbits 000F93                               _USB_INDEX 0056  
                             _TRISCbits 000F94              motorDrive_setSpeeds@lSpeed 0029  
                             _TRISDbits 000F95                               _TRISEbits 000F96  
                             _TRISFbits 000F97                               _TRISGbits 000F98  
                             _TRISHbits 000F99                               _TRISJbits 000F9A  
                             _TRISLbits 000EE6              motorDrive_setSpeeds@rSpeed 0014  
                  __CFG_CINASEL$DEFAULT 000000                   __size_of_LCD_init4bit 018A  
                 PS2_readGamepad@i_2572 0041                           ??_fft_readBin 0008  
                        __end_of_RCMode 0DB2                            ??_SetDCEPWM1 0008  
                          ??_SetDCEPWM3 0008                   PS2_readGamepad@dword2 0026  
                     __CFG_WPFP$WPFP255 000000                     __end_of_clearMillis 17BC  
                        __end_of___wmul 16D8                       __size_of_PS2_init 00C8  
                 _PS2_sendCommandString 1470                              ?_UART_init 0001  
                        __end_of_millis 17AC   __end_of_communicationInterruptHandler 1378  
__size_of_communicationInterruptHandler 1370           _communicationInterruptHandler 0008  
                       _PS2_readGamepad 08BE                          __end_of_strcat 13D0  
                           __end_ofPL10 08BE                             __end_ofPL20 06FC  
                           __end_ofPL12 0378                             __end_ofPL30 071C  
                           __end_ofPL22 070A                             __end_ofPL14 06C8  
                           __end_ofPL40 0550                             __end_ofPL32 0DC4  
                           __end_ofPL24 0CFA                             __end_ofPL16 06D8  
                           __end_ofPL42 055A                             __end_ofPL34 0B30  
                           __end_ofPL26 0B0E                             __end_ofPL18 06E8  
                           __end_ofPL36 0546                             __end_ofPL28 0B26  
                          _LCD_init4bit 071C                             __end_ofPL38 0384  
                   start_initialization 12A8                     __size_of_delay_init 0030  
                       _LCD_placeCursor 055A                   UART_transmitByte@data 0006  
                    __end_of_SetDCEPWM1 1568                      __end_of_SetDCEPWM3 152E  
                  SetOutputEPWM1@eccpmx 0008                            _enter_config 00EA  
                  SetOutputEPWM3@eccpmx 0008                               _OpenEPWM1 115C  
                             _OpenEPWM3 0FFE                                ??_RCMode 0050  
                           ?_tickMillis 0001                    __end_of_PS2_readType 1776  
                  __end_of_PS2_reconfig 1740                 __end_of_fft_collectData 0EF8  
                      _imaginaryNumbers 0200                     __end_of_fft_readBin 16FC  
                           ?_wanderMode 0001                                ??___wmul 000A  
                           __pdataBANK0 00C6                                ??_millis 000A  
                              ??_strcat 000A                            _last_buttons 00BF  
                           __pbssBIGRAM 0280                             __pbssCOMRAM 0053  
                         __pcstackBANK0 0060                     __end_of__stringdata FFFE  
                   SetDCEPWM1@dutycycle 0006                       __size_of_delay_ms 0056  
                     __size_of_delay_us 0036                              ?_OpenEPWM1 0006  
                            ?_OpenEPWM3 0006                       __size_of_fft_init 0038  
                           sprintf@_val 001B                             sprintf@flag 0019  
                           sprintf@prec 001A                             _clearMillis 17AC  
                   _settings_readButton 17DA                        ___lwdiv@dividend 0006  
                             __pintcode 0008                         _settings_wander 17F6  
                     __size_of_selfTest 0026                           __pmediumconst FED8  
              __size_of_motorDrive_init 006E                                ?___awdiv 000C  
                   SetDCEPWM3@dutycycle 0006                       _settings_selfTest 1802  
               __end_of_PS2_readGamepad 0A0C                                ?___lwdiv 0006  
                              ?___lwmod 000D                  ?_PS2_sendCommandString 001A  
                           __pintcodelo 0018                      ?_settings_selfTest 0001  
                           ??_UART_init 0006                __size_of_competitionMode 0012  
                     ?_encoderInterrupt 0001                 __end_of_LCD_placeCursor 06B0  
                     PS2_shiftInOut@tmp 000D                     __size_of_tickMillis 000E  
                  ?_settings_readButton 0001                        __CFG_POSCMD$NONE 000000  
            SetOutputEPWM1@outputconfig 0009                      ??_encoderInterrupt 0001  
                   ??_settings_selfTest 0006           __size_of_motorDrive_setSpeeds 01B2  
                              _CCPTMRS0 000F36                         _LCD_printString 0000  
                           _PADCFG1bits 000F54          ?_communicationInterruptHandler 0001  
                             _last_read 00AD                        ___lwdiv@quotient 000B  
                        __size_of_debug 007E                               debug@temp 001A  
                              ?_sprintf 0012                     __size_of_wanderMode 0012  
                      ??_PS2_shiftInOut 000A                              RCMode@done 0097  
                        ___wmul@product 000A                               delay_ms@x 000A  
                           _fft_readBin 16D8                              RCMode@type 0096  
                             delay_us@x 0006                            ??_delay_init 0006  
                   LCD_printString@aptr 008D                                _PIR1bits 000F9E  
                              _PIR3bits 000FA4             PS2_sendCommandString@string 0020  
             __end_of_settings_selfTest 180E                                _PIR6bits 000FA6  
                      ?_fft_collectData 0001                        __CFG_WDTPS$32768 000000  
                              _PS2_init 0C26                                _RPINR0_1 000E2A  
                              _RPINR4_5 000E2C                                _RPINR6_7 000E2D  
                              _SSP1CON1 000FC6                                _SSP1CON2 000FC5  
                              _SSP1CON3 000F69                                _SSP2CON1 000F19  
                              _SSP2CON3 000F39                                _SSP1STAT 000FC7  
                              _SSP2STAT 000F1A                                _USB_BUFF 0474  
                      PS2_analog@button 0006                             __stringdata FF04  
                     ___wmul@multiplier 0006                        __CFG_SOSCSEL$DIG 000000  
                 ??_settings_readButton 0006                       _UART_transmitByte 15A0  
                            _CM1CONbits 000F53                     __end_ofatan@coeff_a FEF5  
                   __end_ofatan@coeff_b FF04                        __CFG_WPDIS$WPDIS 000000  
                    __end_of_delay_init 163C                      ?_UART_transmitByte 0006  
                          PS2_init@temp 0043                   __size_of_PS2_readType 001A  
                           _INTCON2bits 000FF1                            delay_ms@time 0016  
                           _INTCON3bits 000FF0                               copy_data0 1300  
                             _type_read 00CF                             ??_OpenEPWM1 0007  
                           ??_OpenEPWM3 0007                   __size_of_PS2_reconfig 0022  
               __end_of_settings_wander 1802                     ??_UART_transmitByte 0007  
                              __Hrparam 0000           UART_transmitByte@transmitType 0007  
                      SetDCEPWM1@DCycle 000A                                __Lrparam 0000  
                      SetDCEPWM3@DCycle 000A                        ?_PS2_readGamepad 0001  
                      __size_of___awdiv 0088                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                  __size_of_encoders_init 0026  
                 OpenEPWM1@timer_source 0006                  __size_of_settings_auto 000E  
                __size_of_settings_init 0022                 __size_of_SetOutputEPWM1 0072  
               __size_of_SetOutputEPWM3 0072                 __end_of_LCD_printString 02AA  
             __end_of_UART_transmitByte 15D6                        ?_LCD_placeCursor 001A  
                     ??_motorDrive_init 002A                            _PS2_readType 175C  
                          _PS2_reconfig 171E                              strcat@from 0008  
                              _delay_ms 13D0                                _delay_us 15D6  
                       ___lwdiv@divisor 0008                         ___lwdiv@counter 000A  
                              __ptext10 1078                                __ptext11 10EA  
                              __ptext20 0F80                                __ptext12 0FFE  
                              __ptext21 16D8                                __ptext13 115C  
                              __ptext30 152E                                __ptext22 0E70  
                              __ptext14 1568                                __ptext31 175C  
                              __ptext23 15A0                                __ptext15 168C  
                              __ptext40 0A0C                                __ptext32 0C26  
                              __ptext24 1788                                __ptext16 17AC  
                              __ptext41 14B4                                __ptext33 08BE  
                              __ptext25 0CFA                                __ptext17 0DC4  
                     ??_competitionMode 002B                                __ptext42 1426  
                              __ptext34 171E                                __ptext26 0384  
                              __ptext18 071C                                __ptext43 055A  
                              __ptext35 1470                                __ptext27 16B2  
                              __ptext19 160C                                __ptext44 15D6  
                              __ptext36 123C                                __ptext28 0EF8  
                              __ptext45 13D0                                __ptext37 17BC  
                              __ptext29 14F2                                __ptext46 179A  
                              __ptext38 0000                                __ptext39 1378  
                              __ptext49 17E8                            _SSP1CON1bits 000FC6  
                          _SSP1CON2bits 000FC5                              _LCDCONbits 000ED9  
                           _realNumbers 0100                                _fft_init 1568  
                      settings_wander@t 0006                             _exit_config 00D8  
                          _SSP2CON1bits 000F19                            _SSP2CON2bits 000F18  
                      __size_of_sprintf 00EA                            ??_tickMillis 0004  
                         __size_of_main 00F6                           __size_of_init 001C  
                           _millisCount 00B5                              _FONA_INDEX 0053  
                    __CFG_MSSPMSK1$MSK7 000000                      __CFG_MSSPMSK2$MSK7 000000  
                              _selfTest 1666                      LCD_printString@val 0089  
            __size_of_settings_selfTest 000C                                _set_mode 00E1  
                          ??_wanderMode 002B                             _UART4_INDEX 0055  
                            _MEMCONbits 000EE3               _motorDrive_setSpeeds$2460 0025  
             _motorDrive_setSpeeds$2461 0027               _motorDrive_setSpeeds$2455 001B  
             _motorDrive_setSpeeds$2456 001D               _motorDrive_setSpeeds$2457 001F  
             _motorDrive_setSpeeds$2458 0021               _motorDrive_setSpeeds$2459 0023  
                          _SSP1STATbits 000FC7                                main@mode 0052  
                          _SSP2STATbits 000F1A                             atan@coeff_a FEE3  
                           atan@coeff_b FEF5                              _INTCONbits 000FF2  
                    __end_of_tickMillis 17F6                                intlevel1 0000  
                              intlevel2 0000                               sprintf@ap 0018  
                    __end_of_wanderMode 1788                               sprintf@sp 0020  
                         _encoders_init 168C                           _settings_auto 17CC  
                         _settings_init 16FC                        ___lwmod@dividend 000D  
                           _right_count 00B9                PS2_sendCommandString@len 001A  
                          ?_clearMillis 0001                        ?_settings_wander 0001  
                            _RCSTA1bits 000FAB                              _RCSTA2bits 000F33  
                            _RCSTA3bits 000F2F                              _RCSTA4bits 000EFF  
                 LCD_printString@string 0074                 ??_PS2_sendCommandString 001B  
                            _PS2_analog 17BC                              _RPINR26_27 000E37  
                            _RPINR28_29 000E38                        ?_LCD_printString 0022  
            __size_of_UART_transmitByte 0036                            _ADCBUF0Hbits 000FC3  
                              sprintf@c 0021                                sprintf@f 0012  
                              strcat@cp 000A                            _ADCBUF0Lbits 000FC2  
                              strcat@to 0006                         ___lwmod@divisor 000F  
                       ___lwmod@counter 0011                              _PIXY_INDEX 0054  
            SetOutputEPWM3@outputconfig 0009                        LCD_printString@i 008E  
                            _PSPCONbits 000FA7                        LCD_printString@x 0088  
                      LCD_printString@y 0022                             _USART4_BUFF 01B2  
                        ?_encoders_init 0001                     __CFG_WPCFG$WPCFGDIS 000000  
                        ?_settings_auto 0001                          ?_settings_init 0001  
         LCD_printString@tempString_590 008B                      __CFG_WINDIS$WDTSTD 000000  
             __size_of_encoderInterrupt 0058                            ?_fft_readBin 0006  
          __end_of_motorDrive_setSpeeds 0536                  __CFG_DSWDTPS$DSWDTPS1F 000000  
       ??_communicationInterruptHandler 0004  
