; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\camera.o --asm_dir=.\ --list_dir=.\ --depend=.\camera.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\camera.crf camera.cpp]
                          THUMB

                          AREA ||i._Z10cam_getAECv||, CODE, READONLY, ALIGN=2

                  _Z10cam_getAECv PROC ; cam_getAEC()
;;;384    
;;;385    uint32_t cam_getAEC()
000000  4801              LDR      r0,|L1.8|
;;;386    {
;;;387    	return g_aec;
000002  7800              LDRB     r0,[r0,#0]  ; g_aec
;;;388    }
000004  4770              BX       lr
;;;389    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      g_aec

                          AREA ||i._Z10cam_getAWBv||, CODE, READONLY, ALIGN=2

                  _Z10cam_getAWBv PROC ; cam_getAWB()
;;;335    
;;;336    uint32_t cam_getAWB()
000000  4801              LDR      r0,|L2.8|
;;;337    {
;;;338    	return g_awb;
000002  7800              LDRB     r0,[r0,#0]  ; g_awb
;;;339    }
000004  4770              BX       lr
;;;340    							   
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      g_awb

                          AREA ||i._Z10cam_getECVv||, CODE, READONLY, ALIGN=2

                  _Z10cam_getECVv PROC ; cam_getECV()
;;;402    
;;;403    uint32_t cam_getECV()
000000  b510              PUSH     {r4,lr}
;;;404    {
;;;405    	uint32_t ecv;
;;;406    
;;;407    	ecv = g_sccb->Read(0x16); // AEC MSB
000002  2116              MOVS     r1,#0x16
000004  480a              LDR      r0,|L3.48|
000006  6800              LDR      r0,[r0,#0]  ; g_sccb
000008  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00000c  4604              MOV      r4,r0
;;;408    	ecv <<= 8;
00000e  0224              LSLS     r4,r4,#8
;;;409    	ecv |= g_sccb->Read(0x10); // AEC LSB
000010  2110              MOVS     r1,#0x10
000012  4807              LDR      r0,|L3.48|
000014  6800              LDR      r0,[r0,#0]  ; g_sccb
000016  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00001a  4304              ORRS     r4,r4,r0
;;;410    	ecv <<= 8;
00001c  0224              LSLS     r4,r4,#8
;;;411    	ecv |= g_sccb->Read(0x00); // AGC gain
00001e  2100              MOVS     r1,#0
000020  4803              LDR      r0,|L3.48|
000022  6800              LDR      r0,[r0,#0]  ; g_sccb
000024  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
000028  4304              ORRS     r4,r4,r0
;;;412    
;;;413    	return ecv;
00002a  4620              MOV      r0,r4
;;;414    }
00002c  bd10              POP      {r4,pc}
;;;415    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      g_sccb

                          AREA ||i._Z10cam_getWBVv||, CODE, READONLY, ALIGN=2

                  _Z10cam_getWBVv PROC ; cam_getWBV()
;;;352    
;;;353    uint32_t cam_getWBV()
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355    	uint32_t wbv;
;;;356    
;;;357    	wbv = g_sccb->Read(0x01); // blue
000002  2101              MOVS     r1,#1
000004  480a              LDR      r0,|L4.48|
000006  6800              LDR      r0,[r0,#0]  ; g_sccb
000008  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00000c  4604              MOV      r4,r0
;;;358    	wbv <<= 8;
00000e  0224              LSLS     r4,r4,#8
;;;359    	wbv |= g_sccb->Read(0x02); // red
000010  2102              MOVS     r1,#2
000012  4807              LDR      r0,|L4.48|
000014  6800              LDR      r0,[r0,#0]  ; g_sccb
000016  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00001a  4304              ORRS     r4,r4,r0
;;;360    	wbv <<= 8;
00001c  0224              LSLS     r4,r4,#8
;;;361    	wbv |= g_sccb->Read(0x05); // green
00001e  2105              MOVS     r1,#5
000020  4803              LDR      r0,|L4.48|
000022  6800              LDR      r0,[r0,#0]  ; g_sccb
000024  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
000028  4304              ORRS     r4,r4,r0
;;;362    
;;;363    	return wbv;
00002a  4620              MOV      r0,r4
;;;364    }
00002c  bd10              POP      {r4,pc}
;;;365    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      g_sccb

                          AREA ||i._Z10cam_setAECRKh||, CODE, READONLY, ALIGN=2

                  _Z10cam_setAECRKh PROC ; cam_setAEC(const unsigned char&)
;;;366    
;;;367    int32_t cam_setAEC(const uint8_t &aec)
000000  b510              PUSH     {r4,lr}
;;;368    {
000002  4604              MOV      r4,r0
;;;369    	if (aec!=g_aec)
000004  7820              LDRB     r0,[r4,#0]
000006  4907              LDR      r1,|L5.36|
000008  7809              LDRB     r1,[r1,#0]  ; g_aec
00000a  4288              CMP      r0,r1
00000c  d008              BEQ      |L5.32|
;;;370    	{
;;;371    		//if (aec==0)
;;;372    		//{
;;;373    			g_sccb->Write(0x13, 0xa0); // turn off AEC, AGC
00000e  22a0              MOVS     r2,#0xa0
000010  2113              MOVS     r1,#0x13
000012  4805              LDR      r0,|L5.40|
000014  6800              LDR      r0,[r0,#0]  ; g_sccb
000016  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;374    			g_aec = 0;
00001a  2000              MOVS     r0,#0
00001c  4901              LDR      r1,|L5.36|
00001e  7008              STRB     r0,[r1,#0]
                  |L5.32|
;;;375    	//	}
;;;376    		//else
;;;377    	//	{
;;;378    	//		g_sccb->Write(0x13, 0xa5); // enable AEC, AGC
;;;379    	//		g_aec = 1;
;;;380    	//	}
;;;381       	}
;;;382    	return 0;
000020  2000              MOVS     r0,#0
;;;383    }
000022  bd10              POP      {r4,pc}
;;;384    
                          ENDP

                  |L5.36|
                          DCD      g_aec
                  |L5.40|
                          DCD      g_sccb

                          AREA ||i._Z10cam_setAWBRKh||, CODE, READONLY, ALIGN=2

                  _Z10cam_setAWBRKh PROC ; cam_setAWB(const unsigned char&)
;;;315    
;;;316    int32_t cam_setAWB(const uint8_t &awb)
000000  b510              PUSH     {r4,lr}
;;;317    {
000002  4604              MOV      r4,r0
;;;318    	if (awb!=g_awb)
000004  7820              LDRB     r0,[r4,#0]
000006  490a              LDR      r1,|L6.48|
000008  7809              LDRB     r1,[r1,#0]  ; g_awb
00000a  4288              CMP      r0,r1
00000c  d00e              BEQ      |L6.44|
;;;319    	{
;;;320    	//	if (awb==0)
;;;321    	//	{
;;;322    			g_sccb->Write(0x38, 0x00);
00000e  2200              MOVS     r2,#0
000010  2138              MOVS     r1,#0x38
000012  4808              LDR      r0,|L6.52|
000014  6800              LDR      r0,[r0,#0]  ; g_sccb
000016  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;323    			g_sccb->Write(0x96, 0xe1);
00001a  22e1              MOVS     r2,#0xe1
00001c  2196              MOVS     r1,#0x96
00001e  4805              LDR      r0,|L6.52|
000020  6800              LDR      r0,[r0,#0]  ; g_sccb
000022  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;324    			g_awb = 0;
000026  2000              MOVS     r0,#0
000028  4901              LDR      r1,|L6.48|
00002a  7008              STRB     r0,[r1,#0]
                  |L6.44|
;;;325    	//	}
;;;326    	//	else
;;;327    	//	{
;;;328    	//		g_sccb->Write(0x38, 0x10);
;;;329    	//		g_sccb->Write(0x96, 0xf1);
;;;330    	//		g_awb = 1;
;;;331    	//	}
;;;332       	}
;;;333    	return 0;
00002c  2000              MOVS     r0,#0
;;;334    }
00002e  bd10              POP      {r4,pc}
;;;335    
                          ENDP

                  |L6.48|
                          DCD      g_awb
                  |L6.52|
                          DCD      g_sccb

                          AREA ||i._Z10cam_setECVRKj||, CODE, READONLY, ALIGN=2

                  _Z10cam_setECVRKj PROC ; cam_setECV(const unsigned&)
;;;389    
;;;390    int32_t cam_setECV(const uint32_t &ecv)
000000  b570              PUSH     {r4-r6,lr}
;;;391    {
000002  4605              MOV      r5,r0
;;;392    	uint32_t val = ecv;
000004  682c              LDR      r4,[r5,#0]
;;;393    
;;;394    	g_sccb->Write(0x00, (unsigned char)(val&0xff));	// AGC gain
000006  b2e2              UXTB     r2,r4
000008  2100              MOVS     r1,#0
00000a  480a              LDR      r0,|L7.52|
00000c  6800              LDR      r0,[r0,#0]  ; g_sccb
00000e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;395    	val >>= 8;
000012  0a24              LSRS     r4,r4,#8
;;;396    	g_sccb->Write(0x10, (unsigned char)(val&0xff));	// AEC LSB
000014  b2e2              UXTB     r2,r4
000016  2110              MOVS     r1,#0x10
000018  4806              LDR      r0,|L7.52|
00001a  6800              LDR      r0,[r0,#0]  ; g_sccb
00001c  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;397    	val >>= 8;
000020  0a24              LSRS     r4,r4,#8
;;;398    	g_sccb->Write(0x16, (unsigned char)(val&0xff)); // AEC MSB	
000022  b2e2              UXTB     r2,r4
000024  2116              MOVS     r1,#0x16
000026  4803              LDR      r0,|L7.52|
000028  6800              LDR      r0,[r0,#0]  ; g_sccb
00002a  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;399    	
;;;400    	return 0;		
00002e  2000              MOVS     r0,#0
;;;401    }
000030  bd70              POP      {r4-r6,pc}
;;;402    
                          ENDP

000032  0000              DCW      0x0000
                  |L7.52|
                          DCD      g_sccb

                          AREA ||i._Z10cam_setWBVRKj||, CODE, READONLY, ALIGN=2

                  _Z10cam_setWBVRKj PROC ; cam_setWBV(const unsigned&)
;;;340    							   
;;;341    int32_t cam_setWBV(const uint32_t &wbv)
000000  b570              PUSH     {r4-r6,lr}
;;;342    {
000002  4605              MOV      r5,r0
;;;343    	uint32_t val = wbv;
000004  682c              LDR      r4,[r5,#0]
;;;344    	g_sccb->Write(0x05, (unsigned char)(val&0xff));	// green
000006  b2e2              UXTB     r2,r4
000008  2105              MOVS     r1,#5
00000a  480a              LDR      r0,|L8.52|
00000c  6800              LDR      r0,[r0,#0]  ; g_sccb
00000e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;345    	val >>= 8;
000012  0a24              LSRS     r4,r4,#8
;;;346    	g_sccb->Write(0x02, (unsigned char)(val&0xff)); // red
000014  b2e2              UXTB     r2,r4
000016  2102              MOVS     r1,#2
000018  4806              LDR      r0,|L8.52|
00001a  6800              LDR      r0,[r0,#0]  ; g_sccb
00001c  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;347    	val >>= 8;
000020  0a24              LSRS     r4,r4,#8
;;;348    	g_sccb->Write(0x01, (unsigned char)(val&0xff)); // blue
000022  b2e2              UXTB     r2,r4
000024  2101              MOVS     r1,#1
000026  4803              LDR      r0,|L8.52|
000028  6800              LDR      r0,[r0,#0]  ; g_sccb
00002a  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;349    	
;;;350    	return 0;			
00002e  2000              MOVS     r0,#0
;;;351    }
000030  bd70              POP      {r4-r6,pc}
;;;352    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      g_sccb

                          AREA ||i._Z11cam_getModev||, CODE, READONLY, ALIGN=2

                  _Z11cam_getModev PROC ; cam_getMode()
;;;310    
;;;311    uint32_t cam_getMode()
000000  4801              LDR      r0,|L9.8|
;;;312    {
;;;313    	return g_mode;
000002  7800              LDRB     r0,[r0,#0]  ; g_mode
;;;314    }
000004  4770              BX       lr
;;;315    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      g_mode

                          AREA ||i._Z11cam_setModeRKh||, CODE, READONLY, ALIGN=2

                  _Z11cam_setModeRKh PROC ; cam_setMode(const unsigned char&)
;;;290    
;;;291    int32_t cam_setMode(const uint8_t &mode)
000000  b510              PUSH     {r4,lr}
;;;292    {
000002  4604              MOV      r4,r0
;;;293    	if (mode!=g_mode)
000004  7820              LDRB     r0,[r4,#0]
000006  490f              LDR      r1,|L10.68|
000008  7809              LDRB     r1,[r1,#0]  ; g_mode
00000a  4288              CMP      r0,r1
00000c  d017              BEQ      |L10.62|
;;;294    	{
;;;295    		if (mode==0)
00000e  7820              LDRB     r0,[r4,#0]
000010  b938              CBNZ     r0,|L10.34|
;;;296    		{
;;;297    			cam_setRegs(g_mode0Regs, sizeof(g_mode0Regs));
000012  211e              MOVS     r1,#0x1e
000014  480c              LDR      r0,|L10.72|
000016  f7fffffe          BL       _Z11cam_setRegsPKhi ; cam_setRegs(const unsigned char*, int)
;;;298    			g_mode = 0;
00001a  2000              MOVS     r0,#0
00001c  4909              LDR      r1,|L10.68|
00001e  7008              STRB     r0,[r1,#0]
000020  e00d              B        |L10.62|
                  |L10.34|
;;;299    		}
;;;300    		else if (mode==1)
000022  7820              LDRB     r0,[r4,#0]
000024  2801              CMP      r0,#1
000026  d107              BNE      |L10.56|
;;;301    		{
;;;302    			cam_setRegs(g_mode1Regs, sizeof(g_mode1Regs));
000028  211e              MOVS     r1,#0x1e
00002a  4808              LDR      r0,|L10.76|
00002c  f7fffffe          BL       _Z11cam_setRegsPKhi ; cam_setRegs(const unsigned char*, int)
;;;303    			g_mode = 1;
000030  2001              MOVS     r0,#1
000032  4904              LDR      r1,|L10.68|
000034  7008              STRB     r0,[r1,#0]
000036  e002              B        |L10.62|
                  |L10.56|
;;;304    		}
;;;305    		else 
;;;306    			return -1;
000038  f04f30ff          MOV      r0,#0xffffffff
                  |L10.60|
;;;307    	}
;;;308    	return 0;
;;;309    }
00003c  bd10              POP      {r4,pc}
                  |L10.62|
00003e  2000              MOVS     r0,#0                 ;308
000040  e7fc              B        |L10.60|
;;;310    
                          ENDP

000042  0000              DCW      0x0000
                  |L10.68|
                          DCD      g_mode
                  |L10.72|
                          DCD      g_mode0Regs
                  |L10.76|
                          DCD      g_mode1Regs

                          AREA ||i._Z11cam_setRegsPKhi||, CODE, READONLY, ALIGN=2

                  _Z11cam_setRegsPKhi PROC ; cam_setRegs(const unsigned char*, int)
;;;559    
;;;560    void cam_setRegs(const uint8_t *rPairs, int len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;561    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;562    	int i;
;;;563    
;;;564    	// put imager in sleep mode
;;;565      	g_sccb->Write(0x09, 0x10);
000006  2210              MOVS     r2,#0x10
000008  2109              MOVS     r1,#9
00000a  4813              LDR      r0,|L11.88|
00000c  6800              LDR      r0,[r0,#0]  ; g_sccb
00000e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;566    	for (i=0; i<len; i+=2)
000012  2400              MOVS     r4,#0
000014  e013              B        |L11.62|
                  |L11.22|
;;;567    	{
;;;568    		//printf("0x%x = 0x%x\n", rPairs[i], g_sccb->Read(rPairs[i]));
;;;569    		g_sccb->Write(rPairs[i], rPairs[i+1]);
000016  1c60              ADDS     r0,r4,#1
000018  5c2a              LDRB     r2,[r5,r0]
00001a  5d29              LDRB     r1,[r5,r4]
00001c  480e              LDR      r0,|L11.88|
00001e  6800              LDR      r0,[r0,#0]  ; g_sccb
000020  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;570    		if (g_sccb->Read(rPairs[i])!=rPairs[i+1])
000024  5d29              LDRB     r1,[r5,r4]
000026  480c              LDR      r0,|L11.88|
000028  6800              LDR      r0,[r0,#0]  ; g_sccb
00002a  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00002e  1c61              ADDS     r1,r4,#1
000030  5c69              LDRB     r1,[r5,r1]
000032  4288              CMP      r0,r1
000034  d002              BEQ      |L11.60|
;;;571    			volatile int q = 0;
000036  2000              MOVS     r0,#0
000038  9000              STR      r0,[sp,#0]
;;;572    	}
00003a  bf00              NOP      
                  |L11.60|
00003c  1ca4              ADDS     r4,r4,#2              ;566
                  |L11.62|
00003e  42b4              CMP      r4,r6                 ;566
000040  dbe9              BLT      |L11.22|
;;;573    	// take imager out of sleep mode
;;;574      	g_sccb->Write(0x09, 0x00);
000042  2200              MOVS     r2,#0
000044  2109              MOVS     r1,#9
000046  4804              LDR      r0,|L11.88|
000048  6800              LDR      r0,[r0,#0]  ; g_sccb
00004a  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;575    
;;;576    	cam_setBrightness(g_brightness);
00004e  4803              LDR      r0,|L11.92|
000050  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;577    }
000054  bdf8              POP      {r3-r7,pc}
;;;578    
                          ENDP

000056  0000              DCW      0x0000
                  |L11.88|
                          DCD      g_sccb
                  |L11.92|
                          DCD      g_brightness

                          AREA ||i._Z12cam_getFramePhjhtttt||, CODE, READONLY, ALIGN=2

                  _Z12cam_getFramePhjhtttt PROC ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;480    
;;;481    int32_t cam_getFrame(uint8_t *memory, uint32_t memSize, uint8_t type, uint16_t xOffset, uint16_t yOffset, uint16_t xWidth, uint16_t yWidth)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;482    {
000004  b091              SUB      sp,sp,#0x44
000006  4682              MOV      r10,r0
000008  468b              MOV      r11,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
00000e  e9dd941a          LDRD     r9,r4,[sp,#0x68]
000012  9d1c              LDR      r5,[sp,#0x70]
;;;483    	int32_t res;
;;;484    	int32_t responseInt = -1;
000014  f04f30ff          MOV      r0,#0xffffffff
000018  900f              STR      r0,[sp,#0x3c]
;;;485    
;;;486    	if (xWidth*yWidth>memSize)
00001a  fb04f005          MUL      r0,r4,r5
00001e  4558              CMP      r0,r11
000020  d904              BLS      |L12.44|
;;;487    		return -2;
000022  f06f0001          MVN      r0,#1
                  |L12.38|
;;;488    
;;;489    	// check resolutions
;;;490    	res = type >> 4;
;;;491    	if (res==0)
;;;492    	{
;;;493    		if (xOffset+xWidth>CAM_RES0_WIDTH || yOffset+yWidth>CAM_RES0_HEIGHT)
;;;494    			return -1;
;;;495    	}
;;;496    	else if (res==1) 
;;;497    	{
;;;498    		if (xOffset+xWidth>CAM_RES1_WIDTH || yOffset+yWidth>CAM_RES1_HEIGHT)
;;;499    			return -1;
;;;500    	}
;;;501    	else if (res==2)
;;;502    	{
;;;503    		if (xOffset+xWidth>CAM_RES2_WIDTH || yOffset+yWidth>CAM_RES2_HEIGHT)
;;;504    			return -1;
;;;505    	}
;;;506    	else
;;;507    		return -3;
;;;508    
;;;509    	// check mode, set if necessary
;;;510    	if ((res=cam_setMode(type&0x0f))<0)
;;;511    		return res;
;;;512    
;;;513    	// forward call to M0, get frame
;;;514    	g_chirpM0->callSync(g_getFrameM0, 
;;;515    		UINT8(type), UINT32((uint32_t)memory), UINT16(xOffset), UINT16(yOffset), UINT16(xWidth), UINT16(yWidth), END_OUT_ARGS,
;;;516    		&responseInt, END_IN_ARGS);
;;;517    
;;;518    	if (responseInt==0)
;;;519    	{
;;;520    		g_rawFrame.m_pixels = memory;
;;;521    		g_rawFrame.m_width = xWidth;
;;;522    		g_rawFrame.m_height = yWidth;
;;;523    	}
;;;524    
;;;525    	return responseInt;
;;;526    }
000026  b011              ADD      sp,sp,#0x44
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.44|
00002c  ea4f1728          ASR      r7,r8,#4              ;490
000030  b95f              CBNZ     r7,|L12.74|
000032  1930              ADDS     r0,r6,r4              ;493
000034  f5b06fa0          CMP      r0,#0x500             ;493
000038  dc04              BGT      |L12.68|
00003a  eb090005          ADD      r0,r9,r5              ;493
00003e  f5b07f48          CMP      r0,#0x320             ;493
000042  dd20              BLE      |L12.134|
                  |L12.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;494
000048  e7ed              B        |L12.38|
                  |L12.74|
00004a  2f01              CMP      r7,#1                 ;496
00004c  d10b              BNE      |L12.102|
00004e  1930              ADDS     r0,r6,r4              ;498
000050  f5b07f20          CMP      r0,#0x280             ;498
000054  dc04              BGT      |L12.96|
000056  eb090005          ADD      r0,r9,r5              ;498
00005a  f5b07fc8          CMP      r0,#0x190             ;498
00005e  dd12              BLE      |L12.134|
                  |L12.96|
000060  f04f30ff          MOV      r0,#0xffffffff        ;499
000064  e7df              B        |L12.38|
                  |L12.102|
000066  2f02              CMP      r7,#2                 ;501
000068  d10a              BNE      |L12.128|
00006a  1930              ADDS     r0,r6,r4              ;503
00006c  f5b07fa0          CMP      r0,#0x140             ;503
000070  dc03              BGT      |L12.122|
000072  eb090005          ADD      r0,r9,r5              ;503
000076  28c8              CMP      r0,#0xc8              ;503
000078  dd05              BLE      |L12.134|
                  |L12.122|
00007a  f04f30ff          MOV      r0,#0xffffffff        ;504
00007e  e7d2              B        |L12.38|
                  |L12.128|
000080  f06f0002          MVN      r0,#2                 ;507
000084  e7cf              B        |L12.38|
                  |L12.134|
000086  f008000f          AND      r0,r8,#0xf            ;510
00008a  9010              STR      r0,[sp,#0x40]         ;510
00008c  a810              ADD      r0,sp,#0x40           ;510
00008e  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
000092  1e07              SUBS     r7,r0,#0              ;510
000094  da01              BGE      |L12.154|
000096  4638              MOV      r0,r7                 ;511
000098  e7c5              B        |L12.38|
                  |L12.154|
00009a  2000              MOVS     r0,#0                 ;514
00009c  aa0f              ADD      r2,sp,#0x3c           ;514
00009e  e9cd020b          STRD     r0,r2,[sp,#0x2c]      ;514
0000a2  900d              STR      r0,[sp,#0x34]         ;514
0000a4  900e              STR      r0,[sp,#0x38]         ;514
0000a6  2002              MOVS     r0,#2                 ;514
0000a8  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;514
0000ac  e9cd0509          STRD     r0,r5,[sp,#0x24]      ;514
0000b0  e9cd0603          STRD     r0,r6,[sp,#0xc]       ;514
0000b4  e9cd0905          STRD     r0,r9,[sp,#0x14]      ;514
0000b8  2004              MOVS     r0,#4                 ;514
0000ba  2301              MOVS     r3,#1                 ;514
0000bc  e9cd0a01          STRD     r0,r10,[sp,#4]        ;514
0000c0  f8cd8000          STR      r8,[sp,#0]            ;514
0000c4  4809              LDR      r0,|L12.236|
0000c6  f9b02000          LDRSH    r2,[r0,#0]            ;514  ; g_getFrameM0
0000ca  2100              MOVS     r1,#0                 ;514
0000cc  4808              LDR      r0,|L12.240|
0000ce  6800              LDR      r0,[r0,#0]            ;514  ; g_chirpM0
0000d0  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
0000d4  980f              LDR      r0,[sp,#0x3c]         ;518
0000d6  b938              CBNZ     r0,|L12.232|
0000d8  4806              LDR      r0,|L12.244|
0000da  f8c0a000          STR      r10,[r0,#0]           ;520  ; g_rawFrame
0000de  b220              SXTH     r0,r4                 ;521
0000e0  4904              LDR      r1,|L12.244|
0000e2  8088              STRH     r0,[r1,#4]            ;521
0000e4  b228              SXTH     r0,r5                 ;522
0000e6  80c8              STRH     r0,[r1,#6]            ;522
                  |L12.232|
0000e8  980f              LDR      r0,[sp,#0x3c]         ;525
0000ea  e79c              B        |L12.38|
;;;527    
                          ENDP

                  |L12.236|
                          DCD      g_getFrameM0
                  |L12.240|
                          DCD      g_chirpM0
                  |L12.244|
                          DCD      g_rawFrame

                          AREA ||i._Z14cam_loadParamsv||, CODE, READONLY, ALIGN=2

                  _Z14cam_loadParamsv PROC ; cam_loadParams()
;;;596    
;;;597    void cam_loadParams()
000000  b500              PUSH     {lr}
;;;598    {
000002  b089              SUB      sp,sp,#0x24
;;;599    	prm_add("Camera Brightness", PRM_FLAG_SLIDER, 
000004  2000              MOVS     r0,#0
000006  2150              MOVS     r1,#0x50
000008  2301              MOVS     r3,#1
00000a  4a4e              LDR      r2,|L13.324|
00000c  e9cd1000          STRD     r1,r0,[sp,#0]
000010  0219              LSLS     r1,r3,#8
000012  a04d              ADR      r0,|L13.328|
000014  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;600    		"@c Signature_Tuning @m 0 @M 255 Sets the average brightness of the camera, can be between 0 and 255 (default " STRINGIFY(CAM_BRIGHTNESS_DEFAULT) ")", UINT8(CAM_BRIGHTNESS_DEFAULT), END);
;;;601    	prm_setShadowCallback("Camera Brightness", (ShadowCallback)cam_shadowCallback);
000018  4950              LDR      r1,|L13.348|
00001a  a04b              ADR      r0,|L13.328|
00001c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;602    
;;;603    	prm_add("Auto Exposure Correction", PRM_FLAG_ADVANCED | PRM_FLAG_CHECKBOX, 
000020  2000              MOVS     r0,#0
000022  9000              STR      r0,[sp,#0]
000024  2301              MOVS     r3,#1
000026  4a4e              LDR      r2,|L13.352|
000028  f2402102          MOV      r1,#0x202
00002c  9001              STR      r0,[sp,#4]
00002e  a04d              ADR      r0,|L13.356|
000030  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;604    		"@c Camera Enables/disables Auto Exposure Correction. (default dis enabled)", UINT8(0), END);
;;;605    	prm_setShadowCallback("Auto Exposure Correction", (ShadowCallback)cam_shadowCallback);
000034  4949              LDR      r1,|L13.348|
000036  a04b              ADR      r0,|L13.356|
000038  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;606    
;;;607    	prm_add("AEC Value", PRM_FLAG_INTERNAL, 
00003c  2000              MOVS     r0,#0
00003e  9000              STR      r0,[sp,#0]
000040  2304              MOVS     r3,#4
000042  a24e              ADR      r2,|L13.380|
000044  2101              MOVS     r1,#1
000046  9001              STR      r0,[sp,#4]
000048  a04d              ADR      r0,|L13.384|
00004a  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;608    		"", UINT32(0), END);
;;;609    																		   
;;;610    	prm_add("Auto White Balance", PRM_FLAG_ADVANCED | PRM_FLAG_CHECKBOX, 
00004e  2000              MOVS     r0,#0
000050  9000              STR      r0,[sp,#0]
000052  2301              MOVS     r3,#1
000054  4a4d              LDR      r2,|L13.396|
000056  f2402102          MOV      r1,#0x202
00005a  9001              STR      r0,[sp,#4]
00005c  a04c              ADR      r0,|L13.400|
00005e  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;611    		"@c Camera Enables/disables Auto White Balance. When this is set, AWB is enabled continuously. (default disabled)", UINT8(0), END);
;;;612    	prm_setShadowCallback("Auto White Balance", (ShadowCallback)cam_shadowCallback);
000062  493e              LDR      r1,|L13.348|
000064  a04a              ADR      r0,|L13.400|
000066  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;613    
;;;614    	prm_add("Auto White Balance on power-up", PRM_FLAG_ADVANCED | PRM_FLAG_CHECKBOX, 
00006a  2000              MOVS     r0,#0
00006c  2101              MOVS     r1,#1
00006e  460b              MOV      r3,r1
000070  4a4c              LDR      r2,|L13.420|
000072  e9cd1000          STRD     r1,r0,[sp,#0]
000076  f2402102          MOV      r1,#0x202
00007a  a04b              ADR      r0,|L13.424|
00007c  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;615    		"@c Camera Enables/disables Auto White Balance on power-up. When this is set, AWB is enabled only upon power-up. (default enabled)", UINT8(1), END);
;;;616    	prm_setShadowCallback("Auto White Balance on power-up", (ShadowCallback)cam_shadowCallback);
000080  4936              LDR      r1,|L13.348|
000082  a049              ADR      r0,|L13.424|
000084  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;617    
;;;618    	prm_add("AWB Value", PRM_FLAG_INTERNAL,
000088  2000              MOVS     r0,#0
00008a  9000              STR      r0,[sp,#0]
00008c  2304              MOVS     r3,#4
00008e  a23b              ADR      r2,|L13.380|
000090  2101              MOVS     r1,#1
000092  9001              STR      r0,[sp,#4]
000094  a04c              ADR      r0,|L13.456|
000096  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;619    		"", UINT32(0), END);
;;;620    
;;;621    	uint8_t brightness, aec, awb, awbp;
;;;622    	uint32_t ecv, wbv;
;;;623    	prm_get("Camera Brightness", &brightness, END);
00009a  2200              MOVS     r2,#0
00009c  a908              ADD      r1,sp,#0x20
00009e  a02a              ADR      r0,|L13.328|
0000a0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;624    	prm_get("Auto Exposure Correction", &aec, END);
0000a4  2200              MOVS     r2,#0
0000a6  a907              ADD      r1,sp,#0x1c
0000a8  a02e              ADR      r0,|L13.356|
0000aa  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;625    	prm_get("Auto White Balance", &awb, END);
0000ae  2200              MOVS     r2,#0
0000b0  a906              ADD      r1,sp,#0x18
0000b2  a037              ADR      r0,|L13.400|
0000b4  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;626    	prm_get("Auto White Balance on power-up", &awbp, END);
0000b8  2200              MOVS     r2,#0
0000ba  a905              ADD      r1,sp,#0x14
0000bc  a03a              ADR      r0,|L13.424|
0000be  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;627    
;;;628    	cam_setBrightness(brightness);
0000c2  a808              ADD      r0,sp,#0x20
0000c4  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;629    	cam_setAEC(aec);
0000c8  a807              ADD      r0,sp,#0x1c
0000ca  f7fffffe          BL       _Z10cam_setAECRKh ; cam_setAEC(const unsigned char&)
;;;630    	if (!aec)
0000ce  f89d001c          LDRB     r0,[sp,#0x1c]
0000d2  b9a8              CBNZ     r0,|L13.256|
;;;631    	{
;;;632    		if (g_aecValue) // save queried ECV 
0000d4  483f              LDR      r0,|L13.468|
0000d6  6800              LDR      r0,[r0,#0]  ; g_aecValue
0000d8  b150              CBZ      r0,|L13.240|
;;;633    		{
;;;634    			prm_set("AEC Value", UINT32(g_aecValue), END);
0000da  2300              MOVS     r3,#0
0000dc  483d              LDR      r0,|L13.468|
0000de  2104              MOVS     r1,#4
0000e0  6802              LDR      r2,[r0,#0]  ; g_aecValue
0000e2  a027              ADR      r0,|L13.384|
0000e4  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
;;;635    			g_aecValue = 0;
0000e8  2000              MOVS     r0,#0
0000ea  493a              LDR      r1,|L13.468|
0000ec  6008              STR      r0,[r1,#0]  ; g_aecValue
0000ee  e007              B        |L13.256|
                  |L13.240|
;;;636    		}
;;;637    		else
;;;638    		{
;;;639    			prm_get("AEC Value", &ecv, END); // grab saved ECV and set it
0000f0  2200              MOVS     r2,#0
0000f2  a904              ADD      r1,sp,#0x10
0000f4  a022              ADR      r0,|L13.384|
0000f6  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;640    			cam_setECV(ecv);
0000fa  a804              ADD      r0,sp,#0x10
0000fc  f7fffffe          BL       _Z10cam_setECVRKj ; cam_setECV(const unsigned&)
                  |L13.256|
;;;641    		}
;;;642    	}
;;;643    	cam_setAWB(awb);
000100  a806              ADD      r0,sp,#0x18
000102  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;644    	if (!awb && !awbp)
000106  f89d0018          LDRB     r0,[sp,#0x18]
00010a  b9c0              CBNZ     r0,|L13.318|
00010c  f89d0014          LDRB     r0,[sp,#0x14]
000110  b9a8              CBNZ     r0,|L13.318|
;;;645    	{
;;;646    		if (g_awbValue) // save queried ECV 
000112  4831              LDR      r0,|L13.472|
000114  6800              LDR      r0,[r0,#0]  ; g_awbValue
000116  b150              CBZ      r0,|L13.302|
;;;647    		{
;;;648    			prm_set("AWB Value", UINT32(g_awbValue), END);
000118  2300              MOVS     r3,#0
00011a  482f              LDR      r0,|L13.472|
00011c  2104              MOVS     r1,#4
00011e  6802              LDR      r2,[r0,#0]  ; g_awbValue
000120  a029              ADR      r0,|L13.456|
000122  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
;;;649    			g_awbValue = 0;
000126  2000              MOVS     r0,#0
000128  492b              LDR      r1,|L13.472|
00012a  6008              STR      r0,[r1,#0]  ; g_awbValue
00012c  e007              B        |L13.318|
                  |L13.302|
;;;650    		}
;;;651    		else
;;;652    		{
;;;653    			prm_get("AWB Value", &wbv, END); // grab saved WBV and set it
00012e  2200              MOVS     r2,#0
000130  a903              ADD      r1,sp,#0xc
000132  a025              ADR      r0,|L13.456|
000134  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;654    			cam_setWBV(wbv);
000138  a803              ADD      r0,sp,#0xc
00013a  f7fffffe          BL       _Z10cam_setWBVRKj ; cam_setWBV(const unsigned&)
                  |L13.318|
;;;655    		}
;;;656    	}
;;;657    }
00013e  b009              ADD      sp,sp,#0x24
000140  bd00              POP      {pc}
                          ENDP

000142  0000              DCW      0x0000
                  |L13.324|
                          DCD      ||.conststring||+0x830
                  |L13.328|
000148  43616d65          DCB      "Camera Brightness",0
00014c  72612042
000150  72696768
000154  746e6573
000158  7300    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L13.348|
                          DCD      _Z18cam_shadowCallbackPKcRKh ; cam_shadowCallback(const char*, const unsigned char&)
                  |L13.352|
                          DCD      ||.conststring||+0x8a4
                  |L13.356|
000164  4175746f          DCB      "Auto Exposure Correction"
000168  20457870
00016c  6f737572
000170  6520436f
000174  72726563
000178  74696f6e
                  |L13.380|
00017c  00                DCB      0
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L13.384|
000180  41454320          DCB      "AEC Value",0
000184  56616c75
000188  6500    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L13.396|
                          DCD      ||.conststring||+0x8f0
                  |L13.400|
000190  4175746f          DCB      "Auto White Balance",0
000194  20576869
000198  74652042
00019c  616c616e
0001a0  636500  
0001a3  00                DCB      0
                  |L13.420|
                          DCD      ||.conststring||+0x964
                  |L13.424|
0001a8  4175746f          DCB      "Auto White Balance on power-up",0
0001ac  20576869
0001b0  74652042
0001b4  616c616e
0001b8  6365206f
0001bc  6e20706f
0001c0  7765722d
0001c4  757000  
0001c7  00                DCB      0
                  |L13.456|
0001c8  41574220          DCB      "AWB Value",0
0001cc  56616c75
0001d0  6500    
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L13.468|
                          DCD      g_aecValue
                  |L13.472|
                          DCD      g_awbValue

                          AREA ||i._Z15cam_getRegisterRKh||, CODE, READONLY, ALIGN=2

                  _Z15cam_getRegisterRKh PROC ; cam_getRegister(const unsigned char&)
;;;554    
;;;555    int32_t cam_getRegister(const uint8_t &reg)
000000  b510              PUSH     {r4,lr}
;;;556    {
000002  4604              MOV      r4,r0
;;;557    	return g_sccb->Read(reg);
000004  7821              LDRB     r1,[r4,#0]
000006  4802              LDR      r0,|L14.16|
000008  6800              LDR      r0,[r0,#0]  ; g_sccb
00000a  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
;;;558    }
00000e  bd10              POP      {r4,pc}
;;;559    
                          ENDP

                  |L14.16|
                          DCD      g_sccb

                          AREA ||i._Z15cam_setRegisterRKhS0_||, CODE, READONLY, ALIGN=2

                  _Z15cam_setRegisterRKhS0_ PROC ; cam_setRegister(const unsigned char&, const unsigned char&)
;;;548    
;;;549    int32_t cam_setRegister(const uint8_t &reg, const uint8_t &value)
000000  b570              PUSH     {r4-r6,lr}
;;;550    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;551      	g_sccb->Write(reg, value);
000006  782a              LDRB     r2,[r5,#0]
000008  7821              LDRB     r1,[r4,#0]
00000a  4803              LDR      r0,|L15.24|
00000c  6800              LDR      r0,[r0,#0]  ; g_sccb
00000e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;552    	return 0;
000012  2000              MOVS     r0,#0
;;;553    }
000014  bd70              POP      {r4-r6,pc}
;;;554    
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      g_sccb

                          AREA ||i._Z15cam_testPatternRKh||, CODE, READONLY, ALIGN=2

                  _Z15cam_testPatternRKh PROC ; cam_testPattern(const unsigned char&)
;;;467    
;;;468    int cam_testPattern(const uint8_t &enable)
000000  b570              PUSH     {r4-r6,lr}
;;;469    {
000002  4604              MOV      r4,r0
;;;470    	uint8_t val;
;;;471    
;;;472    	val = g_sccb->Read(0x97); 
000004  2197              MOVS     r1,#0x97
000006  480c              LDR      r0,|L16.56|
000008  6800              LDR      r0,[r0,#0]  ; g_sccb
00000a  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00000e  4605              MOV      r5,r0
;;;473    	if (enable)
000010  7820              LDRB     r0,[r4,#0]
000012  b138              CBZ      r0,|L16.36|
;;;474    		g_sccb->Write(0x97, val | 0x0a);
000014  f045020a          ORR      r2,r5,#0xa
000018  2197              MOVS     r1,#0x97
00001a  4807              LDR      r0,|L16.56|
00001c  6800              LDR      r0,[r0,#0]  ; g_sccb
00001e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
000022  e006              B        |L16.50|
                  |L16.36|
;;;475    	else
;;;476    		g_sccb->Write(0x97, val & ~0x0a);
000024  f025020a          BIC      r2,r5,#0xa
000028  2197              MOVS     r1,#0x97
00002a  4803              LDR      r0,|L16.56|
00002c  6800              LDR      r0,[r0,#0]  ; g_sccb
00002e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
                  |L16.50|
;;;477    
;;;478    	return 0;
000032  2000              MOVS     r0,#0
;;;479    }
000034  bd70              POP      {r4-r6,pc}
;;;480    
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      g_sccb

                          AREA ||i._Z16cam_getLightModev||, CODE, READONLY, ALIGN=2

                  _Z16cam_getLightModev PROC ; cam_getLightMode()
;;;462    
;;;463    uint32_t cam_getLightMode()
000000  4801              LDR      r0,|L17.8|
;;;464    {
;;;465    	return g_lightMode;
000002  7800              LDRB     r0,[r0,#0]  ; g_lightMode
;;;466    }
000004  4770              BX       lr
;;;467    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      g_lightMode

                          AREA ||i._Z16cam_setLightModeRKh||, CODE, READONLY, ALIGN=2

                  _Z16cam_setLightModeRKh PROC ; cam_setLightMode(const unsigned char&)
;;;429    
;;;430    int32_t cam_setLightMode(const uint8_t &mode)
000000  b570              PUSH     {r4-r6,lr}
;;;431    {
000002  4604              MOV      r4,r0
;;;432    	uint8_t val13, val03;
;;;433    
;;;434    	val13 = g_sccb->Read(0x13);
000004  2113              MOVS     r1,#0x13
000006  482f              LDR      r0,|L18.196|
000008  6800              LDR      r0,[r0,#0]  ; g_sccb
00000a  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00000e  4605              MOV      r5,r0
;;;435    	val03 = g_sccb->Read(0x03);
000010  2103              MOVS     r1,#3
000012  482c              LDR      r0,|L18.196|
000014  6800              LDR      r0,[r0,#0]  ; g_sccb
000016  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
00001a  4606              MOV      r6,r0
;;;436    
;;;437    	if (mode!=g_lightMode)
00001c  7820              LDRB     r0,[r4,#0]
00001e  492a              LDR      r1,|L18.200|
000020  7809              LDRB     r1,[r1,#0]  ; g_lightMode
000022  4288              CMP      r0,r1
000024  d048              BEQ      |L18.184|
;;;438    	{
;;;439    		if (mode==CAM_LIGHT_NORMAL)	// note, it seems that once you enable VAEC, you can't disable by writing to 0x0e (you can issue a reset though)
000026  7820              LDRB     r0,[r4,#0]
000028  b9d0              CBNZ     r0,|L18.96|
;;;440    		{
;;;441    			g_sccb->Write(0x13, val13&~0x08); // disable LAEC
00002a  f0250208          BIC      r2,r5,#8
00002e  2113              MOVS     r1,#0x13
000030  4824              LDR      r0,|L18.196|
000032  6800              LDR      r0,[r0,#0]  ; g_sccb
000034  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;442    			g_sccb->Write(0x03, val03&~0x80); // set maxframes to normal
000038  f0260280          BIC      r2,r6,#0x80
00003c  2103              MOVS     r1,#3
00003e  4821              LDR      r0,|L18.196|
000040  6800              LDR      r0,[r0,#0]  ; g_sccb
000042  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;443    			g_sccb->Write(0x0e, 0x40);        // disable VAEC
000046  2240              MOVS     r2,#0x40
000048  210e              MOVS     r1,#0xe
00004a  481e              LDR      r0,|L18.196|
00004c  6800              LDR      r0,[r0,#0]  ; g_sccb
00004e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;444    			g_sccb->Write(0x21, 0x03);			
000052  2203              MOVS     r2,#3
000054  2121              MOVS     r1,#0x21
000056  481b              LDR      r0,|L18.196|
000058  6800              LDR      r0,[r0,#0]  ; g_sccb
00005a  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
00005e  e02b              B        |L18.184|
                  |L18.96|
;;;445    		}
;;;446    		else if (mode==CAM_LIGHT_LOW)
000060  7820              LDRB     r0,[r4,#0]
000062  2801              CMP      r0,#1
000064  d11a              BNE      |L18.156|
;;;447    		{
;;;448    			g_sccb->Write(0x13, val13&~0x08); // disable LAEC
000066  f0250208          BIC      r2,r5,#8
00006a  2113              MOVS     r1,#0x13
00006c  4815              LDR      r0,|L18.196|
00006e  6800              LDR      r0,[r0,#0]  ; g_sccb
000070  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;449    			g_sccb->Write(0x03, val03|0x80);  // max frames for VAEC
000074  f0460280          ORR      r2,r6,#0x80
000078  2103              MOVS     r1,#3
00007a  4812              LDR      r0,|L18.196|
00007c  6800              LDR      r0,[r0,#0]  ; g_sccb
00007e  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;450    			g_sccb->Write(0x0e, 0x48);        // enable VAEC
000082  2248              MOVS     r2,#0x48
000084  210e              MOVS     r1,#0xe
000086  480f              LDR      r0,|L18.196|
000088  6800              LDR      r0,[r0,#0]  ; g_sccb
00008a  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;451    			g_sccb->Write(0x21, 0x33);        // set VAEC trigger point to 16x gain or greater
00008e  2233              MOVS     r2,#0x33
000090  2121              MOVS     r1,#0x21
000092  480c              LDR      r0,|L18.196|
000094  6800              LDR      r0,[r0,#0]  ; g_sccb
000096  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
00009a  e00d              B        |L18.184|
                  |L18.156|
;;;452    		}
;;;453    		else if (mode==CAM_LIGHT_HIGH)
00009c  7820              LDRB     r0,[r4,#0]
00009e  2802              CMP      r0,#2
0000a0  d107              BNE      |L18.178|
;;;454    			g_sccb->Write(0x13, val13|0x08);  // enable LAEC
0000a2  f0450208          ORR      r2,r5,#8
0000a6  2113              MOVS     r1,#0x13
0000a8  4806              LDR      r0,|L18.196|
0000aa  6800              LDR      r0,[r0,#0]  ; g_sccb
0000ac  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
0000b0  e002              B        |L18.184|
                  |L18.178|
;;;455    		else 
;;;456    			return -1;
0000b2  f04f30ff          MOV      r0,#0xffffffff
                  |L18.182|
;;;457    	}
;;;458    
;;;459    	g_lightMode = mode;
;;;460    	return 0; 
;;;461    }
0000b6  bd70              POP      {r4-r6,pc}
                  |L18.184|
0000b8  7820              LDRB     r0,[r4,#0]            ;459
0000ba  4903              LDR      r1,|L18.200|
0000bc  7008              STRB     r0,[r1,#0]            ;459
0000be  2000              MOVS     r0,#0                 ;460
0000c0  e7f9              B        |L18.182|
;;;462    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L18.196|
                          DCD      g_sccb
                  |L18.200|
                          DCD      g_lightMode

                          AREA ||i._Z17cam_getBrightnessv||, CODE, READONLY, ALIGN=2

                  _Z17cam_getBrightnessv PROC ; cam_getBrightness()
;;;424    
;;;425    uint32_t cam_getBrightness()
000000  4801              LDR      r0,|L19.8|
;;;426    {
;;;427    	return g_brightness;
000002  7800              LDRB     r0,[r0,#0]  ; g_brightness
;;;428    }
000004  4770              BX       lr
;;;429    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      g_brightness

                          AREA ||i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp||, CODE, READONLY, ALIGN=1

                  _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp PROC ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;527    
;;;528    int32_t cam_getFrameChirp(const uint8_t &type, const uint16_t &xOffset, const uint16_t &yOffset, const uint16_t &xWidth, const uint16_t &yWidth, Chirp *chirp)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;529    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;530    	return cam_getFrameChirpFlags(type, xOffset, yOffset, xWidth, yWidth, chirp);
000010  2001              MOVS     r0,#1
000012  463b              MOV      r3,r7
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  e9cd8900          STRD     r8,r9,[sp,#0]
00001c  9002              STR      r0,[sp,#8]
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;531    }
000024  e8bd83fe          POP      {r1-r9,pc}
;;;532    
                          ENDP


                          AREA ||i._Z17cam_setBrightnessRKh||, CODE, READONLY, ALIGN=2

                  _Z17cam_setBrightnessRKh PROC ; cam_setBrightness(const unsigned char&)
;;;415    
;;;416    int32_t cam_setBrightness(const uint8_t &brightness)
000000  b510              PUSH     {r4,lr}
;;;417    {
000002  4604              MOV      r4,r0
;;;418    	g_sccb->Write(0x24, brightness); 
000004  7822              LDRB     r2,[r4,#0]
000006  2124              MOVS     r1,#0x24
000008  480a              LDR      r0,|L21.52|
00000a  6800              LDR      r0,[r0,#0]  ; g_sccb
00000c  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;419    	g_sccb->Write(0x25, brightness>CAM_BRIGHTNESS_RANGE?brightness-CAM_BRIGHTNESS_RANGE:0);
000010  7820              LDRB     r0,[r4,#0]
000012  2814              CMP      r0,#0x14
000014  dd02              BLE      |L21.28|
000016  7820              LDRB     r0,[r4,#0]
000018  3814              SUBS     r0,r0,#0x14
00001a  e000              B        |L21.30|
                  |L21.28|
00001c  2000              MOVS     r0,#0
                  |L21.30|
00001e  b2c2              UXTB     r2,r0
000020  2125              MOVS     r1,#0x25
000022  4804              LDR      r0,|L21.52|
000024  6800              LDR      r0,[r0,#0]  ; g_sccb
000026  f7fffffe          BL       _ZN5CSccb5WriteEhh ; CSccb::Write(unsigned char, unsigned char)
;;;420    	g_brightness = brightness;
00002a  7820              LDRB     r0,[r4,#0]
00002c  4902              LDR      r1,|L21.56|
00002e  7008              STRB     r0,[r1,#0]
;;;421    
;;;422    	return 0;
000030  2000              MOVS     r0,#0
;;;423    }
000032  bd10              POP      {r4,pc}
;;;424    
                          ENDP

                  |L21.52|
                          DCD      g_sccb
                  |L21.56|
                          DCD      g_brightness

                          AREA ||i._Z18cam_shadowCallbackPKcRKh||, CODE, READONLY, ALIGN=2

                  _Z18cam_shadowCallbackPKcRKh PROC ; cam_shadowCallback(const char*, const unsigned char&)
;;;578    
;;;579    void cam_shadowCallback(const char *id, const uint8_t &val)
000000  b570              PUSH     {r4-r6,lr}
;;;580    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;581    	if (strcmp(id, "Camera Brightness")==0)
000006  a113              ADR      r1,|L22.84|
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       strcmp
00000e  b918              CBNZ     r0,|L22.24|
;;;582    		cam_setBrightness(val);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
000016  e01c              B        |L22.82|
                  |L22.24|
;;;583    	else if (strcmp(id, "Auto Exposure Correction")==0)
000018  a113              ADR      r1,|L22.104|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       strcmp
000020  b948              CBNZ     r0,|L22.54|
;;;584    	{
;;;585    		if (val==0)
000022  7820              LDRB     r0,[r4,#0]
000024  b918              CBNZ     r0,|L22.46|
;;;586    			g_aecValue = cam_getECV();
000026  f7fffffe          BL       _Z10cam_getECVv ; cam_getECV()
00002a  4916              LDR      r1,|L22.132|
00002c  6008              STR      r0,[r1,#0]  ; g_aecValue
                  |L22.46|
;;;587    		cam_setAEC(val);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       _Z10cam_setAECRKh ; cam_setAEC(const unsigned char&)
000034  e00d              B        |L22.82|
                  |L22.54|
;;;588    	}
;;;589    	else if (strcmp(id, "Auto White Balance")==0)
000036  a114              ADR      r1,|L22.136|
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       strcmp
00003e  b940              CBNZ     r0,|L22.82|
;;;590    	{
;;;591    		if (val==0)
000040  7820              LDRB     r0,[r4,#0]
000042  b918              CBNZ     r0,|L22.76|
;;;592    			g_awbValue = cam_getWBV();
000044  f7fffffe          BL       _Z10cam_getWBVv ; cam_getWBV()
000048  4914              LDR      r1,|L22.156|
00004a  6008              STR      r0,[r1,#0]  ; g_awbValue
                  |L22.76|
;;;593    		cam_setAWB(val);
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
                  |L22.82|
;;;594    	} 
;;;595    }
000052  bd70              POP      {r4-r6,pc}
;;;596    
                          ENDP

                  |L22.84|
000054  43616d65          DCB      "Camera Brightness",0
000058  72612042
00005c  72696768
000060  746e6573
000064  7300    
000066  00                DCB      0
000067  00                DCB      0
                  |L22.104|
000068  4175746f          DCB      "Auto Exposure Correction",0
00006c  20457870
000070  6f737572
000074  6520436f
000078  72726563
00007c  74696f6e
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L22.132|
                          DCD      g_aecValue
                  |L22.136|
000088  4175746f          DCB      "Auto White Balance",0
00008c  20576869
000090  74652042
000094  616c616e
000098  636500  
00009b  00                DCB      0
                  |L22.156|
                          DCD      g_awbValue

                          AREA ||i._Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph||, CODE, READONLY, ALIGN=2

                  _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph PROC ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;532    
;;;533    int32_t cam_getFrameChirpFlags(const uint8_t &type, const uint16_t &xOffset, const uint16_t &yOffset, const uint16_t &xWidth, const uint16_t &yWidth, Chirp *chirp, uint8_t renderFlags)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;534    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  461c              MOV      r4,r3
00000e  e9dd5b14          LDRD     r5,r11,[sp,#0x50]
;;;535    	int32_t result, len;
;;;536    	uint8_t *frame = (uint8_t *)SRAM1_LOC;
000012  f8dfa074          LDR      r10,|L23.136|
;;;537    
;;;538    	// fill buffer contents manually for return data 
;;;539    	len = Chirp::serialize(chirp, frame, SRAM1_SIZE, HTYPE(FOURCC('B','A','8','1')), HINT8(renderFlags), UINT16(xWidth), UINT16(yWidth), UINTS8_NO_COPY(xWidth*yWidth), END);
000016  2200              MOVS     r2,#0
000018  8820              LDRH     r0,[r4,#0]
00001a  8829              LDRH     r1,[r5,#0]
00001c  4348              MULS     r0,r1,r0
00001e  23b1              MOVS     r3,#0xb1
000020  e9cd1306          STRD     r1,r3,[sp,#0x18]
000024  e9cd0208          STRD     r0,r2,[sp,#0x20]
000028  2202              MOVS     r2,#2
00002a  8820              LDRH     r0,[r4,#0]
00002c  9916              LDR      r1,[sp,#0x58]
00002e  e9cd1202          STRD     r1,r2,[sp,#8]
000032  e9cd0204          STRD     r0,r2,[sp,#0x10]
000036  2041              MOVS     r0,#0x41
000038  4914              LDR      r1,|L23.140|
00003a  2364              MOVS     r3,#0x64
00003c  f44f3290          MOV      r2,#0x12000
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  4651              MOV      r1,r10
000046  4658              MOV      r0,r11
000048  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00004c  4606              MOV      r6,r0
;;;540    	// write frame after chirp args
;;;541    	result = cam_getFrame(frame+len, SRAM1_SIZE-len, type, xOffset, yOffset, xWidth, yWidth);
00004e  8829              LDRH     r1,[r5,#0]
000050  8820              LDRH     r0,[r4,#0]
000052  f8b92000          LDRH     r2,[r9,#0]
000056  e9cd2000          STRD     r2,r0,[sp,#0]
00005a  9102              STR      r1,[sp,#8]
00005c  f8b83000          LDRH     r3,[r8,#0]
000060  783a              LDRB     r2,[r7,#0]
000062  f5c63190          RSB      r1,r6,#0x12000
000066  eb0a0006          ADD      r0,r10,r6
00006a  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
00006e  900a              STR      r0,[sp,#0x28]
;;;542    
;;;543    	// tell chirp to use this buffer
;;;544    	chirp->useBuffer(frame, len+xWidth*yWidth); 
000070  8820              LDRH     r0,[r4,#0]
000072  8829              LDRH     r1,[r5,#0]
000074  fb006201          MLA      r2,r0,r1,r6
000078  4651              MOV      r1,r10
00007a  4658              MOV      r0,r11
00007c  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;545    
;;;546    	return result;
000080  980a              LDR      r0,[sp,#0x28]
;;;547    }
000082  b00b              ADD      sp,sp,#0x2c
000084  e8bd8ff0          POP      {r4-r11,pc}
;;;548    
                          ENDP

                  |L23.136|
                          DCD      0x10080000
                  |L23.140|
                          DCD      0x31384142

                          AREA ||i._Z8cam_initv||, CODE, READONLY, ALIGN=2

                  _Z8cam_initv PROC ; cam_init()
;;;267    
;;;268    int cam_init()
000000  b538              PUSH     {r3-r5,lr}
;;;269    {
;;;270    	g_sccb = new CSccb(0x60);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       _Znwj ; operator new(unsigned)
000008  4604              MOV      r4,r0
00000a  2160              MOVS     r1,#0x60
00000c  f7fffffe          BL       _ZN5CSccbC1Eh ; CSccb::CSccb(unsigned char)
000010  4604              MOV      r4,r0
000012  4814              LDR      r0,|L24.100|
000014  6004              STR      r4,[r0,#0]  ; g_sccb
;;;271    
;;;272    	// flush sccb
;;;273    	g_sccb->Read(0xA0);
000016  21a0              MOVS     r1,#0xa0
000018  6800              LDR      r0,[r0,#0]  ; g_sccb
00001a  f7fffffe          BL       _ZN5CSccb4ReadEh ; CSccb::Read(unsigned char)
;;;274    
;;;275    	// start in mode 0
;;;276    	cam_setRegs(g_baseRegs, sizeof(g_baseRegs));
00001e  2128              MOVS     r1,#0x28
000020  4811              LDR      r0,|L24.104|
000022  f7fffffe          BL       _Z11cam_setRegsPKhi ; cam_setRegs(const unsigned char*, int)
;;;277    	cam_setMode(0);
000026  2000              MOVS     r0,#0
000028  9000              STR      r0,[sp,#0]
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
;;;278    	
;;;279    	g_chirpUsb->registerModule(g_module);
000030  490e              LDR      r1,|L24.108|
000032  480f              LDR      r0,|L24.112|
000034  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000036  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;280    	
;;;281    	g_getFrameM0 = g_chirpM0->getProc("getFrame", NULL);
00003a  2200              MOVS     r2,#0
00003c  a10d              ADR      r1,|L24.116|
00003e  4810              LDR      r0,|L24.128|
000040  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000042  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000046  490f              LDR      r1,|L24.132|
000048  8008              STRH     r0,[r1,#0]
;;;282    
;;;283    	if (g_getFrameM0<0)
00004a  4608              MOV      r0,r1
00004c  f9b00000          LDRSH    r0,[r0,#0]  ; g_getFrameM0
000050  2800              CMP      r0,#0
000052  da02              BGE      |L24.90|
;;;284    		return -1;
000054  f04f30ff          MOV      r0,#0xffffffff
                  |L24.88|
;;;285    
;;;286    	cam_loadParams();
;;;287    
;;;288    	return 0;
;;;289    }
000058  bd38              POP      {r3-r5,pc}
                  |L24.90|
00005a  f7fffffe          BL       _Z14cam_loadParamsv ; cam_loadParams()
00005e  2000              MOVS     r0,#0                 ;288
000060  e7fa              B        |L24.88|
;;;290    
                          ENDP

000062  0000              DCW      0x0000
                  |L24.100|
                          DCD      g_sccb
                  |L24.104|
                          DCD      g_baseRegs
                  |L24.108|
                          DCD      g_module
                  |L24.112|
                          DCD      g_chirpUsb
                  |L24.116|
000074  67657446          DCB      "getFrame",0
000078  72616d65
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L24.128|
                          DCD      g_chirpM0
                  |L24.132|
                          DCD      g_getFrameM0

                          AREA ||i.__sti___10_camera_cpp_g_sccb||, CODE, READONLY, ALIGN=2

                  __sti___10_camera_cpp_g_sccb PROC
000000  4803              LDR      r0,|L25.16|
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
000006  80c1              STRH     r1,[r0,#6]
000008  8081              STRH     r1,[r0,#4]
00000a  bf00              NOP      
00000c  4770              BX       lr
                          ENDP

00000e  0000              DCW      0x0000
                  |L25.16|
                          DCD      g_rawFrame

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10cam_setWBVRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_setWBVRKj||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._Z10cam_setAWBRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_setAWBRKh||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._Z10cam_setECVRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_setECVRKj||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._Z10cam_setAECRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_setAECRKh||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._Z17cam_setBrightnessRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17cam_setBrightnessRKh||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z10cam_getWBVv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_getWBVv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z10cam_getECVv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_getECVv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z18cam_shadowCallbackPKcRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18cam_shadowCallbackPKcRKh||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z14cam_loadParamsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14cam_loadParamsv||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z11cam_setRegsPKhi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11cam_setRegsPKhi||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z11cam_setModeRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11cam_setModeRKh||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z8cam_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8cam_initv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z11cam_getModev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11cam_getModev||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z10cam_getAWBv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_getAWBv||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._Z10cam_getAECv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10cam_getAECv||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._Z17cam_getBrightnessv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17cam_getBrightnessv||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._Z16cam_setLightModeRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16cam_setLightModeRKh||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._Z16cam_getLightModev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16cam_getLightModev||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._Z15cam_testPatternRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15cam_testPatternRKh||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._Z12cam_getFramePhjhtttt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12cam_getFramePhjhtttt||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._Z15cam_setRegisterRKhS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15cam_setRegisterRKhS0_||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._Z15cam_getRegisterRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15cam_getRegisterRKh||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i.__sti___10_camera_cpp_g_sccb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___10_camera_cpp_g_sccb||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
000008  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x6c
                          DCD      _Z11cam_getModev ; cam_getMode()
000020  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x98
                          DCD      _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
000038  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xa4
                          DCD      ||.conststring||+0x114
                          DCD      _Z10cam_getAWBv ; cam_getAWB()
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x120
                          DCD      ||.conststring||+0x15c
                          DCD      _Z10cam_setWBVRKj ; cam_setWBV(const unsigned&)
000068  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x168
                          DCD      ||.conststring||+0x1c4
                          DCD      _Z10cam_getWBVv ; cam_getWBV()
000080  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1d0
                          DCD      ||.conststring||+0x204
                          DCD      _Z10cam_setAECRKh ; cam_setAEC(const unsigned char&)
000098  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x210
                          DCD      ||.conststring||+0x27c
                          DCD      _Z10cam_getAECv ; cam_getAEC()
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x288
                          DCD      ||.conststring||+0x2c4
                          DCD      _Z10cam_setECVRKj ; cam_setECV(const unsigned&)
0000c8  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2d0
                          DCD      ||.conststring||+0x338
                          DCD      _Z10cam_getECVv ; cam_getECV()
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x344
                          DCD      ||.conststring||+0x388
                          DCD      _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
0000f8  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000100  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x39c
                          DCD      ||.conststring||+0x43c
                          DCD      _Z17cam_getBrightnessv ; cam_getBrightness()
000110  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000118  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x450
                          DCD      ||.conststring||+0x478
                          DCD      _Z16cam_setLightModeRKh ; cam_setLightMode(const unsigned char&)
000128  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000130  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x48c
                          DCD      ||.conststring||+0x548
                          DCD      _Z16cam_getLightModev ; cam_getLightMode()
000140  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000148  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x55c
                          DCD      ||.conststring||+0x590
                          DCD      _Z15cam_testPatternRKh ; cam_testPattern(const unsigned char&)
000158  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000160  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x5a0
                          DCD      ||.conststring||+0x5f0
                          DCD      _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
000170  01020202          DCB      0x01,0x02,0x02,0x02
000174  02000000          DCB      0x02,0x00,0x00,0x00
000178  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x600
                          DCD      ||.conststring||+0x72c
                          DCD      _Z15cam_setRegisterRKhS0_ ; cam_setRegister(const unsigned char&, const unsigned char&)
000188  01010000          DCB      0x01,0x01,0x00,0x00
                          DCD      0x00000000
000190  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x73c
                          DCD      ||.conststring||+0x7c8
                          DCD      _Z15cam_getRegisterRKh ; cam_getRegister(const unsigned char&)
0001a0  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x7d8
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  g_baseRegs
0001c8  12805c1c          DCB      0x12,0x80,0x5c,0x1c
0001cc  1100c322          DCB      0x11,0x00,0xc3,0x22
0001d0  1e075f18          DCB      0x1e,0x07,0x5f,0x18
0001d4  652a680a          DCB      0x65,0x2a,0x68,0x0a
0001d8  4d90c180          DCB      0x4d,0x90,0xc1,0x80
0001dc  0c306d02          DCB      0x0c,0x30,0x6d,0x02
0001e0  96f11725          DCB      0x96,0xf1,0x17,0x25
0001e4  320726f1          DCB      0x32,0x07,0x26,0xf1
0001e8  2a9813a5          DCB      0x2a,0x98,0x13,0xa5
0001ec  14882203          DCB      0x14,0x88,0x22,0x03
                  g_mode0Regs
0001f0  12003b00          DCB      0x12,0x00,0x3b,0x00
0001f4  1ac8030a          DCB      0x1a,0xc8,0x03,0x0a
0001f8  58c859a0          DCB      0x58,0xc8,0x59,0xa0
0001fc  4c134b36          DCB      0x4c,0x13,0x4b,0x36
000200  3d3c3e03          DCB      0x3d,0x3c,0x3e,0x03
000204  bda0bec8          DCB      0xbd,0xa0,0xbe,0xc8
000208  2c502300          DCB      0x2c,0x50,0x23,0x00
00020c  49ce              DCB      0x49,0xce
                  g_mode1Regs
00020e  1240              DCB      0x12,0x40
000210  3b011a64          DCB      0x3b,0x01,0x1a,0x64
000214  03025864          DCB      0x03,0x02,0x58,0x64
000218  59504b9a          DCB      0x59,0x50,0x4b,0x9a
00021c  4c093d9e          DCB      0x4c,0x09,0x3d,0x9e
000220  3e01bd50          DCB      0x3e,0x01,0xbd,0x50
000224  be642c60          DCB      0xbe,0x64,0x2c,0x60
000228  23104967          DCB      0x23,0x10,0x49,0x67

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  63616d5f          DCB      "cam_setMode",0
000004  7365744d
000008  6f646500
00000c  53657420          DCB      "Set camera mode@p mode 0=25 FPS, 1280x800; 1=50 FPS, 64"
000010  63616d65
000014  7261206d
000018  6f646540
00001c  70206d6f
000020  64652030
000024  3d323520
000028  4650532c
00002c  20313238
000030  30783830
000034  303b2031
000038  3d353020
00003c  4650532c
000040  203634  
000043  30783430          DCB      "0x400@r 0 if success, negative if error",0
000047  30407220
00004b  30206966
00004f  20737563
000053  63657373
000057  2c206e65
00005b  67617469
00005f  76652069
000063  66206572
000067  726f7200
00006b  00                DCB      0
00006c  63616d5f          DCB      "cam_getMode",0
000070  6765744d
000074  6f646500
000078  47657420          DCB      "Get camera mode@r mode value",0
00007c  63616d65
000080  7261206d
000084  6f646540
000088  72206d6f
00008c  64652076
000090  616c7565
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
000098  63616d5f          DCB      "cam_setAWB",0
00009c  73657441
0000a0  574200  
0000a3  00                DCB      0
0000a4  456e6162          DCB      "Enable/disable Auto White Balance (AWB)@p enable (bool)"
0000a8  6c652f64
0000ac  69736162
0000b0  6c652041
0000b4  75746f20
0000b8  57686974
0000bc  65204261
0000c0  6c616e63
0000c4  65202841
0000c8  57422940
0000cc  7020656e
0000d0  61626c65
0000d4  2028626f
0000d8  6f6c29  
0000db  20303d64          DCB      " 0=disable, 1=enable@r 0 if success, negative if error",0
0000df  69736162
0000e3  6c652c20
0000e7  313d656e
0000eb  61626c65
0000ef  40722030
0000f3  20696620
0000f7  73756363
0000fb  6573732c
0000ff  206e6567
000103  61746976
000107  65206966
00010b  20657272
00010f  6f7200  
000112  00                DCB      0
000113  00                DCB      0
000114  63616d5f          DCB      "cam_getAWB",0
000118  67657441
00011c  574200  
00011f  00                DCB      0
000120  47657420          DCB      "Get Auto White Balance (AWB) enable@r (bool) enable val"
000124  4175746f
000128  20576869
00012c  74652042
000130  616c616e
000134  63652028
000138  41574229
00013c  20656e61
000140  626c6540
000144  72202862
000148  6f6f6c29
00014c  20656e61
000150  626c6520
000154  76616c  
000157  756500            DCB      "ue",0
00015a  00                DCB      0
00015b  00                DCB      0
00015c  63616d5f          DCB      "cam_setWBV",0
000160  73657457
000164  425600  
000167  00                DCB      0
000168  53657420          DCB      "Set White Balance Value (WBV)@p wbv white balance value"
00016c  57686974
000170  65204261
000174  6c616e63
000178  65205661
00017c  6c756520
000180  28574256
000184  29407020
000188  77627620
00018c  77686974
000190  65206261
000194  6c616e63
000198  65207661
00019c  6c7565  
00019f  40722030          DCB      "@r 0 if success, negative if error",0
0001a3  20696620
0001a7  73756363
0001ab  6573732c
0001af  206e6567
0001b3  61746976
0001b7  65206966
0001bb  20657272
0001bf  6f7200  
0001c2  00                DCB      0
0001c3  00                DCB      0
0001c4  63616d5f          DCB      "cam_getWBV",0
0001c8  67657457
0001cc  425600  
0001cf  00                DCB      0
0001d0  47657420          DCB      "Get White Balance Value (WBV)@r white balance value",0
0001d4  57686974
0001d8  65204261
0001dc  6c616e63
0001e0  65205661
0001e4  6c756520
0001e8  28574256
0001ec  29407220
0001f0  77686974
0001f4  65206261
0001f8  6c616e63
0001fc  65207661
000200  6c756500
000204  63616d5f          DCB      "cam_setAEC",0
000208  73657441
00020c  454300  
00020f  00                DCB      0
000210  53657420          DCB      "Set Auto Exposure Compensation (AEC)@p enable (bool) 0="
000214  4175746f
000218  20457870
00021c  6f737572
000220  6520436f
000224  6d70656e
000228  73617469
00022c  6f6e2028
000230  41454329
000234  40702065
000238  6e61626c
00023c  65202862
000240  6f6f6c29
000244  20303d  
000247  64697361          DCB      "disable, 1=enable@r 0 if success, negative if error",0
00024b  626c652c
00024f  20313d65
000253  6e61626c
000257  65407220
00025b  30206966
00025f  20737563
000263  63657373
000267  2c206e65
00026b  67617469
00026f  76652069
000273  66206572
000277  726f7200
00027b  00                DCB      0
00027c  63616d5f          DCB      "cam_getAEC",0
000280  67657441
000284  454300  
000287  00                DCB      0
000288  47657420          DCB      "Get Auto Exposure Compensation (AEC)@r (bool) enable va"
00028c  4175746f
000290  20457870
000294  6f737572
000298  6520436f
00029c  6d70656e
0002a0  73617469
0002a4  6f6e2028
0002a8  41454329
0002ac  40722028
0002b0  626f6f6c
0002b4  2920656e
0002b8  61626c65
0002bc  207661  
0002bf  6c756500          DCB      "lue",0
0002c3  00                DCB      0
0002c4  63616d5f          DCB      "cam_setECV",0
0002c8  73657445
0002cc  435600  
0002cf  00                DCB      0
0002d0  53657420          DCB      "Set Exposure Compensation Value (ECV)@p exposure compen"
0002d4  4578706f
0002d8  73757265
0002dc  20436f6d
0002e0  70656e73
0002e4  6174696f
0002e8  6e205661
0002ec  6c756520
0002f0  28454356
0002f4  29407020
0002f8  6578706f
0002fc  73757265
000300  20636f6d
000304  70656e  
000307  73617469          DCB      "sation value@r 0 if success, negative if error",0
00030b  6f6e2076
00030f  616c7565
000313  40722030
000317  20696620
00031b  73756363
00031f  6573732c
000323  206e6567
000327  61746976
00032b  65206966
00032f  20657272
000333  6f7200  
000336  00                DCB      0
000337  00                DCB      0
000338  63616d5f          DCB      "cam_getECV",0
00033c  67657445
000340  435600  
000343  00                DCB      0
000344  47657420          DCB      "Get Exposure Compensation Value (ECV)@r exposure compen"
000348  4578706f
00034c  73757265
000350  20436f6d
000354  70656e73
000358  6174696f
00035c  6e205661
000360  6c756520
000364  28454356
000368  29407220
00036c  6578706f
000370  73757265
000374  20636f6d
000378  70656e  
00037b  73617469          DCB      "sation value",0
00037f  6f6e2076
000383  616c7565
000387  00      
000388  63616d5f          DCB      "cam_setBrightness",0
00038c  73657442
000390  72696768
000394  746e6573
000398  7300    
00039a  00                DCB      0
00039b  00                DCB      0
00039c  53657420          DCB      "Set brightness value to increase or decrease exposure ("
0003a0  62726967
0003a4  68746e65
0003a8  73732076
0003ac  616c7565
0003b0  20746f20
0003b4  696e6372
0003b8  65617365
0003bc  206f7220
0003c0  64656372
0003c4  65617365
0003c8  20657870
0003cc  6f737572
0003d0  652028  
0003d3  6f6e6c79          DCB      "only applies when AEC is enabled)@p brightness value be"
0003d7  20617070
0003db  6c696573
0003df  20776865
0003e3  6e204145
0003e7  43206973
0003eb  20656e61
0003ef  626c6564
0003f3  29407020
0003f7  62726967
0003fb  68746e65
0003ff  73732076
000403  616c7565
000407  206265  
00040a  74776565          DCB      "tween 0 and 255@r 0 if success, negative if error",0
00040e  6e203020
000412  616e6420
000416  32353540
00041a  72203020
00041e  69662073
000422  75636365
000426  73732c20
00042a  6e656761
00042e  74697665
000432  20696620
000436  6572726f
00043a  7200    
00043c  63616d5f          DCB      "cam_getBrightness",0
000440  67657442
000444  72696768
000448  746e6573
00044c  7300    
00044e  00                DCB      0
00044f  00                DCB      0
000450  47657420          DCB      "Get brightness value@r brightness value",0
000454  62726967
000458  68746e65
00045c  73732076
000460  616c7565
000464  40722062
000468  72696768
00046c  746e6573
000470  73207661
000474  6c756500
000478  63616d5f          DCB      "cam_setLightMode",0
00047c  7365744c
000480  69676874
000484  4d6f6465
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
00048c  53657420          DCB      "Set light mode to compensate for low or high lighting c"
000490  6c696768
000494  74206d6f
000498  64652074
00049c  6f20636f
0004a0  6d70656e
0004a4  73617465
0004a8  20666f72
0004ac  206c6f77
0004b0  206f7220
0004b4  68696768
0004b8  206c6967
0004bc  6874696e
0004c0  672063  
0004c3  6f6e6469          DCB      "onditions@p mode one of the following: CAM_LIGHT_NORMAL"
0004c7  74696f6e
0004cb  73407020
0004cf  6d6f6465
0004d3  206f6e65
0004d7  206f6620
0004db  74686520
0004df  666f6c6c
0004e3  6f77696e
0004e7  673a2043
0004eb  414d5f4c
0004ef  49474854
0004f3  5f4e4f52
0004f7  4d414c  
0004fa  20283029          DCB      " (0), CAM_LIGHT_LOW (1), CAM_LIGHT_HIGH (2)@r 0 if succ"
0004fe  2c204341
000502  4d5f4c49
000506  4748545f
00050a  4c4f5720
00050e  2831292c
000512  2043414d
000516  5f4c4947
00051a  48545f48
00051e  49474820
000522  28322940
000526  72203020
00052a  69662073
00052e  756363  
000531  6573732c          DCB      "ess, negative if error",0
000535  206e6567
000539  61746976
00053d  65206966
000541  20657272
000545  6f7200  
000548  63616d5f          DCB      "cam_getLightMode",0
00054c  6765744c
000550  69676874
000554  4d6f6465
000558  00      
000559  00                DCB      0
00055a  00                DCB      0
00055b  00                DCB      0
00055c  47657420          DCB      "Get light mode@r 0 if success, negative if error",0
000560  6c696768
000564  74206d6f
000568  64654072
00056c  20302069
000570  66207375
000574  63636573
000578  732c206e
00057c  65676174
000580  69766520
000584  69662065
000588  72726f72
00058c  00      
00058d  00                DCB      0
00058e  00                DCB      0
00058f  00                DCB      0
000590  63616d5f          DCB      "cam_testPattern",0
000594  74657374
000598  50617474
00059c  65726e00
0005a0  53657420          DCB      "Set test pattern display@p (0) normal mode (1) test pat"
0005a4  74657374
0005a8  20706174
0005ac  7465726e
0005b0  20646973
0005b4  706c6179
0005b8  40702028
0005bc  3029206e
0005c0  6f726d61
0005c4  6c206d6f
0005c8  64652028
0005cc  31292074
0005d0  65737420
0005d4  706174  
0005d7  7465726e          DCB      "tern@r always returns 0",0
0005db  40722061
0005df  6c776179
0005e3  73207265
0005e7  7475726e
0005eb  73203000
0005ef  00                DCB      0
0005f0  63616d5f          DCB      "cam_getFrame",0
0005f4  67657446
0005f8  72616d65
0005fc  00      
0005fd  00                DCB      0
0005fe  00                DCB      0
0005ff  00                DCB      0
000600  47657420          DCB      "Get a frame from the camera@p mode one of the following"
000604  61206672
000608  616d6520
00060c  66726f6d
000610  20746865
000614  2063616d
000618  65726140
00061c  70206d6f
000620  6465206f
000624  6e65206f
000628  66207468
00062c  6520666f
000630  6c6c6f77
000634  696e67  
000637  2043414d          DCB      " CAM_GRAB_M0R0 (0x00), CAM_GRAB_M1R1 (0x11), CAM_GRAB_M"
00063b  5f475241
00063f  425f4d30
000643  52302028
000647  30783030
00064b  292c2043
00064f  414d5f47
000653  5241425f
000657  4d315231
00065b  20283078
00065f  3131292c
000663  2043414d
000667  5f475241
00066b  425f4d  
00066e  31523220          DCB      "1R2 (0x21)@p xOffset x offset counting from left@p yOff"
000672  28307832
000676  31294070
00067a  20784f66
00067e  66736574
000682  2078206f
000686  66667365
00068a  7420636f
00068e  756e7469
000692  6e672066
000696  726f6d20
00069a  6c656674
00069e  40702079
0006a2  4f6666  
0006a5  73657420          DCB      "set y offset counting from top@p width width of frame@p"
0006a9  79206f66
0006ad  66736574
0006b1  20636f75
0006b5  6e74696e
0006b9  67206672
0006bd  6f6d2074
0006c1  6f704070
0006c5  20776964
0006c9  74682077
0006cd  69647468
0006d1  206f6620
0006d5  6672616d
0006d9  654070  
0006dc  20686569          DCB      " height height of frame@r 0 if success, negative if err"
0006e0  67687420
0006e4  68656967
0006e8  6874206f
0006ec  66206672
0006f0  616d6540
0006f4  72203020
0006f8  69662073
0006fc  75636365
000700  73732c20
000704  6e656761
000708  74697665
00070c  20696620
000710  657272  
000713  6f724072          DCB      "or@r BA81 formatted data",0
000717  20424138
00071b  3120666f
00071f  726d6174
000723  74656420
000727  64617461
00072b  00      
00072c  63616d5f          DCB      "cam_setRegister",0
000730  73657452
000734  65676973
000738  74657200
00073c  57726974          DCB      "Write an SCCB register value on the camera chip@p addre"
000740  6520616e
000744  20534343
000748  42207265
00074c  67697374
000750  65722076
000754  616c7565
000758  206f6e20
00075c  74686520
000760  63616d65
000764  72612063
000768  68697040
00076c  70206164
000770  647265  
000773  73732072          DCB      "ss register address@p value register value to set@r 0 i"
000777  65676973
00077b  74657220
00077f  61646472
000783  65737340
000787  70207661
00078b  6c756520
00078f  72656769
000793  73746572
000797  2076616c
00079b  75652074
00079f  6f207365
0007a3  74407220
0007a7  302069  
0007aa  66207375          DCB      "f success, negative if error",0
0007ae  63636573
0007b2  732c206e
0007b6  65676174
0007ba  69766520
0007be  69662065
0007c2  72726f72
0007c6  00      
0007c7  00                DCB      0
0007c8  63616d5f          DCB      "cam_getRegister",0
0007cc  67657452
0007d0  65676973
0007d4  74657200
0007d8  52656164          DCB      "Read an SCCB register on the camera chip@p address regi"
0007dc  20616e20
0007e0  53434342
0007e4  20726567
0007e8  69737465
0007ec  72206f6e
0007f0  20746865
0007f4  2063616d
0007f8  65726120
0007fc  63686970
000800  40702061
000804  64647265
000808  73732072
00080c  656769  
00080f  73746572          DCB      "ster address@r 0 register value",0
000813  20616464
000817  72657373
00081b  40722030
00081f  20726567
000823  69737465
000827  72207661
00082b  6c756500
00082f  00                DCB      0
000830  40632053          DCB      "@c Signature_Tuning @m 0 @M 255 Sets the average bright"
000834  69676e61
000838  74757265
00083c  5f54756e
000840  696e6720
000844  406d2030
000848  20404d20
00084c  32353520
000850  53657473
000854  20746865
000858  20617665
00085c  72616765
000860  20627269
000864  676874  
000867  6e657373          DCB      "ness of the camera, can be between 0 and 255 (default 8"
00086b  206f6620
00086f  74686520
000873  63616d65
000877  72612c20
00087b  63616e20
00087f  62652062
000883  65747765
000887  656e2030
00088b  20616e64
00088f  20323535
000893  20286465
000897  6661756c
00089b  742038  
00089e  302900            DCB      "0)",0
0008a1  00                DCB      0
0008a2  00                DCB      0
0008a3  00                DCB      0
0008a4  40632043          DCB      "@c Camera Enables/disables Auto Exposure Correction. (d"
0008a8  616d6572
0008ac  6120456e
0008b0  61626c65
0008b4  732f6469
0008b8  7361626c
0008bc  65732041
0008c0  75746f20
0008c4  4578706f
0008c8  73757265
0008cc  20436f72
0008d0  72656374
0008d4  696f6e2e
0008d8  202864  
0008db  65666175          DCB      "efault dis enabled)",0
0008df  6c742064
0008e3  69732065
0008e7  6e61626c
0008eb  65642900
0008ef  00                DCB      0
0008f0  40632043          DCB      "@c Camera Enables/disables Auto White Balance. When thi"
0008f4  616d6572
0008f8  6120456e
0008fc  61626c65
000900  732f6469
000904  7361626c
000908  65732041
00090c  75746f20
000910  57686974
000914  65204261
000918  6c616e63
00091c  652e2057
000920  68656e20
000924  746869  
000927  73206973          DCB      "s is set, AWB is enabled continuously. (default disable"
00092b  20736574
00092f  2c204157
000933  42206973
000937  20656e61
00093b  626c6564
00093f  20636f6e
000943  74696e75
000947  6f75736c
00094b  792e2028
00094f  64656661
000953  756c7420
000957  64697361
00095b  626c65  
00095e  642900            DCB      "d)",0
000961  00                DCB      0
000962  00                DCB      0
000963  00                DCB      0
000964  40632043          DCB      "@c Camera Enables/disables Auto White Balance on power-"
000968  616d6572
00096c  6120456e
000970  61626c65
000974  732f6469
000978  7361626c
00097c  65732041
000980  75746f20
000984  57686974
000988  65204261
00098c  6c616e63
000990  65206f6e
000994  20706f77
000998  65722d  
00099b  75702e20          DCB      "up. When this is set, AWB is enabled only upon power-up"
00099f  5768656e
0009a3  20746869
0009a7  73206973
0009ab  20736574
0009af  2c204157
0009b3  42206973
0009b7  20656e61
0009bb  626c6564
0009bf  206f6e6c
0009c3  79207570
0009c7  6f6e2070
0009cb  6f776572
0009cf  2d7570  
0009d2  2e202864          DCB      ". (default enabled)",0
0009d6  65666175
0009da  6c742065
0009de  6e61626c
0009e2  65642900

                          AREA ||.data||, DATA, ALIGN=2

                  g_sccb
                          DCD      0x00000000
                  g_rawFrame
                          %        8
                  g_mode
00000c  ff                DCB      0xff
                  g_awb
00000d  01                DCB      0x01
                  g_aec
00000e  01                DCB      0x01
                  g_lightMode
00000f  00                DCB      0x00
                  g_brightness
000010  5000              DCB      0x50,0x00
                  g_getFrameM0
000012  ffff              DCW      0xffff
                  g_aecValue
                          DCD      0x00000000
                  g_awbValue
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___10_camera_cpp_g_sccb

;*** Start embedded assembler ***

#line 1 "camera.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_camera_cpp_g_sccb___Z7__REV16j|
#line 130 ".\\core_cmInstr.h"
|__asm___10_camera_cpp_g_sccb___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_camera_cpp_g_sccb___Z7__REVSHi|
#line 144
|__asm___10_camera_cpp_g_sccb___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
