; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\platform_config.o --asm_dir=.\ --list_dir=.\ --depend=.\platform_config.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\platform_config.crf platform_config.c]
                          THUMB

                          AREA ||i.clockInit||, CODE, READONLY, ALIGN=2

                  clockInit PROC
;;;160    
;;;161    void clockInit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
;;;163    	uint32_t EMCClk;
;;;164    
;;;165    	__disable_irq();
000002  b672              CPSID    i
;;;166     	/* Set the XTAL oscillator frequency to 12MHz*/
;;;167    	CGU_SetXTALOSC(__CRYSTAL);
000004  4848              LDR      r0,|L1.296|
000006  f7fffffe          BL       CGU_SetXTALOSC
;;;168    	CGU_EnableEntity(CGU_CLKSRC_XTAL_OSC, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2006              MOVS     r0,#6
00000e  f7fffffe          BL       CGU_EnableEntity
;;;169    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_BASE_M3);
000012  2115              MOVS     r1,#0x15
000014  2006              MOVS     r0,#6
000016  f7fffffe          BL       CGU_EntityConnect
;;;170    	
;;;171    	/* Set PL160M 12*1 = 12 MHz */
;;;172    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_CLKSRC_PLL1);
00001a  2109              MOVS     r1,#9
00001c  2006              MOVS     r0,#6
00001e  f7fffffe          BL       CGU_EntityConnect
;;;173    //	CGU_EntityConnect(CGU_CLKSRC_IRC, CGU_CLKSRC_PLL1);
;;;174    	CGU_SetPLL1(1);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       CGU_SetPLL1
;;;175    	CGU_EnableEntity(CGU_CLKSRC_PLL1, ENABLE);
000028  2101              MOVS     r1,#1
00002a  2009              MOVS     r0,#9
00002c  f7fffffe          BL       CGU_EnableEntity
;;;176    
;;;177    	// setup CLKOUT
;;;178    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_CLKSRC_IDIVB);
000030  210d              MOVS     r1,#0xd
000032  2009              MOVS     r0,#9
000034  f7fffffe          BL       CGU_EntityConnect
;;;179    	CGU_EnableEntity(CGU_CLKSRC_IDIVB, ENABLE);
000038  2101              MOVS     r1,#1
00003a  200d              MOVS     r0,#0xd
00003c  f7fffffe          BL       CGU_EnableEntity
;;;180    	CGU_SetDIV(CGU_CLKSRC_IDIVB, 12);  // 12 -> 6 pclks per cpu clk, 10 -> 5 pclks
000040  210c              MOVS     r1,#0xc
000042  200d              MOVS     r0,#0xd
000044  f7fffffe          BL       CGU_SetDIV
;;;181    	// set input for CLKOUT to IDIVB
;;;182    	LPC_CGU->BASE_OUT_CLK &= ~0x0f000000;
000048  4838              LDR      r0,|L1.300|
00004a  6800              LDR      r0,[r0,#0]
00004c  f0206070          BIC      r0,r0,#0xf000000
000050  4936              LDR      r1,|L1.300|
000052  39ac              SUBS     r1,r1,#0xac
000054  f8c100ac          STR      r0,[r1,#0xac]
;;;183    	LPC_CGU->BASE_OUT_CLK |= 0x0d000000;
000058  4608              MOV      r0,r1
00005a  f8d000ac          LDR      r0,[r0,#0xac]
00005e  f0406050          ORR      r0,r0,#0xd000000
000062  f8c100ac          STR      r0,[r1,#0xac]
;;;184    
;;;185    	/* Run SPIFI from PL160M, /2 */
;;;186    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_CLKSRC_IDIVA);
000066  210c              MOVS     r1,#0xc
000068  2009              MOVS     r0,#9
00006a  f7fffffe          BL       CGU_EntityConnect
;;;187    	CGU_EnableEntity(CGU_CLKSRC_IDIVA, ENABLE);
00006e  2101              MOVS     r1,#1
000070  200c              MOVS     r0,#0xc
000072  f7fffffe          BL       CGU_EnableEntity
;;;188    	CGU_SetDIV(CGU_CLKSRC_IDIVA, 2);
000076  2102              MOVS     r1,#2
000078  200c              MOVS     r0,#0xc
00007a  f7fffffe          BL       CGU_SetDIV
;;;189    	CGU_EntityConnect(CGU_CLKSRC_IDIVA, CGU_BASE_SPIFI);
00007e  2116              MOVS     r1,#0x16
000080  200c              MOVS     r0,#0xc
000082  f7fffffe          BL       CGU_EntityConnect
;;;190    	CGU_UpdateClock();
000086  f7fffffe          BL       CGU_UpdateClock
;;;191    
;;;192    	LPC_CCU1->CLK_M4_EMCDIV_CFG |=    (1<<0) |  (1<<5);		// Turn on clock / 2
00008a  4829              LDR      r0,|L1.304|
00008c  6800              LDR      r0,[r0,#0]
00008e  f0400021          ORR      r0,r0,#0x21
000092  4927              LDR      r1,|L1.304|
000094  6008              STR      r0,[r1,#0]
;;;193    	LPC_CREG->CREG6 |= (1<<16);	// EMC divided by 2
000096  4827              LDR      r0,|L1.308|
000098  f8d0012c          LDR      r0,[r0,#0x12c]
00009c  f4403080          ORR      r0,r0,#0x10000
0000a0  4924              LDR      r1,|L1.308|
0000a2  f8c1012c          STR      r0,[r1,#0x12c]
;;;194        LPC_CCU1->CLK_M4_EMC_CFG |= (1<<0);		// Turn on clock
0000a6  4822              LDR      r0,|L1.304|
0000a8  3848              SUBS     r0,r0,#0x48
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f0400001          ORR      r0,r0,#1
0000b0  491f              LDR      r1,|L1.304|
0000b2  3948              SUBS     r1,r1,#0x48
0000b4  6008              STR      r0,[r1,#0]
;;;195    
;;;196    	/* Set PL160M @ 12*9=108 MHz */
;;;197    	CGU_SetPLL1(9);
0000b6  2009              MOVS     r0,#9
0000b8  f7fffffe          BL       CGU_SetPLL1
;;;198    
;;;199    	/* Run base M3 clock from PL160M, no division */
;;;200    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_M3);
0000bc  2115              MOVS     r1,#0x15
0000be  2009              MOVS     r0,#9
0000c0  f7fffffe          BL       CGU_EntityConnect
;;;201    
;;;202    	delayus(10000);
0000c4  f2427010          MOV      r0,#0x2710
0000c8  f7fffffe          BL       delayus
;;;203    
;;;204    	/* Change the clock to 204 MHz */
;;;205    	/* Set PL160M @ 12*15=180 MHz */
;;;206    	CGU_SetPLL1(17);
0000cc  2011              MOVS     r0,#0x11
0000ce  f7fffffe          BL       CGU_SetPLL1
;;;207    
;;;208    	delayus(10000);
0000d2  f2427010          MOV      r0,#0x2710
0000d6  f7fffffe          BL       delayus
;;;209    
;;;210    	CGU_UpdateClock();
0000da  f7fffffe          BL       CGU_UpdateClock
;;;211    
;;;212    	LPC_SCU->SFSP3_3 = 0xF3; /* high drive for SCLK */
0000de  20f3              MOVS     r0,#0xf3
0000e0  4915              LDR      r1,|L1.312|
0000e2  6008              STR      r0,[r1,#0]
;;;213    	/* IO pins */
;;;214    	LPC_SCU->SFSP3_4=LPC_SCU->SFSP3_5=LPC_SCU->SFSP3_6=LPC_SCU->SFSP3_7 = 0xD3;
0000e4  20d3              MOVS     r0,#0xd3
0000e6  4914              LDR      r1,|L1.312|
0000e8  3110              ADDS     r1,r1,#0x10
0000ea  6008              STR      r0,[r1,#0]
0000ec  1f09              SUBS     r1,r1,#4
0000ee  6008              STR      r0,[r1,#0]
0000f0  1f09              SUBS     r1,r1,#4
0000f2  6008              STR      r0,[r1,#0]
0000f4  1f09              SUBS     r1,r1,#4
0000f6  6008              STR      r0,[r1,#0]
;;;215    	LPC_SCU->SFSP3_8 = 0x13; /* CS doesn't need feedback */
0000f8  2013              MOVS     r0,#0x13
0000fa  4910              LDR      r1,|L1.316|
0000fc  f8c101a0          STR      r0,[r1,#0x1a0]
;;;216    
;;;217    	EMCClk = CGU_GetPCLKFrequency(CGU_PERIPHERAL_SPIFI)/1000000;
000100  2019              MOVS     r0,#0x19
000102  f7fffffe          BL       CGU_GetPCLKFrequency
000106  490e              LDR      r1,|L1.320|
000108  fbb0f4f1          UDIV     r4,r0,r1
;;;218    	if (spifi_init(&g_spifi, EMCClk/5, S_RCVCLK | S_FULLCLK, EMCClk))
00010c  2005              MOVS     r0,#5
00010e  fbb4f5f0          UDIV     r5,r4,r0
000112  4623              MOV      r3,r4
000114  22c0              MOVS     r2,#0xc0
000116  4629              MOV      r1,r5
000118  480a              LDR      r0,|L1.324|
00011a  f7fffffe          BL       spifi_init
00011e  b108              CBZ      r0,|L1.292|
;;;219    		while(1);
000120  bf00              NOP      
                  |L1.290|
000122  e7fe              B        |L1.290|
                  |L1.292|
;;;220    
;;;221    	__enable_irq();
000124  b662              CPSIE    i
;;;222    }
000126  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP

                  |L1.296|
                          DCD      0x00b71b00
                  |L1.300|
                          DCD      0x400500ac
                  |L1.304|
                          DCD      0x40051478
                  |L1.308|
                          DCD      0x40043000
                  |L1.312|
                          DCD      0x4008618c
                  |L1.316|
                          DCD      0x40086000
                  |L1.320|
                          DCD      0x000f4240
                  |L1.324|
                          DCD      g_spifi

                          AREA ||i.delayus||, CODE, READONLY, ALIGN=1

                  delayus PROC
;;;152    
;;;153    static void delayus(uint32_t us)
000000  b50c              PUSH     {r2,r3,lr}
;;;154    {
;;;155    	volatile uint32_t i, j;	
;;;156    	
;;;157    	for (i=0; i<us; i++)
000002  2100              MOVS     r1,#0
000004  9101              STR      r1,[sp,#4]
000006  e00b              B        |L2.32|
                  |L2.8|
;;;158    		for (j=0; j<38; j++);
000008  2100              MOVS     r1,#0
00000a  9100              STR      r1,[sp,#0]
00000c  e002              B        |L2.20|
                  |L2.14|
00000e  9900              LDR      r1,[sp,#0]
000010  1c49              ADDS     r1,r1,#1
000012  9100              STR      r1,[sp,#0]
                  |L2.20|
000014  9900              LDR      r1,[sp,#0]
000016  2926              CMP      r1,#0x26
000018  d3f9              BCC      |L2.14|
00001a  9901              LDR      r1,[sp,#4]            ;157
00001c  1c49              ADDS     r1,r1,#1              ;157
00001e  9101              STR      r1,[sp,#4]            ;157
                  |L2.32|
000020  9901              LDR      r1,[sp,#4]            ;157
000022  4281              CMP      r1,r0                 ;157
000024  d3f0              BCC      |L2.8|
;;;159    }
000026  bd0c              POP      {r2,r3,pc}
;;;160    
                          ENDP


                          AREA ||i.platformInit||, CODE, READONLY, ALIGN=1

                  platformInit PROC
;;;35     /* this function initializes the platform with system level settings */
;;;36     void platformInit(void) {
000000  b510              PUSH     {r4,lr}
;;;37     
;;;38     	SystemInit();	
000002  f7fffffe          BL       SystemInit
;;;39     	
;;;40     	/* checks for presence of an FPU unit */
;;;41     	fpuInit();
000006  f7fffffe          BL       fpuInit
;;;42     
;;;43     	clockInit();
00000a  f7fffffe          BL       clockInit
;;;44     	vIOInit();
00000e  f7fffffe          BL       vIOInit
;;;45     
;;;46     	#if (USE_EXT_STATIC_MEM == YES) || (USE_EXT_DYNAMIC_MEM == YES)
;;;47     	 
;;;48     	EMC_Init();
;;;49     	
;;;50     	#endif
;;;51     
;;;52         #if (USE_EXT_FLASH == YES)
;;;53     	
;;;54     	// relocate vector table to internal ram
;;;55     	// updates also VTOR
;;;56     	relocIrqTable(); 
;;;57     	
;;;58     	#endif
;;;59     
;;;60     }
000012  bd10              POP      {r4,pc}
;;;61     
                          ENDP


                          AREA ||i.vIOInit||, CODE, READONLY, ALIGN=2

                  vIOInit PROC
;;;64      *----------------------------------------------------------------------------*/
;;;65     void vIOInit(void)
000000  b510              PUSH     {r4,lr}
;;;66     {	
;;;67     	// disable clocks to peripherals we don't use	
;;;68     	LPC_CCU1->CLK_APB3_I2C1_CFG = 0;
000002  2000              MOVS     r0,#0
000004  498d              LDR      r1,|L4.572|
000006  6008              STR      r0,[r1,#0]
;;;69     	LPC_CCU1->CLK_APB3_ADC1_CFG = 0;
000008  498d              LDR      r1,|L4.576|
00000a  f8c10120          STR      r0,[r1,#0x120]
;;;70     	LPC_CCU1->CLK_APB3_CAN0_CFG = 0;
00000e  498b              LDR      r1,|L4.572|
000010  3120              ADDS     r1,r1,#0x20
000012  6008              STR      r0,[r1,#0]
;;;71     	LPC_CCU1->CLK_APB1_MOTOCONPWM_CFG = 0;
000014  498b              LDR      r1,|L4.580|
000016  6008              STR      r0,[r1,#0]
;;;72     	LPC_CCU1->CLK_APB1_I2S_CFG = 0;
000018  498a              LDR      r1,|L4.580|
00001a  3110              ADDS     r1,r1,#0x10
00001c  6008              STR      r0,[r1,#0]
;;;73     	LPC_CCU1->CLK_APB1_CAN1_CFG = 0;
00001e  4989              LDR      r1,|L4.580|
000020  3118              ADDS     r1,r1,#0x18
000022  6008              STR      r0,[r1,#0]
;;;74     	LPC_CCU1->CLK_M4_LCD_CFG = 0;
000024  4988              LDR      r1,|L4.584|
000026  6008              STR      r0,[r1,#0]
;;;75     	LPC_CCU1->CLK_M4_ETHERNET_CFG = 0;
000028  4987              LDR      r1,|L4.584|
00002a  3108              ADDS     r1,r1,#8
00002c  6008              STR      r0,[r1,#0]
;;;76     	LPC_CCU1->CLK_M4_EMC_CFG = 0;
00002e  4986              LDR      r1,|L4.584|
000030  3118              ADDS     r1,r1,#0x18
000032  6008              STR      r0,[r1,#0]
;;;77     	LPC_CCU1->CLK_M4_SDIO_CFG = 0;
000034  4984              LDR      r1,|L4.584|
000036  3120              ADDS     r1,r1,#0x20
000038  6008              STR      r0,[r1,#0]
;;;78     	LPC_CCU1->CLK_M4_USB1_CFG = 0;
00003a  4983              LDR      r1,|L4.584|
00003c  3158              ADDS     r1,r1,#0x58
00003e  6008              STR      r0,[r1,#0]
;;;79     	LPC_CCU1->CLK_M4_EMCDIV_CFG = 0;
000040  4981              LDR      r1,|L4.584|
000042  3160              ADDS     r1,r1,#0x60
000044  6008              STR      r0,[r1,#0]
;;;80     
;;;81     	LPC_CCU1->CLK_M4_USART2_CFG = 0;
000046  4981              LDR      r1,|L4.588|
000048  6008              STR      r0,[r1,#0]
;;;82     	LPC_CCU1->CLK_M4_USART3_CFG = 0;
00004a  4980              LDR      r1,|L4.588|
00004c  3108              ADDS     r1,r1,#8
00004e  6008              STR      r0,[r1,#0]
;;;83     
;;;84     	LPC_CCU1->CLK_M4_SSP0_CFG = 0;
000050  497e              LDR      r1,|L4.588|
000052  39f0              SUBS     r1,r1,#0xf0
000054  6008              STR      r0,[r1,#0]
;;;85     	LPC_CCU1->CLK_M4_QEI_CFG = 0;
000056  497d              LDR      r1,|L4.588|
000058  3128              ADDS     r1,r1,#0x28
00005a  6008              STR      r0,[r1,#0]
;;;86     
;;;87     	LPC_CCU2->CLK_APB0_SSP0_CFG = 0;
00005c  497c              LDR      r1,|L4.592|
00005e  6008              STR      r0,[r1,#0]
;;;88     	LPC_CCU2->CLK_APB2_USART3_CFG = 0;
000060  497c              LDR      r1,|L4.596|
000062  6008              STR      r0,[r1,#0]
;;;89     	LPC_CCU2->CLK_APB2_USART2_CFG = 0;
000064  497c              LDR      r1,|L4.600|
000066  6008              STR      r0,[r1,#0]
;;;90     	LPC_CCU2->CLK_SDIO_CFG = 0;
000068  497c              LDR      r1,|L4.604|
00006a  6008              STR      r0,[r1,#0]
;;;91     
;;;92     	scu_pinmux(0x0, 0,  (MD_PUP | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[0] siod
00006c  2300              MOVS     r3,#0
00006e  22e0              MOVS     r2,#0xe0
000070  4619              MOV      r1,r3
000072  4618              MOV      r0,r3
000074  f7fffffe          BL       scu_pinmux
;;;93     	scu_pinmux(0x0, 1,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[1] sioc
000078  2300              MOVS     r3,#0
00007a  22f0              MOVS     r2,#0xf0
00007c  2101              MOVS     r1,#1
00007e  4618              MOV      r0,r3
000080  f7fffffe          BL       scu_pinmux
;;;94     	scu_pinmux(0x1, 15, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[2] PWDN
000084  2300              MOVS     r3,#0
000086  22f0              MOVS     r2,#0xf0
000088  210f              MOVS     r1,#0xf
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       scu_pinmux
;;;95     	scu_pinmux(0x1, 16, (MD_PUP | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[3] RSTB
000090  2300              MOVS     r3,#0
000092  22e0              MOVS     r2,#0xe0
000094  2110              MOVS     r1,#0x10
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       scu_pinmux
;;;96     
;;;97     	scu_pinmux(0x1, 7,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[0] Y0 
00009c  2300              MOVS     r3,#0
00009e  22f0              MOVS     r2,#0xf0
0000a0  2107              MOVS     r1,#7
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       scu_pinmux
;;;98     	scu_pinmux(0x1, 8,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[1] Y1
0000a8  2300              MOVS     r3,#0
0000aa  22f0              MOVS     r2,#0xf0
0000ac  2108              MOVS     r1,#8
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       scu_pinmux
;;;99     	scu_pinmux(0x1, 9,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[2] Y2
0000b4  2300              MOVS     r3,#0
0000b6  22f0              MOVS     r2,#0xf0
0000b8  2109              MOVS     r1,#9
0000ba  2001              MOVS     r0,#1
0000bc  f7fffffe          BL       scu_pinmux
;;;100    	scu_pinmux(0x1, 10, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[3] Y3
0000c0  2300              MOVS     r3,#0
0000c2  22f0              MOVS     r2,#0xf0
0000c4  210a              MOVS     r1,#0xa
0000c6  2001              MOVS     r0,#1
0000c8  f7fffffe          BL       scu_pinmux
;;;101    	scu_pinmux(0x1, 11, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[4] Y4
0000cc  2300              MOVS     r3,#0
0000ce  22f0              MOVS     r2,#0xf0
0000d0  210b              MOVS     r1,#0xb
0000d2  2001              MOVS     r0,#1
0000d4  f7fffffe          BL       scu_pinmux
;;;102    	scu_pinmux(0x1, 12, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[5] Y5
0000d8  2300              MOVS     r3,#0
0000da  22f0              MOVS     r2,#0xf0
0000dc  210c              MOVS     r1,#0xc
0000de  2001              MOVS     r0,#1
0000e0  f7fffffe          BL       scu_pinmux
;;;103    	scu_pinmux(0x1, 13, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[6] Y6
0000e4  2300              MOVS     r3,#0
0000e6  22f0              MOVS     r2,#0xf0
0000e8  210d              MOVS     r1,#0xd
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       scu_pinmux
;;;104    	scu_pinmux(0x1, 14, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[7] Y7
0000f0  2300              MOVS     r3,#0
0000f2  22f0              MOVS     r2,#0xf0
0000f4  210e              MOVS     r1,#0xe
0000f6  2001              MOVS     r0,#1
0000f8  f7fffffe          BL       scu_pinmux
;;;105    	scu_pinmux(0x1, 5,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[8] Y8
0000fc  2300              MOVS     r3,#0
0000fe  22f0              MOVS     r2,#0xf0
000100  2105              MOVS     r1,#5
000102  2001              MOVS     r0,#1
000104  f7fffffe          BL       scu_pinmux
;;;106    	scu_pinmux(0x1, 6,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[9] Y9
000108  2300              MOVS     r3,#0
00010a  22f0              MOVS     r2,#0xf0
00010c  2106              MOVS     r1,#6
00010e  2001              MOVS     r0,#1
000110  f7fffffe          BL       scu_pinmux
;;;107    	scu_pinmux(0x2, 11, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[11] HSYNC
000114  2300              MOVS     r3,#0
000116  22f0              MOVS     r2,#0xf0
000118  210b              MOVS     r1,#0xb
00011a  2002              MOVS     r0,#2
00011c  f7fffffe          BL       scu_pinmux
;;;108    	scu_pinmux(0x2, 12, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[12] VSYNC
000120  2300              MOVS     r3,#0
000122  22f0              MOVS     r2,#0xf0
000124  210c              MOVS     r1,#0xc
000126  2002              MOVS     r0,#2
000128  f7fffffe          BL       scu_pinmux
;;;109    	scu_pinmux(0x2, 13, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[13] PCLK
00012c  2300              MOVS     r3,#0
00012e  22f0              MOVS     r2,#0xf0
000130  210d              MOVS     r1,#0xd
000132  2002              MOVS     r0,#2
000134  f7fffffe          BL       scu_pinmux
;;;110    	scu_pinmux(0x6, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // CTOUT_6 RCS0	CHANGED FROM FUNC1 TO FUNC0
000138  2301              MOVS     r3,#1
00013a  22f0              MOVS     r2,#0xf0
00013c  2105              MOVS     r1,#5
00013e  2006              MOVS     r0,#6
000140  f7fffffe          BL       scu_pinmux
;;;111    	scu_pinmux(0x6, 12, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	     // CTOUT_7 RCS1
000144  2301              MOVS     r3,#1
000146  22f0              MOVS     r2,#0xf0
000148  210c              MOVS     r1,#0xc
00014a  2006              MOVS     r0,#6
00014c  f7fffffe          BL       scu_pinmux
;;;112    
;;;113    	scu_pinmux(0x4, 2, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // CTOUT_0 RED		ORIGINALLY FUNC1
000150  2301              MOVS     r3,#1
000152  22f0              MOVS     r2,#0xf0
000154  2102              MOVS     r1,#2
000156  2004              MOVS     r0,#4
000158  f7fffffe          BL       scu_pinmux
;;;114    	scu_pinmux(0x2, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // CTOUT_1 GREEN	ORIGINALLY FUNC1
00015c  2301              MOVS     r3,#1
00015e  22f0              MOVS     r2,#0xf0
000160  2107              MOVS     r1,#7
000162  2002              MOVS     r0,#2
000164  f7fffffe          BL       scu_pinmux
;;;115    	scu_pinmux(0x2, 10, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	     // CTOUT_2 BLUE		ORIGINALLY FUNC1
000168  2301              MOVS     r3,#1
00016a  22f0              MOVS     r2,#0xf0
00016c  210a              MOVS     r1,#0xa
00016e  2002              MOVS     r0,#2
000170  f7fffffe          BL       scu_pinmux
;;;116    
;;;117    	scu_pinmux(0x3, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[8] VBUS_EN
000174  2304              MOVS     r3,#4
000176  22f0              MOVS     r2,#0xf0
000178  2101              MOVS     r1,#1
00017a  2003              MOVS     r0,#3
00017c  f7fffffe          BL       scu_pinmux
;;;118    
;;;119    	scu_pinmux(0x5, 6, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U1_TXD (output)
000180  2304              MOVS     r3,#4
000182  22f0              MOVS     r2,#0xf0
000184  2106              MOVS     r1,#6
000186  2005              MOVS     r0,#5
000188  f7fffffe          BL       scu_pinmux
;;;120    	scu_pinmux(0x5, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U1_RXD (input)
00018c  2304              MOVS     r3,#4
00018e  22f0              MOVS     r2,#0xf0
000190  2107              MOVS     r1,#7
000192  2005              MOVS     r0,#5
000194  f7fffffe          BL       scu_pinmux
;;;121    	scu_pinmux(0x2, 0, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U0_TXD 
000198  2304              MOVS     r3,#4
00019a  22f0              MOVS     r2,#0xf0
00019c  2100              MOVS     r1,#0
00019e  2002              MOVS     r0,#2
0001a0  f7fffffe          BL       scu_pinmux
;;;122    	scu_pinmux(0x2, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U0_RXD
0001a4  2304              MOVS     r3,#4
0001a6  22f0              MOVS     r2,#0xf0
0001a8  2101              MOVS     r1,#1
0001aa  2002              MOVS     r0,#2
0001ac  f7fffffe          BL       scu_pinmux
;;;123    
;;;124    	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); 	         // SSP1_MISO 
0001b0  2305              MOVS     r3,#5
0001b2  22f0              MOVS     r2,#0xf0
0001b4  2103              MOVS     r1,#3
0001b6  2001              MOVS     r0,#1
0001b8  f7fffffe          BL       scu_pinmux
;;;125    	scu_pinmux(0x1, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); 	         // SSP1_MOSI 
0001bc  2305              MOVS     r3,#5
0001be  22f0              MOVS     r2,#0xf0
0001c0  2104              MOVS     r1,#4
0001c2  2001              MOVS     r0,#1
0001c4  f7fffffe          BL       scu_pinmux
;;;126    	scu_pinmux(0x1, 19, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // SSP1_SCK 
0001c8  2301              MOVS     r3,#1
0001ca  22f0              MOVS     r2,#0xf0
0001cc  2113              MOVS     r1,#0x13
0001ce  4618              MOV      r0,r3
0001d0  f7fffffe          BL       scu_pinmux
;;;127    	scu_pinmux(0x1, 20, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // SSP1_SSEL 
0001d4  2301              MOVS     r3,#1
0001d6  22f0              MOVS     r2,#0xf0
0001d8  2114              MOVS     r1,#0x14
0001da  4618              MOV      r0,r3
0001dc  f7fffffe          BL       scu_pinmux
;;;128    	scu_pinmux(0x2, 2, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[2] 
0001e0  2304              MOVS     r3,#4
0001e2  22f0              MOVS     r2,#0xf0
0001e4  2102              MOVS     r1,#2
0001e6  4608              MOV      r0,r1
0001e8  f7fffffe          BL       scu_pinmux
;;;129    	scu_pinmux(0x2, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[3] 
0001ec  2304              MOVS     r3,#4
0001ee  22f0              MOVS     r2,#0xf0
0001f0  2103              MOVS     r1,#3
0001f2  2002              MOVS     r0,#2
0001f4  f7fffffe          BL       scu_pinmux
;;;130    	scu_pinmux(0x2, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[4] 
0001f8  2304              MOVS     r3,#4
0001fa  22f0              MOVS     r2,#0xf0
0001fc  4619              MOV      r1,r3
0001fe  2002              MOVS     r0,#2
000200  f7fffffe          BL       scu_pinmux
;;;131    	scu_pinmux(0x2, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); // FUNC4 	         // gpio5[5] rev 1.1 SS control
000204  2300              MOVS     r3,#0
000206  22f0              MOVS     r2,#0xf0
000208  2105              MOVS     r1,#5
00020a  2002              MOVS     r0,#2
00020c  f7fffffe          BL       scu_pinmux
;;;132    	scu_pinmux(0x3, 2, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[9]
000210  2304              MOVS     r3,#4
000212  22f0              MOVS     r2,#0xf0
000214  2102              MOVS     r1,#2
000216  2003              MOVS     r0,#3
000218  f7fffffe          BL       scu_pinmux
;;;133    	
;;;134    	scu_pinmux(0x2, 8, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // push-button gpio5[7]
00021c  2304              MOVS     r3,#4
00021e  22f0              MOVS     r2,#0xf0
000220  2108              MOVS     r1,#8
000222  2002              MOVS     r0,#2
000224  f7fffffe          BL       scu_pinmux
;;;135    	scu_pinmux(0x4, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	         // gpio2[1] rev 1.1 
000228  2300              MOVS     r3,#0
00022a  22f0              MOVS     r2,#0xf0
00022c  2101              MOVS     r1,#1
00022e  2004              MOVS     r0,#4
000230  f7fffffe          BL       scu_pinmux
;;;136    
;;;137    
;;;138    	//scu_pinmux(0x7, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;139    	//scu_pinmux(0x7, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;140    	//scu_pinmux(0x7, 6, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;141    	//scu_pinmux(0x7, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;142    
;;;143    	LPC_SCU_CLK(0) = 1 + (MD_PLN | MD_EZI | MD_ZI | MD_EHS); /*  EXTBUS_CLK0  IDIVB input */
000234  20f1              MOVS     r0,#0xf1
000236  490a              LDR      r1,|L4.608|
000238  6008              STR      r0,[r1,#0]
;;;144    }
00023a  bd10              POP      {r4,pc}
;;;145    	
                          ENDP

                  |L4.572|
                          DCD      0x40051108
                  |L4.576|
                          DCD      0x40051000
                  |L4.580|
                          DCD      0x40051208
                  |L4.584|
                          DCD      0x40051418
                  |L4.588|
                          DCD      0x40051608
                  |L4.592|
                          DCD      0x40052700
                  |L4.596|
                          DCD      0x40052200
                  |L4.600|
                          DCD      0x40052300
                  |L4.604|
                          DCD      0x40052800
                  |L4.608|
                          DCD      0x40086c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_spifi
                          %        128

;*** Start embedded assembler ***

#line 1 "platform_config.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_platform_config_c_9d0ba0a3____REV16|
#line 130 ".\\core_cmInstr.h"
|__asm___17_platform_config_c_9d0ba0a3____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_platform_config_c_9d0ba0a3____REVSH|
#line 144
|__asm___17_platform_config_c_9d0ba0a3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
