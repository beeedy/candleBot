; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\led.o --asm_dir=.\ --list_dir=.\ --depend=.\led.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\led.crf led.cpp]
                          THUMB

                          AREA ||i._Z10led_setPWMht||, CODE, READONLY, ALIGN=2

                  _Z10led_setPWMht PROC ; led_setPWM(unsigned char, unsigned short)
;;;105    
;;;106    void led_setPWM(uint8_t led, uint16_t pwm)
000000  2802              CMP      r0,#2
;;;107    {
;;;108    	if (led>2)
000002  dd00              BLE      |L1.6|
                  |L1.4|
;;;109    		return;
;;;110    
;;;111    #if 0
;;;112    	// this code causes some glitchy looking flashes because it messes with 
;;;113    	// the pwm state machine, although this isn't clear to me why it would 
;;;114    	// be slow enough to be visible....
;;;115    	// This code turns the LED completely off --- disabling for now though.  
;;;116    	if (pwm==0)
;;;117    	{
;;;118    	 	LPC_SCT->OUT[led].SET = 1<<15; // disable
;;;119    		LPC_SCT->OUT[led].CLR = 1<<3;
;;;120    	} 
;;;121    	else
;;;122    #endif 
;;;123    	if (pwm==LED_MAX_PWM)
;;;124    	{
;;;125    		LPC_SCT->OUT[led].SET = 1<<3;
;;;126    	 	LPC_SCT->OUT[led].CLR = 1<<15; 
;;;127    	}
;;;128    	else
;;;129    	{
;;;130    		LPC_SCT->MATCH[led+1].H = pwm;
;;;131    		LPC_SCT->MATCHREL[led+1].H = pwm;
;;;132    		LPC_SCT->OUT[led].SET = 1<<3;
;;;133    		LPC_SCT->OUT[led].CLR = 1<<(led+4);
;;;134    	}	
;;;135    }
000004  4770              BX       lr
                  |L1.6|
000006  f64f72ff          MOV      r2,#0xffff            ;123
00000a  4291              CMP      r1,r2                 ;123
00000c  d108              BNE      |L1.32|
00000e  2308              MOVS     r3,#8                 ;125
000010  4a0f              LDR      r2,|L1.80|
000012  f8423030          STR      r3,[r2,r0,LSL #3]     ;125
000016  13d3              ASRS     r3,r2,#15             ;126
000018  eb0202c0          ADD      r2,r2,r0,LSL #3       ;126
00001c  6053              STR      r3,[r2,#4]            ;126
00001e  e014              B        |L1.74|
                  |L1.32|
000020  4a0c              LDR      r2,|L1.84|
000022  1c43              ADDS     r3,r0,#1              ;130
000024  eb020283          ADD      r2,r2,r3,LSL #2       ;130
000028  8051              STRH     r1,[r2,#2]            ;130
00002a  4a0b              LDR      r2,|L1.88|
00002c  eb020283          ADD      r2,r2,r3,LSL #2       ;131
000030  8051              STRH     r1,[r2,#2]            ;131
000032  2308              MOVS     r3,#8                 ;132
000034  4a06              LDR      r2,|L1.80|
000036  f8423030          STR      r3,[r2,r0,LSL #3]     ;132
00003a  1d02              ADDS     r2,r0,#4              ;133
00003c  2301              MOVS     r3,#1                 ;133
00003e  fa03f202          LSL      r2,r3,r2              ;133
000042  4b03              LDR      r3,|L1.80|
000044  eb0303c0          ADD      r3,r3,r0,LSL #3       ;133
000048  605a              STR      r2,[r3,#4]            ;133
                  |L1.74|
00004a  bf00              NOP      
00004c  e7da              B        |L1.4|
;;;136    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40000500
                  |L1.84|
                          DCD      0x40000100
                  |L1.88|
                          DCD      0x40000200

                          AREA ||i._Z10led_setRGBRKhS0_S0_||, CODE, READONLY, ALIGN=1

                  _Z10led_setRGBRKhS0_S0_ PROC ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;166    
;;;167    int32_t led_setRGB(const uint8_t &r, const uint8_t &g, const uint8_t &b)
000000  b570              PUSH     {r4-r6,lr}
;;;168    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;169    	led_set(LED_RED, r);
000008  7821              LDRB     r1,[r4,#0]
00000a  2200              MOVS     r2,#0
00000c  4610              MOV      r0,r2
00000e  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;170    	led_set(LED_GREEN, g);
000012  7829              LDRB     r1,[r5,#0]
000014  2200              MOVS     r2,#0
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;171    	led_set(LED_BLUE, b);
00001c  7831              LDRB     r1,[r6,#0]
00001e  2200              MOVS     r2,#0
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;172    
;;;173    	return 0;
000026  2000              MOVS     r0,#0
;;;174    }
000028  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP


                          AREA ||i._Z17led_getMaxCurrentv||, CODE, READONLY, ALIGN=2

                  _Z17led_getMaxCurrentv PROC ; led_getMaxCurrent()
;;;224    
;;;225    uint32_t led_getMaxCurrent()
000000  4805              LDR      r0,|L3.24|
;;;226    {
;;;227    	return g_ledMaxCurrent*1000000;
000002  ed900a00          VLDR     s0,[r0,#0]
000006  eddf0a05          VLDR     s1,|L3.28|
00000a  ee200a20          VMUL.F32 s0,s0,s1
00000e  eebc0ac0          VCVT.U32.F32 s0,s0
000012  ee100a10          VMOV     r0,s0
;;;228    }
000016  4770              BX       lr
                          ENDP

                  |L3.24|
                          DCD      g_ledMaxCurrent
                  |L3.28|
00001c  49742400          DCFS     0x49742400 ; 1000000

                          AREA ||i._Z17led_setMaxCurrentRKj||, CODE, READONLY, ALIGN=2

                  _Z17led_setMaxCurrentRKj PROC ; led_setMaxCurrent(const unsigned&)
;;;190    
;;;191    int32_t led_setMaxCurrent(const uint32_t &uamps)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
000002  ed2d8b02          VPUSH    {d8}
000006  4605              MOV      r5,r0
;;;193    	int i;
;;;194    	float pwm;
;;;195    
;;;196    	// convert current back to amps
;;;197    	g_ledMaxCurrent = (float)uamps/1000000;
000008  ed950a00          VLDR     s0,[r5,#0]
00000c  eeb80a40          VCVT.F32.U32 s0,s0
000010  eddf0a30          VLDR     s1,|L4.212|
000014  ee801a20          VDIV.F32 s2,s0,s1
000018  482f              LDR      r0,|L4.216|
00001a  ed801a00          VSTR     s2,[r0,#0]
;;;198    
;;;199    	// set maxCurrent to minimum of max (so we saturate only 1 led)
;;;200    	for (i=0; i<3; i++)
00001e  2400              MOVS     r4,#0
000020  e015              B        |L4.78|
                  |L4.34|
;;;201    	{
;;;202    		if (g_ledMaxCurrent>g_ledOnCurrent[i])
000022  482e              LDR      r0,|L4.220|
000024  eb000084          ADD      r0,r0,r4,LSL #2
000028  ed900a00          VLDR     s0,[r0,#0]
00002c  482a              LDR      r0,|L4.216|
00002e  edd00a00          VLDR     s1,[r0,#0]
000032  eeb40ae0          VCMPE.F32 s0,s1
000036  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003a  d207              BCS      |L4.76|
;;;203    			g_ledMaxCurrent = g_ledOnCurrent[i];
00003c  4827              LDR      r0,|L4.220|
00003e  eb000084          ADD      r0,r0,r4,LSL #2
000042  ed900a00          VLDR     s0,[r0,#0]
000046  4824              LDR      r0,|L4.216|
000048  ed800a00          VSTR     s0,[r0,#0]
                  |L4.76|
00004c  1c64              ADDS     r4,r4,#1              ;200
                  |L4.78|
00004e  2c03              CMP      r4,#3                 ;200
000050  dbe7              BLT      |L4.34|
;;;204    	}
;;;205    
;;;206    	// brightness is log of current * constant
;;;207    	g_ledMaxBrightness = log(g_ledScale*g_ledMaxCurrent);
000052  4823              LDR      r0,|L4.224|
000054  ed900a00          VLDR     s0,[r0,#0]
000058  481f              LDR      r0,|L4.216|
00005a  edd00a00          VLDR     s1,[r0,#0]
00005e  ee608a20          VMUL.F32 s17,s0,s1
000062  eeb00a68          VMOV.F32 s0,s17
000066  f7fffffe          BL       __hardfp_logf
00006a  481e              LDR      r0,|L4.228|
00006c  ed800a00          VSTR     s0,[r0,#0]
;;;208    
;;;209    	for (i=0; i<3; i++)
000070  2400              MOVS     r4,#0
000072  e028              B        |L4.198|
                  |L4.116|
;;;210    	{
;;;211    		pwm = g_ledMaxCurrent/g_ledOnCurrent[i]*LED_MAX_PWM;
000074  4819              LDR      r0,|L4.220|
000076  eb000084          ADD      r0,r0,r4,LSL #2
00007a  ed900a00          VLDR     s0,[r0,#0]
00007e  4816              LDR      r0,|L4.216|
000080  edd00a00          VLDR     s1,[r0,#0]
000084  ee801a80          VDIV.F32 s2,s1,s0
000088  ed9f0a17          VLDR     s0,|L4.232|
00008c  ee218a00          VMUL.F32 s16,s2,s0
;;;212    		if ((uint32_t)pwm>LED_MAX_PWM)
000090  eebc0ac8          VCVT.U32.F32 s0,s16
000094  ee100a10          VMOV     r0,s0
000098  f5b03f80          CMP      r0,#0x10000
00009c  d305              BCC      |L4.170|
;;;213    			g_ledMaxPWM[i] = LED_MAX_PWM;  // this shouldn't really happen, but might because of rounding
00009e  f64f70ff          MOV      r0,#0xffff
0000a2  4912              LDR      r1,|L4.236|
0000a4  f8210014          STRH     r0,[r1,r4,LSL #1]
0000a8  e006              B        |L4.184|
                  |L4.170|
;;;214    		else
;;;215    			g_ledMaxPWM[i] = (uint16_t)pwm;
0000aa  eebc0ac8          VCVT.U32.F32 s0,s16
0000ae  ee100a10          VMOV     r0,s0
0000b2  490e              LDR      r1,|L4.236|
0000b4  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L4.184|
;;;216    
;;;217    		// restore vals (with new max current)
;;;218    	   led_set(i, g_ledVal[i], true);
0000b8  4a0d              LDR      r2,|L4.240|
0000ba  5d11              LDRB     r1,[r2,r4]
0000bc  b2e0              UXTB     r0,r4
0000be  2201              MOVS     r2,#1
0000c0  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
0000c4  1c64              ADDS     r4,r4,#1              ;209
                  |L4.198|
0000c6  2c03              CMP      r4,#3                 ;209
0000c8  dbd4              BLT      |L4.116|
;;;219    	}
;;;220    
;;;221    	return 0;
0000ca  2000              MOVS     r0,#0
;;;222    }
0000cc  ecbd8b02          VPOP     {d8}
0000d0  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
0000d4  49742400          DCFS     0x49742400 ; 1000000
                  |L4.216|
                          DCD      g_ledMaxCurrent
                  |L4.220|
                          DCD      g_ledOnCurrent
                  |L4.224|
                          DCD      g_ledScale
                  |L4.228|
                          DCD      g_ledMaxBrightness
                  |L4.232|
0000e8  477fff00          DCFS     0x477fff00 ; 65535
                  |L4.236|
                          DCD      g_ledMaxPWM
                  |L4.240|
                          DCD      g_ledVal

                          AREA ||i._Z7led_setRKj||, CODE, READONLY, ALIGN=1

                  _Z7led_setRKj PROC ; led_set(const unsigned&)
;;;175    
;;;176    int32_t led_set(const uint32_t &color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;177    {
000004  4604              MOV      r4,r0
;;;178    	uint8_t r, g, b;
;;;179    
;;;180    	r = (color>>16)&0xff;
000006  6820              LDR      r0,[r4,#0]
000008  f3c04507          UBFX     r5,r0,#16,#8
;;;181    	g = (color>>8)&0xff;
00000c  8820              LDRH     r0,[r4,#0]
00000e  f3c02607          UBFX     r6,r0,#8,#8
;;;182    	b = color&0xff;
000012  7827              LDRB     r7,[r4,#0]
;;;183    	led_set(LED_RED, r);
000014  2200              MOVS     r2,#0
000016  4629              MOV      r1,r5
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;184    	led_set(LED_GREEN, g);
00001e  2200              MOVS     r2,#0
000020  4631              MOV      r1,r6
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;185    	led_set(LED_BLUE, b);
000028  2200              MOVS     r2,#0
00002a  4639              MOV      r1,r7
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;186    
;;;187    	return 0;
000032  2000              MOVS     r0,#0
;;;188    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;189    
                          ENDP


                          AREA ||i._Z7led_sethhb||, CODE, READONLY, ALIGN=2

                  _Z7led_sethhb PROC ; led_set(unsigned char, unsigned char, bool)
;;;136    
;;;137    void led_set(uint8_t led, uint8_t val, bool override)
000000  b570              PUSH     {r4-r6,lr}
;;;138    {
000002  ed2d8b0c          VPUSH    {d8-d13}
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;139    	float brightness, current, pwm;
;;;140    
;;;141    	if (led>2)
00000c  2c02              CMP      r4,#2
00000e  dd02              BLE      |L6.22|
                  |L6.16|
;;;142    		return;
;;;143    
;;;144    	if (!override && g_ledVal[led]==val)
;;;145    		return;
;;;146    				
;;;147    	brightness = val/255.0*g_ledMaxBrightness;
;;;148    
;;;149    	// invert brightness to get current
;;;150    	if (val==0)
;;;151    		current = 0;
;;;152    	else
;;;153    		current = exp(brightness)/g_ledScale;
;;;154    
;;;155    	// convert current into pwm
;;;156    	pwm = current/g_ledMaxCurrent*g_ledMaxPWM[led];
;;;157     
;;;158    	if ((uint32_t)pwm>LED_MAX_PWM)
;;;159    		led_setPWM(led, LED_MAX_PWM);  // this shouldn't really happen, but might because of rounding
;;;160    	else
;;;161    		led_setPWM(led, (uint16_t)pwm);
;;;162    
;;;163    	g_ledVal[led] = val;
;;;164    }
000010  ecbd8b0c          VPOP     {d8-d13}
000014  bd70              POP      {r4-r6,pc}
                  |L6.22|
000016  b926              CBNZ     r6,|L6.34|
000018  482b              LDR      r0,|L6.200|
00001a  5d00              LDRB     r0,[r0,r4]            ;144
00001c  42a8              CMP      r0,r5                 ;144
00001e  d100              BNE      |L6.34|
000020  e7f6              B        |L6.16|
                  |L6.34|
000022  482a              LDR      r0,|L6.204|
000024  6800              LDR      r0,[r0,#0]            ;147  ; g_ledMaxBrightness
000026  f7fffffe          BL       __aeabi_f2d
00002a  ec410b1b          VMOV     d11,r0,r1             ;147
00002e  4628              MOV      r0,r5                 ;147
000030  f7fffffe          BL       __aeabi_ui2d
000034  ec410b1d          VMOV     d13,r0,r1             ;147
000038  ed9f0b25          VLDR     d0,|L6.208|
00003c  ec532b10          VMOV     r2,r3,d0              ;147
000040  f7fffffe          BL       __aeabi_ddiv
000044  ec410b1c          VMOV     d12,r0,r1             ;147
000048  ec532b1b          VMOV     r2,r3,d11             ;147
00004c  f7fffffe          BL       __aeabi_dmul
000050  ec410b1a          VMOV     d10,r0,r1             ;147
000054  f7fffffe          BL       __aeabi_d2f
000058  ee080a10          VMOV     s16,r0                ;147
00005c  b915              CBNZ     r5,|L6.100|
00005e  eddf8a1e          VLDR     s17,|L6.216|
000062  e009              B        |L6.120|
                  |L6.100|
000064  bf00              NOP                            ;153
000066  eeb00a48          VMOV.F32 s0,s16                ;153
00006a  f7fffffe          BL       __hardfp_expf
00006e  481b              LDR      r0,|L6.220|
000070  edd00a00          VLDR     s1,[r0,#0]            ;153
000074  eec08a20          VDIV.F32 s17,s0,s1             ;153
                  |L6.120|
000078  4819              LDR      r0,|L6.224|
00007a  ed900a00          VLDR     s0,[r0,#0]            ;156
00007e  eec80a80          VDIV.F32 s1,s17,s0             ;156
000082  4818              LDR      r0,|L6.228|
000084  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;156
000088  ee000a10          VMOV     s0,r0                 ;156
00008c  eeb80a40          VCVT.F32.U32 s0,s0                 ;156
000090  ee209a80          VMUL.F32 s18,s1,s0             ;156
000094  eebc0ac9          VCVT.U32.F32 s0,s18                ;158
000098  ee100a10          VMOV     r0,s0                 ;158
00009c  f5b03f80          CMP      r0,#0x10000           ;158
0000a0  d305              BCC      |L6.174|
0000a2  f64f71ff          MOV      r1,#0xffff            ;159
0000a6  4620              MOV      r0,r4                 ;159
0000a8  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
0000ac  e007              B        |L6.190|
                  |L6.174|
0000ae  eebc0ac9          VCVT.U32.F32 s0,s18                ;161
0000b2  ee100a10          VMOV     r0,s0                 ;161
0000b6  b281              UXTH     r1,r0                 ;161
0000b8  4620              MOV      r0,r4                 ;161
0000ba  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
                  |L6.190|
0000be  4802              LDR      r0,|L6.200|
0000c0  5505              STRB     r5,[r0,r4]            ;163
0000c2  bf00              NOP      
0000c4  e7a4              B        |L6.16|
;;;165    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L6.200|
                          DCD      g_ledVal
                  |L6.204|
                          DCD      g_ledMaxBrightness
                  |L6.208|
0000d0  00000000          DCFD     0x406fe00000000000 ; 255
0000d4  406fe000
                  |L6.216|
0000d8  00000000          DCFS     0x00000000 ; 0
                  |L6.220|
                          DCD      g_ledScale
                  |L6.224|
                          DCD      g_ledMaxCurrent
                  |L6.228|
                          DCD      g_ledMaxPWM

                          AREA ||i._Z8led_initv||, CODE, READONLY, ALIGN=2

                  _Z8led_initv PROC ; led_init()
;;;66     
;;;67     void led_init()
000000  b538              PUSH     {r3-r5,lr}
;;;68     {
;;;69     	int i;
;;;70     
;;;71     	// turn on LEDs (max)
;;;72     	led_setPWM(LED_RED, LED_MAX_PWM);
000002  f64f71ff          MOV      r1,#0xffff
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;73     	led_setPWM(LED_GREEN, LED_MAX_PWM);
00000c  f64f71ff          MOV      r1,#0xffff
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;74     	led_setPWM(LED_BLUE, LED_MAX_PWM);
000016  f64f71ff          MOV      r1,#0xffff
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;75     
;;;76     	// wait for things to settle...
;;;77     	delayus(20000);
000020  f6446020          MOV      r0,#0x4e20
000024  f7fffffe          BL       delayus
;;;78     
;;;79     	// get current of each led.  This is needed because each LED has a different forward voltage.  But current determines
;;;80     	// brightness regardless of voltage drop.  So we normalize with respect to current for best color accuracy. 
;;;81     	// And we average for a goodly amount to try to minimize any noise
;;;82     	for (i=0, g_ledOnCurrent[LED_RED]=0.0f, g_ledOnCurrent[LED_GREEN]=0.0f, g_ledOnCurrent[LED_BLUE]=0.0f; i<100; i++)
000028  2400              MOVS     r4,#0
00002a  ed9f0a49          VLDR     s0,|L7.336|
00002e  4849              LDR      r0,|L7.340|
000030  ed800a00          VSTR     s0,[r0,#0]
000034  ed9f0a46          VLDR     s0,|L7.336|
000038  ed800a01          VSTR     s0,[r0,#4]
00003c  ed9f0a44          VLDR     s0,|L7.336|
000040  ed800a02          VSTR     s0,[r0,#8]
000044  e04e              B        |L7.228|
                  |L7.70|
;;;83     	{
;;;84     		g_ledOnCurrent[LED_RED] += (float)adc_get(LED_RED_ADCCHAN)/ADC_MAX*ADC_VOLTAGE/LED_RED_RESISTOR;
000046  2006              MOVS     r0,#6
000048  f7fffffe          BL       adc_get
00004c  ee000a10          VMOV     s0,r0
000050  eeb80a40          VCVT.F32.U32 s0,s0
000054  eddf0a40          VLDR     s1,|L7.344|
000058  ee801a20          VDIV.F32 s2,s0,s1
00005c  ed9f0a3f          VLDR     s0,|L7.348|
000060  ee210a00          VMUL.F32 s0,s2,s0
000064  eddf0a3e          VLDR     s1,|L7.352|
000068  ee801a20          VDIV.F32 s2,s0,s1
00006c  4839              LDR      r0,|L7.340|
00006e  ed900a00          VLDR     s0,[r0,#0]
000072  ee310a00          VADD.F32 s0,s2,s0
000076  ed800a00          VSTR     s0,[r0,#0]
;;;85     		g_ledOnCurrent[LED_GREEN] += (float)adc_get(LED_GREEN_ADCCHAN)/ADC_MAX*ADC_VOLTAGE/LED_GREEN_RESISTOR;
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       adc_get
000080  ee000a10          VMOV     s0,r0
000084  eeb80a40          VCVT.F32.U32 s0,s0
000088  eddf0a33          VLDR     s1,|L7.344|
00008c  ee801a20          VDIV.F32 s2,s0,s1
000090  ed9f0a32          VLDR     s0,|L7.348|
000094  ee210a00          VMUL.F32 s0,s2,s0
000098  eddf0a32          VLDR     s1,|L7.356|
00009c  ee801a20          VDIV.F32 s2,s0,s1
0000a0  482c              LDR      r0,|L7.340|
0000a2  ed900a01          VLDR     s0,[r0,#4]
0000a6  ee310a00          VADD.F32 s0,s2,s0
0000aa  ed800a01          VSTR     s0,[r0,#4]
;;;86     		g_ledOnCurrent[LED_BLUE] += (float)adc_get(LED_BLUE_ADCCHAN)/ADC_MAX*ADC_VOLTAGE/LED_BLUE_RESISTOR;	
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       adc_get
0000b4  ee000a10          VMOV     s0,r0
0000b8  eef80a40          VCVT.F32.U32 s1,s0
0000bc  ed9f1a26          VLDR     s2,|L7.344|
0000c0  ee800a81          VDIV.F32 s0,s1,s2
0000c4  eddf0a25          VLDR     s1,|L7.348|
0000c8  ee200a20          VMUL.F32 s0,s0,s1
0000cc  eddf0a25          VLDR     s1,|L7.356|
0000d0  ee801a20          VDIV.F32 s2,s0,s1
0000d4  481f              LDR      r0,|L7.340|
0000d6  ed900a02          VLDR     s0,[r0,#8]
0000da  ee310a00          VADD.F32 s0,s2,s0
0000de  ed800a02          VSTR     s0,[r0,#8]
0000e2  1c64              ADDS     r4,r4,#1              ;82
                  |L7.228|
0000e4  2c64              CMP      r4,#0x64              ;82
0000e6  dbae              BLT      |L7.70|
;;;87     	}
;;;88     	g_ledOnCurrent[LED_RED] /= 100.0f;
0000e8  481a              LDR      r0,|L7.340|
0000ea  ed900a00          VLDR     s0,[r0,#0]
0000ee  eddf0a1e          VLDR     s1,|L7.360|
0000f2  ee801a20          VDIV.F32 s2,s0,s1
0000f6  ed801a00          VSTR     s2,[r0,#0]
;;;89     	g_ledOnCurrent[LED_GREEN] /= 100.0f;
0000fa  ed900a01          VLDR     s0,[r0,#4]
0000fe  eddf0a1a          VLDR     s1,|L7.360|
000102  ee801a20          VDIV.F32 s2,s0,s1
000106  ed801a01          VSTR     s2,[r0,#4]
;;;90     	g_ledOnCurrent[LED_BLUE] /= 100.0f;
00010a  ed900a02          VLDR     s0,[r0,#8]
00010e  eddf0a16          VLDR     s1,|L7.360|
000112  ee801a20          VDIV.F32 s2,s0,s1
000116  ed801a02          VSTR     s2,[r0,#8]
;;;91     
;;;92     	g_ledVal[LED_RED] = 0xff;
00011a  20ff              MOVS     r0,#0xff
00011c  4913              LDR      r1,|L7.364|
00011e  7008              STRB     r0,[r1,#0]
;;;93     	g_ledVal[LED_GREEN] = 0xff;
000120  7048              STRB     r0,[r1,#1]
;;;94     	g_ledVal[LED_BLUE] = 0xff;
000122  7088              STRB     r0,[r1,#2]
;;;95     
;;;96     	// turn off LEDs
;;;97     	led_set(0);
000124  2000              MOVS     r0,#0
000126  9000              STR      r0,[sp,#0]
000128  4668              MOV      r0,sp
00012a  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;98     		
;;;99     	// set other vals...
;;;100    	g_ledScale = LED_DEFAULT_SCALE;
00012e  ed9f0a10          VLDR     s0,|L7.368|
000132  4810              LDR      r0,|L7.372|
000134  ed800a00          VSTR     s0,[r0,#0]
;;;101    	led_setMaxCurrent(LED_DEFAULT_MAX_CURRENT);	
000138  f24020ee          MOV      r0,#0x2ee
00013c  9000              STR      r0,[sp,#0]
00013e  4668              MOV      r0,sp
000140  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;102    	
;;;103    	g_chirpUsb->registerModule(g_module);
000144  490c              LDR      r1,|L7.376|
000146  480d              LDR      r0,|L7.380|
000148  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00014a  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;104    }
00014e  bd38              POP      {r3-r5,pc}
;;;105    
                          ENDP

                  |L7.336|
000150  00000000          DCFS     0x00000000 ; 0
                  |L7.340|
                          DCD      g_ledOnCurrent
                  |L7.344|
000158  447fc000          DCFS     0x447fc000 ; 1023
                  |L7.348|
00015c  40533333          DCFS     0x40533333 ; 3.2999999523162842
                  |L7.352|
000160  43160000          DCFS     0x43160000 ; 150
                  |L7.356|
000164  42b60000          DCFS     0x42b60000 ; 91
                  |L7.360|
000168  42c80000          DCFS     0x42c80000 ; 100
                  |L7.364|
                          DCD      g_ledVal
                  |L7.368|
000170  47c35000          DCFS     0x47c35000 ; 100000
                  |L7.372|
                          DCD      g_ledScale
                  |L7.376|
                          DCD      g_module
                  |L7.380|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10led_setPWMht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10led_setPWMht||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z7led_sethhb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7led_sethhb||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z17led_setMaxCurrentRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17led_setMaxCurrentRKj||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z7led_setRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7led_setRKj||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z8led_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8led_initv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._Z10led_setRGBRKhS0_S0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10led_setRGBRKhS0_S0_||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._Z17led_getMaxCurrentv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17led_getMaxCurrentv||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_ledOnCurrent
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z7led_setRKj ; led_set(const unsigned&)
000008  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x88
                          DCD      _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
000020  01010100          DCB      0x01,0x01,0x01,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x94
                          DCD      ||.conststring||+0x12c
                          DCD      _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
000038  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x140
                          DCD      ||.conststring||+0x1e4
                          DCD      _Z17led_getMaxCurrentv ; led_getMaxCurrent()
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f8
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6c65645f          DCB      "led_set",0
000004  73657400
000008  53657420          DCB      "Set RGB LED values@p color 24-bit value with red=bits 1"
00000c  52474220
000010  4c454420
000014  76616c75
000018  65734070
00001c  20636f6c
000020  6f722032
000024  342d6269
000028  74207661
00002c  6c756520
000030  77697468
000034  20726564
000038  3d626974
00003c  732031  
00003f  362d3233          DCB      "6-23, green=bits 8-15, blue=bits 0-7@r 0 if success, ne"
000043  2c206772
000047  65656e3d
00004b  62697473
00004f  20382d31
000053  352c2062
000057  6c75653d
00005b  62697473
00005f  20302d37
000063  40722030
000067  20696620
00006b  73756363
00006f  6573732c
000073  206e65  
000076  67617469          DCB      "gative if error",0
00007a  76652069
00007e  66206572
000082  726f7200
000086  00                DCB      0
000087  00                DCB      0
000088  6c65645f          DCB      "led_setRGB",0
00008c  73657452
000090  474200  
000093  00                DCB      0
000094  53657420          DCB      "Set RGB LED values@p red value ranging from 0-255@p gre"
000098  52474220
00009c  4c454420
0000a0  76616c75
0000a4  65734070
0000a8  20726564
0000ac  2076616c
0000b0  75652072
0000b4  616e6769
0000b8  6e672066
0000bc  726f6d20
0000c0  302d3235
0000c4  35407020
0000c8  677265  
0000cb  656e2076          DCB      "en value ranging from 0-255@p blue value ranging from 0"
0000cf  616c7565
0000d3  2072616e
0000d7  67696e67
0000db  2066726f
0000df  6d20302d
0000e3  32353540
0000e7  7020626c
0000eb  75652076
0000ef  616c7565
0000f3  2072616e
0000f7  67696e67
0000fb  2066726f
0000ff  6d2030  
000102  2d323535          DCB      "-255@r 0 if success, negative if error",0
000106  40722030
00010a  20696620
00010e  73756363
000112  6573732c
000116  206e6567
00011a  61746976
00011e  65206966
000122  20657272
000126  6f7200  
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
00012c  6c65645f          DCB      "led_setMaxCurrent",0
000130  7365744d
000134  61784375
000138  7272656e
00013c  7400    
00013e  00                DCB      0
00013f  00                DCB      0
000140  53657420          DCB      "Set maximum current each RGB LED, can be used to limit "
000144  6d617869
000148  6d756d20
00014c  63757272
000150  656e7420
000154  65616368
000158  20524742
00015c  204c4544
000160  2c206361
000164  6e206265
000168  20757365
00016c  6420746f
000170  206c696d
000174  697420  
000177  62726967          DCB      "brightness@p current current value in microamps, rangin"
00017b  68746e65
00017f  73734070
000183  20637572
000187  72656e74
00018b  20637572
00018f  72656e74
000193  2076616c
000197  75652069
00019b  6e206d69
00019f  63726f61
0001a3  6d70732c
0001a7  2072616e
0001ab  67696e  
0001ae  67206672          DCB      "g from 0 to 20000@r 0 if success, negative if error",0
0001b2  6f6d2030
0001b6  20746f20
0001ba  32303030
0001be  30407220
0001c2  30206966
0001c6  20737563
0001ca  63657373
0001ce  2c206e65
0001d2  67617469
0001d6  76652069
0001da  66206572
0001de  726f7200
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  6c65645f          DCB      "led_getMaxCurrent",0
0001e8  6765744d
0001ec  61784375
0001f0  7272656e
0001f4  7400    
0001f6  00                DCB      0
0001f7  00                DCB      0
0001f8  47657420          DCB      "Get maximum current each RGB LED, can be used to limit "
0001fc  6d617869
000200  6d756d20
000204  63757272
000208  656e7420
00020c  65616368
000210  20524742
000214  204c4544
000218  2c206361
00021c  6e206265
000220  20757365
000224  6420746f
000228  206c696d
00022c  697420  
00022f  62726967          DCB      "brightness@r max curent in microamperes",0
000233  68746e65
000237  73734072
00023b  206d6178
00023f  20637572
000243  656e7420
000247  696e206d
00024b  6963726f
00024f  616d7065
000253  72657300

                          AREA ||.data||, DATA, ALIGN=2

                  g_ledMaxBrightness
                          DCD      0x00000000
                  g_ledMaxCurrent
                          DCD      0x00000000
                  g_ledScale
                          DCD      0x00000000
                  g_ledMaxPWM
                          DCD      0x00000000
000010  0000              DCB      0x00,0x00
                  g_ledVal
000012  0000              DCB      0x00,0x00
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "led.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_led_cpp_8e9a479d___Z7__REV16j|
#line 130 ".\\core_cmInstr.h"
|__asm___7_led_cpp_8e9a479d___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_led_cpp_8e9a479d___Z7__REVSHi|
#line 144
|__asm___7_led_cpp_8e9a479d___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
