; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\usbcore.o --asm_dir=.\ --list_dir=.\ --depend=.\usbcore.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\usbcore.crf usbcore.c]
                          THUMB

                          AREA ||i.USB_DataInStage||, CODE, READONLY, ALIGN=2

                  USB_DataInStage PROC
;;;136    
;;;137    void USB_DataInStage (void) {
000000  b510              PUSH     {r4,lr}
;;;138      uint32_t cnt;
;;;139    
;;;140      if (EP0Data.Count > USB_MAX_PACKET0) {
000002  480c              LDR      r0,|L1.52|
000004  8880              LDRH     r0,[r0,#4]  ; EP0Data
000006  2840              CMP      r0,#0x40
000008  dd01              BLE      |L1.14|
;;;141        cnt = USB_MAX_PACKET0;
00000a  2440              MOVS     r4,#0x40
00000c  e001              B        |L1.18|
                  |L1.14|
;;;142      } else {
;;;143        cnt = EP0Data.Count;
00000e  4809              LDR      r0,|L1.52|
000010  8884              LDRH     r4,[r0,#4]  ; EP0Data
                  |L1.18|
;;;144      }
;;;145      cnt = USB_WriteEP(0x80, EP0Data.pData, cnt);
000012  4808              LDR      r0,|L1.52|
000014  4622              MOV      r2,r4
000016  6801              LDR      r1,[r0,#0]  ; EP0Data
000018  2080              MOVS     r0,#0x80
00001a  f7fffffe          BL       USB_WriteEP
00001e  4604              MOV      r4,r0
;;;146      EP0Data.pData += cnt;
000020  4804              LDR      r0,|L1.52|
000022  6800              LDR      r0,[r0,#0]  ; EP0Data
000024  4420              ADD      r0,r0,r4
000026  4903              LDR      r1,|L1.52|
000028  6008              STR      r0,[r1,#0]  ; EP0Data
;;;147      EP0Data.Count -= cnt;
00002a  4608              MOV      r0,r1
00002c  8880              LDRH     r0,[r0,#4]  ; EP0Data
00002e  1b00              SUBS     r0,r0,r4
000030  8088              STRH     r0,[r1,#4]
;;;148    }
000032  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  |L1.52|
                          DCD      EP0Data

                          AREA ||i.USB_DataOutStage||, CODE, READONLY, ALIGN=2

                  USB_DataOutStage PROC
;;;156    
;;;157    void USB_DataOutStage (void) {
000000  b510              PUSH     {r4,lr}
;;;158      uint32_t cnt;
;;;159    
;;;160      cnt = USB_ReadEP(0x00, EP0Data.pData);
000002  4808              LDR      r0,|L2.36|
000004  6801              LDR      r1,[r0,#0]  ; EP0Data
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       USB_ReadEP
00000c  4604              MOV      r4,r0
;;;161      EP0Data.pData += cnt;
00000e  4805              LDR      r0,|L2.36|
000010  6800              LDR      r0,[r0,#0]  ; EP0Data
000012  4420              ADD      r0,r0,r4
000014  4903              LDR      r1,|L2.36|
000016  6008              STR      r0,[r1,#0]  ; EP0Data
;;;162      EP0Data.Count -= cnt;
000018  4608              MOV      r0,r1
00001a  8880              LDRH     r0,[r0,#4]  ; EP0Data
00001c  1b00              SUBS     r0,r0,r4
00001e  8088              STRH     r0,[r1,#4]
;;;163    }
000020  bd10              POP      {r4,pc}
;;;164    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      EP0Data

                          AREA ||i.USB_EndPoint0||, CODE, READONLY, ALIGN=2

                  USB_EndPoint0 PROC
;;;645     
;;;646    void USB_EndPoint0 (uint32_t event) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;647    
;;;648      switch (event) {
000004  2c08              CMP      r4,#8
000006  d26f              BCS      |L3.232|
000008  e8dff004          TBB      [pc,r4]
00000c  6e04d4fe          DCB      0x6e,0x04,0xd4,0xfe
000010  c26ef4f3          DCB      0xc2,0x6e,0xf4,0xf3
;;;649        case USB_EVT_SETUP:
;;;650          USB_SetupStage();
000014  f7fffffe          BL       USB_SetupStage
;;;651          USB_DirCtrlEP(SetupPacket.bmRequestType.BM.Dir);
000018  498d              LDR      r1,|L3.592|
00001a  7809              LDRB     r1,[r1,#0]  ; SetupPacket
00001c  09c8              LSRS     r0,r1,#7
00001e  f7fffffe          BL       USB_DirCtrlEP
;;;652          EP0Data.Count = SetupPacket.wLength;     /* Number of bytes to transfer */
000022  488b              LDR      r0,|L3.592|
000024  88c0              LDRH     r0,[r0,#6]  ; SetupPacket
000026  498b              LDR      r1,|L3.596|
000028  8088              STRH     r0,[r1,#4]
;;;653          switch (SetupPacket.bmRequestType.BM.Type) {
00002a  4889              LDR      r0,|L3.592|
00002c  7800              LDRB     r0,[r0,#0]  ; SetupPacket
00002e  f3c01041          UBFX     r0,r0,#5,#2
000032  b110              CBZ      r0,|L3.58|
000034  2801              CMP      r0,#1
000036  d17b              BNE      |L3.304|
000038  e092              B        |L3.352|
                  |L3.58|
;;;654    
;;;655            case REQUEST_STANDARD:
;;;656              switch (SetupPacket.bRequest) {
00003a  4885              LDR      r0,|L3.592|
00003c  7840              LDRB     r0,[r0,#1]  ; SetupPacket
00003e  280c              CMP      r0,#0xc
000040  d277              BCS      |L3.306|
000042  e8dff000          TBB      [pc,r0]
000046  060d              DCB      0x06,0x0d
000048  8a158a1d          DCB      0x8a,0x15,0x8a,0x1d
00004c  333a4155          DCB      0x33,0x3a,0x41,0x55
000050  5e83              DCB      0x5e,0x83
;;;657                case USB_REQUEST_GET_STATUS:
;;;658                  if (!USB_ReqGetStatus()) {
000052  f7fffffe          BL       USB_ReqGetStatus
000056  b900              CBNZ     r0,|L3.90|
;;;659                    goto stall_i;
000058  e091              B        |L3.382|
                  |L3.90|
;;;660                  }
;;;661                  USB_DataInStage();
00005a  f7fffffe          BL       USB_DataInStage
;;;662                  break;
00005e  e07d              B        |L3.348|
;;;663    
;;;664                case USB_REQUEST_CLEAR_FEATURE:
;;;665                  if (!USB_ReqSetClrFeature(0)) {
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       USB_ReqSetClrFeature
000066  b900              CBNZ     r0,|L3.106|
;;;666                    goto stall_i;
000068  e089              B        |L3.382|
                  |L3.106|
;;;667                  }
;;;668                  USB_StatusInStage();
00006a  f7fffffe          BL       USB_StatusInStage
;;;669    #if USB_FEATURE_EVENT
;;;670                  USB_Feature_Event();
;;;671    #endif
;;;672                  break;
00006e  e075              B        |L3.348|
;;;673    
;;;674                case USB_REQUEST_SET_FEATURE:
;;;675                  if (!USB_ReqSetClrFeature(1)) {
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       USB_ReqSetClrFeature
000076  b900              CBNZ     r0,|L3.122|
;;;676                    goto stall_i;
000078  e081              B        |L3.382|
                  |L3.122|
;;;677                  }
;;;678                  USB_StatusInStage();
00007a  f7fffffe          BL       USB_StatusInStage
;;;679    #if USB_FEATURE_EVENT
;;;680                  USB_Feature_Event();
;;;681    #endif
;;;682                  break;
00007e  e06d              B        |L3.348|
;;;683    
;;;684                case USB_REQUEST_SET_ADDRESS:
;;;685                  if (!USB_ReqSetAddress()) {
000080  bf00              NOP      
000082  4873              LDR      r0,|L3.592|
000084  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000086  f000001f          AND      r0,r0,#0x1f
00008a  b930              CBNZ     r0,|L3.154|
00008c  4870              LDR      r0,|L3.592|
00008e  7880              LDRB     r0,[r0,#2]  ; SetupPacket
000090  f0400080          ORR      r0,r0,#0x80
000094  4970              LDR      r1,|L3.600|
000096  7008              STRB     r0,[r1,#0]
000098  e001              B        |L3.158|
                  |L3.154|
00009a  2000              MOVS     r0,#0
00009c  e001              B        |L3.162|
                  |L3.158|
00009e  bf00              NOP      
0000a0  2001              MOVS     r0,#1
                  |L3.162|
0000a2  b900              CBNZ     r0,|L3.166|
;;;686                    goto stall_i;
0000a4  e06b              B        |L3.382|
                  |L3.166|
;;;687                  }
;;;688                  USB_StatusInStage();
0000a6  f7fffffe          BL       USB_StatusInStage
;;;689                  break;
0000aa  e057              B        |L3.348|
;;;690    
;;;691                case USB_REQUEST_GET_DESCRIPTOR:
;;;692                  if (!USB_ReqGetDescriptor()) {
0000ac  f7fffffe          BL       USB_ReqGetDescriptor
0000b0  b900              CBNZ     r0,|L3.180|
;;;693                    goto stall_i;
0000b2  e064              B        |L3.382|
                  |L3.180|
;;;694                  }
;;;695                  USB_DataInStage();
0000b4  f7fffffe          BL       USB_DataInStage
;;;696                  break;
0000b8  e050              B        |L3.348|
;;;697    
;;;698                case USB_REQUEST_SET_DESCRIPTOR:
;;;699    /*stall_o:*/  USB_SetStallEP(0x00);            /* not supported */
0000ba  2000              MOVS     r0,#0
0000bc  f7fffffe          BL       USB_SetStallEP
;;;700                  EP0Data.Count = 0;
0000c0  2000              MOVS     r0,#0
0000c2  4964              LDR      r1,|L3.596|
0000c4  8088              STRH     r0,[r1,#4]
;;;701                  break;
0000c6  e049              B        |L3.348|
;;;702    
;;;703                case USB_REQUEST_GET_CONFIGURATION:
;;;704                  if (!USB_ReqGetConfiguration()) {
0000c8  bf00              NOP      
0000ca  4861              LDR      r0,|L3.592|
0000cc  7800              LDRB     r0,[r0,#0]  ; SetupPacket
0000ce  f000001f          AND      r0,r0,#0x1f
0000d2  b918              CBNZ     r0,|L3.220|
0000d4  4861              LDR      r0,|L3.604|
0000d6  495f              LDR      r1,|L3.596|
0000d8  6008              STR      r0,[r1,#0]  ; EP0Data
0000da  e001              B        |L3.224|
                  |L3.220|
0000dc  2000              MOVS     r0,#0
0000de  e001              B        |L3.228|
                  |L3.224|
0000e0  bf00              NOP      
0000e2  2001              MOVS     r0,#1
                  |L3.228|
0000e4  b908              CBNZ     r0,|L3.234|
;;;705                    goto stall_i;
0000e6  e04a              B        |L3.382|
                  |L3.232|
0000e8  e0af              B        |L3.586|
                  |L3.234|
;;;706                  }
;;;707                  USB_DataInStage();
0000ea  f7fffffe          BL       USB_DataInStage
;;;708                  break;
0000ee  e035              B        |L3.348|
;;;709    
;;;710                case USB_REQUEST_SET_CONFIGURATION:
;;;711                  if (!USB_ReqSetConfiguration()) {
0000f0  f7fffffe          BL       USB_ReqSetConfiguration
0000f4  b900              CBNZ     r0,|L3.248|
;;;712                    goto stall_i;
0000f6  e042              B        |L3.382|
                  |L3.248|
;;;713                  }
;;;714                  USB_StatusInStage();
0000f8  f7fffffe          BL       USB_StatusInStage
;;;715    #if USB_CONFIGURE_EVENT
;;;716                  USB_Configure_Event();
0000fc  f7fffffe          BL       USB_Configure_Event
;;;717    #endif
;;;718                  break;
000100  e02c              B        |L3.348|
;;;719    
;;;720                case USB_REQUEST_GET_INTERFACE:
;;;721                  if (!USB_ReqGetInterface()) {
000102  bf00              NOP      
000104  4852              LDR      r0,|L3.592|
000106  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000108  f000001f          AND      r0,r0,#0x1f
00010c  2801              CMP      r0,#1
00010e  d114              BNE      |L3.314|
000110  4852              LDR      r0,|L3.604|
000112  7800              LDRB     r0,[r0,#0]  ; USB_Configuration
000114  b170              CBZ      r0,|L3.308|
000116  484e              LDR      r0,|L3.592|
000118  7900              LDRB     r0,[r0,#4]  ; SetupPacket
00011a  4951              LDR      r1,|L3.608|
00011c  7809              LDRB     r1,[r1,#0]  ; USB_NumInterfaces
00011e  4288              CMP      r0,r1
000120  da08              BGE      |L3.308|
000122  484b              LDR      r0,|L3.592|
000124  7900              LDRB     r0,[r0,#4]  ; SetupPacket
000126  494f              LDR      r1,|L3.612|
000128  4408              ADD      r0,r0,r1
00012a  494a              LDR      r1,|L3.596|
00012c  6008              STR      r0,[r1,#0]  ; EP0Data
00012e  e003              B        |L3.312|
                  |L3.304|
000130  e024              B        |L3.380|
                  |L3.306|
000132  e012              B        |L3.346|
                  |L3.308|
000134  2000              MOVS     r0,#0
000136  e004              B        |L3.322|
                  |L3.312|
000138  e001              B        |L3.318|
                  |L3.314|
00013a  2000              MOVS     r0,#0
00013c  e001              B        |L3.322|
                  |L3.318|
00013e  bf00              NOP      
000140  2001              MOVS     r0,#1
                  |L3.322|
000142  b900              CBNZ     r0,|L3.326|
;;;722                    goto stall_i;
000144  e01b              B        |L3.382|
                  |L3.326|
;;;723                  }
;;;724                  USB_DataInStage();
000146  f7fffffe          BL       USB_DataInStage
;;;725                  break;
00014a  e007              B        |L3.348|
;;;726    
;;;727                case USB_REQUEST_SET_INTERFACE:
;;;728                  if (!USB_ReqSetInterface()) {
00014c  f7fffffe          BL       USB_ReqSetInterface
000150  b900              CBNZ     r0,|L3.340|
;;;729                    goto stall_i;
000152  e014              B        |L3.382|
                  |L3.340|
;;;730                  }
;;;731                  USB_StatusInStage();
000154  f7fffffe          BL       USB_StatusInStage
;;;732    #if USB_INTERFACE_EVENT
;;;733                  USB_Interface_Event();
;;;734    #endif
;;;735                  break;
000158  e000              B        |L3.348|
                  |L3.346|
;;;736    
;;;737                default:
;;;738                  goto stall_i;
00015a  e010              B        |L3.382|
                  |L3.348|
00015c  bf00              NOP                            ;662
;;;739              }
;;;740              break;  /* end case REQUEST_STANDARD */
00015e  e015              B        |L3.396|
                  |L3.352|
;;;741    
;;;742    #if USB_CLASS
;;;743            case REQUEST_CLASS:
;;;744              switch (SetupPacket.bmRequestType.BM.Recipient) {
000160  483b              LDR      r0,|L3.592|
000162  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000164  f000001f          AND      r0,r0,#0x1f
000168  b120              CBZ      r0,|L3.372|
00016a  2801              CMP      r0,#1
00016c  d003              BEQ      |L3.374|
00016e  2802              CMP      r0,#2
000170  d103              BNE      |L3.378|
000172  e001              B        |L3.376|
                  |L3.372|
;;;745    
;;;746                case REQUEST_TO_DEVICE:
;;;747                  goto stall_i;                                              /* not supported */
000174  e003              B        |L3.382|
                  |L3.374|
;;;748    
;;;749                case REQUEST_TO_INTERFACE:
;;;750    #if USB_HID
;;;751                  if (SetupPacket.wIndex.WB.L == USB_HID_IF_NUM) {           /* IF number correct? */
;;;752                    switch (SetupPacket.bRequest) {
;;;753                      case HID_REQUEST_GET_REPORT:
;;;754                        if (HID_GetReport()) {
;;;755                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;756                          USB_DataInStage();                                 /* send requested data */
;;;757                          goto setup_class_ok;
;;;758                        }
;;;759                        break;
;;;760                      case HID_REQUEST_SET_REPORT:
;;;761                        EP0Data.pData = EP0Buf;                              /* data to be received */ 
;;;762                        goto setup_class_ok;
;;;763                      case HID_REQUEST_GET_IDLE:
;;;764                        if (HID_GetIdle()) {
;;;765                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;766                          USB_DataInStage();                                 /* send requested data */
;;;767                          goto setup_class_ok;
;;;768                        }
;;;769                        break;
;;;770                      case HID_REQUEST_SET_IDLE:
;;;771                        if (HID_SetIdle()) {
;;;772                          USB_StatusInStage();                               /* send Acknowledge */
;;;773                          goto setup_class_ok;
;;;774                        }
;;;775                        break;
;;;776                      case HID_REQUEST_GET_PROTOCOL:
;;;777                        if (HID_GetProtocol()) {
;;;778                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;779                          USB_DataInStage();                                 /* send requested data */
;;;780                          goto setup_class_ok;
;;;781                        }
;;;782                        break;
;;;783                      case HID_REQUEST_SET_PROTOCOL:
;;;784                        if (HID_SetProtocol()) {
;;;785                          USB_StatusInStage();                               /* send Acknowledge */
;;;786                          goto setup_class_ok;
;;;787                        }
;;;788                        break;
;;;789                    }
;;;790                  }
;;;791    #endif  /* USB_HID */
;;;792    #if USB_MSC
;;;793                  if (SetupPacket.wIndex.WB.L == USB_MSC_IF_NUM) {           /* IF number correct? */
;;;794                    switch (SetupPacket.bRequest) {
;;;795                      case MSC_REQUEST_RESET:
;;;796                        if ((SetupPacket.wValue.W == 0) &&	                 /* RESET with invalid parameters -> STALL */
;;;797                            (SetupPacket.wLength  == 0)) {
;;;798                          if (MSC_Reset()) {
;;;799                            USB_StatusInStage();
;;;800                            goto setup_class_ok;
;;;801                          }
;;;802                        }
;;;803                        break;
;;;804                      case MSC_REQUEST_GET_MAX_LUN:
;;;805                        if ((SetupPacket.wValue.W == 0) &&	                 /* GET_MAX_LUN with invalid parameters -> STALL */
;;;806                            (SetupPacket.wLength  == 1)) { 
;;;807                          if (MSC_GetMaxLUN()) {
;;;808                            EP0Data.pData = EP0Buf;
;;;809                            USB_DataInStage();
;;;810                            goto setup_class_ok;
;;;811                          }
;;;812                        }
;;;813                        break;
;;;814                    }
;;;815                  }
;;;816    #endif  /* USB_MSC */
;;;817    #if USB_AUDIO
;;;818                  if ((SetupPacket.wIndex.WB.L == USB_ADC_CIF_NUM)  ||       /* IF number correct? */
;;;819                      (SetupPacket.wIndex.WB.L == USB_ADC_SIF1_NUM) ||
;;;820                      (SetupPacket.wIndex.WB.L == USB_ADC_SIF2_NUM)) {
;;;821                    switch (SetupPacket.bRequest) {
;;;822                      case AUDIO_REQUEST_GET_CUR:
;;;823                      case AUDIO_REQUEST_GET_MIN:
;;;824                      case AUDIO_REQUEST_GET_MAX:
;;;825                      case AUDIO_REQUEST_GET_RES:
;;;826                        if (ADC_IF_GetRequest()) {
;;;827                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;828                          USB_DataInStage();                                 /* send requested data */
;;;829                          goto setup_class_ok;
;;;830                        }
;;;831                        break;
;;;832                      case AUDIO_REQUEST_SET_CUR:
;;;833    //                case AUDIO_REQUEST_SET_MIN:
;;;834    //                case AUDIO_REQUEST_SET_MAX:
;;;835    //                case AUDIO_REQUEST_SET_RES:
;;;836                        EP0Data.pData = EP0Buf;                              /* data to be received */ 
;;;837                        goto setup_class_ok;
;;;838                    }
;;;839                  }
;;;840    #endif  /* USB_AUDIO */
;;;841    #if USB_CDC
;;;842                  if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  ||       /* IF number correct? */
;;;843                      (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
;;;844                    switch (SetupPacket.bRequest) {
;;;845                      case CDC_SEND_ENCAPSULATED_COMMAND:
;;;846                        EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
;;;847                        goto setup_class_ok;
;;;848                      case CDC_GET_ENCAPSULATED_RESPONSE:
;;;849                        if (CDC_GetEncapsulatedResponse()) {
;;;850                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;851                          USB_DataInStage();                                 /* send requested data */
;;;852                          goto setup_class_ok;
;;;853                        }
;;;854                        break;
;;;855                      case CDC_SET_COMM_FEATURE:
;;;856                        EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
;;;857                        goto setup_class_ok;
;;;858                      case CDC_GET_COMM_FEATURE:
;;;859                        if (CDC_GetCommFeature(SetupPacket.wValue.W)) {
;;;860                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;861                          USB_DataInStage();                                 /* send requested data */
;;;862                          goto setup_class_ok;
;;;863                        }
;;;864                        break;
;;;865                      case CDC_CLEAR_COMM_FEATURE:
;;;866                        if (CDC_ClearCommFeature(SetupPacket.wValue.W)) {
;;;867                          USB_StatusInStage();                               /* send Acknowledge */
;;;868                          goto setup_class_ok;
;;;869                        }
;;;870                        break;
;;;871                      case CDC_SET_LINE_CODING:
;;;872                        EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
;;;873                        goto setup_class_ok;
;;;874                      case CDC_GET_LINE_CODING:
;;;875                        if (CDC_GetLineCoding()) {
;;;876                          EP0Data.pData = EP0Buf;                            /* point to data to be sent */
;;;877                          USB_DataInStage();                                 /* send requested data */
;;;878                          goto setup_class_ok;
;;;879                        }
;;;880                        break;
;;;881                      case CDC_SET_CONTROL_LINE_STATE:
;;;882                        if (CDC_SetControlLineState(SetupPacket.wValue.W)) {
;;;883                          USB_StatusInStage();                               /* send Acknowledge */
;;;884                          goto setup_class_ok;
;;;885                        }
;;;886                        break;
;;;887                      case CDC_SEND_BREAK:
;;;888                        if (CDC_SendBreak(SetupPacket.wValue.W)) {
;;;889                          USB_StatusInStage();                               /* send Acknowledge */
;;;890                          goto setup_class_ok;
;;;891                        }
;;;892                        break;
;;;893                    }
;;;894                  }
;;;895    #endif  /* USB_CDC */
;;;896                  goto stall_i;                                              /* not supported */
000176  e002              B        |L3.382|
                  |L3.376|
;;;897                  /* end case REQUEST_TO_INTERFACE */
;;;898    
;;;899                case REQUEST_TO_ENDPOINT:
;;;900    #if USB_AUDIO
;;;901                  switch (SetupPacket.bRequest) {
;;;902                    case AUDIO_REQUEST_GET_CUR:
;;;903                    case AUDIO_REQUEST_GET_MIN:
;;;904                    case AUDIO_REQUEST_GET_MAX:
;;;905                    case AUDIO_REQUEST_GET_RES:
;;;906                      if (ADC_EP_GetRequest()) {
;;;907                        EP0Data.pData = EP0Buf;                              /* point to data to be sent */
;;;908                        USB_DataInStage();                                   /* send requested data */
;;;909                        goto setup_class_ok;
;;;910                      }
;;;911                      break;
;;;912                    case AUDIO_REQUEST_SET_CUR:
;;;913    //              case AUDIO_REQUEST_SET_MIN:
;;;914    //              case AUDIO_REQUEST_SET_MAX:
;;;915    //              case AUDIO_REQUEST_SET_RES:
;;;916                      EP0Data.pData = EP0Buf;                                /* data to be received */ 
;;;917                      goto setup_class_ok;
;;;918                  }
;;;919    #endif  /* USB_AUDIO */
;;;920                  goto stall_i;
000178  e001              B        |L3.382|
                  |L3.378|
;;;921                  /* end case REQUEST_TO_ENDPOINT */
;;;922    
;;;923                default:
;;;924                  goto stall_i;
00017a  e000              B        |L3.382|
                  |L3.380|
;;;925              }
;;;926    setup_class_ok:                                                          /* request finished successfully */
;;;927              break;  /* end case REQUEST_CLASS */
;;;928    #endif  /* USB_CLASS */
;;;929    
;;;930    #if USB_VENDOR
;;;931            case REQUEST_VENDOR:
;;;932              switch (SetupPacket.bmRequestType.BM.Recipient) {
;;;933    
;;;934                case REQUEST_TO_DEVICE:
;;;935                  if (!USB_ReqVendorDev(TRUE)) {
;;;936                    goto stall_i;                                            /* not supported */               
;;;937                  }
;;;938                  break;
;;;939    
;;;940                case REQUEST_TO_INTERFACE:
;;;941                  if (!USB_ReqVendorIF(TRUE)) {
;;;942                    goto stall_i;                                            /* not supported */               
;;;943                  }
;;;944                  break;
;;;945    
;;;946                case REQUEST_TO_ENDPOINT:
;;;947                  if (!USB_ReqVendorEP(TRUE)) {
;;;948                    goto stall_i;                                            /* not supported */               
;;;949                  }
;;;950                  break;
;;;951    
;;;952                default:
;;;953                  goto stall_i;
;;;954              }
;;;955    
;;;956              if (SetupPacket.wLength) {
;;;957                if (SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST) {
;;;958                  USB_DataInStage();
;;;959                }
;;;960              } else {
;;;961                USB_StatusInStage();
;;;962              }
;;;963    
;;;964              break;  /* end case REQUEST_VENDOR */ 
;;;965    #endif  /* USB_VENDOR */
;;;966    
;;;967            default:
;;;968    stall_i:  USB_SetStallEP(0x80);
00017c  bf00              NOP      
                  |L3.382|
00017e  2080              MOVS     r0,#0x80
000180  f7fffffe          BL       USB_SetStallEP
;;;969              EP0Data.Count = 0;
000184  2000              MOVS     r0,#0
000186  4933              LDR      r1,|L3.596|
000188  8088              STRH     r0,[r1,#4]
;;;970              break;
00018a  bf00              NOP      
                  |L3.396|
00018c  bf00              NOP                            ;740
;;;971          }
;;;972          break;  /* end case USB_EVT_SETUP */
00018e  e05c              B        |L3.586|
;;;973    
;;;974        case USB_EVT_OUT_NAK:
;;;975          if (SetupPacket.bmRequestType.BM.Dir == 0)
000190  482f              LDR      r0,|L3.592|
000192  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000194  09c0              LSRS     r0,r0,#7
000196  b930              CBNZ     r0,|L3.422|
;;;976          {
;;;977            USB_ReadReqEP(0x00, EP0Data.pData, EP0Data.Count);
000198  482e              LDR      r0,|L3.596|
00019a  8882              LDRH     r2,[r0,#4]  ; EP0Data
00019c  6801              LDR      r1,[r0,#0]  ; EP0Data
00019e  2000              MOVS     r0,#0
0001a0  f7fffffe          BL       USB_ReadReqEP
0001a4  e005              B        |L3.434|
                  |L3.422|
;;;978          }
;;;979          else
;;;980          {
;;;981            /* might be zero length pkt */
;;;982            USB_ReadReqEP(0x00, EP0Data.pData, 0);
0001a6  482b              LDR      r0,|L3.596|
0001a8  2200              MOVS     r2,#0
0001aa  6801              LDR      r1,[r0,#0]  ; EP0Data
0001ac  4610              MOV      r0,r2
0001ae  f7fffffe          BL       USB_ReadReqEP
                  |L3.434|
;;;983          }
;;;984          break;
0001b2  e04a              B        |L3.586|
;;;985        case USB_EVT_OUT:
;;;986          if (SetupPacket.bmRequestType.BM.Dir == REQUEST_HOST_TO_DEVICE) {
0001b4  4826              LDR      r0,|L3.592|
0001b6  7800              LDRB     r0,[r0,#0]  ; SetupPacket
0001b8  09c0              LSRS     r0,r0,#7
0001ba  bb10              CBNZ     r0,|L3.514|
;;;987            if (EP0Data.Count) {                                             /* still data to receive ? */
0001bc  4825              LDR      r0,|L3.596|
0001be  8880              LDRH     r0,[r0,#4]  ; EP0Data
0001c0  b308              CBZ      r0,|L3.518|
;;;988              USB_DataOutStage();                                            /* receive data */
0001c2  f7fffffe          BL       USB_DataOutStage
;;;989              if (EP0Data.Count == 0) {                                      /* data complete ? */
0001c6  4823              LDR      r0,|L3.596|
0001c8  8880              LDRH     r0,[r0,#4]  ; EP0Data
0001ca  b9e0              CBNZ     r0,|L3.518|
;;;990                switch (SetupPacket.bmRequestType.BM.Type) {
0001cc  4820              LDR      r0,|L3.592|
0001ce  7800              LDRB     r0,[r0,#0]  ; SetupPacket
0001d0  f3c01041          UBFX     r0,r0,#5,#2
0001d4  b110              CBZ      r0,|L3.476|
0001d6  2801              CMP      r0,#1
0001d8  d112              BNE      |L3.512|
0001da  e000              B        |L3.478|
                  |L3.476|
;;;991    
;;;992                  case REQUEST_STANDARD:
;;;993                    goto stall_i;                                            /* not supported */
0001dc  e7cf              B        |L3.382|
                  |L3.478|
;;;994    
;;;995    #if (USB_CLASS) 
;;;996                  case REQUEST_CLASS:
;;;997                    switch (SetupPacket.bmRequestType.BM.Recipient) {
0001de  481c              LDR      r0,|L3.592|
0001e0  7800              LDRB     r0,[r0,#0]  ; SetupPacket
0001e2  f000001f          AND      r0,r0,#0x1f
0001e6  b138              CBZ      r0,|L3.504|
0001e8  2801              CMP      r0,#1
0001ea  d006              BEQ      |L3.506|
0001ec  2802              CMP      r0,#2
0001ee  d106              BNE      |L3.510|
0001f0  e004              B        |L3.508|
0001f2  e026              B        |L3.578|
0001f4  e021              B        |L3.570|
0001f6  e007              B        |L3.520|
                  |L3.504|
;;;998                      case REQUEST_TO_DEVICE:
;;;999                        goto stall_i;                                        /* not supported */
0001f8  e7c1              B        |L3.382|
                  |L3.506|
;;;1000   
;;;1001                     case REQUEST_TO_INTERFACE:
;;;1002   #if USB_HID
;;;1003                       if (SetupPacket.wIndex.WB.L == USB_HID_IF_NUM) {     /* IF number correct? */
;;;1004                         switch (SetupPacket.bRequest) {
;;;1005                           case HID_REQUEST_SET_REPORT:
;;;1006                             if (HID_SetReport()) {
;;;1007                               USB_StatusInStage();                         /* send Acknowledge */
;;;1008                               goto out_class_ok;
;;;1009                             }
;;;1010                             break;
;;;1011                         }
;;;1012                       }
;;;1013   #endif  /* USB_HID */  
;;;1014   #if USB_AUDIO
;;;1015                       if ((SetupPacket.wIndex.WB.L == USB_ADC_CIF_NUM)  || /* IF number correct? */
;;;1016                           (SetupPacket.wIndex.WB.L == USB_ADC_SIF1_NUM) ||
;;;1017                           (SetupPacket.wIndex.WB.L == USB_ADC_SIF2_NUM)) {
;;;1018                         switch (SetupPacket.bRequest) {
;;;1019                           case AUDIO_REQUEST_SET_CUR:
;;;1020   //                      case AUDIO_REQUEST_SET_MIN:
;;;1021   //                      case AUDIO_REQUEST_SET_MAX:
;;;1022   //                      case AUDIO_REQUEST_SET_RES:
;;;1023                             if (ADC_IF_SetRequest()) {
;;;1024                               USB_StatusInStage();                         /* send Acknowledge */
;;;1025                               goto out_class_ok;
;;;1026                             }
;;;1027                             break;
;;;1028                         }
;;;1029                       }
;;;1030   #endif  /* USB_AUDIO */
;;;1031   #if USB_CDC
;;;1032                       if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  || /* IF number correct? */
;;;1033                           (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
;;;1034                         switch (SetupPacket.bRequest) {
;;;1035                           case CDC_SEND_ENCAPSULATED_COMMAND:
;;;1036                             if (CDC_SendEncapsulatedCommand()) {
;;;1037                               USB_StatusInStage();                         /* send Acknowledge */
;;;1038                               goto out_class_ok;
;;;1039                             }
;;;1040                             break;
;;;1041                           case CDC_SET_COMM_FEATURE:
;;;1042                             if (CDC_SetCommFeature(SetupPacket.wValue.W)) {
;;;1043                               USB_StatusInStage();                         /* send Acknowledge */
;;;1044                               goto out_class_ok;
;;;1045                             }
;;;1046                             break;
;;;1047                           case CDC_SET_LINE_CODING:
;;;1048                             if (CDC_SetLineCoding()) {
;;;1049                               USB_StatusInStage();                         /* send Acknowledge */
;;;1050                               goto out_class_ok;
;;;1051                             }
;;;1052                             break;
;;;1053                         }
;;;1054                       } 
;;;1055   #endif  /* USB_CDC */
;;;1056                       goto stall_i;
0001fa  e7c0              B        |L3.382|
                  |L3.508|
;;;1057                       /* end case REQUEST_TO_INTERFACE */
;;;1058   
;;;1059                     case REQUEST_TO_ENDPOINT:
;;;1060   #if USB_AUDIO
;;;1061                       switch (SetupPacket.bRequest) {
;;;1062                         case AUDIO_REQUEST_SET_CUR:
;;;1063   //                    case AUDIO_REQUEST_SET_MIN:
;;;1064   //                    case AUDIO_REQUEST_SET_MAX:
;;;1065   //                    case AUDIO_REQUEST_SET_RES:
;;;1066                           if (ADC_EP_SetRequest()) {
;;;1067                             USB_StatusInStage();                           /* send Acknowledge */
;;;1068                             goto out_class_ok;
;;;1069                           }
;;;1070                           break;
;;;1071                       }
;;;1072   #endif  /* USB_AUDIO */
;;;1073                       goto stall_i;
0001fc  e7bf              B        |L3.382|
                  |L3.510|
;;;1074                       /* end case REQUEST_TO_ENDPOINT */
;;;1075   
;;;1076                     default:
;;;1077                       goto stall_i;
0001fe  e7be              B        |L3.382|
                  |L3.512|
;;;1078                   }
;;;1079   out_class_ok:                                                            /* request finished successfully */
;;;1080                   break; /* end case REQUEST_CLASS */
;;;1081   #endif  /* USB_CLASS */
;;;1082   
;;;1083   #if USB_VENDOR
;;;1084                 case REQUEST_VENDOR:
;;;1085                   switch (SetupPacket.bmRequestType.BM.Recipient) {
;;;1086         
;;;1087                     case REQUEST_TO_DEVICE:
;;;1088                       if (!USB_ReqVendorDev(FALSE)) {
;;;1089                         goto stall_i;                                      /* not supported */               
;;;1090                       }
;;;1091                       break;
;;;1092         
;;;1093                     case REQUEST_TO_INTERFACE:
;;;1094                       if (!USB_ReqVendorIF(FALSE)) {
;;;1095                         goto stall_i;                                      /* not supported */               
;;;1096                       }
;;;1097                       break;
;;;1098         
;;;1099                     case REQUEST_TO_ENDPOINT:
;;;1100                       if (!USB_ReqVendorEP(FALSE)) {
;;;1101                         goto stall_i;                                      /* not supported */               
;;;1102                       }
;;;1103                       break;
;;;1104         
;;;1105                     default:
;;;1106                       goto stall_i;
;;;1107                   }
;;;1108         
;;;1109                   USB_StatusInStage();
;;;1110         
;;;1111                   break;  /* end case REQUEST_VENDOR */ 
;;;1112   #endif  /* USB_VENDOR */
;;;1113   
;;;1114                 default:
;;;1115                   goto stall_i;
000200  e7bd              B        |L3.382|
                  |L3.514|
;;;1116               }
;;;1117             }
;;;1118           }
;;;1119         } else {
;;;1120           USB_StatusOutStage();                                            /* receive Acknowledge */
000202  f7fffffe          BL       USB_StatusOutStage
                  |L3.518|
;;;1121         }
;;;1122         break;  /* end case USB_EVT_OUT */
000206  e020              B        |L3.586|
                  |L3.520|
;;;1123   
;;;1124       case USB_EVT_IN :
;;;1125         if (SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST) {
000208  4811              LDR      r0,|L3.592|
00020a  7800              LDRB     r0,[r0,#0]  ; SetupPacket
00020c  2101              MOVS     r1,#1
00020e  ebb11fd0          CMP      r1,r0,LSR #7
000212  d102              BNE      |L3.538|
;;;1126           USB_DataInStage();                                               /* send data */
000214  f7fffffe          BL       USB_DataInStage
000218  e00e              B        |L3.568|
                  |L3.538|
;;;1127         } else {
;;;1128           if (USB_DeviceAddress & 0x80) {
00021a  480f              LDR      r0,|L3.600|
00021c  7800              LDRB     r0,[r0,#0]  ; USB_DeviceAddress
00021e  f0000080          AND      r0,r0,#0x80
000222  b148              CBZ      r0,|L3.568|
;;;1129             USB_DeviceAddress &= 0x7F;
000224  480c              LDR      r0,|L3.600|
000226  7800              LDRB     r0,[r0,#0]  ; USB_DeviceAddress
000228  f000007f          AND      r0,r0,#0x7f
00022c  490a              LDR      r1,|L3.600|
00022e  7008              STRB     r0,[r1,#0]
;;;1130             USB_SetAddress(USB_DeviceAddress);
000230  4608              MOV      r0,r1
000232  7800              LDRB     r0,[r0,#0]  ; USB_DeviceAddress
000234  f7fffffe          BL       USB_SetAddress
                  |L3.568|
;;;1131           }
;;;1132         }
;;;1133         break;  /* end case USB_EVT_IN */
000238  e007              B        |L3.586|
                  |L3.570|
;;;1134   
;;;1135       case USB_EVT_OUT_STALL:
;;;1136         USB_ClrStallEP(0x00);
00023a  2000              MOVS     r0,#0
00023c  f7fffffe          BL       USB_ClrStallEP
;;;1137         break;
000240  e003              B        |L3.586|
                  |L3.578|
;;;1138   
;;;1139       case USB_EVT_IN_STALL:
;;;1140         USB_ClrStallEP(0x80);
000242  2080              MOVS     r0,#0x80
000244  f7fffffe          BL       USB_ClrStallEP
;;;1141         break;
000248  bf00              NOP      
                  |L3.586|
00024a  bf00              NOP                            ;972
;;;1142   
;;;1143     }
;;;1144   }
00024c  bd10              POP      {r4,pc}
                          ENDP

00024e  0000              DCW      0x0000
                  |L3.592|
                          DCD      SetupPacket
                  |L3.596|
                          DCD      EP0Data
                  |L3.600|
                          DCD      USB_DeviceAddress
                  |L3.604|
                          DCD      USB_Configuration
                  |L3.608|
                          DCD      USB_NumInterfaces
                  |L3.612|
                          DCD      USB_AltSetting

                          AREA ||i.USB_ResetCore||, CODE, READONLY, ALIGN=2

                  USB_ResetCore PROC
;;;108    
;;;109    void USB_ResetCore (void) {
000000  2001              MOVS     r0,#1
;;;110    
;;;111      USB_DeviceStatus  = USB_POWER;
000002  4908              LDR      r1,|L4.36|
000004  8008              STRH     r0,[r1,#0]
;;;112      USB_DeviceAddress = 0;
000006  2000              MOVS     r0,#0
000008  4907              LDR      r1,|L4.40|
00000a  7008              STRB     r0,[r1,#0]
;;;113      USB_Configuration = 0;
00000c  4907              LDR      r1,|L4.44|
00000e  7008              STRB     r0,[r1,#0]
;;;114      USB_EndPointMask  = 0x00010001;
000010  f04f1001          MOV      r0,#0x10001
000014  4906              LDR      r1,|L4.48|
000016  6008              STR      r0,[r1,#0]  ; USB_EndPointMask
;;;115      USB_EndPointHalt  = 0x00000000;
000018  2000              MOVS     r0,#0
00001a  4906              LDR      r1,|L4.52|
00001c  6008              STR      r0,[r1,#0]  ; USB_EndPointHalt
;;;116      USB_EndPointStall = 0x00000000;
00001e  4906              LDR      r1,|L4.56|
000020  6008              STR      r0,[r1,#0]  ; USB_EndPointStall
;;;117    }
000022  4770              BX       lr
;;;118    
                          ENDP

                  |L4.36|
                          DCD      USB_DeviceStatus
                  |L4.40|
                          DCD      USB_DeviceAddress
                  |L4.44|
                          DCD      USB_Configuration
                  |L4.48|
                          DCD      USB_EndPointMask
                  |L4.52|
                          DCD      USB_EndPointHalt
                  |L4.56|
                          DCD      USB_EndPointStall

                          AREA ||i.USB_SetupStage||, CODE, READONLY, ALIGN=2

                  USB_SetupStage PROC
;;;125    
;;;126    void USB_SetupStage (void) {
000000  b510              PUSH     {r4,lr}
;;;127      USB_ReadSetupPkt(0x00, (uint32_t *)&SetupPacket);
000002  4902              LDR      r1,|L5.12|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       USB_ReadSetupPkt
;;;128    }
00000a  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  |L5.12|
                          DCD      SetupPacket

                          AREA ||i.USB_StatusInStage||, CODE, READONLY, ALIGN=1

                  USB_StatusInStage PROC
;;;171    
;;;172    void USB_StatusInStage (void) {
000000  b510              PUSH     {r4,lr}
;;;173      USB_WriteEP(0x80, NULL, 0);
000002  2200              MOVS     r2,#0
000004  4611              MOV      r1,r2
000006  2080              MOVS     r0,#0x80
000008  f7fffffe          BL       USB_WriteEP
;;;174    }
00000c  bd10              POP      {r4,pc}
;;;175    
                          ENDP


                          AREA ||i.USB_StatusOutStage||, CODE, READONLY, ALIGN=2

                  USB_StatusOutStage PROC
;;;182    
;;;183    void USB_StatusOutStage (void) {
000000  b510              PUSH     {r4,lr}
;;;184      USB_ReadEP(0x00, EP0Buf);
000002  4902              LDR      r1,|L7.12|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       USB_ReadEP
;;;185    }
00000a  bd10              POP      {r4,pc}
;;;186    
                          ENDP

                  |L7.12|
                          DCD      EP0Buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  EP0Buf
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  USB_DeviceStatus
000000  0000              DCB      0x00,0x00
                  USB_DeviceAddress
000002  00                DCB      0x00
                  USB_Configuration
000003  00                DCB      0x00
                  USB_EndPointMask
                          DCD      0x00000000
                  USB_EndPointHalt
                          DCD      0x00000000
                  USB_EndPointStall
                          DCD      0x00000000
                  USB_NumInterfaces
000010  00                DCB      0x00
                  USB_AltSetting
000011  000000            DCB      0x00,0x00,0x00
                  EP0Data
                          %        8
                  SetupPacket
                          %        8

                          AREA ||i.USB_ReqGetStatus||, COMGROUP=USB_ReqGetStatus, CODE, READONLY, ALIGN=2

                  USB_ReqGetStatus PROC
;;;193    
;;;194    INLINE uint32_t USB_ReqGetStatus (void) {
000000  4827              LDR      r0,|L53.160|
;;;195      uint32_t n, m;
;;;196    
;;;197      switch (SetupPacket.bmRequestType.BM.Recipient) {
000002  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000004  f000001f          AND      r0,r0,#0x1f
000008  b120              CBZ      r0,|L53.20|
00000a  2801              CMP      r0,#1
00000c  d006              BEQ      |L53.28|
00000e  2802              CMP      r0,#2
000010  d141              BNE      |L53.150|
000012  e016              B        |L53.66|
                  |L53.20|
;;;198        case REQUEST_TO_DEVICE:
;;;199          EP0Data.pData = (uint8_t *)&USB_DeviceStatus;
000014  4823              LDR      r0,|L53.164|
000016  4b24              LDR      r3,|L53.168|
000018  6018              STR      r0,[r3,#0]  ; EP0Data
;;;200          break;
00001a  e03e              B        |L53.154|
                  |L53.28|
;;;201        case REQUEST_TO_INTERFACE:
;;;202          if ((USB_Configuration != 0) && (SetupPacket.wIndex.WB.L < USB_NumInterfaces)) {
00001c  4823              LDR      r0,|L53.172|
00001e  7800              LDRB     r0,[r0,#0]  ; USB_Configuration
000020  b160              CBZ      r0,|L53.60|
000022  481f              LDR      r0,|L53.160|
000024  7900              LDRB     r0,[r0,#4]  ; SetupPacket
000026  4b22              LDR      r3,|L53.176|
000028  781b              LDRB     r3,[r3,#0]  ; USB_NumInterfaces
00002a  4298              CMP      r0,r3
00002c  da06              BGE      |L53.60|
;;;203            *((__packed uint16_t *)EP0Buf) = 0;
00002e  2000              MOVS     r0,#0
000030  4b20              LDR      r3,|L53.180|
000032  8018              STRH     r0,[r3,#0]
;;;204            EP0Data.pData = EP0Buf;
000034  4618              MOV      r0,r3
000036  4b1c              LDR      r3,|L53.168|
000038  6018              STR      r0,[r3,#0]  ; EP0Data
00003a  e001              B        |L53.64|
                  |L53.60|
;;;205          } else {
;;;206            return (FALSE);
00003c  2000              MOVS     r0,#0
                  |L53.62|
;;;207          }
;;;208          break;
;;;209        case REQUEST_TO_ENDPOINT:
;;;210          n = SetupPacket.wIndex.WB.L & 0x8F;
;;;211          m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;212          if (((USB_Configuration != 0) || ((n & 0x0F) == 0)) && (USB_EndPointMask & m)) {
;;;213            *((__packed uint16_t *)EP0Buf) = (USB_EndPointHalt & m) ? 1 : 0;
;;;214            EP0Data.pData = EP0Buf;
;;;215          } else {
;;;216            return (FALSE);
;;;217          }
;;;218          break;
;;;219        default:
;;;220          return (FALSE);
;;;221      }
;;;222      return (TRUE);
;;;223    }
00003e  4770              BX       lr
                  |L53.64|
000040  e02b              B        |L53.154|
                  |L53.66|
000042  4817              LDR      r0,|L53.160|
000044  7900              LDRB     r0,[r0,#4]            ;210  ; SetupPacket
000046  f000018f          AND      r1,r0,#0x8f           ;210
00004a  f0010080          AND      r0,r1,#0x80           ;211
00004e  b128              CBZ      r0,|L53.92|
000050  f001030f          AND      r3,r1,#0xf            ;211
000054  f44f3080          MOV      r0,#0x10000           ;211
000058  4098              LSLS     r0,r0,r3              ;211
00005a  e001              B        |L53.96|
                  |L53.92|
00005c  2001              MOVS     r0,#1                 ;211
00005e  4088              LSLS     r0,r0,r1              ;211
                  |L53.96|
000060  4602              MOV      r2,r0                 ;211
000062  4812              LDR      r0,|L53.172|
000064  7800              LDRB     r0,[r0,#0]            ;212  ; USB_Configuration
000066  b910              CBNZ     r0,|L53.110|
000068  f001000f          AND      r0,r1,#0xf            ;212
00006c  b980              CBNZ     r0,|L53.144|
                  |L53.110|
00006e  4812              LDR      r0,|L53.184|
000070  6800              LDR      r0,[r0,#0]            ;212  ; USB_EndPointMask
000072  4010              ANDS     r0,r0,r2              ;212
000074  b160              CBZ      r0,|L53.144|
000076  4811              LDR      r0,|L53.188|
000078  6800              LDR      r0,[r0,#0]            ;213  ; USB_EndPointHalt
00007a  4010              ANDS     r0,r0,r2              ;213
00007c  b108              CBZ      r0,|L53.130|
00007e  2001              MOVS     r0,#1                 ;213
000080  e000              B        |L53.132|
                  |L53.130|
000082  2000              MOVS     r0,#0                 ;213
                  |L53.132|
000084  4b0b              LDR      r3,|L53.180|
000086  8018              STRH     r0,[r3,#0]            ;213
000088  4618              MOV      r0,r3                 ;214
00008a  4b07              LDR      r3,|L53.168|
00008c  6018              STR      r0,[r3,#0]            ;214  ; EP0Data
00008e  e001              B        |L53.148|
                  |L53.144|
000090  2000              MOVS     r0,#0                 ;216
000092  e7d4              B        |L53.62|
                  |L53.148|
000094  e001              B        |L53.154|
                  |L53.150|
000096  2000              MOVS     r0,#0                 ;220
000098  e7d1              B        |L53.62|
                  |L53.154|
00009a  bf00              NOP                            ;200
00009c  2001              MOVS     r0,#1                 ;222
00009e  e7ce              B        |L53.62|
;;;224    
                          ENDP

                  |L53.160|
                          DCD      SetupPacket
                  |L53.164|
                          DCD      USB_DeviceStatus
                  |L53.168|
                          DCD      EP0Data
                  |L53.172|
                          DCD      USB_Configuration
                  |L53.176|
                          DCD      USB_NumInterfaces
                  |L53.180|
                          DCD      EP0Buf
                  |L53.184|
                          DCD      USB_EndPointMask
                  |L53.188|
                          DCD      USB_EndPointHalt

                          AREA ||i.USB_ReqSetClrFeature||, COMGROUP=USB_ReqSetClrFeature, CODE, READONLY, ALIGN=2

                  USB_ReqSetClrFeature PROC
;;;232    
;;;233    INLINE uint32_t USB_ReqSetClrFeature (uint32_t sc) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;234      uint32_t n, m;
;;;235    
;;;236      switch (SetupPacket.bmRequestType.BM.Recipient) {
000004  4837              LDR      r0,|L60.228|
000006  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000008  f000001f          AND      r0,r0,#0x1f
00000c  b120              CBZ      r0,|L60.24|
00000e  2801              CMP      r0,#1
000010  d026              BEQ      |L60.96|
000012  2802              CMP      r0,#2
000014  d161              BNE      |L60.218|
000016  e025              B        |L60.100|
                  |L60.24|
;;;237        case REQUEST_TO_DEVICE:
;;;238          if (SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP) {
000018  4832              LDR      r0,|L60.228|
00001a  8840              LDRH     r0,[r0,#2]  ; SetupPacket
00001c  2801              CMP      r0,#1
00001e  d113              BNE      |L60.72|
;;;239            if (sc) {
000020  b146              CBZ      r6,|L60.52|
;;;240              USB_WakeUpCfg(TRUE);
000022  f7fffffe          BL       USB_WakeUpCfg
;;;241              USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
000026  4830              LDR      r0,|L60.232|
000028  8800              LDRH     r0,[r0,#0]  ; USB_DeviceStatus
00002a  f0400002          ORR      r0,r0,#2
00002e  492e              LDR      r1,|L60.232|
000030  8008              STRH     r0,[r1,#0]
000032  e014              B        |L60.94|
                  |L60.52|
;;;242            } else {
;;;243              USB_WakeUpCfg(FALSE);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       USB_WakeUpCfg
;;;244              USB_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
00003a  482b              LDR      r0,|L60.232|
00003c  8800              LDRH     r0,[r0,#0]  ; USB_DeviceStatus
00003e  f0200002          BIC      r0,r0,#2
000042  4929              LDR      r1,|L60.232|
000044  8008              STRH     r0,[r1,#0]
000046  e00a              B        |L60.94|
                  |L60.72|
;;;245            }
;;;246          } else if (SetupPacket.wValue.W == USB_FEATURE_TEST_MODE) {
000048  4826              LDR      r0,|L60.228|
00004a  8840              LDRH     r0,[r0,#2]  ; SetupPacket
00004c  2802              CMP      r0,#2
00004e  d104              BNE      |L60.90|
;;;247              return USB_SetTestMode(SetupPacket.wIndex.WB.H);
000050  4924              LDR      r1,|L60.228|
000052  7948              LDRB     r0,[r1,#5]
000054  f7fffffe          BL       USB_SetTestMode
                  |L60.88|
;;;248          } else {
;;;249            return (FALSE);
;;;250          }
;;;251          break;
;;;252        case REQUEST_TO_INTERFACE:
;;;253          return (FALSE);
;;;254        case REQUEST_TO_ENDPOINT:
;;;255          n = SetupPacket.wIndex.WB.L & 0x8F;
;;;256          m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;257          if ((USB_Configuration != 0) && ((n & 0x0F) != 0) && (USB_EndPointMask & m)) {
;;;258            if (SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL) {
;;;259              if (sc) {
;;;260                USB_SetStallEP(n);
;;;261                USB_EndPointHalt |=  m;
;;;262              } else {
;;;263                if ((USB_EndPointStall & m) != 0) {
;;;264                  return (TRUE);
;;;265                }
;;;266                USB_ClrStallEP(n);
;;;267    #if (USB_MSC)
;;;268                if ((n == MSC_EP_IN) && ((USB_EndPointHalt & m) != 0)) {
;;;269                  /* Compliance Test: rewrite CSW after unstall */
;;;270                  if (CSW.dSignature == MSC_CSW_Signature) {
;;;271                    USB_WriteEP(MSC_EP_IN, (uint8_t *)&CSW, sizeof(CSW));
;;;272                  }
;;;273                }
;;;274    #endif
;;;275                USB_EndPointHalt &= ~m;
;;;276              }
;;;277            } else {
;;;278              return (FALSE);
;;;279            }
;;;280          } else {
;;;281            return (FALSE);
;;;282          }
;;;283          break;
;;;284        default:
;;;285          return (FALSE);
;;;286      }
;;;287      return (TRUE);
;;;288    }
000058  bd70              POP      {r4-r6,pc}
                  |L60.90|
00005a  2000              MOVS     r0,#0                 ;249
00005c  e7fc              B        |L60.88|
                  |L60.94|
00005e  e03e              B        |L60.222|
                  |L60.96|
000060  2000              MOVS     r0,#0                 ;253
000062  e7f9              B        |L60.88|
                  |L60.100|
000064  481f              LDR      r0,|L60.228|
000066  7900              LDRB     r0,[r0,#4]            ;255  ; SetupPacket
000068  f000048f          AND      r4,r0,#0x8f           ;255
00006c  f0040080          AND      r0,r4,#0x80           ;256
000070  b128              CBZ      r0,|L60.126|
000072  f004010f          AND      r1,r4,#0xf            ;256
000076  f44f3080          MOV      r0,#0x10000           ;256
00007a  4088              LSLS     r0,r0,r1              ;256
00007c  e001              B        |L60.130|
                  |L60.126|
00007e  2001              MOVS     r0,#1                 ;256
000080  40a0              LSLS     r0,r0,r4              ;256
                  |L60.130|
000082  4605              MOV      r5,r0                 ;256
000084  4819              LDR      r0,|L60.236|
000086  7800              LDRB     r0,[r0,#0]            ;257  ; USB_Configuration
000088  b320              CBZ      r0,|L60.212|
00008a  f004000f          AND      r0,r4,#0xf            ;257
00008e  b308              CBZ      r0,|L60.212|
000090  4817              LDR      r0,|L60.240|
000092  6800              LDR      r0,[r0,#0]            ;257  ; USB_EndPointMask
000094  4028              ANDS     r0,r0,r5              ;257
000096  b1e8              CBZ      r0,|L60.212|
000098  4812              LDR      r0,|L60.228|
00009a  8840              LDRH     r0,[r0,#2]            ;258  ; SetupPacket
00009c  b9c0              CBNZ     r0,|L60.208|
00009e  b146              CBZ      r6,|L60.178|
0000a0  4620              MOV      r0,r4                 ;260
0000a2  f7fffffe          BL       USB_SetStallEP
0000a6  4813              LDR      r0,|L60.244|
0000a8  6800              LDR      r0,[r0,#0]            ;261  ; USB_EndPointHalt
0000aa  4328              ORRS     r0,r0,r5              ;261
0000ac  4911              LDR      r1,|L60.244|
0000ae  6008              STR      r0,[r1,#0]            ;261  ; USB_EndPointHalt
0000b0  e012              B        |L60.216|
                  |L60.178|
0000b2  4811              LDR      r0,|L60.248|
0000b4  6800              LDR      r0,[r0,#0]            ;263  ; USB_EndPointStall
0000b6  4028              ANDS     r0,r0,r5              ;263
0000b8  b108              CBZ      r0,|L60.190|
0000ba  2001              MOVS     r0,#1                 ;264
0000bc  e7cc              B        |L60.88|
                  |L60.190|
0000be  4620              MOV      r0,r4                 ;266
0000c0  f7fffffe          BL       USB_ClrStallEP
0000c4  480b              LDR      r0,|L60.244|
0000c6  6800              LDR      r0,[r0,#0]            ;275  ; USB_EndPointHalt
0000c8  43a8              BICS     r0,r0,r5              ;275
0000ca  490a              LDR      r1,|L60.244|
0000cc  6008              STR      r0,[r1,#0]            ;275  ; USB_EndPointHalt
0000ce  e003              B        |L60.216|
                  |L60.208|
0000d0  2000              MOVS     r0,#0                 ;278
0000d2  e7c1              B        |L60.88|
                  |L60.212|
0000d4  2000              MOVS     r0,#0                 ;281
0000d6  e7bf              B        |L60.88|
                  |L60.216|
0000d8  e001              B        |L60.222|
                  |L60.218|
0000da  2000              MOVS     r0,#0                 ;285
0000dc  e7bc              B        |L60.88|
                  |L60.222|
0000de  bf00              NOP                            ;251
0000e0  2001              MOVS     r0,#1                 ;287
0000e2  e7b9              B        |L60.88|
;;;289    
                          ENDP

                  |L60.228|
                          DCD      SetupPacket
                  |L60.232|
                          DCD      USB_DeviceStatus
                  |L60.236|
                          DCD      USB_Configuration
                  |L60.240|
                          DCD      USB_EndPointMask
                  |L60.244|
                          DCD      USB_EndPointHalt
                  |L60.248|
                          DCD      USB_EndPointStall

                          AREA ||i.USB_ReqGetDescriptor||, COMGROUP=USB_ReqGetDescriptor, CODE, READONLY, ALIGN=2

                  USB_ReqGetDescriptor PROC
;;;315    
;;;316    INLINE uint32_t USB_ReqGetDescriptor (void) {
000000  b510              PUSH     {r4,lr}
;;;317      uint8_t  *pD;
;;;318      uint32_t len, n;
;;;319    
;;;320      switch (SetupPacket.bmRequestType.BM.Recipient) {
000002  483d              LDR      r0,|L67.248|
000004  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000006  f000001f          AND      r0,r0,#0x1f
00000a  b110              CBZ      r0,|L67.18|
00000c  2801              CMP      r0,#1
00000e  d167              BNE      |L67.224|
000010  e063              B        |L67.218|
                  |L67.18|
;;;321        case REQUEST_TO_DEVICE:
;;;322          switch (SetupPacket.wValue.WB.H) {
000012  4839              LDR      r0,|L67.248|
000014  78c0              LDRB     r0,[r0,#3]
000016  2808              CMP      r0,#8
000018  d25b              BCS      |L67.210|
00001a  e8dff000          TBB      [pc,r0]
00001e  5a04              DCB      0x5a,0x04
000020  09225a5a          DCB      0x09,0x22,0x5a,0x5a
000024  3640              DCB      0x36,0x40
;;;323            case USB_DEVICE_DESCRIPTOR_TYPE:
;;;324              EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
000026  4835              LDR      r0,|L67.252|
000028  4c35              LDR      r4,|L67.256|
00002a  6020              STR      r0,[r4,#0]  ; EP0Data
;;;325              len = USB_DEVICE_DESC_SIZE;
00002c  2312              MOVS     r3,#0x12
;;;326              break;
00002e  e052              B        |L67.214|
;;;327            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;328              if ( DevStatusFS2HS == FALSE ) { 
000030  4834              LDR      r0,|L67.260|
000032  6800              LDR      r0,[r0,#0]  ; DevStatusFS2HS
000034  b908              CBNZ     r0,|L67.58|
;;;329                pD = (uint8_t *)USB_FSConfigDescriptor;
000036  4934              LDR      r1,|L67.264|
000038  e000              B        |L67.60|
                  |L67.58|
;;;330              } else {
;;;331                pD = (uint8_t *)USB_HSConfigDescriptor;
00003a  4934              LDR      r1,|L67.268|
                  |L67.60|
;;;332    		      }
;;;333              for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
00003c  2200              MOVS     r2,#0
00003e  e004              B        |L67.74|
                  |L67.64|
;;;334                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
000040  7808              LDRB     r0,[r1,#0]
000042  b108              CBZ      r0,|L67.72|
;;;335                  pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
000044  8848              LDRH     r0,[r1,#2]
000046  4401              ADD      r1,r1,r0
                  |L67.72|
000048  1c52              ADDS     r2,r2,#1              ;333
                  |L67.74|
00004a  482b              LDR      r0,|L67.248|
00004c  7880              LDRB     r0,[r0,#2]            ;333  ; SetupPacket
00004e  4290              CMP      r0,r2                 ;333
000050  d1f6              BNE      |L67.64|
;;;336                }
;;;337              }
;;;338              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
000052  7808              LDRB     r0,[r1,#0]
000054  b908              CBNZ     r0,|L67.90|
;;;339                return (FALSE);
000056  2000              MOVS     r0,#0
                  |L67.88|
;;;340              }
;;;341              EP0Data.pData = pD;
;;;342              len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;343              break;
;;;344            case USB_STRING_DESCRIPTOR_TYPE:
;;;345              pD = (uint8_t *)USB_StringDescriptor;
;;;346              for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
;;;347                if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
;;;348                  pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
;;;349                }
;;;350              }
;;;351              if (((USB_STRING_DESCRIPTOR *)pD)->bLength == 0) {
;;;352                return (FALSE);
;;;353              }
;;;354              EP0Data.pData = pD;
;;;355              len = ((USB_STRING_DESCRIPTOR *)pD)->bLength;
;;;356              break;
;;;357            case USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE:
;;;358              /* USB Chapter 9. page 9.6.2 */
;;;359              if ( DevStatusFS2HS == FALSE ) {
;;;360    	          return (FALSE);
;;;361              }
;;;362              else
;;;363              {
;;;364          	     EP0Data.pData = (uint8_t *)USB_DeviceQualifier;
;;;365    	           len = USB_DEVICE_QUALI_SIZE;
;;;366              }
;;;367              break;
;;;368            case USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE:
;;;369    		      if ( DevStatusFS2HS == TRUE ) { 
;;;370                    pD = (uint8_t *)USB_FSOtherSpeedConfiguration;
;;;371                  } else {
;;;372                    pD = (uint8_t *)USB_HSOtherSpeedConfiguration;
;;;373    		      }
;;;374              
;;;375              for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
;;;376                if (((USB_OTHER_SPEED_CONFIGURATION *)pD)->bLength != 0) {
;;;377                  pD += ((USB_OTHER_SPEED_CONFIGURATION *)pD)->wTotalLength;
;;;378                }
;;;379              }
;;;380              if (((USB_OTHER_SPEED_CONFIGURATION *)pD)->bLength == 0) {
;;;381                return (FALSE);
;;;382              }
;;;383              EP0Data.pData = pD;
;;;384              len = ((USB_OTHER_SPEED_CONFIGURATION *)pD)->wTotalLength;
;;;385              break;
;;;386            default:
;;;387              return (FALSE);
;;;388          }
;;;389          break;
;;;390        case REQUEST_TO_INTERFACE:
;;;391          switch (SetupPacket.wValue.WB.H) {
;;;392    #if USB_HID
;;;393            case HID_HID_DESCRIPTOR_TYPE:
;;;394              if (SetupPacket.wIndex.WB.L != USB_HID_IF_NUM) {
;;;395                return (FALSE);    /* Only Single HID Interface is supported */
;;;396              }
;;;397    		  if ( DevStatusFS2HS == FALSE ) { 
;;;398                EP0Data.pData = (uint8_t *)USB_FSConfigDescriptor + HID_DESC_OFFSET;
;;;399              } else {
;;;400    		    EP0Data.pData = (uint8_t *)USB_HSConfigDescriptor + HID_DESC_OFFSET;
;;;401    		  }
;;;402              len = HID_DESC_SIZE;
;;;403              break;
;;;404            case HID_REPORT_DESCRIPTOR_TYPE:
;;;405              if (SetupPacket.wIndex.WB.L != USB_HID_IF_NUM) {
;;;406                return (FALSE);    /* Only Single HID Interface is supported */
;;;407              }
;;;408              EP0Data.pData = (uint8_t *)HID_ReportDescriptor;
;;;409              len = HID_ReportDescSize;
;;;410              break;
;;;411            case HID_PHYSICAL_DESCRIPTOR_TYPE:
;;;412              return (FALSE);      /* HID Physical Descriptor is not supported */
;;;413    #endif
;;;414            default:
;;;415              return (FALSE);
;;;416          }
;;;417          break;
;;;418        default:
;;;419          return (FALSE);
;;;420      }
;;;421    
;;;422      if (EP0Data.Count > len) {
;;;423        EP0Data.Count = len;
;;;424      }
;;;425    
;;;426      return (TRUE);
;;;427    }
000058  bd10              POP      {r4,pc}
                  |L67.90|
00005a  4829              LDR      r0,|L67.256|
00005c  6001              STR      r1,[r0,#0]            ;341  ; EP0Data
00005e  884b              LDRH     r3,[r1,#2]            ;342
000060  e039              B        |L67.214|
000062  492b              LDR      r1,|L67.272|
000064  2200              MOVS     r2,#0                 ;346
000066  e004              B        |L67.114|
                  |L67.104|
000068  7808              LDRB     r0,[r1,#0]            ;347
00006a  b108              CBZ      r0,|L67.112|
00006c  7808              LDRB     r0,[r1,#0]            ;348
00006e  4401              ADD      r1,r1,r0              ;348
                  |L67.112|
000070  1c52              ADDS     r2,r2,#1              ;346
                  |L67.114|
000072  4821              LDR      r0,|L67.248|
000074  7880              LDRB     r0,[r0,#2]            ;346  ; SetupPacket
000076  4290              CMP      r0,r2                 ;346
000078  d1f6              BNE      |L67.104|
00007a  7808              LDRB     r0,[r1,#0]            ;351
00007c  b908              CBNZ     r0,|L67.130|
00007e  2000              MOVS     r0,#0                 ;352
000080  e7ea              B        |L67.88|
                  |L67.130|
000082  481f              LDR      r0,|L67.256|
000084  6001              STR      r1,[r0,#0]            ;354  ; EP0Data
000086  780b              LDRB     r3,[r1,#0]            ;355
000088  e025              B        |L67.214|
00008a  481e              LDR      r0,|L67.260|
00008c  6800              LDR      r0,[r0,#0]            ;359  ; DevStatusFS2HS
00008e  b908              CBNZ     r0,|L67.148|
000090  2000              MOVS     r0,#0                 ;360
000092  e7e1              B        |L67.88|
                  |L67.148|
000094  481f              LDR      r0,|L67.276|
000096  4c1a              LDR      r4,|L67.256|
000098  6020              STR      r0,[r4,#0]            ;364  ; EP0Data
00009a  230a              MOVS     r3,#0xa               ;365
00009c  e01b              B        |L67.214|
00009e  4819              LDR      r0,|L67.260|
0000a0  6800              LDR      r0,[r0,#0]            ;369  ; DevStatusFS2HS
0000a2  2801              CMP      r0,#1                 ;369
0000a4  d101              BNE      |L67.170|
0000a6  491c              LDR      r1,|L67.280|
0000a8  e000              B        |L67.172|
                  |L67.170|
0000aa  491c              LDR      r1,|L67.284|
                  |L67.172|
0000ac  2200              MOVS     r2,#0                 ;375
0000ae  e004              B        |L67.186|
                  |L67.176|
0000b0  7808              LDRB     r0,[r1,#0]            ;376
0000b2  b108              CBZ      r0,|L67.184|
0000b4  8848              LDRH     r0,[r1,#2]            ;377
0000b6  4401              ADD      r1,r1,r0              ;377
                  |L67.184|
0000b8  1c52              ADDS     r2,r2,#1              ;375
                  |L67.186|
0000ba  480f              LDR      r0,|L67.248|
0000bc  7880              LDRB     r0,[r0,#2]            ;375  ; SetupPacket
0000be  4290              CMP      r0,r2                 ;375
0000c0  d1f6              BNE      |L67.176|
0000c2  7808              LDRB     r0,[r1,#0]            ;380
0000c4  b908              CBNZ     r0,|L67.202|
0000c6  2000              MOVS     r0,#0                 ;381
0000c8  e7c6              B        |L67.88|
                  |L67.202|
0000ca  480d              LDR      r0,|L67.256|
0000cc  6001              STR      r1,[r0,#0]            ;383  ; EP0Data
0000ce  884b              LDRH     r3,[r1,#2]            ;384
0000d0  e001              B        |L67.214|
                  |L67.210|
0000d2  2000              MOVS     r0,#0                 ;387
0000d4  e7c0              B        |L67.88|
                  |L67.214|
0000d6  bf00              NOP                            ;326
0000d8  e004              B        |L67.228|
                  |L67.218|
0000da  bf00              NOP                            ;391
0000dc  2000              MOVS     r0,#0                 ;415
0000de  e7bb              B        |L67.88|
                  |L67.224|
0000e0  2000              MOVS     r0,#0                 ;419
0000e2  e7b9              B        |L67.88|
                  |L67.228|
0000e4  bf00              NOP                            ;389
0000e6  4806              LDR      r0,|L67.256|
0000e8  8880              LDRH     r0,[r0,#4]            ;422  ; EP0Data
0000ea  4298              CMP      r0,r3                 ;422
0000ec  d901              BLS      |L67.242|
0000ee  4c04              LDR      r4,|L67.256|
0000f0  80a3              STRH     r3,[r4,#4]            ;423
                  |L67.242|
0000f2  2001              MOVS     r0,#1                 ;426
0000f4  e7b0              B        |L67.88|
;;;428    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L67.248|
                          DCD      SetupPacket
                  |L67.252|
                          DCD      USB_DeviceDescriptor
                  |L67.256|
                          DCD      EP0Data
                  |L67.260|
                          DCD      DevStatusFS2HS
                  |L67.264|
                          DCD      USB_FSConfigDescriptor
                  |L67.268|
                          DCD      USB_HSConfigDescriptor
                  |L67.272|
                          DCD      USB_StringDescriptor
                  |L67.276|
                          DCD      USB_DeviceQualifier
                  |L67.280|
                          DCD      USB_FSOtherSpeedConfiguration
                  |L67.284|
                          DCD      USB_HSOtherSpeedConfiguration

                          AREA ||i.USB_ReqSetConfiguration||, COMGROUP=USB_ReqSetConfiguration, CODE, READONLY, ALIGN=2

                  USB_ReqSetConfiguration PROC
;;;454    
;;;455    INLINE uint32_t USB_ReqSetConfiguration (void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;456      USB_COMMON_DESCRIPTOR *pD;
;;;457      uint32_t alt = 0;
000004  2700              MOVS     r7,#0
;;;458      uint32_t n, m;
;;;459      uint32_t new_addr;
;;;460      switch (SetupPacket.bmRequestType.BM.Recipient) {
000006  4866              LDR      r0,|L74.416|
000008  7800              LDRB     r0,[r0,#0]  ; SetupPacket
00000a  f000001f          AND      r0,r0,#0x1f
00000e  2800              CMP      r0,#0
000010  d171              BNE      |L74.246|
;;;461        case REQUEST_TO_DEVICE:
;;;462    
;;;463          if (SetupPacket.wValue.WB.L) {
000012  4863              LDR      r0,|L74.416|
000014  7880              LDRB     r0,[r0,#2]  ; SetupPacket
000016  2800              CMP      r0,#0
000018  d06e              BEQ      |L74.248|
;;;464            if ( DevStatusFS2HS == FALSE ) { 
00001a  4862              LDR      r0,|L74.420|
00001c  6800              LDR      r0,[r0,#0]  ; DevStatusFS2HS
00001e  b908              CBNZ     r0,|L74.36|
;;;465              pD = (USB_COMMON_DESCRIPTOR *)USB_FSConfigDescriptor;
000020  4d61              LDR      r5,|L74.424|
000022  e000              B        |L74.38|
                  |L74.36|
;;;466    	    } else {
;;;467    	      pD = (USB_COMMON_DESCRIPTOR *)USB_HSConfigDescriptor;
000024  4d61              LDR      r5,|L74.428|
                  |L74.38|
;;;468    	    }
;;;469            while (pD->bLength) {
000026  e080              B        |L74.298|
                  |L74.40|
;;;470              switch (pD->bDescriptorType) {
000028  7868              LDRB     r0,[r5,#1]
00002a  2802              CMP      r0,#2
00002c  d004              BEQ      |L74.56|
00002e  2804              CMP      r0,#4
000030  d052              BEQ      |L74.216|
000032  2805              CMP      r0,#5
000034  d174              BNE      |L74.288|
000036  e051              B        |L74.220|
                  |L74.56|
;;;471                case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;472                  if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == SetupPacket.wValue.WB.L) {
000038  7968              LDRB     r0,[r5,#5]
00003a  4959              LDR      r1,|L74.416|
00003c  7889              LDRB     r1,[r1,#2]  ; SetupPacket
00003e  4288              CMP      r0,r1
000040  d145              BNE      |L74.206|
;;;473                    USB_Configuration = SetupPacket.wValue.WB.L;
000042  4857              LDR      r0,|L74.416|
000044  7880              LDRB     r0,[r0,#2]  ; SetupPacket
000046  495a              LDR      r1,|L74.432|
000048  7008              STRB     r0,[r1,#0]
;;;474                    USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
00004a  7928              LDRB     r0,[r5,#4]
00004c  4959              LDR      r1,|L74.436|
00004e  7008              STRB     r0,[r1,#0]
;;;475                    for (n = 0; n < USB_IF_NUM; n++) {
000050  2400              MOVS     r4,#0
000052  e003              B        |L74.92|
                  |L74.84|
;;;476                      USB_AltSetting[n] = 0;
000054  2000              MOVS     r0,#0
000056  4958              LDR      r1,|L74.440|
000058  5508              STRB     r0,[r1,r4]
00005a  1c64              ADDS     r4,r4,#1              ;475
                  |L74.92|
00005c  2c00              CMP      r4,#0                 ;475
00005e  d0f9              BEQ      |L74.84|
;;;477                    }
;;;478                  for (n = 1; n < USB_EP_NUM; n++) {
000060  2401              MOVS     r4,#1
000062  e014              B        |L74.142|
                  |L74.100|
;;;479                      if (USB_EndPointMask & (1 << n)) {
000064  2001              MOVS     r0,#1
000066  40a0              LSLS     r0,r0,r4
000068  4954              LDR      r1,|L74.444|
00006a  6809              LDR      r1,[r1,#0]  ; USB_EndPointMask
00006c  4008              ANDS     r0,r0,r1
00006e  b110              CBZ      r0,|L74.118|
;;;480                        USB_DisableEP(n);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       USB_DisableEP
                  |L74.118|
;;;481                      }
;;;482                      if (USB_EndPointMask & ((1 << 16) << n)) {
000076  f44f3080          MOV      r0,#0x10000
00007a  40a0              LSLS     r0,r0,r4
00007c  494f              LDR      r1,|L74.444|
00007e  6809              LDR      r1,[r1,#0]  ; USB_EndPointMask
000080  4008              ANDS     r0,r0,r1
000082  b118              CBZ      r0,|L74.140|
;;;483                        USB_DisableEP(n | 0x80);
000084  f0440080          ORR      r0,r4,#0x80
000088  f7fffffe          BL       USB_DisableEP
                  |L74.140|
00008c  1c64              ADDS     r4,r4,#1              ;478
                  |L74.142|
00008e  2c04              CMP      r4,#4                 ;478
000090  d3e8              BCC      |L74.100|
;;;484                      }
;;;485                    }
;;;486                    USB_EndPointMask = 0x00010001;
000092  f04f1001          MOV      r0,#0x10001
000096  4949              LDR      r1,|L74.444|
000098  6008              STR      r0,[r1,#0]  ; USB_EndPointMask
;;;487                    USB_EndPointHalt = 0x00000000;
00009a  2000              MOVS     r0,#0
00009c  4948              LDR      r1,|L74.448|
00009e  6008              STR      r0,[r1,#0]  ; USB_EndPointHalt
;;;488                    USB_EndPointStall= 0x00000000;
0000a0  4948              LDR      r1,|L74.452|
0000a2  6008              STR      r0,[r1,#0]  ; USB_EndPointStall
;;;489                    USB_Configure(TRUE);
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       USB_Configure
;;;490                    if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
0000aa  79e8              LDRB     r0,[r5,#7]
0000ac  f0000040          AND      r0,r0,#0x40
0000b0  b130              CBZ      r0,|L74.192|
;;;491                      USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
0000b2  4845              LDR      r0,|L74.456|
0000b4  8800              LDRH     r0,[r0,#0]  ; USB_DeviceStatus
0000b6  f0400001          ORR      r0,r0,#1
0000ba  4943              LDR      r1,|L74.456|
0000bc  8008              STRH     r0,[r1,#0]
0000be  e00a              B        |L74.214|
                  |L74.192|
;;;492                    } else {
;;;493                      USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
0000c0  4841              LDR      r0,|L74.456|
0000c2  8800              LDRH     r0,[r0,#0]  ; USB_DeviceStatus
0000c4  f0200001          BIC      r0,r0,#1
0000c8  493f              LDR      r1,|L74.456|
0000ca  8008              STRH     r0,[r1,#0]
0000cc  e003              B        |L74.214|
                  |L74.206|
;;;494                    }
;;;495                  } else {
;;;496                  new_addr = (uint32_t)pD + ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000ce  8868              LDRH     r0,[r5,#2]
0000d0  1946              ADDS     r6,r0,r5
;;;497                  pD = (USB_COMMON_DESCRIPTOR*)new_addr;
0000d2  4635              MOV      r5,r6
;;;498                    continue;
0000d4  e029              B        |L74.298|
                  |L74.214|
;;;499                  }
;;;500                  break;
0000d6  e023              B        |L74.288|
                  |L74.216|
;;;501                case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;502                  alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
0000d8  78ef              LDRB     r7,[r5,#3]
;;;503                  break;
0000da  e021              B        |L74.288|
                  |L74.220|
;;;504                case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;505                  if (alt == 0) {
0000dc  b9ff              CBNZ     r7,|L74.286|
;;;506                    n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
0000de  78a8              LDRB     r0,[r5,#2]
0000e0  f000048f          AND      r4,r0,#0x8f
;;;507                    m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
0000e4  f0040080          AND      r0,r4,#0x80
0000e8  b138              CBZ      r0,|L74.250|
0000ea  f004010f          AND      r1,r4,#0xf
0000ee  f44f3080          MOV      r0,#0x10000
0000f2  4088              LSLS     r0,r0,r1
0000f4  e003              B        |L74.254|
                  |L74.246|
0000f6  e04e              B        |L74.406|
                  |L74.248|
0000f8  e01c              B        |L74.308|
                  |L74.250|
0000fa  2001              MOVS     r0,#1
0000fc  40a0              LSLS     r0,r0,r4
                  |L74.254|
0000fe  4680              MOV      r8,r0
;;;508                    USB_EndPointMask |= m;
000100  482e              LDR      r0,|L74.444|
000102  6800              LDR      r0,[r0,#0]  ; USB_EndPointMask
000104  ea400008          ORR      r0,r0,r8
000108  492c              LDR      r1,|L74.444|
00010a  6008              STR      r0,[r1,#0]  ; USB_EndPointMask
;;;509                    USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
00010c  4628              MOV      r0,r5
00010e  f7fffffe          BL       USB_ConfigEP
;;;510                    USB_EnableEP(n);
000112  4620              MOV      r0,r4
000114  f7fffffe          BL       USB_EnableEP
;;;511                    USB_ResetEP(n);
000118  4620              MOV      r0,r4
00011a  f7fffffe          BL       USB_ResetEP
                  |L74.286|
;;;512                  }
;;;513                  break;
00011e  bf00              NOP      
                  |L74.288|
000120  bf00              NOP                            ;500
;;;514              }
;;;515            new_addr = (uint32_t)pD + pD->bLength;
000122  7828              LDRB     r0,[r5,#0]
000124  1946              ADDS     r6,r0,r5
;;;516            pD = (USB_COMMON_DESCRIPTOR*)new_addr;
000126  4635              MOV      r5,r6
000128  bf00              NOP                            ;498
                  |L74.298|
00012a  7828              LDRB     r0,[r5,#0]            ;469
00012c  2800              CMP      r0,#0                 ;469
00012e  f47faf7b          BNE      |L74.40|
000132  e026              B        |L74.386|
                  |L74.308|
;;;517            }
;;;518          }
;;;519          else {
;;;520            USB_Configuration = 0;
000134  2000              MOVS     r0,#0
000136  491e              LDR      r1,|L74.432|
000138  7008              STRB     r0,[r1,#0]
;;;521          for (n = 1; n < USB_EP_NUM; n++) {
00013a  2401              MOVS     r4,#1
00013c  e014              B        |L74.360|
                  |L74.318|
;;;522              if (USB_EndPointMask & (1 << n)) {
00013e  2001              MOVS     r0,#1
000140  40a0              LSLS     r0,r0,r4
000142  491e              LDR      r1,|L74.444|
000144  6809              LDR      r1,[r1,#0]  ; USB_EndPointMask
000146  4008              ANDS     r0,r0,r1
000148  b110              CBZ      r0,|L74.336|
;;;523                USB_DisableEP(n);
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       USB_DisableEP
                  |L74.336|
;;;524              }
;;;525              if (USB_EndPointMask & ((1 << 16) << n)) {
000150  f44f3080          MOV      r0,#0x10000
000154  40a0              LSLS     r0,r0,r4
000156  4919              LDR      r1,|L74.444|
000158  6809              LDR      r1,[r1,#0]  ; USB_EndPointMask
00015a  4008              ANDS     r0,r0,r1
00015c  b118              CBZ      r0,|L74.358|
;;;526                USB_DisableEP(n | 0x80);
00015e  f0440080          ORR      r0,r4,#0x80
000162  f7fffffe          BL       USB_DisableEP
                  |L74.358|
000166  1c64              ADDS     r4,r4,#1              ;521
                  |L74.360|
000168  2c04              CMP      r4,#4                 ;521
00016a  d3e8              BCC      |L74.318|
;;;527              }
;;;528            }
;;;529            USB_EndPointMask  = 0x00010001;
00016c  f04f1001          MOV      r0,#0x10001
000170  4912              LDR      r1,|L74.444|
000172  6008              STR      r0,[r1,#0]  ; USB_EndPointMask
;;;530            USB_EndPointHalt  = 0x00000000;
000174  2000              MOVS     r0,#0
000176  4912              LDR      r1,|L74.448|
000178  6008              STR      r0,[r1,#0]  ; USB_EndPointHalt
;;;531            USB_EndPointStall = 0x00000000;
00017a  4912              LDR      r1,|L74.452|
00017c  6008              STR      r0,[r1,#0]  ; USB_EndPointStall
;;;532            USB_Configure(FALSE);
00017e  f7fffffe          BL       USB_Configure
                  |L74.386|
;;;533          }
;;;534          if (USB_Configuration != SetupPacket.wValue.WB.L) {
000182  4807              LDR      r0,|L74.416|
000184  7880              LDRB     r0,[r0,#2]  ; SetupPacket
000186  490a              LDR      r1,|L74.432|
000188  7809              LDRB     r1,[r1,#0]  ; USB_Configuration
00018a  4288              CMP      r0,r1
00018c  d002              BEQ      |L74.404|
;;;535            return (FALSE);
00018e  2000              MOVS     r0,#0
                  |L74.400|
;;;536          }
;;;537          break;
;;;538        default:
;;;539          return (FALSE);
;;;540      }
;;;541      return (TRUE);
;;;542    }
000190  e8bd81f0          POP      {r4-r8,pc}
                  |L74.404|
000194  e001              B        |L74.410|
                  |L74.406|
000196  2000              MOVS     r0,#0                 ;539
000198  e7fa              B        |L74.400|
                  |L74.410|
00019a  bf00              NOP                            ;537
00019c  2001              MOVS     r0,#1                 ;541
00019e  e7f7              B        |L74.400|
;;;543    
                          ENDP

                  |L74.416|
                          DCD      SetupPacket
                  |L74.420|
                          DCD      DevStatusFS2HS
                  |L74.424|
                          DCD      USB_FSConfigDescriptor
                  |L74.428|
                          DCD      USB_HSConfigDescriptor
                  |L74.432|
                          DCD      USB_Configuration
                  |L74.436|
                          DCD      USB_NumInterfaces
                  |L74.440|
                          DCD      USB_AltSetting
                  |L74.444|
                          DCD      USB_EndPointMask
                  |L74.448|
                          DCD      USB_EndPointHalt
                  |L74.452|
                          DCD      USB_EndPointStall
                  |L74.456|
                          DCD      USB_DeviceStatus

                          AREA ||i.USB_ReqSetInterface||, COMGROUP=USB_ReqSetInterface, CODE, READONLY, ALIGN=2

                  USB_ReqSetInterface PROC
;;;573    
;;;574    INLINE uint32_t USB_ReqSetInterface (void) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;575      USB_COMMON_DESCRIPTOR *pD;
;;;576      uint32_t ifn = 0, alt = 0, old = 0, msk = 0;
000004  2700              MOVS     r7,#0
000006  46b8              MOV      r8,r7
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4681              MOV      r9,r0
;;;577      uint32_t n, m;
;;;578      uint32_t set, new_addr;
;;;579    
;;;580      switch (SetupPacket.bmRequestType.BM.Recipient) {
00000e  4848              LDR      r0,|L81.304|
000010  7800              LDRB     r0,[r0,#0]  ; SetupPacket
000012  f000001f          AND      r0,r0,#0x1f
000016  2801              CMP      r0,#1
000018  d17e              BNE      |L81.280|
;;;581        case REQUEST_TO_INTERFACE:
;;;582          if (USB_Configuration == 0) return (FALSE);
00001a  4846              LDR      r0,|L81.308|
00001c  7800              LDRB     r0,[r0,#0]  ; USB_Configuration
00001e  b910              CBNZ     r0,|L81.38|
000020  2000              MOVS     r0,#0
                  |L81.34|
;;;583          set = FALSE;
;;;584          if ( DevStatusFS2HS == FALSE ) { 
;;;585            pD  = (USB_COMMON_DESCRIPTOR *)USB_FSConfigDescriptor;
;;;586          } else {
;;;587            pD  = (USB_COMMON_DESCRIPTOR *)USB_HSConfigDescriptor;
;;;588          }
;;;589          while (pD->bLength) {
;;;590            switch (pD->bDescriptorType) {
;;;591              case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;592                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USB_Configuration) {
;;;593                  new_addr = (uint32_t)pD + ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;594                  pD = (USB_COMMON_DESCRIPTOR*)new_addr;
;;;595                  continue;
;;;596                }
;;;597                break;
;;;598              case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;599                ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
;;;600                alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
;;;601                msk = 0;
;;;602                if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
;;;603                  set = TRUE;
;;;604                  old = USB_AltSetting[ifn];
;;;605                  USB_AltSetting[ifn] = (uint8_t)alt;
;;;606                }
;;;607                break;
;;;608              case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;609                if (ifn == SetupPacket.wIndex.WB.L) {
;;;610                  n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
;;;611                  m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;612                  if (alt == SetupPacket.wValue.WB.L) {
;;;613                    USB_EndPointMask |=  m;
;;;614                    USB_EndPointHalt &= ~m;
;;;615                    USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
;;;616                    USB_EnableEP(n);
;;;617                    USB_ResetEP(n);
;;;618                    msk |= m;
;;;619                  }
;;;620                  else if ((alt == old) && ((msk & m) == 0)) {
;;;621                    USB_EndPointMask &= ~m;
;;;622                    USB_EndPointHalt &= ~m;
;;;623                    USB_DisableEP(n);
;;;624                  }
;;;625                }
;;;626               break;
;;;627            }
;;;628            new_addr = (uint32_t)pD + pD->bLength;
;;;629            pD = (USB_COMMON_DESCRIPTOR*)new_addr;
;;;630          }
;;;631          break;
;;;632        default:
;;;633          return (FALSE);
;;;634      }
;;;635    
;;;636      return (set);
;;;637    }
000022  e8bd8ff8          POP      {r3-r11,pc}
                  |L81.38|
000026  f04f0a00          MOV      r10,#0                ;583
00002a  4843              LDR      r0,|L81.312|
00002c  6800              LDR      r0,[r0,#0]            ;584  ; DevStatusFS2HS
00002e  b908              CBNZ     r0,|L81.52|
000030  4c42              LDR      r4,|L81.316|
000032  e000              B        |L81.54|
                  |L81.52|
000034  4c42              LDR      r4,|L81.320|
                  |L81.54|
000036  e071              B        |L81.284|
                  |L81.56|
000038  7860              LDRB     r0,[r4,#1]            ;590
00003a  2802              CMP      r0,#2                 ;590
00003c  d004              BEQ      |L81.72|
00003e  2804              CMP      r0,#4                 ;590
000040  d00d              BEQ      |L81.94|
000042  2805              CMP      r0,#5                 ;590
000044  d162              BNE      |L81.268|
000046  e020              B        |L81.138|
                  |L81.72|
000048  7960              LDRB     r0,[r4,#5]            ;592
00004a  493a              LDR      r1,|L81.308|
00004c  7809              LDRB     r1,[r1,#0]            ;592  ; USB_Configuration
00004e  4288              CMP      r0,r1                 ;592
000050  d004              BEQ      |L81.92|
000052  8860              LDRH     r0,[r4,#2]            ;593
000054  eb000b04          ADD      r11,r0,r4             ;593
000058  465c              MOV      r4,r11                ;594
00005a  e05f              B        |L81.284|
                  |L81.92|
00005c  e056              B        |L81.268|
                  |L81.94|
00005e  78a7              LDRB     r7,[r4,#2]            ;599
000060  f8948003          LDRB     r8,[r4,#3]            ;600
000064  f04f0900          MOV      r9,#0                 ;601
000068  4831              LDR      r0,|L81.304|
00006a  7900              LDRB     r0,[r0,#4]            ;602  ; SetupPacket
00006c  42b8              CMP      r0,r7                 ;602
00006e  d10b              BNE      |L81.136|
000070  482f              LDR      r0,|L81.304|
000072  7880              LDRB     r0,[r0,#2]            ;602  ; SetupPacket
000074  4540              CMP      r0,r8                 ;602
000076  d107              BNE      |L81.136|
000078  f04f0a01          MOV      r10,#1                ;603
00007c  4831              LDR      r0,|L81.324|
00007e  5dc0              LDRB     r0,[r0,r7]            ;604
000080  9000              STR      r0,[sp,#0]            ;604
000082  4930              LDR      r1,|L81.324|
000084  f8018007          STRB     r8,[r1,r7]            ;605
                  |L81.136|
000088  e040              B        |L81.268|
                  |L81.138|
00008a  4829              LDR      r0,|L81.304|
00008c  7900              LDRB     r0,[r0,#4]            ;609  ; SetupPacket
00008e  42b8              CMP      r0,r7                 ;609
000090  d13b              BNE      |L81.266|
000092  78a0              LDRB     r0,[r4,#2]            ;610
000094  f000068f          AND      r6,r0,#0x8f           ;610
000098  f0060080          AND      r0,r6,#0x80           ;611
00009c  b128              CBZ      r0,|L81.170|
00009e  f006010f          AND      r1,r6,#0xf            ;611
0000a2  f44f3080          MOV      r0,#0x10000           ;611
0000a6  4088              LSLS     r0,r0,r1              ;611
0000a8  e001              B        |L81.174|
                  |L81.170|
0000aa  2001              MOVS     r0,#1                 ;611
0000ac  40b0              LSLS     r0,r0,r6              ;611
                  |L81.174|
0000ae  4605              MOV      r5,r0                 ;611
0000b0  481f              LDR      r0,|L81.304|
0000b2  7880              LDRB     r0,[r0,#2]            ;612  ; SetupPacket
0000b4  4540              CMP      r0,r8                 ;612
0000b6  d115              BNE      |L81.228|
0000b8  4823              LDR      r0,|L81.328|
0000ba  6800              LDR      r0,[r0,#0]            ;613  ; USB_EndPointMask
0000bc  4328              ORRS     r0,r0,r5              ;613
0000be  4922              LDR      r1,|L81.328|
0000c0  6008              STR      r0,[r1,#0]            ;613  ; USB_EndPointMask
0000c2  4822              LDR      r0,|L81.332|
0000c4  6800              LDR      r0,[r0,#0]            ;614  ; USB_EndPointHalt
0000c6  43a8              BICS     r0,r0,r5              ;614
0000c8  4920              LDR      r1,|L81.332|
0000ca  6008              STR      r0,[r1,#0]            ;614  ; USB_EndPointHalt
0000cc  4620              MOV      r0,r4                 ;615
0000ce  f7fffffe          BL       USB_ConfigEP
0000d2  4630              MOV      r0,r6                 ;616
0000d4  f7fffffe          BL       USB_EnableEP
0000d8  4630              MOV      r0,r6                 ;617
0000da  f7fffffe          BL       USB_ResetEP
0000de  ea490905          ORR      r9,r9,r5              ;618
0000e2  e012              B        |L81.266|
                  |L81.228|
0000e4  9800              LDR      r0,[sp,#0]            ;620
0000e6  4580              CMP      r8,r0                 ;620
0000e8  d10f              BNE      |L81.266|
0000ea  ea090005          AND      r0,r9,r5              ;620
0000ee  b960              CBNZ     r0,|L81.266|
0000f0  4815              LDR      r0,|L81.328|
0000f2  6800              LDR      r0,[r0,#0]            ;621  ; USB_EndPointMask
0000f4  43a8              BICS     r0,r0,r5              ;621
0000f6  4914              LDR      r1,|L81.328|
0000f8  6008              STR      r0,[r1,#0]            ;621  ; USB_EndPointMask
0000fa  4814              LDR      r0,|L81.332|
0000fc  6800              LDR      r0,[r0,#0]            ;622  ; USB_EndPointHalt
0000fe  43a8              BICS     r0,r0,r5              ;622
000100  4912              LDR      r1,|L81.332|
000102  6008              STR      r0,[r1,#0]            ;622  ; USB_EndPointHalt
000104  4630              MOV      r0,r6                 ;623
000106  f7fffffe          BL       USB_DisableEP
                  |L81.266|
00010a  bf00              NOP                            ;626
                  |L81.268|
00010c  bf00              NOP                            ;597
00010e  7820              LDRB     r0,[r4,#0]            ;628
000110  eb000b04          ADD      r11,r0,r4             ;628
000114  465c              MOV      r4,r11                ;629
000116  e000              B        |L81.282|
                  |L81.280|
000118  e004              B        |L81.292|
                  |L81.282|
00011a  bf00              NOP                            ;595
                  |L81.284|
00011c  7820              LDRB     r0,[r4,#0]            ;589
00011e  2800              CMP      r0,#0                 ;589
000120  d18a              BNE      |L81.56|
000122  e001              B        |L81.296|
                  |L81.292|
000124  2000              MOVS     r0,#0                 ;633
000126  e77c              B        |L81.34|
                  |L81.296|
000128  bf00              NOP                            ;631
00012a  4650              MOV      r0,r10                ;636
00012c  e779              B        |L81.34|
;;;638    
                          ENDP

00012e  0000              DCW      0x0000
                  |L81.304|
                          DCD      SetupPacket
                  |L81.308|
                          DCD      USB_Configuration
                  |L81.312|
                          DCD      DevStatusFS2HS
                  |L81.316|
                          DCD      USB_FSConfigDescriptor
                  |L81.320|
                          DCD      USB_HSConfigDescriptor
                  |L81.324|
                          DCD      USB_AltSetting
                  |L81.328|
                          DCD      USB_EndPointMask
                  |L81.332|
                          DCD      USB_EndPointHalt

;*** Start embedded assembler ***

#line 1 "usbcore.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_usbcore_c_31b017e5____REV16|
#line 130 ".\\core_cmInstr.h"
|__asm___9_usbcore_c_31b017e5____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_usbcore_c_31b017e5____REVSH|
#line 144
|__asm___9_usbcore_c_31b017e5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
