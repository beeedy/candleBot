; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug_frmwrk.o --asm_dir=.\ --list_dir=.\ --depend=.\debug_frmwrk.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DCORE_M0 -DIPC_SLAVE -DPIXY --omf_browse=.\debug_frmwrk.crf debug_frmwrk.c]
                          THUMB

                          AREA ||i.UARTGetChar||, CODE, READONLY, ALIGN=1

                  UARTGetChar PROC
;;;94      **********************************************************************/
;;;95     uint8_t UARTGetChar (LPC_USARTn_Type *UARTx)
000000  b538              PUSH     {r3-r5,lr}
;;;96     {
000002  4604              MOV      r4,r0
;;;97     	uint8_t tmp = 0;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;98     	UART_Receive(UARTx, &tmp, 1, BLOCKING);
000008  2301              MOVS     r3,#1
00000a  461a              MOV      r2,r3
00000c  4669              MOV      r1,sp
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Receive
;;;99     	return(tmp);
000014  4668              MOV      r0,sp
000016  7800              LDRB     r0,[r0,#0]
;;;100    }
000018  bd38              POP      {r3-r5,pc}
;;;101    
                          ENDP


                          AREA ||i.UARTPutChar||, CODE, READONLY, ALIGN=1

                  UARTPutChar PROC
;;;79      **********************************************************************/
;;;80     void UARTPutChar (LPC_USARTn_Type *UARTx, uint8_t ch)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82     	#if defined(HITEX_LCD_TERM)
;;;83     	//Write character to the LCD
;;;84     	WriteChar(ch, xferConfig, NoHighlight);
;;;85     	#endif
;;;86     	UART_Send(UARTx, &ch, 1, BLOCKING);
000004  2301              MOVS     r3,#1
000006  461a              MOV      r2,r3
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       UART_Send
;;;87     }
000010  bd1c              POP      {r2-r4,pc}
;;;88     
                          ENDP


                          AREA ||i.UARTPutDec||, CODE, READONLY, ALIGN=1

                  UARTPutDec PROC
;;;138     **********************************************************************/
;;;139    void UARTPutDec(LPC_USARTn_Type *UARTx, uint8_t decnum)
000000  b5fe              PUSH     {r1-r7,lr}
;;;140    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;141    	uint8_t c1=decnum%10;
000006  210a              MOVS     r1,#0xa
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_idivmod
00000e  b2ce              UXTB     r6,r1
;;;142    	uint8_t c2=(decnum/10)%10;
000010  210a              MOVS     r1,#0xa
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       __aeabi_idivmod
000018  210a              MOVS     r1,#0xa
00001a  9000              STR      r0,[sp,#0]
00001c  f7fffffe          BL       __aeabi_idivmod
000020  b2cf              UXTB     r7,r1
;;;143    	uint8_t c3=(decnum/100)%10;
000022  2164              MOVS     r1,#0x64
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       __aeabi_idivmod
00002a  210a              MOVS     r1,#0xa
00002c  9000              STR      r0,[sp,#0]
00002e  f7fffffe          BL       __aeabi_idivmod
000032  b2c8              UXTB     r0,r1
000034  9001              STR      r0,[sp,#4]
;;;144    	UARTPutChar(UARTx, '0'+c3);
000036  9801              LDR      r0,[sp,#4]
000038  3030              ADDS     r0,r0,#0x30
00003a  b2c1              UXTB     r1,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       UARTPutChar
;;;145    	UARTPutChar(UARTx, '0'+c2);
000042  4638              MOV      r0,r7
000044  3030              ADDS     r0,r0,#0x30
000046  b2c1              UXTB     r1,r0
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       UARTPutChar
;;;146    	UARTPutChar(UARTx, '0'+c1);
00004e  4630              MOV      r0,r6
000050  3030              ADDS     r0,r0,#0x30
000052  b2c1              UXTB     r1,r0
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       UARTPutChar
;;;147    }
00005a  bdfe              POP      {r1-r7,pc}
;;;148    
                          ENDP


                          AREA ||i.UARTPutDec16||, CODE, READONLY, ALIGN=2

                  UARTPutDec16 PROC
;;;154     **********************************************************************/
;;;155    void UARTPutDec16(LPC_USARTn_Type *UARTx, uint16_t decnum)
000000  b5f0              PUSH     {r4-r7,lr}
;;;156    {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;157    	uint8_t c1=decnum%10;
000008  210a              MOVS     r1,#0xa
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_idivmod
000010  b2ce              UXTB     r6,r1
;;;158    	uint8_t c2=(decnum/10)%10;
000012  210a              MOVS     r1,#0xa
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       __aeabi_idivmod
00001a  210a              MOVS     r1,#0xa
00001c  9000              STR      r0,[sp,#0]
00001e  f7fffffe          BL       __aeabi_idivmod
000022  b2cf              UXTB     r7,r1
;;;159    	uint8_t c3=(decnum/100)%10;
000024  2164              MOVS     r1,#0x64
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       __aeabi_idivmod
00002c  210a              MOVS     r1,#0xa
00002e  9000              STR      r0,[sp,#0]
000030  f7fffffe          BL       __aeabi_idivmod
000034  b2c8              UXTB     r0,r1
000036  9003              STR      r0,[sp,#0xc]
;;;160    	uint8_t c4=(decnum/1000)%10;
000038  217d              MOVS     r1,#0x7d
00003a  00c9              LSLS     r1,r1,#3
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       __aeabi_idivmod
000042  210a              MOVS     r1,#0xa
000044  9000              STR      r0,[sp,#0]
000046  f7fffffe          BL       __aeabi_idivmod
00004a  b2c8              UXTB     r0,r1
00004c  9002              STR      r0,[sp,#8]
;;;161    	uint8_t c5=(decnum/10000)%10;
00004e  4915              LDR      r1,|L4.164|
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       __aeabi_idivmod
000056  210a              MOVS     r1,#0xa
000058  9000              STR      r0,[sp,#0]
00005a  f7fffffe          BL       __aeabi_idivmod
00005e  b2c8              UXTB     r0,r1
000060  9001              STR      r0,[sp,#4]
;;;162    	UARTPutChar(UARTx, '0'+c5);
000062  9801              LDR      r0,[sp,#4]
000064  3030              ADDS     r0,r0,#0x30
000066  b2c1              UXTB     r1,r0
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       UARTPutChar
;;;163    	UARTPutChar(UARTx, '0'+c4);
00006e  9802              LDR      r0,[sp,#8]
000070  3030              ADDS     r0,r0,#0x30
000072  b2c1              UXTB     r1,r0
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       UARTPutChar
;;;164    	UARTPutChar(UARTx, '0'+c3);
00007a  9803              LDR      r0,[sp,#0xc]
00007c  3030              ADDS     r0,r0,#0x30
00007e  b2c1              UXTB     r1,r0
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       UARTPutChar
;;;165    	UARTPutChar(UARTx, '0'+c2);
000086  4638              MOV      r0,r7
000088  3030              ADDS     r0,r0,#0x30
00008a  b2c1              UXTB     r1,r0
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       UARTPutChar
;;;166    	UARTPutChar(UARTx, '0'+c1);
000092  4630              MOV      r0,r6
000094  3030              ADDS     r0,r0,#0x30
000096  b2c1              UXTB     r1,r0
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       UARTPutChar
;;;167    }
00009e  b005              ADD      sp,sp,#0x14
0000a0  bdf0              POP      {r4-r7,pc}
;;;168    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      0x00002710

                          AREA ||i.UARTPutDec32||, CODE, READONLY, ALIGN=2

                  UARTPutDec32 PROC
;;;174     **********************************************************************/
;;;175    void UARTPutDec32(LPC_USARTn_Type *UARTx, uint32_t decnum)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;176    {
000002  b089              SUB      sp,sp,#0x24
000004  460c              MOV      r4,r1
;;;177    	uint8_t c1=decnum%10;
000006  210a              MOVS     r1,#0xa
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_uidivmod
00000e  460d              MOV      r5,r1
;;;178    	uint8_t c2=(decnum/10)%10;
000010  210a              MOVS     r1,#0xa
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  9001              STR      r0,[sp,#4]
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  460e              MOV      r6,r1
;;;179    	uint8_t c3=(decnum/100)%10;
000022  2164              MOVS     r1,#0x64
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  210a              MOVS     r1,#0xa
00002c  9001              STR      r0,[sp,#4]
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  460f              MOV      r7,r1
;;;180    	uint8_t c4=(decnum/1000)%10;
000034  217d              MOVS     r1,#0x7d
000036  00c9              LSLS     r1,r1,#3
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       __aeabi_uidivmod
00003e  210a              MOVS     r1,#0xa
000040  9001              STR      r0,[sp,#4]
000042  f7fffffe          BL       __aeabi_uidivmod
000046  9108              STR      r1,[sp,#0x20]
;;;181    	uint8_t c5=(decnum/10000)%10;
000048  4939              LDR      r1,|L5.304|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  210a              MOVS     r1,#0xa
000052  9001              STR      r0,[sp,#4]
000054  f7fffffe          BL       __aeabi_uidivmod
000058  9107              STR      r1,[sp,#0x1c]
;;;182    	uint8_t c6=(decnum/100000)%10;
00005a  4936              LDR      r1,|L5.308|
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       __aeabi_uidivmod
000062  210a              MOVS     r1,#0xa
000064  9001              STR      r0,[sp,#4]
000066  f7fffffe          BL       __aeabi_uidivmod
00006a  9106              STR      r1,[sp,#0x18]
;;;183    	uint8_t c7=(decnum/1000000)%10;
00006c  4932              LDR      r1,|L5.312|
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       __aeabi_uidivmod
000074  210a              MOVS     r1,#0xa
000076  9001              STR      r0,[sp,#4]
000078  f7fffffe          BL       __aeabi_uidivmod
00007c  9105              STR      r1,[sp,#0x14]
;;;184    	uint8_t c8=(decnum/10000000)%10;
00007e  492f              LDR      r1,|L5.316|
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       __aeabi_uidivmod
000086  210a              MOVS     r1,#0xa
000088  9001              STR      r0,[sp,#4]
00008a  f7fffffe          BL       __aeabi_uidivmod
00008e  9104              STR      r1,[sp,#0x10]
;;;185    	uint8_t c9=(decnum/100000000)%10;
000090  492b              LDR      r1,|L5.320|
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       __aeabi_uidivmod
000098  210a              MOVS     r1,#0xa
00009a  9001              STR      r0,[sp,#4]
00009c  f7fffffe          BL       __aeabi_uidivmod
0000a0  9103              STR      r1,[sp,#0xc]
;;;186    	uint8_t c10=(decnum/1000000000)%10;
0000a2  4928              LDR      r1,|L5.324|
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       __aeabi_uidivmod
0000aa  210a              MOVS     r1,#0xa
0000ac  9001              STR      r0,[sp,#4]
0000ae  f7fffffe          BL       __aeabi_uidivmod
0000b2  9102              STR      r1,[sp,#8]
;;;187    	UARTPutChar(UARTx, '0'+c10);
0000b4  9802              LDR      r0,[sp,#8]
0000b6  3030              ADDS     r0,r0,#0x30
0000b8  b2c1              UXTB     r1,r0
0000ba  9809              LDR      r0,[sp,#0x24]
0000bc  f7fffffe          BL       UARTPutChar
;;;188    	UARTPutChar(UARTx, '0'+c9);
0000c0  9803              LDR      r0,[sp,#0xc]
0000c2  3030              ADDS     r0,r0,#0x30
0000c4  b2c1              UXTB     r1,r0
0000c6  9809              LDR      r0,[sp,#0x24]
0000c8  f7fffffe          BL       UARTPutChar
;;;189    	UARTPutChar(UARTx, '0'+c8);
0000cc  9804              LDR      r0,[sp,#0x10]
0000ce  3030              ADDS     r0,r0,#0x30
0000d0  b2c1              UXTB     r1,r0
0000d2  9809              LDR      r0,[sp,#0x24]
0000d4  f7fffffe          BL       UARTPutChar
;;;190    	UARTPutChar(UARTx, '0'+c7);
0000d8  9805              LDR      r0,[sp,#0x14]
0000da  3030              ADDS     r0,r0,#0x30
0000dc  b2c1              UXTB     r1,r0
0000de  9809              LDR      r0,[sp,#0x24]
0000e0  f7fffffe          BL       UARTPutChar
;;;191    	UARTPutChar(UARTx, '0'+c6);
0000e4  9806              LDR      r0,[sp,#0x18]
0000e6  3030              ADDS     r0,r0,#0x30
0000e8  b2c1              UXTB     r1,r0
0000ea  9809              LDR      r0,[sp,#0x24]
0000ec  f7fffffe          BL       UARTPutChar
;;;192    	UARTPutChar(UARTx, '0'+c5);
0000f0  9807              LDR      r0,[sp,#0x1c]
0000f2  3030              ADDS     r0,r0,#0x30
0000f4  b2c1              UXTB     r1,r0
0000f6  9809              LDR      r0,[sp,#0x24]
0000f8  f7fffffe          BL       UARTPutChar
;;;193    	UARTPutChar(UARTx, '0'+c4);
0000fc  9808              LDR      r0,[sp,#0x20]
0000fe  3030              ADDS     r0,r0,#0x30
000100  b2c1              UXTB     r1,r0
000102  9809              LDR      r0,[sp,#0x24]
000104  f7fffffe          BL       UARTPutChar
;;;194    	UARTPutChar(UARTx, '0'+c3);
000108  4638              MOV      r0,r7
00010a  3030              ADDS     r0,r0,#0x30
00010c  b2c1              UXTB     r1,r0
00010e  9809              LDR      r0,[sp,#0x24]
000110  f7fffffe          BL       UARTPutChar
;;;195    	UARTPutChar(UARTx, '0'+c2);
000114  4630              MOV      r0,r6
000116  3030              ADDS     r0,r0,#0x30
000118  b2c1              UXTB     r1,r0
00011a  9809              LDR      r0,[sp,#0x24]
00011c  f7fffffe          BL       UARTPutChar
;;;196    	UARTPutChar(UARTx, '0'+c1);
000120  4628              MOV      r0,r5
000122  3030              ADDS     r0,r0,#0x30
000124  b2c1              UXTB     r1,r0
000126  9809              LDR      r0,[sp,#0x24]
000128  f7fffffe          BL       UARTPutChar
;;;197    }
00012c  b00b              ADD      sp,sp,#0x2c
00012e  bdf0              POP      {r4-r7,pc}
;;;198    
                          ENDP

                  |L5.304|
                          DCD      0x00002710
                  |L5.308|
                          DCD      0x000186a0
                  |L5.312|
                          DCD      0x000f4240
                  |L5.316|
                          DCD      0x00989680
                  |L5.320|
                          DCD      0x05f5e100
                  |L5.324|
                          DCD      0x3b9aca00

                          AREA ||i.UARTPutHex||, CODE, READONLY, ALIGN=2

                  UARTPutHex PROC
;;;204     **********************************************************************/
;;;205    void UARTPutHex (LPC_USARTn_Type *UARTx, uint8_t hexnum)
000000  b5f8              PUSH     {r3-r7,lr}
;;;206    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;207    	uint8_t nibble, i;
;;;208    
;;;209    	UARTPuts(UARTx, "0x");
000006  a10e              ADR      r1,|L6.64|
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       UARTPuts
;;;210    	i = 1;
00000e  2601              MOVS     r6,#1
;;;211    	do {
000010  bf00              NOP      
                  |L6.18|
;;;212    		nibble = (hexnum >> (4*i)) & 0x0F;
000012  00b1              LSLS     r1,r6,#2
000014  4628              MOV      r0,r5
000016  4108              ASRS     r0,r0,r1
000018  0704              LSLS     r4,r0,#28
00001a  0f24              LSRS     r4,r4,#28
;;;213    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001c  2c09              CMP      r4,#9
00001e  dd02              BLE      |L6.38|
000020  4620              MOV      r0,r4
000022  3037              ADDS     r0,r0,#0x37
000024  e001              B        |L6.42|
                  |L6.38|
000026  4620              MOV      r0,r4
000028  3030              ADDS     r0,r0,#0x30
                  |L6.42|
00002a  b2c1              UXTB     r1,r0
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       UARTPutChar
;;;214    	} while (i--);
000032  4630              MOV      r0,r6
000034  1e71              SUBS     r1,r6,#1
000036  b2ce              UXTB     r6,r1
000038  2800              CMP      r0,#0
00003a  d1ea              BNE      |L6.18|
;;;215    }
00003c  bdf8              POP      {r3-r7,pc}
;;;216    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
000040  307800            DCB      "0x",0
000043  00                DCB      0

                          AREA ||i.UARTPutHex16||, CODE, READONLY, ALIGN=2

                  UARTPutHex16 PROC
;;;223     **********************************************************************/
;;;224    void UARTPutHex16 (LPC_USARTn_Type *UARTx, uint16_t hexnum)
000000  b5f8              PUSH     {r3-r7,lr}
;;;225    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;226    	uint8_t nibble, i;
;;;227    
;;;228    	UARTPuts(UARTx, "0x");
000006  a10e              ADR      r1,|L7.64|
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       UARTPuts
;;;229    	i = 3;
00000e  2603              MOVS     r6,#3
;;;230    	do {
000010  bf00              NOP      
                  |L7.18|
;;;231    		nibble = (hexnum >> (4*i)) & 0x0F;
000012  00b1              LSLS     r1,r6,#2
000014  4628              MOV      r0,r5
000016  4108              ASRS     r0,r0,r1
000018  0704              LSLS     r4,r0,#28
00001a  0f24              LSRS     r4,r4,#28
;;;232    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001c  2c09              CMP      r4,#9
00001e  dd02              BLE      |L7.38|
000020  4620              MOV      r0,r4
000022  3037              ADDS     r0,r0,#0x37
000024  e001              B        |L7.42|
                  |L7.38|
000026  4620              MOV      r0,r4
000028  3030              ADDS     r0,r0,#0x30
                  |L7.42|
00002a  b2c1              UXTB     r1,r0
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       UARTPutChar
;;;233    	} while (i--);
000032  4630              MOV      r0,r6
000034  1e71              SUBS     r1,r6,#1
000036  b2ce              UXTB     r6,r1
000038  2800              CMP      r0,#0
00003a  d1ea              BNE      |L7.18|
;;;234    }
00003c  bdf8              POP      {r3-r7,pc}
;;;235    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
000040  307800            DCB      "0x",0
000043  00                DCB      0

                          AREA ||i.UARTPutHex32||, CODE, READONLY, ALIGN=2

                  UARTPutHex32 PROC
;;;241     **********************************************************************/
;;;242    void UARTPutHex32 (LPC_USARTn_Type *UARTx, uint32_t hexnum)
000000  b5f8              PUSH     {r3-r7,lr}
;;;243    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;244    	uint8_t nibble, i;
;;;245    
;;;246    	UARTPuts(UARTx, "0x");
000006  a10e              ADR      r1,|L8.64|
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       UARTPuts
;;;247    	i = 7;
00000e  2607              MOVS     r6,#7
;;;248    	do {
000010  bf00              NOP      
                  |L8.18|
;;;249    		nibble = (hexnum >> (4*i)) & 0x0F;
000012  00b1              LSLS     r1,r6,#2
000014  4628              MOV      r0,r5
000016  40c8              LSRS     r0,r0,r1
000018  0704              LSLS     r4,r0,#28
00001a  0f24              LSRS     r4,r4,#28
;;;250    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001c  2c09              CMP      r4,#9
00001e  dd02              BLE      |L8.38|
000020  4620              MOV      r0,r4
000022  3037              ADDS     r0,r0,#0x37
000024  e001              B        |L8.42|
                  |L8.38|
000026  4620              MOV      r0,r4
000028  3030              ADDS     r0,r0,#0x30
                  |L8.42|
00002a  b2c1              UXTB     r1,r0
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       UARTPutChar
;;;251    	} while (i--);
000032  4630              MOV      r0,r6
000034  1e71              SUBS     r1,r6,#1
000036  b2ce              UXTB     r6,r1
000038  2800              CMP      r0,#0
00003a  d1ea              BNE      |L8.18|
;;;252    }
00003c  bdf8              POP      {r3-r7,pc}
;;;253    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
000040  307800            DCB      "0x",0
000043  00                DCB      0

                          AREA ||i.UARTPuts||, CODE, READONLY, ALIGN=1

                  UARTPuts PROC
;;;108     **********************************************************************/
;;;109    void UARTPuts(LPC_USARTn_Type *UARTx, const void *str)
000000  b570              PUSH     {r4-r6,lr}
;;;110    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;111    	uint8_t *s = (uint8_t *) str;
000006  462c              MOV      r4,r5
;;;112    
;;;113    	while (*s)
000008  e004              B        |L9.20|
                  |L9.10|
;;;114    	{
;;;115    		UARTPutChar(UARTx, *s++);
00000a  7821              LDRB     r1,[r4,#0]
00000c  1c64              ADDS     r4,r4,#1
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       UARTPutChar
                  |L9.20|
000014  7820              LDRB     r0,[r4,#0]            ;113
000016  2800              CMP      r0,#0                 ;113
000018  d1f7              BNE      |L9.10|
;;;116    	}
;;;117    }
00001a  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP


                          AREA ||i.UARTPuts_||, CODE, READONLY, ALIGN=2

                  UARTPuts_ PROC
;;;125     **********************************************************************/
;;;126    void UARTPuts_(LPC_USARTn_Type *UARTx, const void *str)
000000  b570              PUSH     {r4-r6,lr}
;;;127    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;128    	UARTPuts (UARTx, str);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       UARTPuts
;;;129    	UARTPuts (UARTx, "\n\r");
00000e  a102              ADR      r1,|L10.24|
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       UARTPuts
;;;130    }
000016  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP

                  |L10.24|
000018  0a0d00            DCB      "\n\r",0
00001b  00                DCB      0

                          AREA ||i.debug_frmwrk_init_clk||, CODE, READONLY, ALIGN=2

                  debug_frmwrk_init_clk PROC
;;;275     **********************************************************************/
;;;276    void debug_frmwrk_init_clk(uint32_t Clock_Speed)
000000  b53e              PUSH     {r1-r5,lr}
;;;277    {
000002  4604              MOV      r4,r0
;;;278    	UART_CFG_Type UARTConfigStruct;
;;;279    
;;;280    	/* Initialize UART Configuration parameter structure to default state:
;;;281    	 * Baudrate = 9600bps
;;;282    	 * 8 data bit
;;;283    	 * 1 Stop bit
;;;284    	 * None parity
;;;285    	 */
;;;286    	UART_ConfigStructInit(&UARTConfigStruct);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       UART_ConfigStructInit
;;;287    	// Re-configure baudrate to 115200bps
;;;288    	UARTConfigStruct.Baud_rate = 115200;
00000a  20e1              MOVS     r0,#0xe1
00000c  0240              LSLS     r0,r0,#9
00000e  9000              STR      r0,[sp,#0]
;;;289    	UARTConfigStruct.Clock_Speed = Clock_Speed;
000010  9402              STR      r4,[sp,#8]
;;;290    
;;;291    	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
;;;292    	UART_Init((LPC_USARTn_Type*)DEBUG_UART_PORT, &UARTConfigStruct);
000012  4669              MOV      r1,sp
000014  4812              LDR      r0,|L11.96|
000016  f7fffffe          BL       UART_Init
;;;293    
;;;294    	// Enable UART Transmit
;;;295    	UART_TxCmd((LPC_USARTn_Type*)DEBUG_UART_PORT, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  4810              LDR      r0,|L11.96|
00001e  f7fffffe          BL       UART_TxCmd
;;;296    
;;;297    	_db_msg	= UARTPuts;
000022  4810              LDR      r0,|L11.100|
000024  4910              LDR      r1,|L11.104|
000026  6008              STR      r0,[r1,#0]  ; _db_msg
;;;298    	_db_msg_ = UARTPuts_;
000028  4810              LDR      r0,|L11.108|
00002a  4911              LDR      r1,|L11.112|
00002c  6008              STR      r0,[r1,#0]  ; _db_msg_
;;;299    	_db_char = UARTPutChar;
00002e  4811              LDR      r0,|L11.116|
000030  4911              LDR      r1,|L11.120|
000032  6008              STR      r0,[r1,#0]  ; _db_char
;;;300    	_db_hex = UARTPutHex;
000034  4811              LDR      r0,|L11.124|
000036  4912              LDR      r1,|L11.128|
000038  6008              STR      r0,[r1,#0]  ; _db_hex
;;;301    	_db_hex_16 = UARTPutHex16;
00003a  4812              LDR      r0,|L11.132|
00003c  4912              LDR      r1,|L11.136|
00003e  6008              STR      r0,[r1,#0]  ; _db_hex_16
;;;302    	_db_hex_32 = UARTPutHex32;
000040  4812              LDR      r0,|L11.140|
000042  4913              LDR      r1,|L11.144|
000044  6008              STR      r0,[r1,#0]  ; _db_hex_32
;;;303    	_db_dec = UARTPutDec;
000046  4813              LDR      r0,|L11.148|
000048  4913              LDR      r1,|L11.152|
00004a  6008              STR      r0,[r1,#0]  ; _db_dec
;;;304    	_db_dec_16 = UARTPutDec16;
00004c  4813              LDR      r0,|L11.156|
00004e  4914              LDR      r1,|L11.160|
000050  6008              STR      r0,[r1,#0]  ; _db_dec_16
;;;305    	_db_dec_32 = UARTPutDec32;
000052  4814              LDR      r0,|L11.164|
000054  4914              LDR      r1,|L11.168|
000056  6008              STR      r0,[r1,#0]  ; _db_dec_32
;;;306    	_db_get_char = UARTGetChar;
000058  4814              LDR      r0,|L11.172|
00005a  4915              LDR      r1,|L11.176|
00005c  6008              STR      r0,[r1,#0]  ; _db_get_char
;;;307    #if defined(HITEX_LCD_TERM)
;;;308    	xferConfig = InitLCDTerm();
;;;309    #endif
;;;310    }
00005e  bd3e              POP      {r1-r5,pc}
;;;311    
                          ENDP

                  |L11.96|
                          DCD      0x40082000
                  |L11.100|
                          DCD      UARTPuts
                  |L11.104|
                          DCD      _db_msg
                  |L11.108|
                          DCD      UARTPuts_
                  |L11.112|
                          DCD      _db_msg_
                  |L11.116|
                          DCD      UARTPutChar
                  |L11.120|
                          DCD      _db_char
                  |L11.124|
                          DCD      UARTPutHex
                  |L11.128|
                          DCD      _db_hex
                  |L11.132|
                          DCD      UARTPutHex16
                  |L11.136|
                          DCD      _db_hex_16
                  |L11.140|
                          DCD      UARTPutHex32
                  |L11.144|
                          DCD      _db_hex_32
                  |L11.148|
                          DCD      UARTPutDec
                  |L11.152|
                          DCD      _db_dec
                  |L11.156|
                          DCD      UARTPutDec16
                  |L11.160|
                          DCD      _db_dec_16
                  |L11.164|
                          DCD      UARTPutDec32
                  |L11.168|
                          DCD      _db_dec_32
                  |L11.172|
                          DCD      UARTGetChar
                  |L11.176|
                          DCD      _db_get_char

                          AREA ||i.lpc_printf||, CODE, READONLY, ALIGN=2

                  lpc_printf PROC
;;;259     **********************************************************************/
;;;260    void  lpc_printf (const  char *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;261    {
000002  b500              PUSH     {lr}
000004  b0ff              SUB      sp,sp,#0x1fc
000006  b084              SUB      sp,sp,#0x10
;;;262        char  buffer[512 + 1];
;;;263                va_list     vArgs;
;;;264        va_start(vArgs, format);
000008  a885              ADD      r0,sp,#0x214
00000a  9001              STR      r0,[sp,#4]
;;;265        vsprintf((char *)buffer, (char const *)format, vArgs);
00000c  a802              ADD      r0,sp,#8
00000e  9a01              LDR      r2,[sp,#4]
000010  9984              LDR      r1,[sp,#0x210]
000012  f7fffffe          BL       __c89vsprintf
;;;266        va_end(vArgs);
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;267    
;;;268        _DBG(buffer);
00001a  a902              ADD      r1,sp,#8
00001c  4804              LDR      r0,|L12.48|
00001e  4a05              LDR      r2,|L12.52|
000020  6812              LDR      r2,[r2,#0]  ; _db_msg
000022  4790              BLX      r2
;;;269    }
000024  b07f              ADD      sp,sp,#0x1fc
000026  b004              ADD      sp,sp,#0x10
000028  bc08              POP      {r3}
00002a  b004              ADD      sp,sp,#0x10
00002c  4718              BX       r3
;;;270    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      0x40082000
                  |L12.52|
                          DCD      _db_msg

                          AREA ||.data||, DATA, ALIGN=2

                  _db_msg
                          DCD      0x00000000
                  _db_msg_
                          DCD      0x00000000
                  _db_char
                          DCD      0x00000000
                  _db_dec
                          DCD      0x00000000
                  _db_dec_16
                          DCD      0x00000000
                  _db_dec_32
                          DCD      0x00000000
                  _db_hex
                          DCD      0x00000000
                  _db_hex_16
                          DCD      0x00000000
                  _db_hex_32
                          DCD      0x00000000
                  _db_get_char
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "debug_frmwrk.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REV16|
#line 130 ".\\core_cmInstr.h"
|__asm___14_debug_frmwrk_c_e73e2caf____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REVSH|
#line 144
|__asm___14_debug_frmwrk_c_e73e2caf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
