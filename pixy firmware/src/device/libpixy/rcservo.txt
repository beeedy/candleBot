; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\rcservo.o --asm_dir=.\ --list_dir=.\ --depend=.\rcservo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\rcservo.crf rcservo.cpp]
                          THUMB

                          AREA ||i._Z10rcs_enableRKhS0_||, CODE, READONLY, ALIGN=2

                  _Z10rcs_enableRKhS0_ PROC ; rcs_enable(const unsigned char&, const unsigned char&)
;;;148    
;;;149    int32_t rcs_enable(const uint8_t &channel, const uint8_t &enable)
000000  b510              PUSH     {r4,lr}
;;;150    {
000002  4602              MOV      r2,r0
;;;151    	if (channel>=RCS_NUM_AXES)
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  db02              BLT      |L1.16|
;;;152    		return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.14|
;;;153    
;;;154    	if (enable)
;;;155    	{
;;;156    		LPC_SCT->OUT[channel+6].SET = 1<<0; 
;;;157    		LPC_SCT->OUT[channel+6].CLR = 1<<(channel+1);
;;;158    	}
;;;159    	else
;;;160    	{
;;;161    		LPC_SCT->OUT[channel+6].SET = 1<<15; // disable
;;;162    		LPC_SCT->OUT[channel+6].CLR = 1<<0;
;;;163    	}
;;;164    
;;;165    	return 0;
;;;166    }
00000e  bd10              POP      {r4,pc}
                  |L1.16|
000010  7808              LDRB     r0,[r1,#0]            ;154
000012  b188              CBZ      r0,|L1.56|
000014  2401              MOVS     r4,#1                 ;156
000016  4810              LDR      r0,|L1.88|
000018  7813              LDRB     r3,[r2,#0]            ;156
00001a  1d9b              ADDS     r3,r3,#6              ;156
00001c  f8404033          STR      r4,[r0,r3,LSL #3]     ;156
000020  7810              LDRB     r0,[r2,#0]            ;157
000022  1c40              ADDS     r0,r0,#1              ;157
000024  2301              MOVS     r3,#1                 ;157
000026  fa03f000          LSL      r0,r3,r0              ;157
00002a  4b0b              LDR      r3,|L1.88|
00002c  7814              LDRB     r4,[r2,#0]            ;157
00002e  1da4              ADDS     r4,r4,#6              ;157
000030  eb0303c4          ADD      r3,r3,r4,LSL #3       ;157
000034  6058              STR      r0,[r3,#4]            ;157
000036  e00c              B        |L1.82|
                  |L1.56|
000038  f44f4400          MOV      r4,#0x8000            ;161
00003c  4806              LDR      r0,|L1.88|
00003e  7813              LDRB     r3,[r2,#0]            ;161
000040  1d9b              ADDS     r3,r3,#6              ;161
000042  f8404033          STR      r4,[r0,r3,LSL #3]     ;161
000046  2401              MOVS     r4,#1                 ;162
000048  7813              LDRB     r3,[r2,#0]            ;162
00004a  1d9b              ADDS     r3,r3,#6              ;162
00004c  eb0000c3          ADD      r0,r0,r3,LSL #3       ;162
000050  6044              STR      r4,[r0,#4]            ;162
                  |L1.82|
000052  2000              MOVS     r0,#0                 ;165
000054  e7db              B        |L1.14|
;;;167    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x40000500

                          AREA ||i._Z10rcs_getPosRKh||, CODE, READONLY, ALIGN=2

                  _Z10rcs_getPosRKh PROC ; rcs_getPos(const unsigned char&)
;;;140    
;;;141    int32_t rcs_getPos(const uint8_t &channel)
000000  4601              MOV      r1,r0
;;;142    {
;;;143    	if (channel>=RCS_NUM_AXES)
000002  7808              LDRB     r0,[r1,#0]
000004  2802              CMP      r0,#2
000006  db02              BLT      |L2.14|
;;;144    		return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L2.12|
;;;145    
;;;146    	return g_rcsPos[channel];	
;;;147    }
00000c  4770              BX       lr
                  |L2.14|
00000e  7808              LDRB     r0,[r1,#0]            ;146
000010  4a01              LDR      r2,|L2.24|
000012  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;146
000016  e7f9              B        |L2.12|
;;;148    
                          ENDP

                  |L2.24|
                          DCD      g_rcsPos

                          AREA ||i._Z10rcs_setPosRKhRKt||, CODE, READONLY, ALIGN=2

                  _Z10rcs_setPosRKhRKt PROC ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;120    
;;;121    int32_t rcs_setPos(const uint8_t &channel, const uint16_t &pos)
000000  b530              PUSH     {r4,r5,lr}
;;;122    {
000002  4602              MOV      r2,r0
;;;123    	uint16_t newPos;
;;;124    
;;;125    	if (channel>=RCS_NUM_AXES || pos>RCS_MAX_POS)
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  da03              BGE      |L3.18|
00000a  8808              LDRH     r0,[r1,#0]
00000c  f5b07f7a          CMP      r0,#0x3e8
000010  dd02              BLE      |L3.24|
                  |L3.18|
;;;126    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L3.22|
;;;127    
;;;128    	// scale position
;;;129    	newPos = ((uint32_t)pos*g_rcsPwmGain[channel])>>RCS_GAIN_SCALE;
;;;130    
;;;131    	LPC_SCT->MATCH[channel+1].L = g_rcsMinPwm[channel] + newPos;
;;;132    	LPC_SCT->MATCHREL[channel+1].L = g_rcsMinPwm[channel] + newPos;
;;;133    	LPC_SCT->OUT[channel+6].SET = 1<<0; 
;;;134    	LPC_SCT->OUT[channel+6].CLR = 1<<(channel+1);
;;;135    
;;;136    	g_rcsPos[channel] = pos;
;;;137    
;;;138    	return 0;
;;;139    }
000016  bd30              POP      {r4,r5,pc}
                  |L3.24|
000018  8808              LDRH     r0,[r1,#0]            ;129
00001a  7814              LDRB     r4,[r2,#0]            ;129
00001c  4d19              LDR      r5,|L3.132|
00001e  f9354014          LDRSH    r4,[r5,r4,LSL #1]     ;129
000022  4360              MULS     r0,r4,r0              ;129
000024  f3c0238f          UBFX     r3,r0,#10,#16         ;129
000028  7810              LDRB     r0,[r2,#0]            ;131
00002a  4c17              LDR      r4,|L3.136|
00002c  f8340010          LDRH     r0,[r4,r0,LSL #1]     ;131
000030  4418              ADD      r0,r0,r3              ;131
000032  b285              UXTH     r5,r0                 ;131
000034  4815              LDR      r0,|L3.140|
000036  7814              LDRB     r4,[r2,#0]            ;131
000038  1c64              ADDS     r4,r4,#1              ;131
00003a  f8205024          STRH     r5,[r0,r4,LSL #2]     ;131
00003e  7810              LDRB     r0,[r2,#0]            ;132
000040  4c11              LDR      r4,|L3.136|
000042  f8340010          LDRH     r0,[r4,r0,LSL #1]     ;132
000046  4418              ADD      r0,r0,r3              ;132
000048  b285              UXTH     r5,r0                 ;132
00004a  4811              LDR      r0,|L3.144|
00004c  7814              LDRB     r4,[r2,#0]            ;132
00004e  1c64              ADDS     r4,r4,#1              ;132
000050  f8205024          STRH     r5,[r0,r4,LSL #2]     ;132
000054  2501              MOVS     r5,#1                 ;133
000056  480f              LDR      r0,|L3.148|
000058  7814              LDRB     r4,[r2,#0]            ;133
00005a  1da4              ADDS     r4,r4,#6              ;133
00005c  f8405034          STR      r5,[r0,r4,LSL #3]     ;133
000060  7810              LDRB     r0,[r2,#0]            ;134
000062  1c40              ADDS     r0,r0,#1              ;134
000064  2401              MOVS     r4,#1                 ;134
000066  fa04f000          LSL      r0,r4,r0              ;134
00006a  4c0a              LDR      r4,|L3.148|
00006c  7815              LDRB     r5,[r2,#0]            ;134
00006e  1dad              ADDS     r5,r5,#6              ;134
000070  eb0404c5          ADD      r4,r4,r5,LSL #3       ;134
000074  6060              STR      r0,[r4,#4]            ;134
000076  8808              LDRH     r0,[r1,#0]            ;136
000078  7814              LDRB     r4,[r2,#0]            ;136
00007a  4d07              LDR      r5,|L3.152|
00007c  f8250014          STRH     r0,[r5,r4,LSL #1]     ;136
000080  2000              MOVS     r0,#0                 ;138
000082  e7c8              B        |L3.22|
;;;140    
                          ENDP

                  |L3.132|
                          DCD      g_rcsPwmGain
                  |L3.136|
                          DCD      g_rcsMinPwm
                  |L3.140|
                          DCD      0x40000100
                  |L3.144|
                          DCD      0x40000200
                  |L3.148|
                          DCD      0x40000500
                  |L3.152|
                          DCD      g_rcsPos

                          AREA ||i._Z11rcs_setFreqRKt||, CODE, READONLY, ALIGN=2

                  _Z11rcs_setFreqRKt PROC ; rcs_setFreq(const unsigned short&)
;;;182    
;;;183    int32_t rcs_setFreq(const uint16_t &freq)
000000  4601              MOV      r1,r0
;;;184    {
;;;185    	uint16_t val;
;;;186    
;;;187    	if (freq<20 || freq>300)
000002  8808              LDRH     r0,[r1,#0]
000004  2814              CMP      r0,#0x14
000006  db03              BLT      |L4.16|
000008  8808              LDRH     r0,[r1,#0]
00000a  f5b07f96          CMP      r0,#0x12c
00000e  dd02              BLE      |L4.22|
                  |L4.16|
;;;188    		return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L4.20|
;;;189    
;;;190    	val = RCS_CLOCK_FREQ/freq;
;;;191    
;;;192    	LPC_SCT->MATCH[0].L = val; 
;;;193    	LPC_SCT->MATCHREL[0].L = val;
;;;194    
;;;195    	return 0;
;;;196    }
000014  4770              BX       lr
                  |L4.22|
000016  8808              LDRH     r0,[r1,#0]            ;190
000018  4b05              LDR      r3,|L4.48|
00001a  fb93f0f0          SDIV     r0,r3,r0              ;190
00001e  b282              UXTH     r2,r0                 ;190
000020  4804              LDR      r0,|L4.52|
000022  8002              STRH     r2,[r0,#0]            ;192
000024  0580              LSLS     r0,r0,#22             ;193
000026  f8a02200          STRH     r2,[r0,#0x200]        ;193
00002a  2000              MOVS     r0,#0                 ;195
00002c  e7f2              B        |L4.20|
;;;197    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x000f4240
                  |L4.52|
                          DCD      0x40000100

                          AREA ||i._Z13rcs_setLimitsRKhRKsS2_||, CODE, READONLY, ALIGN=2

                  _Z13rcs_setLimitsRKhRKsS2_ PROC ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;167    
;;;168    int32_t rcs_setLimits(const uint8_t &channel, const int16_t &lower, const int16_t &upper)
000000  b570              PUSH     {r4-r6,lr}
;;;169    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;170    	if (channel>=RCS_NUM_AXES || upper>500 || upper<-500 || lower>500 || lower<-500)
000008  7820              LDRB     r0,[r4,#0]
00000a  2802              CMP      r0,#2
00000c  da13              BGE      |L5.54|
00000e  f9b60000          LDRSH    r0,[r6,#0]
000012  f5b07ffa          CMP      r0,#0x1f4
000016  dc0e              BGT      |L5.54|
000018  f9b60000          LDRSH    r0,[r6,#0]
00001c  f5107ffa          CMN      r0,#0x1f4
000020  db09              BLT      |L5.54|
000022  f9b50000          LDRSH    r0,[r5,#0]
000026  f5b07ffa          CMP      r0,#0x1f4
00002a  dc04              BGT      |L5.54|
00002c  f9b50000          LDRSH    r0,[r5,#0]
000030  f5107ffa          CMN      r0,#0x1f4
000034  da02              BGE      |L5.60|
                  |L5.54|
;;;171    		return -1;
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L5.58|
;;;172    
;;;173    	g_rcsMinPwm[channel] = RCS_MIN_PWM+lower;
;;;174    	// MAXPOS*gain = RANGE+upper-lower -> gain<<RCS_GAIN_SCALE = ((RANGE+upper-lower)<<RCS_GAIN_SCALE)/MAXPOS
;;;175    	g_rcsPwmGain[channel] = ((RCS_PWM_RANGE+upper-lower)<<RCS_GAIN_SCALE)/RCS_MAX_POS;
;;;176    
;;;177    	// update
;;;178    	rcs_setPos(channel, g_rcsPos[channel]);
;;;179    
;;;180    	return 0;
;;;181    }
00003a  bd70              POP      {r4-r6,pc}
                  |L5.60|
00003c  8828              LDRH     r0,[r5,#0]            ;173
00003e  f500707a          ADD      r0,r0,#0x3e8          ;173
000042  b200              SXTH     r0,r0                 ;173
000044  7821              LDRB     r1,[r4,#0]            ;173
000046  4a0e              LDR      r2,|L5.128|
000048  f8220011          STRH     r0,[r2,r1,LSL #1]     ;173
00004c  f9b60000          LDRSH    r0,[r6,#0]            ;175
000050  f500707a          ADD      r0,r0,#0x3e8          ;175
000054  f9b51000          LDRSH    r1,[r5,#0]            ;175
000058  1a40              SUBS     r0,r0,r1              ;175
00005a  0280              LSLS     r0,r0,#10             ;175
00005c  f44f717a          MOV      r1,#0x3e8             ;175
000060  fb90f0f1          SDIV     r0,r0,r1              ;175
000064  b200              SXTH     r0,r0                 ;175
000066  7821              LDRB     r1,[r4,#0]            ;175
000068  4a06              LDR      r2,|L5.132|
00006a  f8220011          STRH     r0,[r2,r1,LSL #1]     ;175
00006e  7820              LDRB     r0,[r4,#0]            ;178
000070  4a05              LDR      r2,|L5.136|
000072  eb020140          ADD      r1,r2,r0,LSL #1       ;178
000076  4620              MOV      r0,r4                 ;178
000078  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00007c  2000              MOVS     r0,#0                 ;180
00007e  e7dc              B        |L5.58|
;;;182    
                          ENDP

                  |L5.128|
                          DCD      g_rcsMinPwm
                  |L5.132|
                          DCD      g_rcsPwmGain
                  |L5.136|
                          DCD      g_rcsPos

                          AREA ||i._Z14rcs_loadParamsv||, CODE, READONLY, ALIGN=2

                  _Z14rcs_loadParamsv PROC ; rcs_loadParams()
;;;93     
;;;94     void rcs_loadParams()
000000  b500              PUSH     {lr}
;;;95     {
000002  b087              SUB      sp,sp,#0x1c
;;;96     	prm_add("S0 lower limit", PRM_FLAG_SIGNED, 
000004  2000              MOVS     r0,#0
000006  f06f01c7          MVN      r1,#0xc7
00000a  2302              MOVS     r3,#2
00000c  4a2f              LDR      r2,|L6.204|
00000e  e9cd1000          STRD     r1,r0,[sp,#0]
000012  2180              MOVS     r1,#0x80
000014  a02e              ADR      r0,|L6.208|
000016  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;97     		"@c Servo Sets the lower limit of travel for servo 0 (default -200)", INT16(-200), END);
;;;98     	prm_add("S0 upper limit", PRM_FLAG_SIGNED, 
00001a  2000              MOVS     r0,#0
00001c  21c8              MOVS     r1,#0xc8
00001e  2302              MOVS     r3,#2
000020  4a2f              LDR      r2,|L6.224|
000022  e9cd1000          STRD     r1,r0,[sp,#0]
000026  2180              MOVS     r1,#0x80
000028  a02e              ADR      r0,|L6.228|
00002a  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;99     		"@c Servo Sets the upper limit of travel for servo 0 (default 200)", INT16(200), END);
;;;100    	prm_add("S1 lower limit", PRM_FLAG_SIGNED, 
00002e  2000              MOVS     r0,#0
000030  f06f01c7          MVN      r1,#0xc7
000034  2302              MOVS     r3,#2
000036  4a2f              LDR      r2,|L6.244|
000038  e9cd1000          STRD     r1,r0,[sp,#0]
00003c  2180              MOVS     r1,#0x80
00003e  a02e              ADR      r0,|L6.248|
000040  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;101    		"@c Servo Sets the lower limit of travel for servo 1 (default -200)", INT16(-200), END);
;;;102    	prm_add("S1 upper limit", PRM_FLAG_SIGNED, 
000044  2000              MOVS     r0,#0
000046  21c8              MOVS     r1,#0xc8
000048  2302              MOVS     r3,#2
00004a  4a2f              LDR      r2,|L6.264|
00004c  e9cd1000          STRD     r1,r0,[sp,#0]
000050  2180              MOVS     r1,#0x80
000052  a02e              ADR      r0,|L6.268|
000054  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;103    		"@c Servo Sets the upper limit of travel for servo 1 (default 200)", INT16(200), END);
;;;104    	prm_add("Servo frequency", PRM_FLAG_ADVANCED, 
000058  2000              MOVS     r0,#0
00005a  213c              MOVS     r1,#0x3c
00005c  2302              MOVS     r3,#2
00005e  a22f              ADR      r2,|L6.284|
000060  e9cd1000          STRD     r1,r0,[sp,#0]
000064  4619              MOV      r1,r3
000066  a03c              ADR      r0,|L6.344|
000068  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;105    		"@c Servo Sets the PWM frequency of the servos (default 60)", UINT16(60), END);
;;;106    
;;;107    	int16_t lower, upper, freq;
;;;108    
;;;109    	prm_get("S0 lower limit", &lower, END);
00006c  2200              MOVS     r2,#0
00006e  a904              ADD      r1,sp,#0x10
000070  a017              ADR      r0,|L6.208|
000072  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;110    	prm_get("S0 upper limit", &upper, END);
000076  2200              MOVS     r2,#0
000078  a903              ADD      r1,sp,#0xc
00007a  a01a              ADR      r0,|L6.228|
00007c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;111    	rcs_setLimits(0, lower, upper);
000080  2000              MOVS     r0,#0
000082  aa03              ADD      r2,sp,#0xc
000084  a904              ADD      r1,sp,#0x10
000086  9006              STR      r0,[sp,#0x18]
000088  a806              ADD      r0,sp,#0x18
00008a  f7fffffe          BL       _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;112    
;;;113    	prm_get("S1 lower limit", &lower, END);
00008e  2200              MOVS     r2,#0
000090  a904              ADD      r1,sp,#0x10
000092  a019              ADR      r0,|L6.248|
000094  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;114    	prm_get("S1 upper limit", &upper, END);
000098  2200              MOVS     r2,#0
00009a  a903              ADD      r1,sp,#0xc
00009c  a01b              ADR      r0,|L6.268|
00009e  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;115    	rcs_setLimits(1, lower, upper);
0000a2  2001              MOVS     r0,#1
0000a4  aa03              ADD      r2,sp,#0xc
0000a6  a904              ADD      r1,sp,#0x10
0000a8  9006              STR      r0,[sp,#0x18]
0000aa  a806              ADD      r0,sp,#0x18
0000ac  f7fffffe          BL       _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;116    
;;;117    	prm_get("Servo frequency", &freq, END);
0000b0  2200              MOVS     r2,#0
0000b2  a902              ADD      r1,sp,#8
0000b4  a028              ADR      r0,|L6.344|
0000b6  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;118    	rcs_setFreq(freq);
0000ba  f8bd0008          LDRH     r0,[sp,#8]
0000be  b280              UXTH     r0,r0
0000c0  9005              STR      r0,[sp,#0x14]
0000c2  a805              ADD      r0,sp,#0x14
0000c4  f7fffffe          BL       _Z11rcs_setFreqRKt ; rcs_setFreq(const unsigned short&)
;;;119    }
0000c8  b007              ADD      sp,sp,#0x1c
0000ca  bd00              POP      {pc}
;;;120    
                          ENDP

                  |L6.204|
                          DCD      ||.conststring||+0x3b8
                  |L6.208|
0000d0  5330206c          DCB      "S0 lower limit",0
0000d4  6f776572
0000d8  206c696d
0000dc  697400  
0000df  00                DCB      0
                  |L6.224|
                          DCD      ||.conststring||+0x3fc
                  |L6.228|
0000e4  53302075          DCB      "S0 upper limit",0
0000e8  70706572
0000ec  206c696d
0000f0  697400  
0000f3  00                DCB      0
                  |L6.244|
                          DCD      ||.conststring||+0x440
                  |L6.248|
0000f8  5331206c          DCB      "S1 lower limit",0
0000fc  6f776572
000100  206c696d
000104  697400  
000107  00                DCB      0
                  |L6.264|
                          DCD      ||.conststring||+0x484
                  |L6.268|
00010c  53312075          DCB      "S1 upper limit",0
000110  70706572
000114  206c696d
000118  697400  
00011b  00                DCB      0
                  |L6.284|
00011c  40632053          DCB      "@c Servo Sets the PWM frequency of the servos (default "
000120  6572766f
000124  20536574
000128  73207468
00012c  65205057
000130  4d206672
000134  65717565
000138  6e637920
00013c  6f662074
000140  68652073
000144  6572766f
000148  73202864
00014c  65666175
000150  6c7420  
000153  36302900          DCB      "60)",0
000157  00                DCB      0
                  |L6.344|
000158  53657276          DCB      "Servo frequency",0
00015c  6f206672
000160  65717565
000164  6e637900

                          AREA ||i._Z8rcs_initv||, CODE, READONLY, ALIGN=2

                  _Z8rcs_initv PROC ; rcs_init()
;;;74     
;;;75     void rcs_init()
000000  b51f              PUSH     {r0-r4,lr}
;;;76     {
;;;77     	int i;
;;;78     
;;;79     	for (i=0; i<RCS_NUM_AXES; i++)
000002  2400              MOVS     r4,#0
000004  e013              B        |L7.46|
                  |L7.6|
;;;80     	{
;;;81     		g_rcsMinPwm[i] = RCS_MIN_PWM;
000006  f44f707a          MOV      r0,#0x3e8
00000a  4915              LDR      r1,|L7.96|
00000c  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;82     		g_rcsPwmGain[i] = 1<<RCS_GAIN_SCALE;
000010  f44f6080          MOV      r0,#0x400
000014  4913              LDR      r1,|L7.100|
000016  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;83     		rcs_setPos(i, RCS_CENTER_POS);
00001a  b2e0              UXTB     r0,r4
00001c  9001              STR      r0,[sp,#4]
00001e  f44f70fa          MOV      r0,#0x1f4
000022  4669              MOV      r1,sp
000024  9000              STR      r0,[sp,#0]
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00002c  1c64              ADDS     r4,r4,#1              ;79
                  |L7.46|
00002e  2c02              CMP      r4,#2                 ;79
000030  dbe9              BLT      |L7.6|
;;;84     	}
;;;85     
;;;86     	rcs_loadParams();
000032  f7fffffe          BL       _Z14rcs_loadParamsv ; rcs_loadParams()
;;;87     		
;;;88     	g_chirpUsb->registerModule(g_module);
000036  490c              LDR      r1,|L7.104|
000038  480c              LDR      r0,|L7.108|
00003a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00003c  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;89     
;;;90     	rcs_enable(0, 1);
000040  2000              MOVS     r0,#0
000042  9003              STR      r0,[sp,#0xc]
000044  2001              MOVS     r0,#1
000046  a902              ADD      r1,sp,#8
000048  9002              STR      r0,[sp,#8]
00004a  a803              ADD      r0,sp,#0xc
00004c  f7fffffe          BL       _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
;;;91     	rcs_enable(1, 1);
000050  2001              MOVS     r0,#1
000052  9002              STR      r0,[sp,#8]
000054  a903              ADD      r1,sp,#0xc
000056  9003              STR      r0,[sp,#0xc]
000058  a802              ADD      r0,sp,#8
00005a  f7fffffe          BL       _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
;;;92     }
00005e  bd1f              POP      {r0-r4,pc}
;;;93     
                          ENDP

                  |L7.96|
                          DCD      g_rcsMinPwm
                  |L7.100|
                          DCD      g_rcsPwmGain
                  |L7.104|
                          DCD      g_module
                  |L7.108|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10rcs_enableRKhS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_enableRKhS0_||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z11rcs_setFreqRKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11rcs_setFreqRKt||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z10rcs_setPosRKhRKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_setPosRKhRKt||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z13rcs_setLimitsRKhRKsS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13rcs_setLimitsRKhRKsS2_||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z14rcs_loadParamsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14rcs_loadParamsv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._Z8rcs_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8rcs_initv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._Z10rcs_getPosRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_getPosRKh||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000008  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0xa0
                          DCD      _Z10rcs_getPosRKh ; rcs_getPos(const unsigned char&)
000020  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0x13c
                          DCD      _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
000038  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x148
                          DCD      ||.conststring||+0x1dc
                          DCD      _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
000050  01020200          DCB      0x01,0x02,0x02,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1ec
                          DCD      ||.conststring||+0x33c
                          DCD      _Z11rcs_setFreqRKt ; rcs_setFreq(const unsigned short&)
000068  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x348
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  7263735f          DCB      "rcs_setPos",0
000004  73657450
000008  6f7300  
00000b  00                DCB      0
00000c  53657420          DCB      "Set RC-servo position@p channel value either 0 or 1 (2 "
000010  52432d73
000014  6572766f
000018  20706f73
00001c  6974696f
000020  6e407020
000024  6368616e
000028  6e656c20
00002c  76616c75
000030  65206569
000034  74686572
000038  2030206f
00003c  72203120
000040  283220  
000043  706f7373          DCB      "possible channels)@p pos position value ranging from 0-"
000047  69626c65
00004b  20636861
00004f  6e6e656c
000053  73294070
000057  20706f73
00005b  20706f73
00005f  6974696f
000063  6e207661
000067  6c756520
00006b  72616e67
00006f  696e6720
000073  66726f6d
000077  20302d  
00007a  39393940          DCB      "999@r 0 if success, negative if error",0
00007e  72203020
000082  69662073
000086  75636365
00008a  73732c20
00008e  6e656761
000092  74697665
000096  20696620
00009a  6572726f
00009e  7200    
0000a0  7263735f          DCB      "rcs_getPos",0
0000a4  67657450
0000a8  6f7300  
0000ab  00                DCB      0
0000ac  47657420          DCB      "Get RC-servo position@p channel value either 0 or 1 (2 "
0000b0  52432d73
0000b4  6572766f
0000b8  20706f73
0000bc  6974696f
0000c0  6e407020
0000c4  6368616e
0000c8  6e656c20
0000cc  76616c75
0000d0  65206569
0000d4  74686572
0000d8  2030206f
0000dc  72203120
0000e0  283220  
0000e3  706f7373          DCB      "possible channels)@r position value of the channel rang"
0000e7  69626c65
0000eb  20636861
0000ef  6e6e656c
0000f3  73294072
0000f7  20706f73
0000fb  6974696f
0000ff  6e207661
000103  6c756520
000107  6f662074
00010b  68652063
00010f  68616e6e
000113  656c2072
000117  616e67  
00011a  696e6720          DCB      "ing from 0-999, negative if error",0
00011e  66726f6d
000122  20302d39
000126  39392c20
00012a  6e656761
00012e  74697665
000132  20696620
000136  6572726f
00013a  7200    
00013c  7263735f          DCB      "rcs_enable",0
000140  656e6162
000144  6c6500  
000147  00                DCB      0
000148  456e6162          DCB      "Enable/disable RC-servo@p channel value either 0 or 1 ("
00014c  6c652f64
000150  69736162
000154  6c652052
000158  432d7365
00015c  72766f40
000160  70206368
000164  616e6e65
000168  6c207661
00016c  6c756520
000170  65697468
000174  65722030
000178  206f7220
00017c  312028  
00017f  3220706f          DCB      "2 possible channels)@p enable 0=disable, nonzero=enable"
000183  73736962
000187  6c652063
00018b  68616e6e
00018f  656c7329
000193  40702065
000197  6e61626c
00019b  6520303d
00019f  64697361
0001a3  626c652c
0001a7  206e6f6e
0001ab  7a65726f
0001af  3d656e61
0001b3  626c65  
0001b6  40722030          DCB      "@r 0 if success, negative if error",0
0001ba  20696620
0001be  73756363
0001c2  6573732c
0001c6  206e6567
0001ca  61746976
0001ce  65206966
0001d2  20657272
0001d6  6f7200  
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
0001dc  7263735f          DCB      "rcs_setLimits",0
0001e0  7365744c
0001e4  696d6974
0001e8  7300    
0001ea  00                DCB      0
0001eb  00                DCB      0
0001ec  53657420          DCB      "Set upper and lower limits of servo travel@p channel va"
0001f0  75707065
0001f4  7220616e
0001f8  64206c6f
0001fc  77657220
000200  6c696d69
000204  7473206f
000208  66207365
00020c  72766f20
000210  74726176
000214  656c4070
000218  20636861
00021c  6e6e656c
000220  207661  
000223  6c756520          DCB      "lue either 0 or 1 (2 possible channels)@p lower value b"
000227  65697468
00022b  65722030
00022f  206f7220
000233  31202832
000237  20706f73
00023b  7369626c
00023f  65206368
000243  616e6e65
000247  6c732940
00024b  70206c6f
00024f  77657220
000253  76616c75
000257  652062  
00025a  65747765          DCB      "etween -500 and 500. 0 is default, -500 will extend the"
00025e  656e202d
000262  35303020
000266  616e6420
00026a  3530302e
00026e  20302069
000272  73206465
000276  6661756c
00027a  742c202d
00027e  35303020
000282  77696c6c
000286  20657874
00028a  656e6420
00028e  746865  
000291  206c6f77          DCB      " lower limit the greatest amount.@p upper value between"
000295  6572206c
000299  696d6974
00029d  20746865
0002a1  20677265
0002a5  61746573
0002a9  7420616d
0002ad  6f756e74
0002b1  2e407020
0002b5  75707065
0002b9  72207661
0002bd  6c756520
0002c1  62657477
0002c5  65656e  
0002c8  202d3530          DCB      " -500 and 500. 0 is default, 500 will extend the upper "
0002cc  3020616e
0002d0  64203530
0002d4  302e2030
0002d8  20697320
0002dc  64656661
0002e0  756c742c
0002e4  20353030
0002e8  2077696c
0002ec  6c206578
0002f0  74656e64
0002f4  20746865
0002f8  20757070
0002fc  657220  
0002ff  6c696d69          DCB      "limit the greatest amount.@r 0 if success, negative if "
000303  74207468
000307  65206772
00030b  65617465
00030f  73742061
000313  6d6f756e
000317  742e4072
00031b  20302069
00031f  66207375
000323  63636573
000327  732c206e
00032b  65676174
00032f  69766520
000333  696620  
000336  6572726f          DCB      "error",0
00033a  7200    
00033c  7263735f          DCB      "rcs_setFreq",0
000340  73657446
000344  72657100
000348  53657420          DCB      "Set the PWM frequency@p frequency value between 20 and "
00034c  74686520
000350  50574d20
000354  66726571
000358  75656e63
00035c  79407020
000360  66726571
000364  75656e63
000368  79207661
00036c  6c756520
000370  62657477
000374  65656e20
000378  32302061
00037c  6e6420  
00037f  3330302e          DCB      "300. 50 is default.@r 0 if success, negative if error",0
000383  20353020
000387  69732064
00038b  65666175
00038f  6c742e40
000393  72203020
000397  69662073
00039b  75636365
00039f  73732c20
0003a3  6e656761
0003a7  74697665
0003ab  20696620
0003af  6572726f
0003b3  7200    
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
0003b8  40632053          DCB      "@c Servo Sets the lower limit of travel for servo 0 (de"
0003bc  6572766f
0003c0  20536574
0003c4  73207468
0003c8  65206c6f
0003cc  77657220
0003d0  6c696d69
0003d4  74206f66
0003d8  20747261
0003dc  76656c20
0003e0  666f7220
0003e4  73657276
0003e8  6f203020
0003ec  286465  
0003ef  6661756c          DCB      "fault -200)",0
0003f3  74202d32
0003f7  30302900
0003fb  00                DCB      0
0003fc  40632053          DCB      "@c Servo Sets the upper limit of travel for servo 0 (de"
000400  6572766f
000404  20536574
000408  73207468
00040c  65207570
000410  70657220
000414  6c696d69
000418  74206f66
00041c  20747261
000420  76656c20
000424  666f7220
000428  73657276
00042c  6f203020
000430  286465  
000433  6661756c          DCB      "fault 200)",0
000437  74203230
00043b  302900  
00043e  00                DCB      0
00043f  00                DCB      0
000440  40632053          DCB      "@c Servo Sets the lower limit of travel for servo 1 (de"
000444  6572766f
000448  20536574
00044c  73207468
000450  65206c6f
000454  77657220
000458  6c696d69
00045c  74206f66
000460  20747261
000464  76656c20
000468  666f7220
00046c  73657276
000470  6f203120
000474  286465  
000477  6661756c          DCB      "fault -200)",0
00047b  74202d32
00047f  30302900
000483  00                DCB      0
000484  40632053          DCB      "@c Servo Sets the upper limit of travel for servo 1 (de"
000488  6572766f
00048c  20536574
000490  73207468
000494  65207570
000498  70657220
00049c  6c696d69
0004a0  74206f66
0004a4  20747261
0004a8  76656c20
0004ac  666f7220
0004b0  73657276
0004b4  6f203120
0004b8  286465  
0004bb  6661756c          DCB      "fault 200)",0
0004bf  74203230
0004c3  302900  

                          AREA ||.data||, DATA, ALIGN=1

                  g_rcsPos
                          DCDU     0x00000000
                  g_rcsMinPwm
                          DCDU     0x00000000
                  g_rcsPwmGain
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "rcservo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rcservo_cpp_8e8e75b9___Z7__REV16j|
#line 130 ".\\core_cmInstr.h"
|__asm___11_rcservo_cpp_8e8e75b9___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rcservo_cpp_8e8e75b9___Z7__REVSHi|
#line 144
|__asm___11_rcservo_cpp_8e8e75b9___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
