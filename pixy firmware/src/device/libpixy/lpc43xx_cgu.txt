; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\lpc43xx_cgu.o --asm_dir=.\ --list_dir=.\ --depend=.\lpc43xx_cgu.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\lpc43xx_cgu.crf lpc43xx_cgu.c]
                          THUMB

                          AREA ||i.CGU_ConfigPWR||, CODE, READONLY, ALIGN=2

                  CGU_ConfigPWR PROC
;;;265     **********************************************************************/
;;;266    uint32_t CGU_ConfigPWR (CGU_PERIPHERAL_T PPType,  FunctionalState en){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;267    	if(PPType >= CGU_PERIPHERAL_WWDT && PPType <= CGU_PERIPHERAL_ADC0)
000006  2c26              CMP      r4,#0x26
000008  db03              BLT      |L1.18|
00000a  2c00              CMP      r4,#0
00000c  dc01              BGT      |L1.18|
;;;268    		return CGU_ERROR_INVALID_PARAM;
00000e  2004              MOVS     r0,#4
                  |L1.16|
;;;269    	if(en == DISABLE){/* Going to disable clock */
;;;270    		/*Get Reg branch status */
;;;271    		if(CGU_PERIPHERAL_Info[PPType].RegBranchOffset!= 0 &&
;;;272    				CGU_REG_BRANCH_STATUS(PPType) & 1){
;;;273    			CGU_REG_BRANCH_CTRL(PPType) &= ~1; /* Disable branch clock */
;;;274    			while(CGU_REG_BRANCH_STATUS(PPType) & 1);
;;;275    		}
;;;276    		/* GetBase Status*/
;;;277    		if((CGU_PERIPHERAL_Info[PPType].RegBaseEntity!=CGU_ENTITY_NONE) &&
;;;278    			CGU_GetBaseStatus((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity) == 0){
;;;279    			/* Disable Base */
;;;280    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity,0);
;;;281    		}
;;;282    
;;;283    		/* Same for Peripheral */
;;;284    		if((CGU_PERIPHERAL_Info[PPType].PerBranchOffset!= 0) && (CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
;;;285    			CGU_PER_BRANCH_CTRL(PPType) &= ~1; /* Disable branch clock */
;;;286    			while(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK);
;;;287    		}
;;;288    		/* GetBase Status*/
;;;289    		if((CGU_PERIPHERAL_Info[PPType].PerBaseEntity!=CGU_ENTITY_NONE) &&
;;;290    			CGU_GetBaseStatus((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity) == 0){
;;;291    			/* Disable Base */
;;;292    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity,0);
;;;293    		}
;;;294    	}else{
;;;295    		/* enable */
;;;296    		/* GetBase Status*/
;;;297    		if((CGU_PERIPHERAL_Info[PPType].RegBaseEntity!=CGU_ENTITY_NONE) && CGU_REG_BASE_CTRL(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK){
;;;298    			/* Enable Base */
;;;299    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity, 1);
;;;300    		}
;;;301    		/*Get Reg branch status */
;;;302    		if((CGU_PERIPHERAL_Info[PPType].RegBranchOffset!= 0) && !(CGU_REG_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
;;;303    			CGU_REG_BRANCH_CTRL(PPType) |= 1; /* Enable branch clock */
;;;304    			while(!(CGU_REG_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK));
;;;305    		}
;;;306    
;;;307    		/* Same for Peripheral */
;;;308    		/* GetBase Status*/
;;;309    		if((CGU_PERIPHERAL_Info[PPType].PerBaseEntity != CGU_ENTITY_NONE) &&
;;;310    				(CGU_PER_BASE_CTRL(PPType) & 1)){
;;;311    			/* Enable Base */
;;;312    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity, 1);
;;;313    		}
;;;314    		/*Get Reg branch status */
;;;315    		if((CGU_PERIPHERAL_Info[PPType].PerBranchOffset!= 0) && !(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
;;;316    			CGU_PER_BRANCH_CTRL(PPType) |= 1; /* Enable branch clock */
;;;317    			while(!(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK));
;;;318    		}
;;;319    
;;;320    	}
;;;321    
;;;322    	if(CGU_PERIPHERAL_Info[PPType].next){
;;;323    		return CGU_ConfigPWR((CGU_PERIPHERAL_T)CGU_PERIPHERAL_Info[PPType].next, en);
;;;324    	}
;;;325    	return CGU_ERROR_SUCCESS;
;;;326    }
000010  bd70              POP      {r4-r6,pc}
                  |L1.18|
000012  2d00              CMP      r5,#0                 ;269
000014  d17e              BNE      |L1.276|
000016  eb040084          ADD      r0,r4,r4,LSL #2       ;271
00001a  49a3              LDR      r1,|L1.680|
00001c  eb010040          ADD      r0,r1,r0,LSL #1       ;271
000020  8840              LDRH     r0,[r0,#2]            ;271
000022  b350              CBZ      r0,|L1.122|
000024  eb040084          ADD      r0,r4,r4,LSL #2       ;272
000028  eb010040          ADD      r0,r1,r0,LSL #1       ;272
00002c  8840              LDRH     r0,[r0,#2]            ;272
00002e  499f              LDR      r1,|L1.684|
000030  4408              ADD      r0,r0,r1              ;272
000032  7900              LDRB     r0,[r0,#4]            ;272
000034  f0000001          AND      r0,r0,#1              ;272
000038  b1f8              CBZ      r0,|L1.122|
00003a  eb040084          ADD      r0,r4,r4,LSL #2       ;273
00003e  499a              LDR      r1,|L1.680|
000040  eb010040          ADD      r0,r1,r0,LSL #1       ;273
000044  8840              LDRH     r0,[r0,#2]            ;273
000046  4999              LDR      r1,|L1.684|
000048  5840              LDR      r0,[r0,r1]            ;273
00004a  f0200001          BIC      r0,r0,#1              ;273
00004e  eb040184          ADD      r1,r4,r4,LSL #2       ;273
000052  4a95              LDR      r2,|L1.680|
000054  eb020141          ADD      r1,r2,r1,LSL #1       ;273
000058  8849              LDRH     r1,[r1,#2]            ;273
00005a  4a94              LDR      r2,|L1.684|
00005c  5088              STR      r0,[r1,r2]            ;273
00005e  bf00              NOP                            ;274
                  |L1.96|
000060  eb040084          ADD      r0,r4,r4,LSL #2       ;274
000064  4990              LDR      r1,|L1.680|
000066  eb010040          ADD      r0,r1,r0,LSL #1       ;274
00006a  8840              LDRH     r0,[r0,#2]            ;274
00006c  498f              LDR      r1,|L1.684|
00006e  4408              ADD      r0,r0,r1              ;274
000070  7900              LDRB     r0,[r0,#4]            ;274
000072  f0000001          AND      r0,r0,#1              ;274
000076  2800              CMP      r0,#0                 ;274
000078  d1f2              BNE      |L1.96|
                  |L1.122|
00007a  eb040084          ADD      r0,r4,r4,LSL #2       ;277
00007e  498a              LDR      r1,|L1.680|
000080  f8110010          LDRB     r0,[r1,r0,LSL #1]     ;277
000084  282d              CMP      r0,#0x2d              ;277
000086  d00f              BEQ      |L1.168|
000088  eb040184          ADD      r1,r4,r4,LSL #2       ;278
00008c  4a86              LDR      r2,|L1.680|
00008e  f8120011          LDRB     r0,[r2,r1,LSL #1]     ;278
000092  f7fffffe          BL       CGU_GetBaseStatus
000096  b938              CBNZ     r0,|L1.168|
000098  eb040184          ADD      r1,r4,r4,LSL #2       ;280
00009c  4a82              LDR      r2,|L1.680|
00009e  f8120011          LDRB     r0,[r2,r1,LSL #1]     ;280
0000a2  2100              MOVS     r1,#0                 ;280
0000a4  f7fffffe          BL       CGU_EnableEntity
                  |L1.168|
0000a8  eb040084          ADD      r0,r4,r4,LSL #2       ;284
0000ac  497e              LDR      r1,|L1.680|
0000ae  eb010040          ADD      r0,r1,r0,LSL #1       ;284
0000b2  88c0              LDRH     r0,[r0,#6]            ;284
0000b4  b350              CBZ      r0,|L1.268|
0000b6  eb040084          ADD      r0,r4,r4,LSL #2       ;284
0000ba  eb010040          ADD      r0,r1,r0,LSL #1       ;284
0000be  88c0              LDRH     r0,[r0,#6]            ;284
0000c0  497a              LDR      r1,|L1.684|
0000c2  4408              ADD      r0,r0,r1              ;284
0000c4  7900              LDRB     r0,[r0,#4]            ;284
0000c6  f0000001          AND      r0,r0,#1              ;284
0000ca  b1f8              CBZ      r0,|L1.268|
0000cc  eb040084          ADD      r0,r4,r4,LSL #2       ;285
0000d0  4975              LDR      r1,|L1.680|
0000d2  eb010040          ADD      r0,r1,r0,LSL #1       ;285
0000d6  88c0              LDRH     r0,[r0,#6]            ;285
0000d8  4974              LDR      r1,|L1.684|
0000da  5840              LDR      r0,[r0,r1]            ;285
0000dc  f0200001          BIC      r0,r0,#1              ;285
0000e0  eb040184          ADD      r1,r4,r4,LSL #2       ;285
0000e4  4a70              LDR      r2,|L1.680|
0000e6  eb020141          ADD      r1,r2,r1,LSL #1       ;285
0000ea  88c9              LDRH     r1,[r1,#6]            ;285
0000ec  4a6f              LDR      r2,|L1.684|
0000ee  5088              STR      r0,[r1,r2]            ;285
0000f0  bf00              NOP                            ;286
                  |L1.242|
0000f2  eb040084          ADD      r0,r4,r4,LSL #2       ;286
0000f6  496c              LDR      r1,|L1.680|
0000f8  eb010040          ADD      r0,r1,r0,LSL #1       ;286
0000fc  88c0              LDRH     r0,[r0,#6]            ;286
0000fe  496b              LDR      r1,|L1.684|
000100  4408              ADD      r0,r0,r1              ;286
000102  7900              LDRB     r0,[r0,#4]            ;286
000104  f0000001          AND      r0,r0,#1              ;286
000108  2800              CMP      r0,#0                 ;286
00010a  d1f2              BNE      |L1.242|
                  |L1.268|
00010c  eb040084          ADD      r0,r4,r4,LSL #2       ;289
000110  4965              LDR      r1,|L1.680|
000112  e000              B        |L1.278|
                  |L1.276|
000114  e018              B        |L1.328|
                  |L1.278|
000116  eb010040          ADD      r0,r1,r0,LSL #1       ;289
00011a  7900              LDRB     r0,[r0,#4]            ;289
00011c  282d              CMP      r0,#0x2d              ;289
00011e  d012              BEQ      |L1.326|
000120  eb040184          ADD      r1,r4,r4,LSL #2       ;290
000124  4a60              LDR      r2,|L1.680|
000126  eb020141          ADD      r1,r2,r1,LSL #1       ;290
00012a  7908              LDRB     r0,[r1,#4]            ;290
00012c  f7fffffe          BL       CGU_GetBaseStatus
000130  2800              CMP      r0,#0                 ;290
000132  d108              BNE      |L1.326|
000134  eb040184          ADD      r1,r4,r4,LSL #2       ;292
000138  4a5b              LDR      r2,|L1.680|
00013a  eb020141          ADD      r1,r2,r1,LSL #1       ;292
00013e  7908              LDRB     r0,[r1,#4]            ;292
000140  2100              MOVS     r1,#0                 ;292
000142  f7fffffe          BL       CGU_EnableEntity
                  |L1.326|
000146  e09c              B        |L1.642|
                  |L1.328|
000148  eb040084          ADD      r0,r4,r4,LSL #2       ;297
00014c  4956              LDR      r1,|L1.680|
00014e  f8110010          LDRB     r0,[r1,r0,LSL #1]     ;297
000152  282d              CMP      r0,#0x2d              ;297
000154  d013              BEQ      |L1.382|
000156  eb040084          ADD      r0,r4,r4,LSL #2       ;297
00015a  f8110010          LDRB     r0,[r1,r0,LSL #1]     ;297
00015e  4954              LDR      r1,|L1.688|
000160  f9310010          LDRSH    r0,[r1,r0,LSL #1]     ;297
000164  4951              LDR      r1,|L1.684|
000166  5c40              LDRB     r0,[r0,r1]            ;297
000168  f0000001          AND      r0,r0,#1              ;297
00016c  b138              CBZ      r0,|L1.382|
00016e  eb040184          ADD      r1,r4,r4,LSL #2       ;299
000172  4a4d              LDR      r2,|L1.680|
000174  f8120011          LDRB     r0,[r2,r1,LSL #1]     ;299
000178  2101              MOVS     r1,#1                 ;299
00017a  f7fffffe          BL       CGU_EnableEntity
                  |L1.382|
00017e  eb040084          ADD      r0,r4,r4,LSL #2       ;302
000182  4949              LDR      r1,|L1.680|
000184  eb010040          ADD      r0,r1,r0,LSL #1       ;302
000188  8840              LDRH     r0,[r0,#2]            ;302
00018a  b350              CBZ      r0,|L1.482|
00018c  eb040084          ADD      r0,r4,r4,LSL #2       ;302
000190  eb010040          ADD      r0,r1,r0,LSL #1       ;302
000194  8840              LDRH     r0,[r0,#2]            ;302
000196  4945              LDR      r1,|L1.684|
000198  4408              ADD      r0,r0,r1              ;302
00019a  7900              LDRB     r0,[r0,#4]            ;302
00019c  f0000001          AND      r0,r0,#1              ;302
0001a0  b9f8              CBNZ     r0,|L1.482|
0001a2  eb040084          ADD      r0,r4,r4,LSL #2       ;303
0001a6  4940              LDR      r1,|L1.680|
0001a8  eb010040          ADD      r0,r1,r0,LSL #1       ;303
0001ac  8840              LDRH     r0,[r0,#2]            ;303
0001ae  493f              LDR      r1,|L1.684|
0001b0  5840              LDR      r0,[r0,r1]            ;303
0001b2  f0400001          ORR      r0,r0,#1              ;303
0001b6  eb040184          ADD      r1,r4,r4,LSL #2       ;303
0001ba  4a3b              LDR      r2,|L1.680|
0001bc  eb020141          ADD      r1,r2,r1,LSL #1       ;303
0001c0  8849              LDRH     r1,[r1,#2]            ;303
0001c2  4a3a              LDR      r2,|L1.684|
0001c4  5088              STR      r0,[r1,r2]            ;303
0001c6  bf00              NOP                            ;304
                  |L1.456|
0001c8  eb040084          ADD      r0,r4,r4,LSL #2       ;304
0001cc  4936              LDR      r1,|L1.680|
0001ce  eb010040          ADD      r0,r1,r0,LSL #1       ;304
0001d2  8840              LDRH     r0,[r0,#2]            ;304
0001d4  4935              LDR      r1,|L1.684|
0001d6  4408              ADD      r0,r0,r1              ;304
0001d8  7900              LDRB     r0,[r0,#4]            ;304
0001da  f0000001          AND      r0,r0,#1              ;304
0001de  2800              CMP      r0,#0                 ;304
0001e0  d0f2              BEQ      |L1.456|
                  |L1.482|
0001e2  eb040084          ADD      r0,r4,r4,LSL #2       ;309
0001e6  4930              LDR      r1,|L1.680|
0001e8  eb010040          ADD      r0,r1,r0,LSL #1       ;309
0001ec  7900              LDRB     r0,[r0,#4]            ;309
0001ee  282d              CMP      r0,#0x2d              ;309
0001f0  d015              BEQ      |L1.542|
0001f2  eb040084          ADD      r0,r4,r4,LSL #2       ;310
0001f6  eb010040          ADD      r0,r1,r0,LSL #1       ;310
0001fa  7900              LDRB     r0,[r0,#4]            ;310
0001fc  492c              LDR      r1,|L1.688|
0001fe  f9310010          LDRSH    r0,[r1,r0,LSL #1]     ;310
000202  492a              LDR      r1,|L1.684|
000204  5c40              LDRB     r0,[r0,r1]            ;310
000206  f0000001          AND      r0,r0,#1              ;310
00020a  b140              CBZ      r0,|L1.542|
00020c  eb040184          ADD      r1,r4,r4,LSL #2       ;312
000210  4a25              LDR      r2,|L1.680|
000212  eb020141          ADD      r1,r2,r1,LSL #1       ;312
000216  7908              LDRB     r0,[r1,#4]            ;312
000218  2101              MOVS     r1,#1                 ;312
00021a  f7fffffe          BL       CGU_EnableEntity
                  |L1.542|
00021e  eb040084          ADD      r0,r4,r4,LSL #2       ;315
000222  4921              LDR      r1,|L1.680|
000224  eb010040          ADD      r0,r1,r0,LSL #1       ;315
000228  88c0              LDRH     r0,[r0,#6]            ;315
00022a  b350              CBZ      r0,|L1.642|
00022c  eb040084          ADD      r0,r4,r4,LSL #2       ;315
000230  eb010040          ADD      r0,r1,r0,LSL #1       ;315
000234  88c0              LDRH     r0,[r0,#6]            ;315
000236  491d              LDR      r1,|L1.684|
000238  4408              ADD      r0,r0,r1              ;315
00023a  7900              LDRB     r0,[r0,#4]            ;315
00023c  f0000001          AND      r0,r0,#1              ;315
000240  b9f8              CBNZ     r0,|L1.642|
000242  eb040084          ADD      r0,r4,r4,LSL #2       ;316
000246  4918              LDR      r1,|L1.680|
000248  eb010040          ADD      r0,r1,r0,LSL #1       ;316
00024c  88c0              LDRH     r0,[r0,#6]            ;316
00024e  4917              LDR      r1,|L1.684|
000250  5840              LDR      r0,[r0,r1]            ;316
000252  f0400001          ORR      r0,r0,#1              ;316
000256  eb040184          ADD      r1,r4,r4,LSL #2       ;316
00025a  4a13              LDR      r2,|L1.680|
00025c  eb020141          ADD      r1,r2,r1,LSL #1       ;316
000260  88c9              LDRH     r1,[r1,#6]            ;316
000262  4a12              LDR      r2,|L1.684|
000264  5088              STR      r0,[r1,r2]            ;316
000266  bf00              NOP                            ;317
                  |L1.616|
000268  eb040084          ADD      r0,r4,r4,LSL #2       ;317
00026c  490e              LDR      r1,|L1.680|
00026e  eb010040          ADD      r0,r1,r0,LSL #1       ;317
000272  88c0              LDRH     r0,[r0,#6]            ;317
000274  490d              LDR      r1,|L1.684|
000276  4408              ADD      r0,r0,r1              ;317
000278  7900              LDRB     r0,[r0,#4]            ;317
00027a  f0000001          AND      r0,r0,#1              ;317
00027e  2800              CMP      r0,#0                 ;317
000280  d0f2              BEQ      |L1.616|
                  |L1.642|
000282  eb040084          ADD      r0,r4,r4,LSL #2       ;322
000286  4908              LDR      r1,|L1.680|
000288  eb010040          ADD      r0,r1,r0,LSL #1       ;322
00028c  7a00              LDRB     r0,[r0,#8]            ;322
00028e  b148              CBZ      r0,|L1.676|
000290  eb040184          ADD      r1,r4,r4,LSL #2       ;323
000294  4a04              LDR      r2,|L1.680|
000296  eb020141          ADD      r1,r2,r1,LSL #1       ;323
00029a  7a08              LDRB     r0,[r1,#8]            ;323
00029c  4629              MOV      r1,r5                 ;323
00029e  f7fffffe          BL       CGU_ConfigPWR
0002a2  e6b5              B        |L1.16|
                  |L1.676|
0002a4  2000              MOVS     r0,#0                 ;325
0002a6  e6b3              B        |L1.16|
;;;327    
                          ENDP

                  |L1.680|
                          DCD      CGU_PERIPHERAL_Info
                  |L1.684|
                          DCD      0x40050000
                  |L1.688|
                          DCD      CGU_Entity_ControlReg_Offset

                          AREA ||i.CGU_EnableEntity||, CODE, READONLY, ALIGN=2

                  CGU_EnableEntity PROC
;;;523     **********************************************************************/
;;;524    uint32_t CGU_EnableEntity(CGU_ENTITY_T ClockEntity, uint32_t en){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;525    	int32_t RegOffset;
;;;526    	int32_t i;
;;;527    	if(ClockEntity == CGU_CLKSRC_32KHZ_OSC){
000008  b9f4              CBNZ     r4,|L2.72|
;;;528    		if(en){
00000a  b15f              CBZ      r7,|L2.36|
;;;529    			LPC_CREG->CREG0 &= ~((1<<3)|(1<<2));
00000c  483d              LDR      r0,|L2.260|
00000e  6840              LDR      r0,[r0,#4]
000010  f020000c          BIC      r0,r0,#0xc
000014  493b              LDR      r1,|L2.260|
000016  6048              STR      r0,[r1,#4]
;;;530    			LPC_CREG->CREG0 |= (1<<1)|(1<<0);
000018  4608              MOV      r0,r1
00001a  6840              LDR      r0,[r0,#4]
00001c  f0400003          ORR      r0,r0,#3
000020  6048              STR      r0,[r1,#4]
000022  e00a              B        |L2.58|
                  |L2.36|
;;;531    		}else{
;;;532    			LPC_CREG->CREG0 &= ~((1<<1)|(1<<0));
000024  4837              LDR      r0,|L2.260|
000026  6840              LDR      r0,[r0,#4]
000028  f0200003          BIC      r0,r0,#3
00002c  4935              LDR      r1,|L2.260|
00002e  6048              STR      r0,[r1,#4]
;;;533    			LPC_CREG->CREG0 |= (1<<3);
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f0400008          ORR      r0,r0,#8
000038  6048              STR      r0,[r1,#4]
                  |L2.58|
;;;534    		}
;;;535    		for(i = 0;i<1000000;i++);
00003a  2600              MOVS     r6,#0
00003c  e000              B        |L2.64|
                  |L2.62|
00003e  1c76              ADDS     r6,r6,#1
                  |L2.64|
000040  4831              LDR      r0,|L2.264|
000042  4286              CMP      r6,r0
000044  dbfb              BLT      |L2.62|
000046  e05b              B        |L2.256|
                  |L2.72|
;;;536    
;;;537    	}else if(ClockEntity == CGU_CLKSRC_ENET_RX_CLK){
000048  2c02              CMP      r4,#2
00004a  d106              BNE      |L2.90|
;;;538    		scu_pinmux(0xC ,0 , MD_PLN, FUNC3);
00004c  2303              MOVS     r3,#3
00004e  2210              MOVS     r2,#0x10
000050  2100              MOVS     r1,#0
000052  200c              MOVS     r0,#0xc
000054  f7fffffe          BL       scu_pinmux
000058  e052              B        |L2.256|
                  |L2.90|
;;;539    
;;;540    	}else if(ClockEntity == CGU_CLKSRC_ENET_TX_CLK){
00005a  2c03              CMP      r4,#3
00005c  d106              BNE      |L2.108|
;;;541    		scu_pinmux(0x1 ,19 , MD_PLN, FUNC0);
00005e  2300              MOVS     r3,#0
000060  2210              MOVS     r2,#0x10
000062  2113              MOVS     r1,#0x13
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       scu_pinmux
00006a  e049              B        |L2.256|
                  |L2.108|
;;;542    
;;;543    	}else if(ClockEntity == CGU_CLKSRC_GP_CLKIN){
00006c  2c04              CMP      r4,#4
00006e  d047              BEQ      |L2.256|
;;;544    
;;;545    	}else if(ClockEntity == CGU_CLKSRC_TCK){
000070  2c05              CMP      r4,#5
000072  d045              BEQ      |L2.256|
;;;546    
;;;547    	}else if(ClockEntity == CGU_CLKSRC_XTAL_OSC){
000074  2c06              CMP      r4,#6
000076  d114              BNE      |L2.162|
;;;548    		if(!en)
000078  b937              CBNZ     r7,|L2.136|
;;;549    			LPC_CGU->XTAL_OSC_CTRL |= CGU_CTRL_EN_MASK;
00007a  4824              LDR      r0,|L2.268|
00007c  6980              LDR      r0,[r0,#0x18]
00007e  f0400001          ORR      r0,r0,#1
000082  4922              LDR      r1,|L2.268|
000084  6188              STR      r0,[r1,#0x18]
000086  e005              B        |L2.148|
                  |L2.136|
;;;550    		else
;;;551    			LPC_CGU->XTAL_OSC_CTRL &= ~CGU_CTRL_EN_MASK;
000088  4820              LDR      r0,|L2.268|
00008a  6980              LDR      r0,[r0,#0x18]
00008c  f0200001          BIC      r0,r0,#1
000090  491e              LDR      r1,|L2.268|
000092  6188              STR      r0,[r1,#0x18]
                  |L2.148|
;;;552    		/*Delay for stable clock*/
;;;553    		for(i = 0;i<1000000;i++);
000094  2600              MOVS     r6,#0
000096  e000              B        |L2.154|
                  |L2.152|
000098  1c76              ADDS     r6,r6,#1
                  |L2.154|
00009a  481b              LDR      r0,|L2.264|
00009c  4286              CMP      r6,r0
00009e  dbfb              BLT      |L2.152|
0000a0  e02e              B        |L2.256|
                  |L2.162|
;;;554    
;;;555    	}else{
;;;556    		RegOffset = CGU_Entity_ControlReg_Offset[ClockEntity];
0000a2  481b              LDR      r0,|L2.272|
0000a4  f9305014          LDRSH    r5,[r0,r4,LSL #1]
;;;557    		if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
0000a8  1c68              ADDS     r0,r5,#1
0000aa  b910              CBNZ     r0,|L2.178|
0000ac  2002              MOVS     r0,#2
                  |L2.174|
;;;558    		if(!en){
;;;559    			CGU_ADDRESS32(CGU_CGU_ADDR,RegOffset) |= CGU_CTRL_EN_MASK;
;;;560    		}else{
;;;561    			CGU_ADDRESS32(CGU_CGU_ADDR,RegOffset) &= ~CGU_CTRL_EN_MASK;
;;;562    			/*if PLL is selected check if it is locked */
;;;563    			if(ClockEntity == CGU_CLKSRC_PLL0){
;;;564    				while((LPC_CGU->PLL0USB_STAT&1) == 0x0);
;;;565    			}
;;;566    			if(ClockEntity == CGU_CLKSRC_PLL1){
;;;567    				while((LPC_CGU->PLL1_STAT&1) == 0x0);
;;;568    				/*post check lock status */
;;;569    				if(!(LPC_CGU->PLL1_STAT&1))
;;;570    					while(1);
;;;571    			}
;;;572    		}
;;;573    	}
;;;574    	return CGU_ERROR_SUCCESS;
;;;575    }
0000ae  e8bd81f0          POP      {r4-r8,pc}
                  |L2.178|
0000b2  b937              CBNZ     r7,|L2.194|
0000b4  4815              LDR      r0,|L2.268|
0000b6  5828              LDR      r0,[r5,r0]            ;559
0000b8  f0400001          ORR      r0,r0,#1              ;559
0000bc  4913              LDR      r1,|L2.268|
0000be  5068              STR      r0,[r5,r1]            ;559
0000c0  e01e              B        |L2.256|
                  |L2.194|
0000c2  4812              LDR      r0,|L2.268|
0000c4  5828              LDR      r0,[r5,r0]            ;561
0000c6  f0200001          BIC      r0,r0,#1              ;561
0000ca  4910              LDR      r1,|L2.268|
0000cc  5068              STR      r0,[r5,r1]            ;561
0000ce  2c07              CMP      r4,#7                 ;563
0000d0  d106              BNE      |L2.224|
0000d2  bf00              NOP                            ;564
                  |L2.212|
0000d4  480d              LDR      r0,|L2.268|
0000d6  69c0              LDR      r0,[r0,#0x1c]         ;564
0000d8  f0000001          AND      r0,r0,#1              ;564
0000dc  2800              CMP      r0,#0                 ;564
0000de  d0f9              BEQ      |L2.212|
                  |L2.224|
0000e0  2c09              CMP      r4,#9                 ;566
0000e2  d10d              BNE      |L2.256|
0000e4  bf00              NOP                            ;567
                  |L2.230|
0000e6  4809              LDR      r0,|L2.268|
0000e8  6c00              LDR      r0,[r0,#0x40]         ;567
0000ea  f0000001          AND      r0,r0,#1              ;567
0000ee  2800              CMP      r0,#0                 ;567
0000f0  d0f9              BEQ      |L2.230|
0000f2  4806              LDR      r0,|L2.268|
0000f4  6c00              LDR      r0,[r0,#0x40]         ;569
0000f6  f0000001          AND      r0,r0,#1              ;569
0000fa  b908              CBNZ     r0,|L2.256|
0000fc  bf00              NOP                            ;570
                  |L2.254|
0000fe  e7fe              B        |L2.254|
                  |L2.256|
000100  2000              MOVS     r0,#0                 ;574
000102  e7d4              B        |L2.174|
;;;576    
                          ENDP

                  |L2.260|
                          DCD      0x40043000
                  |L2.264|
                          DCD      0x000f4240
                  |L2.268|
                          DCD      0x40050000
                  |L2.272|
                          DCD      CGU_Entity_ControlReg_Offset

                          AREA ||i.CGU_EntityConnect||, CODE, READONLY, ALIGN=2

                  CGU_EntityConnect PROC
;;;626    /* Connect one entity into clock source */
;;;627    uint32_t CGU_EntityConnect(CGU_ENTITY_T ClockSource, CGU_ENTITY_T ClockEntity){
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
;;;628    	int32_t RegOffset;
;;;629    	uint32_t tempReg;
;;;630    
;;;631    	if(ClockSource > CGU_CLKSRC_IDIVE)
000004  2b10              CMP      r3,#0x10
000006  dd01              BLE      |L3.12|
;;;632    		return CGU_ERROR_INVALID_CLOCK_SOURCE;
000008  2003              MOVS     r0,#3
                  |L3.10|
;;;633    
;;;634    	if(ClockEntity >= CGU_CLKSRC_PLL0 && ClockEntity <= CGU_BASE_CLKOUT){
;;;635    		if(CGU_ConnectAlloc_Tbl[ClockSource][ClockEntity]){
;;;636    			RegOffset = CGU_Entity_ControlReg_Offset[ClockSource];
;;;637    			if(RegOffset != -1){
;;;638    				if(ClockEntity<=CGU_CLKSRC_IDIVE &&
;;;639    					ClockEntity>=CGU_CLKSRC_PLL0)
;;;640    				{
;;;641    					//RegOffset = (CGU_ADDRESS32(LPC_CGU,RegOffset)>>24)&0xF;
;;;642    					if(((CGU_ADDRESS32(LPC_CGU,RegOffset)>>24)& 0xF) == ClockEntity)
;;;643    						return CGU_ERROR_CONNECT_TOGETHER;
;;;644    				}
;;;645    			}
;;;646    			RegOffset = CGU_Entity_ControlReg_Offset[ClockEntity];
;;;647    			if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
;;;648    			tempReg = CGU_ADDRESS32(LPC_CGU,RegOffset);
;;;649    			tempReg &= ~CGU_CTRL_SRC_MASK;
;;;650    			tempReg |= ClockSource<<24 | CGU_CTRL_AUTOBLOCK_MASK;
;;;651    			CGU_ADDRESS32(LPC_CGU,RegOffset) = tempReg;
;;;652    			return CGU_ERROR_SUCCESS;
;;;653    		}else
;;;654    			return CGU_ERROR_INVALID_CLOCK_SOURCE;
;;;655    	}else
;;;656    		return CGU_ERROR_INVALID_ENTITY;
;;;657    }
00000a  bd30              POP      {r4,r5,pc}
                  |L3.12|
00000c  2907              CMP      r1,#7                 ;634
00000e  db2f              BLT      |L3.112|
000010  2925              CMP      r1,#0x25              ;634
000012  dc2d              BGT      |L3.112|
000014  ebc31003          RSB      r0,r3,r3,LSL #4       ;635
000018  eb000040          ADD      r0,r0,r0,LSL #1       ;635
00001c  4d15              LDR      r5,|L3.116|
00001e  4428              ADD      r0,r0,r5              ;635
000020  5c40              LDRB     r0,[r0,r1]            ;635
000022  b318              CBZ      r0,|L3.108|
000024  4814              LDR      r0,|L3.120|
000026  f9302013          LDRSH    r2,[r0,r3,LSL #1]     ;636
00002a  1c50              ADDS     r0,r2,#1              ;637
00002c  b158              CBZ      r0,|L3.70|
00002e  2910              CMP      r1,#0x10              ;638
000030  dc09              BGT      |L3.70|
000032  2907              CMP      r1,#7                 ;639
000034  db07              BLT      |L3.70|
000036  4811              LDR      r0,|L3.124|
000038  5810              LDR      r0,[r2,r0]            ;642
00003a  f3c06003          UBFX     r0,r0,#24,#4          ;642
00003e  4288              CMP      r0,r1                 ;642
000040  d101              BNE      |L3.70|
000042  2001              MOVS     r0,#1                 ;643
000044  e7e1              B        |L3.10|
                  |L3.70|
000046  480c              LDR      r0,|L3.120|
000048  f9302011          LDRSH    r2,[r0,r1,LSL #1]     ;646
00004c  1c50              ADDS     r0,r2,#1              ;647
00004e  b908              CBNZ     r0,|L3.84|
000050  2002              MOVS     r0,#2                 ;647
000052  e7da              B        |L3.10|
                  |L3.84|
000054  4809              LDR      r0,|L3.124|
000056  5814              LDR      r4,[r2,r0]            ;648
000058  f0246470          BIC      r4,r4,#0xf000000      ;649
00005c  14c0              ASRS     r0,r0,#19             ;650
00005e  ea406003          ORR      r0,r0,r3,LSL #24      ;650
000062  4304              ORRS     r4,r4,r0              ;650
000064  4805              LDR      r0,|L3.124|
000066  5014              STR      r4,[r2,r0]            ;651
000068  2000              MOVS     r0,#0                 ;652
00006a  e7ce              B        |L3.10|
                  |L3.108|
00006c  2003              MOVS     r0,#3                 ;654
00006e  e7cc              B        |L3.10|
                  |L3.112|
000070  2002              MOVS     r0,#2                 ;656
000072  e7ca              B        |L3.10|
;;;658    
                          ENDP

                  |L3.116|
                          DCD      CGU_ConnectAlloc_Tbl
                  |L3.120|
                          DCD      CGU_Entity_ControlReg_Offset
                  |L3.124|
                          DCD      0x40050000

                          AREA ||i.CGU_FrequencyMonitor||, CODE, READONLY, ALIGN=2

                  CGU_FrequencyMonitor PROC
;;;832     **********************************************************************/
;;;833    int CGU_FrequencyMonitor(CGU_ENTITY_T Clock, uint32_t *m, uint32_t *d){
000000  b5f0              PUSH     {r4-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;834    	uint32_t n,c,temp;
;;;835    	int i;
;;;836    
;;;837    	/* Maximum allow RCOUNT number */
;;;838    	c= 511;
000008  f24011ff          MOV      r1,#0x1ff
;;;839    	/* Check Source Clock Freq is larger or smaller */
;;;840    	LPC_CGU->FREQ_MON = (Clock<<24) | 1<<23 | c;
00000c  f44f0000          MOV      r0,#0x800000
000010  ea406004          ORR      r0,r0,r4,LSL #24
000014  4308              ORRS     r0,r0,r1
000016  f8dfc094          LDR      r12,|L4.172|
00001a  f8cc0014          STR      r0,[r12,#0x14]
;;;841    	while(LPC_CGU->FREQ_MON & (1 <<23));
00001e  bf00              NOP      
                  |L4.32|
000020  4822              LDR      r0,|L4.172|
000022  6940              LDR      r0,[r0,#0x14]
000024  f4000000          AND      r0,r0,#0x800000
000028  2800              CMP      r0,#0
00002a  d1f9              BNE      |L4.32|
;;;842    	for(i=0;i<10000;i++);
00002c  2300              MOVS     r3,#0
00002e  e000              B        |L4.50|
                  |L4.48|
000030  1c5b              ADDS     r3,r3,#1
                  |L4.50|
000032  f2427010          MOV      r0,#0x2710
000036  4283              CMP      r3,r0
000038  dbfa              BLT      |L4.48|
;;;843    	temp = (LPC_CGU->FREQ_MON >>9) & 0x3FFF;
00003a  481c              LDR      r0,|L4.172|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  f3c0224d          UBFX     r2,r0,#9,#14
;;;844    
;;;845    	if(temp == 0) /* too low F < 12000000/511*/
000042  b912              CBNZ     r2,|L4.74|
;;;846    		return -1;
000044  f04f30ff          MOV      r0,#0xffffffff
                  |L4.72|
;;;847    	if(temp > 511){ /* larger */
;;;848    
;;;849    		c = 511 - (LPC_CGU->FREQ_MON&0x1FF);
;;;850    	}else{
;;;851    		do{
;;;852    			c--;
;;;853    			LPC_CGU->FREQ_MON = (Clock<<24) | 1<<23 | c;
;;;854    			while(LPC_CGU->FREQ_MON & (1 <<23));
;;;855    			for(i=0;i<10000;i++);
;;;856    			n = (LPC_CGU->FREQ_MON >>9) & 0x3FFF;
;;;857    		}while(n==temp);
;;;858    		c++;
;;;859    	}
;;;860    	*m = temp;
;;;861    	*d = c;
;;;862    	return 0;
;;;863    }
000048  bdf0              POP      {r4-r7,pc}
                  |L4.74|
00004a  f5b27f00          CMP      r2,#0x200             ;847
00004e  d308              BCC      |L4.98|
000050  4816              LDR      r0,|L4.172|
000052  6940              LDR      r0,[r0,#0x14]         ;849
000054  f3c00008          UBFX     r0,r0,#0,#9           ;849
000058  f2401cff          MOV      r12,#0x1ff            ;849
00005c  ebac0100          SUB      r1,r12,r0             ;849
000060  e01f              B        |L4.162|
                  |L4.98|
000062  bf00              NOP                            ;851
                  |L4.100|
000064  1e49              SUBS     r1,r1,#1              ;852
000066  f44f0000          MOV      r0,#0x800000          ;853
00006a  ea406004          ORR      r0,r0,r4,LSL #24      ;853
00006e  4308              ORRS     r0,r0,r1              ;853
000070  f8dfc038          LDR      r12,|L4.172|
000074  f8cc0014          STR      r0,[r12,#0x14]        ;853
000078  bf00              NOP                            ;854
                  |L4.122|
00007a  480c              LDR      r0,|L4.172|
00007c  6940              LDR      r0,[r0,#0x14]         ;854
00007e  f4000000          AND      r0,r0,#0x800000       ;854
000082  2800              CMP      r0,#0                 ;854
000084  d1f9              BNE      |L4.122|
000086  2300              MOVS     r3,#0                 ;855
000088  e000              B        |L4.140|
                  |L4.138|
00008a  1c5b              ADDS     r3,r3,#1              ;855
                  |L4.140|
00008c  f2427010          MOV      r0,#0x2710            ;855
000090  4283              CMP      r3,r0                 ;855
000092  dbfa              BLT      |L4.138|
000094  4805              LDR      r0,|L4.172|
000096  6940              LDR      r0,[r0,#0x14]         ;856
000098  f3c0274d          UBFX     r7,r0,#9,#14          ;856
00009c  4297              CMP      r7,r2                 ;857
00009e  d0e1              BEQ      |L4.100|
0000a0  1c49              ADDS     r1,r1,#1              ;858
                  |L4.162|
0000a2  602a              STR      r2,[r5,#0]            ;860
0000a4  6031              STR      r1,[r6,#0]            ;861
0000a6  2000              MOVS     r0,#0                 ;862
0000a8  e7ce              B        |L4.72|
;;;864    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L4.172|
                          DCD      0x40050000

                          AREA ||i.CGU_GetBaseStatus||, CODE, READONLY, ALIGN=2

                  CGU_GetBaseStatus PROC
;;;737     **********************************************************************/
;;;738    uint32_t	CGU_GetBaseStatus(CGU_ENTITY_T Base){
000000  4601              MOV      r1,r0
;;;739    	switch(Base){
000002  f1a10011          SUB      r0,r1,#0x11
000006  2814              CMP      r0,#0x14
000008  d24d              BCS      |L5.166|
00000a  e8dff000          TBB      [pc,r0]
00000e  4b1e              DCB      0x4b,0x1e
000010  4c231914          DCB      0x4c,0x23,0x19,0x14
000014  4c4c4c0f          DCB      0x4c,0x4c,0x4c,0x0f
000018  0a4c4c46          DCB      0x0a,0x4c,0x4c,0x46
00001c  413c3732          DCB      0x41,0x3c,0x37,0x32
000020  2d28              DCB      0x2d,0x28
;;;740    	/*CCU1*/
;;;741    	case CGU_BASE_APB3:
;;;742    		return LPC_CCU1->BASE_STAT & 1;
000022  4823              LDR      r0,|L5.176|
000024  6840              LDR      r0,[r0,#4]
000026  f0000001          AND      r0,r0,#1
                  |L5.42|
;;;743    
;;;744    	case CGU_BASE_APB1:
;;;745    		return (LPC_CCU1->BASE_STAT>>1) & 1;
;;;746    
;;;747    	case CGU_BASE_SPIFI:
;;;748    		return (LPC_CCU1->BASE_STAT>>2) & 1;
;;;749    
;;;750    	case CGU_BASE_M3:
;;;751    		return (LPC_CCU1->BASE_STAT>>3) & 1;
;;;752    
;;;753    	case CGU_BASE_USB0:
;;;754    		return (LPC_CCU1->BASE_STAT>>7) & 1;
;;;755    
;;;756    	case CGU_BASE_USB1:
;;;757    		return (LPC_CCU1->BASE_STAT>>8) & 1;
;;;758    
;;;759    	/*CCU2*/
;;;760    	case CGU_BASE_UART3:
;;;761    		return (LPC_CCU2->BASE_STAT>>1) & 1;
;;;762    
;;;763    	case CGU_BASE_UART2:
;;;764    		return (LPC_CCU2->BASE_STAT>>2) & 1;
;;;765    
;;;766    	case CGU_BASE_UART1:
;;;767    		return (LPC_CCU2->BASE_STAT>>3) & 1;
;;;768    
;;;769    	case CGU_BASE_UART0:
;;;770    		return (LPC_CCU2->BASE_STAT>>4) & 1;
;;;771    
;;;772    	case CGU_BASE_SSP1:
;;;773    		return (LPC_CCU2->BASE_STAT>>5) & 1;
;;;774    
;;;775    	case CGU_BASE_SSP0:
;;;776    		return (LPC_CCU2->BASE_STAT>>6) & 1;
;;;777    
;;;778    	case CGU_BASE_SDIO:
;;;779    		return (LPC_CCU2->BASE_STAT>>7) & 1;
;;;780    
;;;781    	/*BASE SAFE is used by WWDT and RGU*/
;;;782    	case CGU_BASE_SAFE:
;;;783    		break;
;;;784    	default:
;;;785    		break;
;;;786    	}
;;;787    	return 0;
;;;788    }
00002a  4770              BX       lr
00002c  4820              LDR      r0,|L5.176|
00002e  6840              LDR      r0,[r0,#4]            ;745
000030  f3c00040          UBFX     r0,r0,#1,#1           ;745
000034  e7f9              B        |L5.42|
000036  481e              LDR      r0,|L5.176|
000038  6840              LDR      r0,[r0,#4]            ;748
00003a  f3c00080          UBFX     r0,r0,#2,#1           ;748
00003e  e7f4              B        |L5.42|
000040  481b              LDR      r0,|L5.176|
000042  6840              LDR      r0,[r0,#4]            ;751
000044  f3c000c0          UBFX     r0,r0,#3,#1           ;751
000048  e7ef              B        |L5.42|
00004a  4819              LDR      r0,|L5.176|
00004c  6840              LDR      r0,[r0,#4]            ;754
00004e  f3c010c0          UBFX     r0,r0,#7,#1           ;754
000052  e7ea              B        |L5.42|
000054  4816              LDR      r0,|L5.176|
000056  6840              LDR      r0,[r0,#4]            ;757
000058  f3c02000          UBFX     r0,r0,#8,#1           ;757
00005c  e7e5              B        |L5.42|
00005e  4815              LDR      r0,|L5.180|
000060  6840              LDR      r0,[r0,#4]            ;761
000062  f3c00040          UBFX     r0,r0,#1,#1           ;761
000066  e7e0              B        |L5.42|
000068  4812              LDR      r0,|L5.180|
00006a  6840              LDR      r0,[r0,#4]            ;764
00006c  f3c00080          UBFX     r0,r0,#2,#1           ;764
000070  e7db              B        |L5.42|
000072  4810              LDR      r0,|L5.180|
000074  6840              LDR      r0,[r0,#4]            ;767
000076  f3c000c0          UBFX     r0,r0,#3,#1           ;767
00007a  e7d6              B        |L5.42|
00007c  480d              LDR      r0,|L5.180|
00007e  6840              LDR      r0,[r0,#4]            ;770
000080  f3c01000          UBFX     r0,r0,#4,#1           ;770
000084  e7d1              B        |L5.42|
000086  480b              LDR      r0,|L5.180|
000088  6840              LDR      r0,[r0,#4]            ;773
00008a  f3c01040          UBFX     r0,r0,#5,#1           ;773
00008e  e7cc              B        |L5.42|
000090  4808              LDR      r0,|L5.180|
000092  6840              LDR      r0,[r0,#4]            ;776
000094  f3c01080          UBFX     r0,r0,#6,#1           ;776
000098  e7c7              B        |L5.42|
00009a  4806              LDR      r0,|L5.180|
00009c  6840              LDR      r0,[r0,#4]            ;779
00009e  f3c010c0          UBFX     r0,r0,#7,#1           ;779
0000a2  e7c2              B        |L5.42|
0000a4  e000              B        |L5.168|
                  |L5.166|
0000a6  bf00              NOP                            ;785
                  |L5.168|
0000a8  bf00              NOP                            ;783
0000aa  2000              MOVS     r0,#0                 ;787
0000ac  e7bd              B        |L5.42|
;;;789    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L5.176|
                          DCD      0x40051000
                  |L5.180|
                          DCD      0x40052000

                          AREA ||i.CGU_GetPCLKFrequency||, CODE, READONLY, ALIGN=2

                  CGU_GetPCLKFrequency PROC
;;;371     **********************************************************************/
;;;372    uint32_t CGU_GetPCLKFrequency (CGU_PERIPHERAL_T Clock){
000000  4601              MOV      r1,r0
;;;373    	uint32_t ClkSrc;
;;;374    	if(Clock >= CGU_PERIPHERAL_WWDT && Clock <= CGU_PERIPHERAL_ADC0)
000002  2926              CMP      r1,#0x26
000004  db03              BLT      |L6.14|
000006  2900              CMP      r1,#0
000008  dc01              BGT      |L6.14|
;;;375    		return CGU_ERROR_INVALID_PARAM;
00000a  2004              MOVS     r0,#4
                  |L6.12|
;;;376    
;;;377    	if(CGU_PERIPHERAL_Info[Clock].PerBaseEntity != CGU_ENTITY_NONE){
;;;378    		/* Get Base Clock Source */
;;;379    		ClkSrc = (CGU_PER_BASE_CTRL(Clock) & CGU_CTRL_SRC_MASK) >> 24;
;;;380    		/* GetBase Status*/
;;;381    		if(CGU_PER_BASE_CTRL(Clock) & 1)
;;;382    			return 0;
;;;383    		/* check Branch if it is enabled */
;;;384    		if((CGU_PERIPHERAL_Info[Clock].PerBranchOffset!= 0) && !(CGU_PER_BRANCH_STATUS(Clock) & CGU_BRANCH_STATUS_ENABLE_MASK)) return 0;
;;;385    	}else{
;;;386    		if(CGU_REG_BASE_CTRL(Clock) & 1)	return 0;
;;;387    		ClkSrc = (CGU_REG_BASE_CTRL(Clock) & CGU_CTRL_SRC_MASK) >> 24;
;;;388    		/* check Branch if it is enabled */
;;;389    		if((CGU_PERIPHERAL_Info[Clock].RegBranchOffset!= 0) && !(CGU_REG_BRANCH_STATUS(Clock) & CGU_BRANCH_STATUS_ENABLE_MASK)) return 0;
;;;390    	}
;;;391    	return CGU_ClockSourceFrequency[ClkSrc];
;;;392    }
00000c  4770              BX       lr
                  |L6.14|
00000e  eb010081          ADD      r0,r1,r1,LSL #2       ;377
000012  4b35              LDR      r3,|L6.232|
000014  eb030040          ADD      r0,r3,r0,LSL #1       ;377
000018  7900              LDRB     r0,[r0,#4]            ;377
00001a  282d              CMP      r0,#0x2d              ;377
00001c  d02f              BEQ      |L6.126|
00001e  eb010081          ADD      r0,r1,r1,LSL #2       ;379
000022  eb030040          ADD      r0,r3,r0,LSL #1       ;379
000026  7900              LDRB     r0,[r0,#4]            ;379
000028  4b30              LDR      r3,|L6.236|
00002a  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;379
00002e  4b30              LDR      r3,|L6.240|
000030  58c0              LDR      r0,[r0,r3]            ;379
000032  f3c06203          UBFX     r2,r0,#24,#4          ;379
000036  eb010081          ADD      r0,r1,r1,LSL #2       ;381
00003a  4b2b              LDR      r3,|L6.232|
00003c  eb030040          ADD      r0,r3,r0,LSL #1       ;381
000040  7900              LDRB     r0,[r0,#4]            ;381
000042  4b2a              LDR      r3,|L6.236|
000044  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;381
000048  4b29              LDR      r3,|L6.240|
00004a  5cc0              LDRB     r0,[r0,r3]            ;381
00004c  f0000001          AND      r0,r0,#1              ;381
000050  b108              CBZ      r0,|L6.86|
000052  2000              MOVS     r0,#0                 ;382
000054  e7da              B        |L6.12|
                  |L6.86|
000056  eb010081          ADD      r0,r1,r1,LSL #2       ;384
00005a  4b23              LDR      r3,|L6.232|
00005c  eb030040          ADD      r0,r3,r0,LSL #1       ;384
000060  88c0              LDRH     r0,[r0,#6]            ;384
000062  b3d8              CBZ      r0,|L6.220|
000064  eb010081          ADD      r0,r1,r1,LSL #2       ;384
000068  eb030040          ADD      r0,r3,r0,LSL #1       ;384
00006c  88c0              LDRH     r0,[r0,#6]            ;384
00006e  4b20              LDR      r3,|L6.240|
000070  4418              ADD      r0,r0,r3              ;384
000072  7900              LDRB     r0,[r0,#4]            ;384
000074  f0000001          AND      r0,r0,#1              ;384
000078  bb80              CBNZ     r0,|L6.220|
00007a  2000              MOVS     r0,#0                 ;384
00007c  e7c6              B        |L6.12|
                  |L6.126|
00007e  eb010081          ADD      r0,r1,r1,LSL #2       ;386
000082  4b19              LDR      r3,|L6.232|
000084  f8130010          LDRB     r0,[r3,r0,LSL #1]     ;386
000088  4b18              LDR      r3,|L6.236|
00008a  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;386
00008e  4b18              LDR      r3,|L6.240|
000090  5cc0              LDRB     r0,[r0,r3]            ;386
000092  f0000001          AND      r0,r0,#1              ;386
000096  b108              CBZ      r0,|L6.156|
000098  2000              MOVS     r0,#0                 ;386
00009a  e7b7              B        |L6.12|
                  |L6.156|
00009c  eb010081          ADD      r0,r1,r1,LSL #2       ;387
0000a0  4b11              LDR      r3,|L6.232|
0000a2  f8130010          LDRB     r0,[r3,r0,LSL #1]     ;387
0000a6  4b11              LDR      r3,|L6.236|
0000a8  f9330010          LDRSH    r0,[r3,r0,LSL #1]     ;387
0000ac  4b10              LDR      r3,|L6.240|
0000ae  58c0              LDR      r0,[r0,r3]            ;387
0000b0  f3c06203          UBFX     r2,r0,#24,#4          ;387
0000b4  eb010081          ADD      r0,r1,r1,LSL #2       ;389
0000b8  4b0b              LDR      r3,|L6.232|
0000ba  eb030040          ADD      r0,r3,r0,LSL #1       ;389
0000be  8840              LDRH     r0,[r0,#2]            ;389
0000c0  b160              CBZ      r0,|L6.220|
0000c2  eb010081          ADD      r0,r1,r1,LSL #2       ;389
0000c6  eb030040          ADD      r0,r3,r0,LSL #1       ;389
0000ca  8840              LDRH     r0,[r0,#2]            ;389
0000cc  4b08              LDR      r3,|L6.240|
0000ce  4418              ADD      r0,r0,r3              ;389
0000d0  7900              LDRB     r0,[r0,#4]            ;389
0000d2  f0000001          AND      r0,r0,#1              ;389
0000d6  b908              CBNZ     r0,|L6.220|
0000d8  2000              MOVS     r0,#0                 ;389
0000da  e797              B        |L6.12|
                  |L6.220|
0000dc  e7ff              B        |L6.222|
                  |L6.222|
0000de  4805              LDR      r0,|L6.244|
0000e0  f8500022          LDR      r0,[r0,r2,LSL #2]     ;391
0000e4  e792              B        |L6.12|
;;;393    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L6.232|
                          DCD      CGU_PERIPHERAL_Info
                  |L6.236|
                          DCD      CGU_Entity_ControlReg_Offset
                  |L6.240|
                          DCD      0x40050000
                  |L6.244|
                          DCD      CGU_ClockSourceFrequency

                          AREA ||i.CGU_Init||, CODE, READONLY, ALIGN=2

                  CGU_Init PROC
;;;204     **********************************************************************/
;;;205    uint32_t	CGU_Init(void){
000000  b510              PUSH     {r4,lr}
;;;206    	CGU_SetXTALOSC(12000000);
000002  480d              LDR      r0,|L7.56|
000004  f7fffffe          BL       CGU_SetXTALOSC
;;;207    	CGU_EnableEntity(CGU_CLKSRC_XTAL_OSC, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2006              MOVS     r0,#6
00000c  f7fffffe          BL       CGU_EnableEntity
;;;208    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_CLKSRC_PLL1);
000010  2109              MOVS     r1,#9
000012  2006              MOVS     r0,#6
000014  f7fffffe          BL       CGU_EntityConnect
;;;209    	// Disable PLL1 CPU hang???
;;;210    	//CGU_EnableEntity(CGU_CLKSRC_PLL1, DISABLE);
;;;211    	CGU_SetPLL1(6);
000018  2006              MOVS     r0,#6
00001a  f7fffffe          BL       CGU_SetPLL1
;;;212    	CGU_EnableEntity(CGU_CLKSRC_PLL1, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2009              MOVS     r0,#9
000022  f7fffffe          BL       CGU_EnableEntity
;;;213    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_M3);
000026  2115              MOVS     r1,#0x15
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       CGU_EntityConnect
;;;214    	CGU_UpdateClock();
00002e  f7fffffe          BL       CGU_UpdateClock
;;;215    	return 0;
000032  2000              MOVS     r0,#0
;;;216    }
000034  bd10              POP      {r4,pc}
;;;217    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x00b71b00

                          AREA ||i.CGU_RealFrequencyCompare||, CODE, READONLY, ALIGN=1

                  CGU_RealFrequencyCompare PROC
;;;908     **********************************************************************/
;;;909    uint32_t CGU_RealFrequencyCompare(CGU_ENTITY_T Clock, CGU_ENTITY_T CompareToClock, uint32_t *m, uint32_t *d){
000000  b5ff              PUSH     {r0-r7,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;910    	uint32_t m1,m2,d1,d2;
;;;911    	/* Check Parameter */
;;;912    	if((Clock>CGU_CLKSRC_IDIVE) || (CompareToClock>CGU_CLKSRC_IDIVE))
00000a  2d10              CMP      r5,#0x10
00000c  dc01              BGT      |L8.18|
00000e  2c10              CMP      r4,#0x10
000010  dd02              BLE      |L8.24|
                  |L8.18|
;;;913    		return CGU_ERROR_INVALID_PARAM;
000012  2004              MOVS     r0,#4
                  |L8.20|
;;;914    	/* Check for Clock Enable - Not yet implement
;;;915    	 * The Comparator will hang if Clock has not been set*/
;;;916    	CGU_FrequencyMonitor(Clock, &m1, &d1);
;;;917    	CGU_FrequencyMonitor(CompareToClock, &m2, &d2);
;;;918    	*m= m1*d2;
;;;919    	*d= d1*m2;
;;;920    	return 0;
;;;921    
;;;922    }
000014  b004              ADD      sp,sp,#0x10
000016  bdf0              POP      {r4-r7,pc}
                  |L8.24|
000018  aa01              ADD      r2,sp,#4              ;916
00001a  a903              ADD      r1,sp,#0xc            ;916
00001c  4628              MOV      r0,r5                 ;916
00001e  f7fffffe          BL       CGU_FrequencyMonitor
000022  466a              MOV      r2,sp                 ;917
000024  a902              ADD      r1,sp,#8              ;917
000026  4620              MOV      r0,r4                 ;917
000028  f7fffffe          BL       CGU_FrequencyMonitor
00002c  9900              LDR      r1,[sp,#0]            ;918
00002e  9803              LDR      r0,[sp,#0xc]          ;918
000030  4348              MULS     r0,r1,r0              ;918
000032  6030              STR      r0,[r6,#0]            ;918
000034  e9dd0101          LDRD     r0,r1,[sp,#4]         ;919
000038  4348              MULS     r0,r1,r0              ;919
00003a  6038              STR      r0,[r7,#0]            ;919
00003c  2000              MOVS     r0,#0                 ;920
00003e  e7e9              B        |L8.20|
;;;923    /**
                          ENDP


                          AREA ||i.CGU_SetDIV||, CODE, READONLY, ALIGN=2

                  CGU_SetDIV PROC
;;;466    /* divisor number must >=1*/
;;;467    uint32_t	CGU_SetDIV(CGU_ENTITY_T SelectDivider, uint32_t divisor){
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;468    	int32_t RegOffset;
;;;469    	uint32_t tempReg;
;;;470    	if(SelectDivider>=CGU_CLKSRC_IDIVA && SelectDivider<=CGU_CLKSRC_IDIVE){
000006  2a0c              CMP      r2,#0xc
000008  db14              BLT      |L9.52|
00000a  2a10              CMP      r2,#0x10
00000c  dc12              BGT      |L9.52|
;;;471    		RegOffset = CGU_Entity_ControlReg_Offset[SelectDivider];
00000e  480a              LDR      r0,|L9.56|
000010  f9301012          LDRSH    r1,[r0,r2,LSL #1]
;;;472    		if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
000014  1c48              ADDS     r0,r1,#1
000016  b908              CBNZ     r0,|L9.28|
000018  2002              MOVS     r0,#2
                  |L9.26|
;;;473    		tempReg = CGU_ADDRESS32(LPC_CGU,RegOffset);
;;;474    		tempReg &= ~(0xFF<<2);
;;;475    		tempReg |= ((divisor-1)&0xFF)<<2;
;;;476    		CGU_ADDRESS32(LPC_CGU,RegOffset) = tempReg;
;;;477    		return CGU_ERROR_SUCCESS;
;;;478    	}
;;;479    	return CGU_ERROR_INVALID_ENTITY;
;;;480    }
00001a  bd10              POP      {r4,pc}
                  |L9.28|
00001c  4807              LDR      r0,|L9.60|
00001e  580b              LDR      r3,[r1,r0]            ;473
000020  f423737f          BIC      r3,r3,#0x3fc          ;474
000024  1e60              SUBS     r0,r4,#1              ;475
000026  b2c0              UXTB     r0,r0                 ;475
000028  ea430380          ORR      r3,r3,r0,LSL #2       ;475
00002c  4803              LDR      r0,|L9.60|
00002e  500b              STR      r3,[r1,r0]            ;476
000030  2000              MOVS     r0,#0                 ;477
000032  e7f2              B        |L9.26|
                  |L9.52|
000034  2002              MOVS     r0,#2                 ;479
000036  e7f0              B        |L9.26|
;;;481    
                          ENDP

                  |L9.56|
                          DCD      CGU_Entity_ControlReg_Offset
                  |L9.60|
                          DCD      0x40050000

                          AREA ||i.CGU_SetPLL0||, CODE, READONLY, ALIGN=2

                  CGU_SetPLL0 PROC
;;;664     **********************************************************************/
;;;665    uint32_t CGU_SetPLL0(void){
000000  4806              LDR      r0,|L10.28|
;;;666    	// Setup PLL550 to generate 480MHz from 12 MHz crystal
;;;667    	LPC_CGU->PLL0USB_CTRL |= 1; 	// Power down PLL
000002  6a00              LDR      r0,[r0,#0x20]
000004  f0400001          ORR      r0,r0,#1
000008  4904              LDR      r1,|L10.28|
00000a  6208              STR      r0,[r1,#0x20]
;;;668    						//	P			N
;;;669    	LPC_CGU->PLL0USB_NP_DIV = (98<<0) | (514<<12);
00000c  4804              LDR      r0,|L10.32|
00000e  6288              STR      r0,[r1,#0x28]
;;;670    						//	SELP	SELI	SELR	MDEC
;;;671    	LPC_CGU->PLL0USB_MDIV = (0xB<<17)|(0x10<<22)|(0<<28)|(0x7FFA<<0);
000010  4804              LDR      r0,|L10.36|
000012  6248              STR      r0,[r1,#0x24]
;;;672    	LPC_CGU->PLL0USB_CTRL =(CGU_CLKSRC_XTAL_OSC<<24) | (0x3<<2) | (1<<4);
000014  4804              LDR      r0,|L10.40|
000016  6208              STR      r0,[r1,#0x20]
;;;673    	return CGU_ERROR_SUCCESS;
000018  2000              MOVS     r0,#0
;;;674    }
00001a  4770              BX       lr
;;;675    
                          ENDP

                  |L10.28|
                          DCD      0x40050000
                  |L10.32|
                          DCD      0x00202062
                  |L10.36|
                          DCD      0x04167ffa
                  |L10.40|
                          DCD      0x0600001c

                          AREA ||i.CGU_SetPLL1||, CODE, READONLY, ALIGN=2

                  CGU_SetPLL1 PROC
;;;683     **********************************************************************/
;;;684    uint32_t	CGU_SetPLL1(uint32_t mult){
000000  b5f0              PUSH     {r4-r7,lr}
000002  4602              MOV      r2,r0
;;;685    	uint32_t msel=0, nsel=0, psel=0, pval=1;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2300              MOVS     r3,#0
00000a  2601              MOVS     r6,#1
;;;686    	uint32_t freq;
;;;687    	uint32_t ClkSrc = (LPC_CGU->PLL1_CTRL & CGU_CTRL_SRC_MASK)>>24;
00000c  4824              LDR      r0,|L11.160|
00000e  6c40              LDR      r0,[r0,#0x44]
000010  f3c06703          UBFX     r7,r0,#24,#4
;;;688    	freq = CGU_ClockSourceFrequency[ClkSrc];
000014  4823              LDR      r0,|L11.164|
000016  f8501027          LDR      r1,[r0,r7,LSL #2]
;;;689    	freq *= mult;
00001a  4351              MULS     r1,r2,r1
;;;690    	msel = mult-1;
00001c  1e54              SUBS     r4,r2,#1
;;;691    
;;;692    	LPC_CGU->PLL1_CTRL &= ~(CGU_PLL1_FBSEL_MASK |
00001e  4820              LDR      r0,|L11.160|
000020  6c40              LDR      r0,[r0,#0x44]
000022  f8dfc084          LDR      r12,|L11.168|
000026  ea00000c          AND      r0,r0,r12
00002a  f8dfc074          LDR      r12,|L11.160|
00002e  f8cc0044          STR      r0,[r12,#0x44]
;;;693    									CGU_PLL1_BYPASS_MASK |
;;;694    									CGU_PLL1_DIRECT_MASK |
;;;695    									(0x03<<8) | (0xFF<<16) | (0x03<<12));
;;;696    
;;;697    	if(freq<156000000){
000032  481e              LDR      r0,|L11.172|
000034  4281              CMP      r1,r0
000036  d21a              BCS      |L11.110|
;;;698    		//psel is encoded such that 0=1, 1=2, 2=4, 3=8
;;;699    		while(2*(pval)*freq < 156000000) {
000038  e001              B        |L11.62|
                  |L11.58|
;;;700    			psel++;
00003a  1c5b              ADDS     r3,r3,#1
;;;701    			pval*=2;
00003c  0076              LSLS     r6,r6,#1
                  |L11.62|
00003e  0070              LSLS     r0,r6,#1              ;699
000040  4348              MULS     r0,r1,r0              ;699
000042  f8dfc068          LDR      r12,|L11.172|
000046  4560              CMP      r0,r12                ;699
000048  d3f7              BCC      |L11.58|
;;;702    		}
;;;703    //		if(2*(pval)*freq > 320000000) {
;;;704    //			//THIS IS OUT OF RANGE!!!
;;;705    //			//HOW DO WE ASSERT IN SAMPLE CODE?
;;;706    //			//__breakpoint(0);
;;;707    //			return CGU_ERROR_INVALID_PARAM;
;;;708    //		}
;;;709    		LPC_CGU->PLL1_CTRL |= (msel<<16) | (nsel<<12) | (psel<<8) | CGU_PLL1_FBSEL_MASK;
00004a  0420              LSLS     r0,r4,#16
00004c  ea403005          ORR      r0,r0,r5,LSL #12
000050  ea402003          ORR      r0,r0,r3,LSL #8
000054  f0400040          ORR      r0,r0,#0x40
000058  f8dfc044          LDR      r12,|L11.160|
00005c  f8dcc044          LDR      r12,[r12,#0x44]
000060  ea40000c          ORR      r0,r0,r12
000064  f8dfc038          LDR      r12,|L11.160|
000068  f8cc0044          STR      r0,[r12,#0x44]
00006c  e016              B        |L11.156|
                  |L11.110|
;;;710    	}else if(freq<320000000){
00006e  4810              LDR      r0,|L11.176|
000070  4281              CMP      r1,r0
000072  d211              BCS      |L11.152|
;;;711    		LPC_CGU->PLL1_CTRL |= (msel<<16) | (nsel<<12) | (psel<<8) |CGU_PLL1_DIRECT_MASK | CGU_PLL1_FBSEL_MASK;
000074  0420              LSLS     r0,r4,#16
000076  ea403005          ORR      r0,r0,r5,LSL #12
00007a  ea402003          ORR      r0,r0,r3,LSL #8
00007e  f04000c0          ORR      r0,r0,#0xc0
000082  f8dfc01c          LDR      r12,|L11.160|
000086  f8dcc044          LDR      r12,[r12,#0x44]
00008a  ea40000c          ORR      r0,r0,r12
00008e  f8dfc010          LDR      r12,|L11.160|
000092  f8cc0044          STR      r0,[r12,#0x44]
000096  e001              B        |L11.156|
                  |L11.152|
;;;712    	}else
;;;713    		return CGU_ERROR_INVALID_PARAM;
000098  2004              MOVS     r0,#4
                  |L11.154|
;;;714    
;;;715    	return CGU_ERROR_SUCCESS;
;;;716    }
00009a  bdf0              POP      {r4-r7,pc}
                  |L11.156|
00009c  2000              MOVS     r0,#0                 ;715
00009e  e7fc              B        |L11.154|
;;;717    
                          ENDP

                  |L11.160|
                          DCD      0x40050000
                  |L11.164|
                          DCD      CGU_ClockSourceFrequency
                  |L11.168|
                          DCD      0xff00cc3d
                  |L11.172|
                          DCD      0x094c5f00
                  |L11.176|
                          DCD      0x1312d000

                          AREA ||i.CGU_SetXTALOSC||, CODE, READONLY, ALIGN=2

                  CGU_SetXTALOSC PROC
;;;439     **********************************************************************/
;;;440    uint32_t	CGU_SetXTALOSC(uint32_t ClockFrequency){
000000  4601              MOV      r1,r0
;;;441    	if(ClockFrequency < 15000000){
000002  480d              LDR      r0,|L12.56|
000004  4281              CMP      r1,r0
000006  d206              BCS      |L12.22|
;;;442    		LPC_CGU->XTAL_OSC_CTRL &= ~(1<<2);
000008  480c              LDR      r0,|L12.60|
00000a  6980              LDR      r0,[r0,#0x18]
00000c  f0200004          BIC      r0,r0,#4
000010  4a0a              LDR      r2,|L12.60|
000012  6190              STR      r0,[r2,#0x18]
000014  e00b              B        |L12.46|
                  |L12.22|
;;;443    	}else if(ClockFrequency < 25000000){
000016  480a              LDR      r0,|L12.64|
000018  4281              CMP      r1,r0
00001a  d206              BCS      |L12.42|
;;;444    		LPC_CGU->XTAL_OSC_CTRL |= (1<<2);
00001c  4807              LDR      r0,|L12.60|
00001e  6980              LDR      r0,[r0,#0x18]
000020  f0400004          ORR      r0,r0,#4
000024  4a05              LDR      r2,|L12.60|
000026  6190              STR      r0,[r2,#0x18]
000028  e001              B        |L12.46|
                  |L12.42|
;;;445    	}else
;;;446    		return CGU_ERROR_FREQ_OUTOF_RANGE;
00002a  2005              MOVS     r0,#5
                  |L12.44|
;;;447    
;;;448    	CGU_ClockSourceFrequency[CGU_CLKSRC_XTAL_OSC] = ClockFrequency;
;;;449    	return CGU_ERROR_SUCCESS;
;;;450    }
00002c  4770              BX       lr
                  |L12.46|
00002e  4805              LDR      r0,|L12.68|
000030  6181              STR      r1,[r0,#0x18]         ;448  ; CGU_ClockSourceFrequency
000032  2000              MOVS     r0,#0                 ;449
000034  e7fa              B        |L12.44|
;;;451    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      0x00e4e1c0
                  |L12.60|
                          DCD      0x40050000
                  |L12.64|
                          DCD      0x017d7840
                  |L12.68|
                          DCD      CGU_ClockSourceFrequency

                          AREA ||i.CGU_UpdateClock||, CODE, READONLY, ALIGN=2

                  CGU_UpdateClock PROC
;;;399     **********************************************************************/
;;;400    void CGU_UpdateClock(void){
000000  b530              PUSH     {r4,r5,lr}
;;;401    	uint32_t ClkSrc;
;;;402    	uint32_t div;
;;;403    	uint32_t divisor;
;;;404    	int32_t RegOffset;
;;;405    	/* 32OSC */
;;;406    	if(ISBITSET(LPC_CREG->CREG0,1) && ISBITCLR(LPC_CREG->CREG0,3))
000002  4c2c              LDR      r4,|L13.180|
000004  6864              LDR      r4,[r4,#4]
000006  f0040402          AND      r4,r4,#2
00000a  b15c              CBZ      r4,|L13.36|
00000c  4c29              LDR      r4,|L13.180|
00000e  6864              LDR      r4,[r4,#4]
000010  f0040408          AND      r4,r4,#8
000014  f0840408          EOR      r4,r4,#8
000018  b124              CBZ      r4,|L13.36|
;;;407    		CGU_ClockSourceFrequency[CGU_CLKSRC_32KHZ_OSC] = 32768;
00001a  f44f4400          MOV      r4,#0x8000
00001e  4d26              LDR      r5,|L13.184|
000020  602c              STR      r4,[r5,#0]  ; CGU_ClockSourceFrequency
000022  e002              B        |L13.42|
                  |L13.36|
;;;408    	else
;;;409    		CGU_ClockSourceFrequency[CGU_CLKSRC_32KHZ_OSC] = 0;
000024  2400              MOVS     r4,#0
000026  4d24              LDR      r5,|L13.184|
000028  602c              STR      r4,[r5,#0]  ; CGU_ClockSourceFrequency
                  |L13.42|
;;;410    	/*PLL0*/
;;;411    	/* PLL1 */
;;;412    	if(ISBITCLR(LPC_CGU->PLL1_CTRL,1) /* Enabled */
00002a  4c24              LDR      r4,|L13.188|
00002c  6c64              LDR      r4,[r4,#0x44]
00002e  f0040402          AND      r4,r4,#2
000032  f0840402          EOR      r4,r4,#2
000036  b1a4              CBZ      r4,|L13.98|
;;;413    			&& (LPC_CGU->PLL1_STAT&1)){ /* Locked? */
000038  4c20              LDR      r4,|L13.188|
00003a  6c24              LDR      r4,[r4,#0x40]
00003c  f0040401          AND      r4,r4,#1
000040  b17c              CBZ      r4,|L13.98|
;;;414    		ClkSrc = (LPC_CGU->PLL1_CTRL & CGU_CTRL_SRC_MASK)>>24;
000042  4c1e              LDR      r4,|L13.188|
000044  6c64              LDR      r4,[r4,#0x44]
000046  f3c46203          UBFX     r2,r4,#24,#4
;;;415    		CGU_ClockSourceFrequency[CGU_CLKSRC_PLL1] = CGU_ClockSourceFrequency[ClkSrc] *
00004a  4c1b              LDR      r4,|L13.184|
00004c  f8544022          LDR      r4,[r4,r2,LSL #2]
000050  4d1a              LDR      r5,|L13.188|
000052  6c6d              LDR      r5,[r5,#0x44]
000054  f3c54507          UBFX     r5,r5,#16,#8
000058  1c6d              ADDS     r5,r5,#1
00005a  436c              MULS     r4,r5,r4
00005c  4d16              LDR      r5,|L13.184|
00005e  626c              STR      r4,[r5,#0x24]  ; CGU_ClockSourceFrequency
000060  e002              B        |L13.104|
                  |L13.98|
;;;416    															(((LPC_CGU->PLL1_CTRL>>16)&0xFF)+1);
;;;417    	}else
;;;418    		CGU_ClockSourceFrequency[CGU_CLKSRC_PLL1] = 0;
000062  2400              MOVS     r4,#0
000064  4d14              LDR      r5,|L13.184|
000066  626c              STR      r4,[r5,#0x24]  ; CGU_ClockSourceFrequency
                  |L13.104|
;;;419    
;;;420    	/* DIV */
;;;421    	for(div = CGU_CLKSRC_IDIVA; div <= CGU_CLKSRC_IDIVE; div++){
000068  200c              MOVS     r0,#0xc
00006a  e020              B        |L13.174|
                  |L13.108|
;;;422    		RegOffset = CGU_Entity_ControlReg_Offset[div];
00006c  4c14              LDR      r4,|L13.192|
00006e  f9341010          LDRSH    r1,[r4,r0,LSL #1]
;;;423    		if(ISBITCLR(CGU_ADDRESS32(LPC_CGU,RegOffset),1)){
000072  4c12              LDR      r4,|L13.188|
000074  5d0c              LDRB     r4,[r1,r4]
000076  f0040402          AND      r4,r4,#2
00007a  f0840402          EOR      r4,r4,#2
00007e  b18c              CBZ      r4,|L13.164|
;;;424    			ClkSrc = (CGU_ADDRESS32(LPC_CGU,RegOffset) & CGU_CTRL_SRC_MASK) >> 24;
000080  4c0e              LDR      r4,|L13.188|
000082  590c              LDR      r4,[r1,r4]
000084  f3c46203          UBFX     r2,r4,#24,#4
;;;425    			divisor = (CGU_ADDRESS32(LPC_CGU,RegOffset)>>2) & 0xFF;
000088  4c0c              LDR      r4,|L13.188|
00008a  5b0c              LDRH     r4,[r1,r4]
00008c  f3c40387          UBFX     r3,r4,#2,#8
;;;426    			divisor ++;
000090  1c5b              ADDS     r3,r3,#1
;;;427    			CGU_ClockSourceFrequency[div] = CGU_ClockSourceFrequency[ClkSrc] / divisor;
000092  4c09              LDR      r4,|L13.184|
000094  f8544022          LDR      r4,[r4,r2,LSL #2]
000098  fbb4f4f3          UDIV     r4,r4,r3
00009c  4d06              LDR      r5,|L13.184|
00009e  f8454020          STR      r4,[r5,r0,LSL #2]
0000a2  e003              B        |L13.172|
                  |L13.164|
;;;428    		}else
;;;429    			CGU_ClockSourceFrequency[div] = 0;
0000a4  2400              MOVS     r4,#0
0000a6  4d04              LDR      r5,|L13.184|
0000a8  f8454020          STR      r4,[r5,r0,LSL #2]
                  |L13.172|
0000ac  1c40              ADDS     r0,r0,#1              ;421
                  |L13.174|
0000ae  2810              CMP      r0,#0x10              ;421
0000b0  d9dc              BLS      |L13.108|
;;;430    	}
;;;431    }
0000b2  bd30              POP      {r4,r5,pc}
;;;432    
                          ENDP

                  |L13.180|
                          DCD      0x40043000
                  |L13.184|
                          DCD      CGU_ClockSourceFrequency
                  |L13.188|
                          DCD      0x40050000
                  |L13.192|
                          DCD      CGU_Entity_ControlReg_Offset

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  CGU_Entity_ControlReg_Offset
000000  ffffffff          DCW      0xffff,0xffff
000004  ffffffff          DCW      0xffff,0xffff
000008  ffffffff          DCW      0xffff,0xffff
00000c  00180020          DCW      0x0018,0x0020
000010  00300044          DCW      0x0030,0x0044
000014  ffffffff          DCW      0xffff,0xffff
000018  0048004c          DCW      0x0048,0x004c
00001c  00500054          DCW      0x0050,0x0054
000020  0058005c          DCW      0x0058,0x005c
000024  0060ffff          DCW      0x0060,0xffff
000028  0068006c          DCW      0x0068,0x006c
00002c  0070ffff          DCW      0x0070,0xffff
000030  0078007c          DCW      0x0078,0x007c
000034  00800084          DCW      0x0080,0x0084
000038  0088008c          DCW      0x0088,0x008c
00003c  00900094          DCW      0x0090,0x0094
000040  0098009c          DCW      0x0098,0x009c
000044  00a000a4          DCW      0x00a0,0x00a4
000048  00a800ac          DCW      0x00a8,0x00ac
00004c  ffffffff          DCW      0xffff,0xffff
000050  ffffffff          DCW      0xffff,0xffff
000054  00c000c4          DCW      0x00c0,0x00c4
000058  00c8              DCW      0x00c8
                  CGU_ConnectAlloc_Tbl
00005a  0000              DCB      0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00010101          DCB      0x00,0x01,0x01,0x01
000064  00000101          DCB      0x00,0x00,0x01,0x01
000068  01010100          DCB      0x01,0x01,0x01,0x00
00006c  00000101          DCB      0x00,0x00,0x01,0x01
000070  01000101          DCB      0x01,0x00,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  01010100          DCB      0x01,0x01,0x01,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000101          DCB      0x00,0x00,0x01,0x01
000090  01000001          DCB      0x01,0x00,0x00,0x01
000094  01010101          DCB      0x01,0x01,0x01,0x01
000098  01000001          DCB      0x01,0x00,0x00,0x01
00009c  01010001          DCB      0x01,0x01,0x00,0x01
0000a0  01010101          DCB      0x01,0x01,0x01,0x01
0000a4  01010101          DCB      0x01,0x01,0x01,0x01
0000a8  01010101          DCB      0x01,0x01,0x01,0x01
0000ac  01000000          DCB      0x01,0x00,0x00,0x00
0000b0  00010101          DCB      0x00,0x01,0x01,0x01
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000001          DCB      0x00,0x00,0x00,0x01
0000bc  01010000          DCB      0x01,0x01,0x00,0x00
0000c0  01010101          DCB      0x01,0x01,0x01,0x01
0000c4  01000000          DCB      0x01,0x00,0x00,0x00
0000c8  01010100          DCB      0x01,0x01,0x01,0x00
0000cc  01010101          DCB      0x01,0x01,0x01,0x01
0000d0  01010101          DCB      0x01,0x01,0x01,0x01
0000d4  01010101          DCB      0x01,0x01,0x01,0x01
0000d8  01010000          DCB      0x01,0x01,0x00,0x00
0000dc  00000101          DCB      0x00,0x00,0x01,0x01
0000e0  01000000          DCB      0x01,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  01010100          DCB      0x01,0x01,0x01,0x00
0000ec  00010101          DCB      0x00,0x01,0x01,0x01
0000f0  01010000          DCB      0x01,0x01,0x00,0x00
0000f4  00010101          DCB      0x00,0x01,0x01,0x01
0000f8  00010101          DCB      0x00,0x01,0x01,0x01
0000fc  01010101          DCB      0x01,0x01,0x01,0x01
000100  01010101          DCB      0x01,0x01,0x01,0x01
000104  01010100          DCB      0x01,0x01,0x01,0x00
000108  00000001          DCB      0x00,0x00,0x00,0x01
00010c  01010000          DCB      0x01,0x01,0x00,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00010101          DCB      0x00,0x01,0x01,0x01
000118  00000101          DCB      0x00,0x00,0x01,0x01
00011c  01010100          DCB      0x01,0x01,0x01,0x00
000120  00000101          DCB      0x00,0x00,0x01,0x01
000124  01000101          DCB      0x01,0x00,0x01,0x01
000128  01010101          DCB      0x01,0x01,0x01,0x01
00012c  01010101          DCB      0x01,0x01,0x01,0x01
000130  01010101          DCB      0x01,0x01,0x01,0x01
000134  00000000          DCB      0x00,0x00,0x00,0x00
000138  01010100          DCB      0x01,0x01,0x01,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  01000000          DCB      0x01,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000001          DCB      0x00,0x00,0x00,0x01
000170  01010000          DCB      0x01,0x01,0x00,0x00
000174  01010101          DCB      0x01,0x01,0x01,0x01
000178  01000000          DCB      0x01,0x00,0x00,0x00
00017c  01010100          DCB      0x01,0x01,0x01,0x00
000180  01010101          DCB      0x01,0x01,0x01,0x01
000184  01010101          DCB      0x01,0x01,0x01,0x01
000188  01010101          DCB      0x01,0x01,0x01,0x01
00018c  01010000          DCB      0x01,0x01,0x00,0x00
000190  00000101          DCB      0x00,0x00,0x01,0x01
000194  01000000          DCB      0x01,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000100          DCB      0x00,0x00,0x01,0x00
0001a0  00010000          DCB      0x00,0x01,0x00,0x00
0001a4  00000001          DCB      0x00,0x00,0x00,0x01
0001a8  00010000          DCB      0x00,0x01,0x00,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  00000000          DCB      0x00,0x00,0x00,0x00
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
0001b8  00000100          DCB      0x00,0x00,0x01,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  01010000          DCB      0x01,0x01,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000001          DCB      0x00,0x00,0x00,0x01
0001cc  00000101          DCB      0x00,0x00,0x01,0x01
0001d0  01010100          DCB      0x01,0x01,0x01,0x00
0001d4  00000101          DCB      0x00,0x00,0x01,0x01
0001d8  01000101          DCB      0x01,0x00,0x01,0x01
0001dc  01010101          DCB      0x01,0x01,0x01,0x01
0001e0  01010101          DCB      0x01,0x01,0x01,0x01
0001e4  01010101          DCB      0x01,0x01,0x01,0x01
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  01010100          DCB      0x01,0x01,0x01,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000101          DCB      0x00,0x00,0x01,0x01
0001f8  00000001          DCB      0x00,0x00,0x00,0x01
0001fc  01010101          DCB      0x01,0x01,0x01,0x01
000200  00000001          DCB      0x00,0x00,0x00,0x01
000204  01010001          DCB      0x01,0x01,0x00,0x01
000208  01010101          DCB      0x01,0x01,0x01,0x01
00020c  01010101          DCB      0x01,0x01,0x01,0x01
000210  01010101          DCB      0x01,0x01,0x01,0x01
000214  01000000          DCB      0x01,0x00,0x00,0x00
000218  00010101          DCB      0x00,0x01,0x01,0x01
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  00000000          DCB      0x00,0x00,0x00,0x00
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00000000          DCB      0x00,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  00000000          DCB      0x00,0x00,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00000000          DCB      0x00,0x00,0x00,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00010101          DCB      0x00,0x01,0x01,0x01
000280  00000001          DCB      0x00,0x00,0x00,0x01
000284  01010100          DCB      0x01,0x01,0x01,0x00
000288  00000101          DCB      0x00,0x00,0x01,0x01
00028c  01000101          DCB      0x01,0x00,0x01,0x01
000290  01010101          DCB      0x01,0x01,0x01,0x01
000294  01010101          DCB      0x01,0x01,0x01,0x01
000298  01010101          DCB      0x01,0x01,0x01,0x01
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  01010100          DCB      0x01,0x01,0x01,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000101          DCB      0x00,0x00,0x01,0x01
0002ac  01000000          DCB      0x01,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000001          DCB      0x00,0x00,0x00,0x01
0002b8  01010001          DCB      0x01,0x01,0x00,0x01
0002bc  01010101          DCB      0x01,0x01,0x01,0x01
0002c0  01010101          DCB      0x01,0x01,0x01,0x01
0002c4  01010101          DCB      0x01,0x01,0x01,0x01
0002c8  01000000          DCB      0x01,0x00,0x00,0x00
0002cc  00010101          DCB      0x00,0x01,0x01,0x01
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000001          DCB      0x00,0x00,0x00,0x01
0002d8  01010000          DCB      0x01,0x01,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  01010100          DCB      0x01,0x01,0x01,0x00
0002e8  01010101          DCB      0x01,0x01,0x01,0x01
0002ec  01010101          DCB      0x01,0x01,0x01,0x01
0002f0  01010101          DCB      0x01,0x01,0x01,0x01
0002f4  01010000          DCB      0x01,0x01,0x00,0x00
0002f8  00000101          DCB      0x00,0x00,0x01,0x01
0002fc  01000000          DCB      0x01,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  01010100          DCB      0x01,0x01,0x01,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00010101          DCB      0x00,0x01,0x01,0x01
000314  00010101          DCB      0x00,0x01,0x01,0x01
000318  01010101          DCB      0x01,0x01,0x01,0x01
00031c  01010101          DCB      0x01,0x01,0x01,0x01
000320  01010100          DCB      0x01,0x01,0x01,0x00
000324  00000001          DCB      0x00,0x00,0x00,0x01
000328  01010000          DCB      0x01,0x01,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00010101          DCB      0x00,0x01,0x01,0x01
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000101          DCB      0x00,0x00,0x01,0x01
000340  01000101          DCB      0x01,0x00,0x01,0x01
000344  01010101          DCB      0x01,0x01,0x01,0x01
000348  01010101          DCB      0x01,0x01,0x01,0x01
00034c  01010101          DCB      0x01,0x01,0x01,0x01
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  01010100          DCB      0x01,0x01,0x01,0x00
                  CGU_PERIPHERAL_Info
000358  1b00              DCB      0x1b,0x00
00035a  1118              DCW      0x1118
00035c  2d00              DCB      0x2d,0x00
00035e  0000              DCW      0x0000
000360  00001b00          DCB      0x00,0x00,0x1b,0x00
000364  1120              DCW      0x1120
000366  2d00              DCB      0x2d,0x00
000368  0000              DCW      0x0000
00036a  0000              DCB      0x00,0x00
00036c  1500              DCB      0x15,0x00
00036e  1460              DCW      0x1460
000370  2d00              DCB      0x2d,0x00
000372  0000              DCW      0x0000
000374  00001a00          DCB      0x00,0x00,0x1a,0x00
000378  1200              DCW      0x1200
00037a  2d00              DCB      0x2d,0x00
00037c  0000              DCW      0x0000
00037e  0000              DCB      0x00,0x00
000380  1b00              DCB      0x1b,0x00
000382  1100              DCW      0x1100
000384  2d00              DCB      0x2d,0x00
000386  0000              DCW      0x0000
000388  00001b00          DCB      0x00,0x00,0x1b,0x00
00038c  1128              DCW      0x1128
00038e  2d00              DCB      0x2d,0x00
000390  0000              DCW      0x0000
000392  0000              DCB      0x00,0x00
000394  1500              DCB      0x15,0x00
000396  1538              DCW      0x1538
000398  2d00              DCB      0x2d,0x00
00039a  0000              DCW      0x0000
00039c  00001b00          DCB      0x00,0x00,0x1b,0x00
0003a0  1110              DCW      0x1110
0003a2  2d00              DCB      0x2d,0x00
0003a4  0000              DCW      0x0000
0003a6  0000              DCB      0x00,0x00
0003a8  1500              DCB      0x15,0x00
0003aa  1440              DCW      0x1440
0003ac  2d00              DCB      0x2d,0x00
0003ae  0000              DCW      0x0000
0003b0  00001500          DCB      0x00,0x00,0x15,0x00
0003b4  1430              DCW      0x1430
0003b6  1500              DCB      0x15,0x00
0003b8  1478              DCW      0x1478
0003ba  0000              DCB      0x00,0x00
0003bc  1500              DCB      0x15,0x00
0003be  1420              DCW      0x1420
0003c0  1800              DCB      0x18,0x00
0003c2  0000              DCW      0x0000
0003c4  0b002d00          DCB      0x0b,0x00,0x2d,0x00
0003c8  0000              DCW      0x0000
0003ca  1900              DCB      0x19,0x00
0003cc  0000              DCW      0x0000
0003ce  0000              DCB      0x00,0x00
0003d0  1500              DCB      0x15,0x00
0003d2  1410              DCW      0x1410
0003d4  2d00              DCB      0x2d,0x00
0003d6  0000              DCW      0x0000
0003d8  00001a00          DCB      0x00,0x00,0x1a,0x00
0003dc  1210              DCW      0x1210
0003de  2d00              DCB      0x2d,0x00
0003e0  0000              DCW      0x0000
0003e2  0000              DCB      0x00,0x00
0003e4  1b00              DCB      0x1b,0x00
0003e6  1108              DCW      0x1108
0003e8  2d00              DCB      0x2d,0x00
0003ea  0000              DCW      0x0000
0003ec  00001a00          DCB      0x00,0x00,0x1a,0x00
0003f0  1218              DCW      0x1218
0003f2  2d00              DCB      0x2d,0x00
0003f4  0000              DCW      0x0000
0003f6  0000              DCB      0x00,0x00
0003f8  1500              DCB      0x15,0x00
0003fa  1418              DCW      0x1418
0003fc  1c00              DCB      0x1c,0x00
0003fe  0000              DCW      0x0000
000400  00001500          DCB      0x00,0x00,0x15,0x00
000404  1448              DCW      0x1448
000406  2d00              DCB      0x2d,0x00
000408  0000              DCW      0x0000
00040a  0000              DCB      0x00,0x00
00040c  1500              DCB      0x15,0x00
00040e  1400              DCW      0x1400
000410  2d00              DCB      0x2d,0x00
000412  0000              DCW      0x0000
000414  00001a00          DCB      0x00,0x00,0x1a,0x00
000418  1208              DCW      0x1208
00041a  2d00              DCB      0x2d,0x00
00041c  0000              DCW      0x0000
00041e  0000              DCB      0x00,0x00
000420  1500              DCB      0x15,0x00
000422  1630              DCW      0x1630
000424  2d00              DCB      0x2d,0x00
000426  0000              DCW      0x0000
000428  00001500          DCB      0x00,0x00,0x15,0x00
00042c  1600              DCW      0x1600
00042e  2d00              DCB      0x2d,0x00
000430  0000              DCW      0x0000
000432  0000              DCB      0x00,0x00
000434  1500              DCB      0x15,0x00
000436  1468              DCW      0x1468
000438  2d00              DCB      0x2d,0x00
00043a  0000              DCW      0x0000
00043c  00001500          DCB      0x00,0x00,0x15,0x00
000440  1530              DCW      0x1530
000442  2d00              DCB      0x2d,0x00
000444  0000              DCW      0x0000
000446  0000              DCB      0x00,0x00
000448  1500              DCB      0x15,0x00
00044a  1438              DCW      0x1438
00044c  1e00              DCB      0x1e,0x00
00044e  2800              DCW      0x2800
000450  00001500          DCB      0x00,0x00,0x15,0x00
000454  1408              DCW      0x1408
000456  1600              DCB      0x16,0x00
000458  1300              DCW      0x1300
00045a  0000              DCB      0x00,0x00
00045c  1500              DCB      0x15,0x00
00045e  1518              DCW      0x1518
000460  1f00              DCB      0x1f,0x00
000462  2700              DCW      0x2700
000464  00001500          DCB      0x00,0x00,0x15,0x00
000468  1628              DCW      0x1628
00046a  2000              DCB      0x20,0x00
00046c  2600              DCW      0x2600
00046e  0000              DCB      0x00,0x00
000470  1500              DCB      0x15,0x00
000472  1520              DCW      0x1520
000474  2d00              DCB      0x2d,0x00
000476  0000              DCW      0x0000
000478  00001500          DCB      0x00,0x00,0x15,0x00
00047c  1528              DCW      0x1528
00047e  2d00              DCB      0x2d,0x00
000480  0000              DCW      0x0000
000482  0000              DCB      0x00,0x00
000484  1500              DCB      0x15,0x00
000486  1618              DCW      0x1618
000488  2d00              DCB      0x2d,0x00
00048a  0000              DCW      0x0000
00048c  00001500          DCB      0x00,0x00,0x15,0x00
000490  1620              DCW      0x1620
000492  2d00              DCB      0x2d,0x00
000494  0000              DCW      0x0000
000496  0000              DCB      0x00,0x00
000498  1500              DCB      0x15,0x00
00049a  1508              DCW      0x1508
00049c  2100              DCB      0x21,0x00
00049e  2500              DCW      0x2500
0004a0  00001500          DCB      0x00,0x00,0x15,0x00
0004a4  1510              DCW      0x1510
0004a6  2200              DCB      0x22,0x00
0004a8  2400              DCW      0x2400
0004aa  0000              DCB      0x00,0x00
0004ac  1500              DCB      0x15,0x00
0004ae  1608              DCW      0x1608
0004b0  2300              DCB      0x23,0x00
0004b2  2300              DCW      0x2300
0004b4  00001500          DCB      0x00,0x00,0x15,0x00
0004b8  1610              DCW      0x1610
0004ba  2400              DCB      0x24,0x00
0004bc  2200              DCW      0x2200
0004be  0000              DCB      0x00,0x00
0004c0  1500              DCB      0x15,0x00
0004c2  1428              DCW      0x1428
0004c4  1200              DCB      0x12,0x00
0004c6  1800              DCW      0x1800
0004c8  00001500          DCB      0x00,0x00,0x15,0x00
0004cc  1470              DCW      0x1470
0004ce  1400              DCB      0x14,0x00
0004d0  1900              DCW      0x1900
0004d2  0000              DCB      0x00,0x00
0004d4  1500              DCB      0x15,0x00
0004d6  1500              DCW      0x1500
0004d8  1100              DCB      0x11,0x00
0004da  0000              DCW      0x0000
0004dc  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CGU_ClockSourceFrequency
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x1c9c3800
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "lpc43xx_cgu.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_cgu_c_468ae9cb____REV16|
#line 130 ".\\core_cmInstr.h"
|__asm___13_lpc43xx_cgu_c_468ae9cb____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_cgu_c_468ae9cb____REVSH|
#line 144
|__asm___13_lpc43xx_cgu_c_468ae9cb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
