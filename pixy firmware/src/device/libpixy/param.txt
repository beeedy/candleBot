; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\param.o --asm_dir=.\ --list_dir=.\ --depend=.\param.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\param.crf param.cpp]
                          THUMB

                          AREA ||i._Z10prm_formatv||, CODE, READONLY, ALIGN=2

                  _Z10prm_formatv PROC ; prm_format()
;;;256    
;;;257    int prm_format()
000000  b510              PUSH     {r4,lr}
;;;258    {
;;;259    	flash_erase(PRM_FLASH_LOC, PRM_ALLOCATED_LEN);
000002  4909              LDR      r1,|L1.40|
000004  68c9              LDR      r1,[r1,#0xc]  ; g_spifi
000006  f10151a0          ADD      r1,r1,#0x14000000
00000a  f5a14000          SUB      r0,r1,#0x8000
00000e  f44f4100          MOV      r1,#0x8000
000012  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
;;;260    	cprintf("All parameters have been erased and restored to their defaults!\n");
000016  4805              LDR      r0,|L1.44|
000018  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;261    	g_dirty = true;
00001c  2001              MOVS     r0,#1
00001e  4904              LDR      r1,|L1.48|
000020  7008              STRB     r0,[r1,#0]
;;;262    	return 0;
000022  2000              MOVS     r0,#0
;;;263    }
000024  bd10              POP      {r4,pc}
;;;264    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      g_spifi
                  |L1.44|
                          DCD      ||.conststring||+0x378
                  |L1.48|
                          DCD      g_dirty

                          AREA ||i._Z10prm_getAllRKtP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z10prm_getAllRKtP5Chirp PROC ; prm_getAll(const unsigned short&, Chirp*)
;;;220    
;;;221    int32_t  prm_getAll(const uint16_t &index, Chirp *chirp)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;222    {
000004  b091              SUB      sp,sp,#0x44
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
;;;223    	int res;
;;;224    	uint16_t i;
;;;225    	uint32_t len;
;;;226    	uint8_t *data, argList[CRP_MAX_ARGS];
;;;227    	ParamRecord *rec;
;;;228    	Shadow *shadow;
;;;229    
;;;230    	for (i=0, rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; i++, rec++)
00000a  f04f0b00          MOV      r11,#0
00000e  4830              LDR      r0,|L2.208|
000010  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000012  f10050a0          ADD      r0,r0,#0x14000000
000016  f5a04400          SUB      r4,r0,#0x8000
00001a  e04b              B        |L2.180|
                  |L2.28|
;;;231    	{
;;;232    		if(i==index)
00001c  f8b90000          LDRH     r0,[r9,#0]
000020  4558              CMP      r0,r11
000022  d141              BNE      |L2.168|
;;;233    		{
;;;234    			shadow = prm_findShadow(prm_getId(rec));
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _Z9prm_getIdP11ParamRecord ; prm_getId(ParamRecord*)
00002a  900d              STR      r0,[sp,#0x34]
00002c  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
000030  4605              MOV      r5,r0
;;;235    
;;;236    			if (shadow && shadow->data)
000032  b12d              CBZ      r5,|L2.64|
000034  68a8              LDR      r0,[r5,#8]
000036  b118              CBZ      r0,|L2.64|
;;;237    			{
;;;238    				len = shadow->len;
000038  f8b58004          LDRH     r8,[r5,#4]
;;;239    				data = shadow->data;
00003c  68ae              LDR      r6,[r5,#8]
00003e  e005              B        |L2.76|
                  |L2.64|
;;;240    			}
;;;241    			else
;;;242    			{
;;;243    				len = rec->len;
000040  f8b48002          LDRH     r8,[r4,#2]
;;;244    				data = (uint8_t *)rec+prm_getDataOffset(rec);
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00004a  1906              ADDS     r6,r0,r4
                  |L2.76|
;;;245    			}
;;;246    			res = Chirp::getArgList(data, rec->len, argList);
00004c  8861              LDRH     r1,[r4,#2]
00004e  aa0e              ADD      r2,sp,#0x38
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       _ZN5Chirp10getArgListEPhjS0_ ; Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
000056  4607              MOV      r7,r0
;;;247    			if (res<0)
000058  2f00              CMP      r7,#0
00005a  da03              BGE      |L2.100|
;;;248    				return res;
00005c  4638              MOV      r0,r7
                  |L2.94|
;;;249    			CRP_RETURN(chirp, UINT32(rec->flags), STRING(argList), STRING(prm_getId(rec)), STRING(prm_getDesc(rec)),  UINTS8(len, data), END);
;;;250    			return 0;
;;;251    		}
;;;252    	}
;;;253    	return -1;	
;;;254    }
00005e  b011              ADD      sp,sp,#0x44
000060  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.100|
000064  4620              MOV      r0,r4                 ;249
000066  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
00006a  900d              STR      r0,[sp,#0x34]         ;249
00006c  4620              MOV      r0,r4                 ;249
00006e  f7fffffe          BL       _Z9prm_getIdP11ParamRecord ; prm_getId(ParamRecord*)
000072  900c              STR      r0,[sp,#0x30]         ;249
000074  2000              MOVS     r0,#0                 ;249
000076  e9cd6008          STRD     r6,r0,[sp,#0x20]      ;249
00007a  2281              MOVS     r2,#0x81              ;249
00007c  f8cd801c          STR      r8,[sp,#0x1c]         ;249
000080  900a              STR      r0,[sp,#0x28]         ;249
000082  23a1              MOVS     r3,#0xa1              ;249
000084  e9dd100c          LDRD     r1,r0,[sp,#0x30]      ;249
000088  e9cd1303          STRD     r1,r3,[sp,#0xc]       ;249
00008c  e9cd0205          STRD     r0,r2,[sp,#0x14]      ;249
000090  a90e              ADD      r1,sp,#0x38           ;249
000092  e9cd3100          STRD     r3,r1,[sp,#0]         ;249
000096  9302              STR      r3,[sp,#8]            ;249
000098  2204              MOVS     r2,#4                 ;249
00009a  2100              MOVS     r1,#0                 ;249
00009c  4650              MOV      r0,r10                ;249
00009e  6863              LDR      r3,[r4,#4]            ;249
0000a0  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
0000a4  2000              MOVS     r0,#0                 ;250
0000a6  e7da              B        |L2.94|
                  |L2.168|
0000a8  f10b0001          ADD      r0,r11,#1             ;230
0000ac  fa1ffb80          UXTH     r11,r0                ;230
0000b0  f5047480          ADD      r4,r4,#0x100          ;230
                  |L2.180|
0000b4  8820              LDRH     r0,[r4,#0]            ;230
0000b6  f64f71ff          MOV      r1,#0xffff            ;230
0000ba  4288              CMP      r0,r1                 ;230
0000bc  d005              BEQ      |L2.202|
0000be  4804              LDR      r0,|L2.208|
0000c0  68c0              LDR      r0,[r0,#0xc]          ;230  ; g_spifi
0000c2  f10050a0          ADD      r0,r0,#0x14000000     ;230
0000c6  42a0              CMP      r0,r4                 ;230
0000c8  d8a8              BHI      |L2.28|
                  |L2.202|
0000ca  f04f30ff          MOV      r0,#0xffffffff        ;253
0000ce  e7c6              B        |L2.94|
;;;255    
                          ENDP

                  |L2.208|
                          DCD      g_spifi

                          AREA ||i._Z11prm_getDescP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z11prm_getDescP11ParamRecord PROC ; prm_getDesc(ParamRecord*)
;;;183    
;;;184    const char *prm_getDesc(ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
000002  4604              MOV      r4,r0
;;;186    	uint32_t offset = PRM_HEADER_LEN;
000004  2508              MOVS     r5,#8
;;;187    	offset += strlen((char *)rec+offset) + 1;
000006  1960              ADDS     r0,r4,r5
000008  f7fffffe          BL       strlen
00000c  1c40              ADDS     r0,r0,#1
00000e  4405              ADD      r5,r5,r0
;;;188    	return (char *)rec+offset;
000010  1960              ADDS     r0,r4,r5
;;;189    }
000012  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP


                          AREA ||i._Z11prm_getInfoPKcP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z11prm_getInfoPKcP5Chirp PROC ; prm_getInfo(const char*, Chirp*)
;;;204    
;;;205    int32_t prm_getInfo(const char *id, Chirp *chirp)
000000  b5f8              PUSH     {r3-r7,lr}
;;;206    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;207    	ParamRecord *rec;
;;;208    
;;;209    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000006  4815              LDR      r0,|L4.92|
000008  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
00000a  f10050a0          ADD      r0,r0,#0x14000000
00000e  f5a04400          SUB      r4,r0,#0x8000
000012  e015              B        |L4.64|
                  |L4.20|
;;;210    	{
;;;211    		if(strcmp(id, (char *)rec->data)==0)
000014  f1040108          ADD      r1,r4,#8
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       strcmp
00001e  b968              CBNZ     r0,|L4.60|
;;;212    		{
;;;213    			CRP_RETURN(chirp, STRING(prm_getDesc(rec)));
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
000026  4607              MOV      r7,r0
000028  2000              MOVS     r0,#0
00002a  463b              MOV      r3,r7
00002c  22a1              MOVS     r2,#0xa1
00002e  4601              MOV      r1,r0
000030  9000              STR      r0,[sp,#0]
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;214    			return 0;
000038  2000              MOVS     r0,#0
                  |L4.58|
;;;215    		}
;;;216    	}
;;;217    	return -1;	
;;;218    }
00003a  bdf8              POP      {r3-r7,pc}
                  |L4.60|
00003c  f5047480          ADD      r4,r4,#0x100          ;209
                  |L4.64|
000040  8820              LDRH     r0,[r4,#0]            ;209
000042  f64f71ff          MOV      r1,#0xffff            ;209
000046  4288              CMP      r0,r1                 ;209
000048  d005              BEQ      |L4.86|
00004a  4804              LDR      r0,|L4.92|
00004c  68c0              LDR      r0,[r0,#0xc]          ;209  ; g_spifi
00004e  f10050a0          ADD      r0,r0,#0x14000000     ;209
000052  42a0              CMP      r0,r4                 ;209
000054  d8de              BHI      |L4.20|
                  |L4.86|
000056  f04f30ff          MOV      r0,#0xffffffff        ;217
00005a  e7ee              B        |L4.58|
;;;219    
                          ENDP

                  |L4.92|
                          DCD      g_spifi

                          AREA ||i._Z12prm_getChirpPKcP5Chirp||, CODE, READONLY, ALIGN=1

                  _Z12prm_getChirpPKcP5Chirp PROC ; prm_getChirp(const char*, Chirp*)
;;;427    
;;;428    int32_t prm_getChirp(const char *id, Chirp *chirp)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;429    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;430    	ParamRecord *rec;
;;;431    
;;;432    	Shadow *shadow = prm_findShadow(id);
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
00000e  4605              MOV      r5,r0
;;;433    
;;;434    	if (shadow && shadow->data)
000010  b165              CBZ      r5,|L5.44|
000012  68a8              LDR      r0,[r5,#8]
000014  b150              CBZ      r0,|L5.44|
;;;435    		CRP_RETURN(chirp, UINTS8(shadow->len, shadow->data), END);
000016  2100              MOVS     r1,#0
000018  68a8              LDR      r0,[r5,#8]
00001a  e9cd0100          STRD     r0,r1,[sp,#0]
00001e  9102              STR      r1,[sp,#8]
000020  88ab              LDRH     r3,[r5,#4]
000022  2281              MOVS     r2,#0x81
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
00002a  e018              B        |L5.94|
                  |L5.44|
;;;436    	else
;;;437    	{
;;;438    		rec = prm_find(id);
00002c  2100              MOVS     r1,#0
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000034  4604              MOV      r4,r0
;;;439    		if (rec==NULL)
000036  b91c              CBNZ     r4,|L5.64|
;;;440    			return -1;
000038  f04f30ff          MOV      r0,#0xffffffff
                  |L5.60|
;;;441    	
;;;442    		CRP_RETURN(chirp, UINTS8(rec->len, (uint8_t *)rec+prm_getDataOffset(rec)), END);
;;;443    	}
;;;444    
;;;445    	return 0;
;;;446    }
00003c  e8bd83fe          POP      {r1-r9,pc}
                  |L5.64|
000040  4620              MOV      r0,r4                 ;442
000042  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000046  eb000804          ADD      r8,r0,r4              ;442
00004a  2000              MOVS     r0,#0                 ;442
00004c  e9cd8000          STRD     r8,r0,[sp,#0]         ;442
000050  9002              STR      r0,[sp,#8]            ;442
000052  8863              LDRH     r3,[r4,#2]            ;442
000054  2281              MOVS     r2,#0x81              ;442
000056  4601              MOV      r1,r0                 ;442
000058  4630              MOV      r0,r6                 ;442
00005a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L5.94|
00005e  2000              MOVS     r0,#0                 ;445
000060  e7ec              B        |L5.60|
;;;447    
                          ENDP


                          AREA ||i._Z12prm_nextFreev||, CODE, READONLY, ALIGN=2

                  _Z12prm_nextFreev PROC ; prm_nextFree()
;;;303    
;;;304    uint32_t prm_nextFree()
000000  480e              LDR      r0,|L6.60|
;;;305    {
;;;306    	ParamRecord *rec;
;;;307    
;;;308    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++);
000002  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000004  f10050a0          ADD      r0,r0,#0x14000000
000008  f5a04100          SUB      r1,r0,#0x8000
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f5017180          ADD      r1,r1,#0x100
                  |L6.18|
000012  8808              LDRH     r0,[r1,#0]
000014  f64f72ff          MOV      r2,#0xffff
000018  4290              CMP      r0,r2
00001a  d005              BEQ      |L6.40|
00001c  4807              LDR      r0,|L6.60|
00001e  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000020  f10050a0          ADD      r0,r0,#0x14000000
000024  4288              CMP      r0,r1
000026  d8f2              BHI      |L6.14|
                  |L6.40|
;;;309    
;;;310    	if (rec>=(ParamRecord *)PRM_ENDREC)
000028  4804              LDR      r0,|L6.60|
00002a  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
00002c  f10050a0          ADD      r0,r0,#0x14000000
000030  4288              CMP      r0,r1
000032  d801              BHI      |L6.56|
;;;311    		return NULL;
000034  2000              MOVS     r0,#0
                  |L6.54|
;;;312    	return (uint32_t)rec; 
;;;313    }
000036  4770              BX       lr
                  |L6.56|
000038  4608              MOV      r0,r1                 ;312
00003a  e7fc              B        |L6.54|
;;;314    
                          ENDP

                  |L6.60|
                          DCD      g_spifi

                          AREA ||i._Z12prm_setChirpPKcRKjPKh||, CODE, READONLY, ALIGN=1

                  _Z12prm_setChirpPKcRKjPKh PROC ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
;;;349    
;;;350    int32_t prm_setChirp(const char *id, const uint32_t &valLen, const uint8_t *val)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;351    {
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
;;;352    	ParamRecord *rec;
;;;353    	uint8_t *buf;
;;;354    	uint32_t offset;
;;;355    	void *sector;
;;;356    	int32_t res = 0;
00000a  f04f0b00          MOV      r11,#0
;;;357    
;;;358    	buf = (uint8_t *)malloc(FLASH_SECTOR_SIZE);
00000e  f44f5080          MOV      r0,#0x1000
000012  f7fffffe          BL       malloc
000016  4606              MOV      r6,r0
;;;359       	
;;;360    	if (buf==NULL)
000018  b91e              CBNZ     r6,|L7.34|
;;;361    		return -2;
00001a  f06f0001          MVN      r0,#1
                  |L7.30|
;;;362    
;;;363    	rec = prm_find(id);
;;;364    
;;;365    	if (rec==NULL)
;;;366    	{
;;;367    		res = -1;
;;;368    		goto end;
;;;369    	}
;;;370    
;;;371    	sector = (void *)FLASH_SECTOR_MASK((uint32_t)rec);
;;;372    	memcpy(buf, sector, FLASH_SECTOR_SIZE);
;;;373    
;;;374    	rec = prm_find(id, buf);
;;;375    
;;;376    	if (rec==NULL)
;;;377    	{
;;;378    		res = -1;
;;;379    		goto end;
;;;380    	}
;;;381    
;;;382    	offset = prm_getDataOffset(rec);	
;;;383    	if (memcmp((uint8_t *)rec+offset, val, valLen)==0)
;;;384    		goto end;
;;;385    	memcpy((uint8_t *)rec+offset, val, valLen);
;;;386    	 	
;;;387    	rec->len = valLen;
;;;388    	rec->crc = prm_crc(rec);
;;;389    	
;;;390    	flash_erase((uint32_t)sector, FLASH_SECTOR_SIZE); 
;;;391    	flash_program((uint32_t)sector, buf, FLASH_SECTOR_SIZE);
;;;392    
;;;393    
;;;394    end:
;;;395    	free(buf); 	
;;;396    	return res;
;;;397    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.34|
000022  2100              MOVS     r1,#0                 ;363
000024  4650              MOV      r0,r10                ;363
000026  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00002a  4604              MOV      r4,r0                 ;363
00002c  b914              CBNZ     r4,|L7.52|
00002e  f04f3bff          MOV      r11,#0xffffffff       ;367
000032  e034              B        |L7.158|
                  |L7.52|
000034  ea4f3814          LSR      r8,r4,#12             ;371
000038  ea4f3808          LSL      r8,r8,#12             ;371
00003c  f44f5280          MOV      r2,#0x1000            ;372
000040  4641              MOV      r1,r8                 ;372
000042  4630              MOV      r0,r6                 ;372
000044  f7fffffe          BL       __aeabi_memcpy
000048  4631              MOV      r1,r6                 ;374
00004a  4650              MOV      r0,r10                ;374
00004c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000050  4604              MOV      r4,r0                 ;374
000052  b914              CBNZ     r4,|L7.90|
000054  f04f3bff          MOV      r11,#0xffffffff       ;378
000058  e021              B        |L7.158|
                  |L7.90|
00005a  4620              MOV      r0,r4                 ;382
00005c  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000060  4607              MOV      r7,r0                 ;382
000062  19e0              ADDS     r0,r4,r7              ;383
000064  4649              MOV      r1,r9                 ;383
000066  682a              LDR      r2,[r5,#0]            ;383
000068  f7fffffe          BL       memcmp
00006c  b900              CBNZ     r0,|L7.112|
00006e  e016              B        |L7.158|
                  |L7.112|
000070  19e0              ADDS     r0,r4,r7              ;385
000072  4649              MOV      r1,r9                 ;385
000074  682a              LDR      r2,[r5,#0]            ;385
000076  f7fffffe          BL       __aeabi_memcpy
00007a  8828              LDRH     r0,[r5,#0]            ;387
00007c  8060              STRH     r0,[r4,#2]            ;387
00007e  4620              MOV      r0,r4                 ;388
000080  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
000084  8020              STRH     r0,[r4,#0]            ;388
000086  f44f5180          MOV      r1,#0x1000            ;390
00008a  4640              MOV      r0,r8                 ;390
00008c  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
000090  f44f5280          MOV      r2,#0x1000            ;391
000094  4631              MOV      r1,r6                 ;391
000096  4640              MOV      r0,r8                 ;391
000098  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
00009c  bf00              NOP                            ;394
                  |L7.158|
00009e  4630              MOV      r0,r6                 ;395
0000a0  f7fffffe          BL       free
0000a4  4658              MOV      r0,r11                ;396
0000a6  e7ba              B        |L7.30|
;;;398    
                          ENDP


                          AREA ||i._Z12prm_setDirtyv||, CODE, READONLY, ALIGN=2

                  _Z12prm_setDirtyv PROC ; prm_setDirty()
;;;504    
;;;505    int32_t prm_setDirty()
000000  2001              MOVS     r0,#1
;;;506    {
;;;507    	g_dirty = true; // set dirty flag
000002  4902              LDR      r1,|L8.12|
000004  7008              STRB     r0,[r1,#0]
;;;508    	return 0;
000006  2000              MOVS     r0,#0
;;;509    }
000008  4770              BX       lr
;;;510    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      g_dirty

                          AREA ||i._Z13prm_verifyAllv||, CODE, READONLY, ALIGN=2

                  _Z13prm_verifyAllv PROC ; prm_verifyAll()
;;;319    
;;;320    bool prm_verifyAll()
000000  b510              PUSH     {r4,lr}
;;;321    {
;;;322    	ParamRecord *rec;
;;;323    
;;;324    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000002  480e              LDR      r0,|L9.60|
000004  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000006  f10050a0          ADD      r0,r0,#0x14000000
00000a  f5a04400          SUB      r4,r0,#0x8000
00000e  e007              B        |L9.32|
                  |L9.16|
;;;325    	{
;;;326    		if (prm_verifyRecord(rec)==false)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _Z16prm_verifyRecordPK11ParamRecord ; prm_verifyRecord(const ParamRecord*)
000016  b908              CBNZ     r0,|L9.28|
;;;327    			return false;
000018  2000              MOVS     r0,#0
                  |L9.26|
;;;328    	}
;;;329    
;;;330    	return true;
;;;331    }
00001a  bd10              POP      {r4,pc}
                  |L9.28|
00001c  f5047480          ADD      r4,r4,#0x100          ;324
                  |L9.32|
000020  8820              LDRH     r0,[r4,#0]            ;324
000022  f64f71ff          MOV      r1,#0xffff            ;324
000026  4288              CMP      r0,r1                 ;324
000028  d005              BEQ      |L9.54|
00002a  4804              LDR      r0,|L9.60|
00002c  68c0              LDR      r0,[r0,#0xc]          ;324  ; g_spifi
00002e  f10050a0          ADD      r0,r0,#0x14000000     ;324
000032  42a0              CMP      r0,r4                 ;324
000034  d8ec              BHI      |L9.16|
                  |L9.54|
000036  2001              MOVS     r0,#1                 ;330
000038  e7ef              B        |L9.26|
;;;332    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      g_spifi

                          AREA ||i._Z14prm_findShadowPKc||, CODE, READONLY, ALIGN=2

                  _Z14prm_findShadowPKc PROC ; prm_findShadow(const char*)
;;;145    
;;;146    Shadow *prm_findShadow(const char *id)
000000  b570              PUSH     {r4-r6,lr}
;;;147    {
000002  4605              MOV      r5,r0
;;;148    	int i;
;;;149    
;;;150    	for (i=0; i<g_shadowTable.size(); i++)
000004  2400              MOVS     r4,#0
000006  e00f              B        |L10.40|
                  |L10.8|
;;;151    	{
;;;152    		if (strcmp(g_shadowTable[i].id, id)==0)
000008  4621              MOV      r1,r4
00000a  480b              LDR      r0,|L10.56|
00000c  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
000010  4629              MOV      r1,r5
000012  6806              LDR      r6,[r0,#0]
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       strcmp
00001a  b920              CBNZ     r0,|L10.38|
;;;153    			return &g_shadowTable[i];
00001c  4621              MOV      r1,r4
00001e  4806              LDR      r0,|L10.56|
000020  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
                  |L10.36|
;;;154    	}
;;;155    	return NULL;
;;;156    }
000024  bd70              POP      {r4-r6,pc}
                  |L10.38|
000026  1c64              ADDS     r4,r4,#1              ;150
                  |L10.40|
000028  bf00              NOP                            ;150
00002a  4803              LDR      r0,|L10.56|
00002c  6800              LDR      r0,[r0,#0]            ;150
00002e  42a0              CMP      r0,r4                 ;150
000030  dcea              BGT      |L10.8|
000032  2000              MOVS     r0,#0                 ;155
000034  e7f6              B        |L10.36|
;;;157    
                          ENDP

000036  0000              DCW      0x0000
                  |L10.56|
                          DCD      g_shadowTable

                          AREA ||i._Z16prm_resetShadowsv||, CODE, READONLY, ALIGN=2

                  _Z16prm_resetShadowsv PROC ; prm_resetShadows()
;;;158    
;;;159    int32_t prm_resetShadows()
000000  b570              PUSH     {r4-r6,lr}
;;;160    {
;;;161    	int i, n;
;;;162    
;;;163    	for (i=0, n=0; i<g_shadowTable.size(); i++)
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
000006  e01b              B        |L11.64|
                  |L11.8|
;;;164    	{
;;;165    		if (g_shadowTable[i].data)
000008  4621              MOV      r1,r4
00000a  4813              LDR      r0,|L11.88|
00000c  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
000010  6880              LDR      r0,[r0,#8]
000012  b1a0              CBZ      r0,|L11.62|
;;;166    		{
;;;167    			free(g_shadowTable[i].data);
000014  4621              MOV      r1,r4
000016  4810              LDR      r0,|L11.88|
000018  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
00001c  6886              LDR      r6,[r0,#8]
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       free
;;;168    			g_shadowTable[i].data = NULL;
000024  4621              MOV      r1,r4
000026  480c              LDR      r0,|L11.88|
000028  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
00002c  2100              MOVS     r1,#0
00002e  6081              STR      r1,[r0,#8]
;;;169    			g_shadowTable[i].len = 0;
000030  4621              MOV      r1,r4
000032  4809              LDR      r0,|L11.88|
000034  f7fffffe          BL       _ZN12SimpleVectorI6ShadowEixEi ; SimpleVector<Shadow>::operator [](int)
000038  2100              MOVS     r1,#0
00003a  8081              STRH     r1,[r0,#4]
;;;170    			n++;
00003c  1c6d              ADDS     r5,r5,#1
                  |L11.62|
00003e  1c64              ADDS     r4,r4,#1              ;163
                  |L11.64|
000040  bf00              NOP                            ;163
000042  4805              LDR      r0,|L11.88|
000044  6800              LDR      r0,[r0,#0]            ;163
000046  42a0              CMP      r0,r4                 ;163
000048  dcde              BGT      |L11.8|
;;;171    		}
;;;172    	}
;;;173    	if (n>0)
00004a  2d00              CMP      r5,#0
00004c  dd02              BLE      |L11.84|
;;;174    		g_dirty = true;	// force a reloading of parameters
00004e  2001              MOVS     r0,#1
000050  4902              LDR      r1,|L11.92|
000052  7008              STRB     r0,[r1,#0]
                  |L11.84|
;;;175    	return n;
000054  4628              MOV      r0,r5
;;;176    }
000056  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

                  |L11.88|
                          DCD      g_shadowTable
                  |L11.92|
                          DCD      g_dirty

                          AREA ||i._Z16prm_verifyRecordPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z16prm_verifyRecordPK11ParamRecord PROC ; prm_verifyRecord(const ParamRecord*)
;;;314    
;;;315    bool prm_verifyRecord(const ParamRecord *rec)
000000  b510              PUSH     {r4,lr}
;;;316    {	
000002  4604              MOV      r4,r0
;;;317    	return prm_crc(rec)==rec->crc;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
00000a  8821              LDRH     r1,[r4,#0]
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L12.20|
000010  2001              MOVS     r0,#1
                  |L12.18|
;;;318    }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  2000              MOVS     r0,#0                 ;317
000016  e7fc              B        |L12.18|
;;;319    
                          ENDP


                          AREA ||i._Z17prm_getDataOffsetPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z17prm_getDataOffsetPK11ParamRecord PROC ; prm_getDataOffset(const ParamRecord*)
;;;190    
;;;191    uint32_t prm_getDataOffset(const ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
000002  4605              MOV      r5,r0
;;;193    	uint32_t offset = PRM_HEADER_LEN;
000004  2408              MOVS     r4,#8
;;;194    
;;;195    	offset += strlen((char *)rec+offset) + 1;
000006  1928              ADDS     r0,r5,r4
000008  f7fffffe          BL       strlen
00000c  1c40              ADDS     r0,r0,#1
00000e  4404              ADD      r4,r4,r0
;;;196    	offset += strlen((char *)rec+offset) + 1;
000010  1928              ADDS     r0,r5,r4
000012  f7fffffe          BL       strlen
000016  1c40              ADDS     r0,r0,#1
000018  4404              ADD      r4,r4,r0
;;;197    
;;;198    	// skip padding
;;;199    	while(*((uint8_t *)rec+offset)==0)
00001a  e000              B        |L13.30|
                  |L13.28|
;;;200    		offset++;
00001c  1c64              ADDS     r4,r4,#1
                  |L13.30|
00001e  5d28              LDRB     r0,[r5,r4]            ;199
000020  2800              CMP      r0,#0                 ;199
000022  d0fb              BEQ      |L13.28|
;;;201    
;;;202    	return offset; 
000024  4620              MOV      r0,r4
;;;203    }
000026  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP


                          AREA ||i._Z18prm_setShadowChirpPKcRKjPKh||, CODE, READONLY, ALIGN=1

                  _Z18prm_setShadowChirpPKcRKjPKh PROC ; prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
;;;511    
;;;512    int32_t prm_setShadowChirp(const char *id, const uint32_t &valLen, const uint8_t *val)
000000  b5f0              PUSH     {r4-r7,lr}
;;;513    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;514    	Shadow *shadow = prm_findShadow(id);
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
000010  4604              MOV      r4,r0
;;;515        void *args[CRP_MAX_ARGS+1];	// +1 for the null arg
;;;516    
;;;517    	if (shadow==NULL)
000012  b91c              CBNZ     r4,|L14.28|
;;;518    		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L14.24|
;;;519    
;;;520       	if (shadow->data==NULL)
;;;521    	{
;;;522    		shadow->data = (uint8_t *)malloc(valLen);
;;;523    		shadow->len = valLen;
;;;524    	}
;;;525    	else if (valLen!=shadow->len)
;;;526    		return -2;
;;;527    
;;;528    	memcpy(shadow->data, val, valLen);
;;;529    
;;;530    	if (shadow->callback)
;;;531    	{
;;;532    		Chirp::deserializeParse((uint8_t *)val, valLen, args);
;;;533    		(*shadow->callback)(id, args[0]);  // only 1 arg for now, but we can add other cases by looking for the null arg
;;;534    	}
;;;535    
;;;536    	return 0;
;;;537    }
000018  b00b              ADD      sp,sp,#0x2c
00001a  bdf0              POP      {r4-r7,pc}
                  |L14.28|
00001c  68a0              LDR      r0,[r4,#8]            ;520
00001e  b930              CBNZ     r0,|L14.46|
000020  6828              LDR      r0,[r5,#0]            ;522
000022  f7fffffe          BL       malloc
000026  60a0              STR      r0,[r4,#8]            ;522
000028  8828              LDRH     r0,[r5,#0]            ;523
00002a  80a0              STRH     r0,[r4,#4]            ;523
00002c  e006              B        |L14.60|
                  |L14.46|
00002e  88a1              LDRH     r1,[r4,#4]            ;525
000030  6828              LDR      r0,[r5,#0]            ;525
000032  4288              CMP      r0,r1                 ;525
000034  d002              BEQ      |L14.60|
000036  f06f0001          MVN      r0,#1                 ;526
00003a  e7ed              B        |L14.24|
                  |L14.60|
00003c  682a              LDR      r2,[r5,#0]            ;528
00003e  4631              MOV      r1,r6                 ;528
000040  68a0              LDR      r0,[r4,#8]            ;528
000042  f7fffffe          BL       __aeabi_memcpy
000046  68e0              LDR      r0,[r4,#0xc]          ;530
000048  b140              CBZ      r0,|L14.92|
00004a  466a              MOV      r2,sp                 ;532
00004c  4630              MOV      r0,r6                 ;532
00004e  6829              LDR      r1,[r5,#0]            ;532
000050  f7fffffe          BL       _ZN5Chirp16deserializeParseEPhjPPv ; Chirp::deserializeParse(unsigned char*, unsigned, void**)
000054  9900              LDR      r1,[sp,#0]            ;533
000056  4638              MOV      r0,r7                 ;533
000058  68e2              LDR      r2,[r4,#0xc]          ;533
00005a  4790              BLX      r2                    ;533
                  |L14.92|
00005c  2000              MOVS     r0,#0                 ;536
00005e  e7db              B        |L14.24|
;;;538    
                          ENDP


                          AREA ||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||, CODE, READONLY, ALIGN=2

                  _Z21prm_setShadowCallbackPKcPFvS0_PKvE PROC ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;538    
;;;539    int prm_setShadowCallback(const char *id, ShadowCallback callback)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;540    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;541    	Shadow shadow, *pshadow;
;;;542    
;;;543    	// can't create a shadow if it doesn't exist
;;;544    	if (prm_find(id)==NULL)
000008  2100              MOVS     r1,#0
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000010  b920              CBNZ     r0,|L15.28|
;;;545    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L15.22|
;;;546    
;;;547    	pshadow = prm_findShadow(id);
;;;548    	if (pshadow) // shadow is already in the table
;;;549    		pshadow->callback = callback;
;;;550    	else // create new entry
;;;551    	{
;;;552    		uint32_t len = strlen(id)+1;
;;;553    		shadow.id = (const char *)malloc(len);
;;;554    		strcpy((char *)shadow.id, id);
;;;555    		shadow.len = 0;
;;;556    		shadow.data = NULL;
;;;557    		shadow.callback = callback;
;;;558    
;;;559    		g_shadowTable.push_back(shadow);
;;;560    	}
;;;561    
;;;562    	return 0;
;;;563    }
000016  b004              ADD      sp,sp,#0x10
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L15.28|
00001c  4638              MOV      r0,r7                 ;547
00001e  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
000022  4605              MOV      r5,r0                 ;547
000024  b10d              CBZ      r5,|L15.42|
000026  60ee              STR      r6,[r5,#0xc]          ;549
000028  e02b              B        |L15.130|
                  |L15.42|
00002a  4638              MOV      r0,r7                 ;552
00002c  f7fffffe          BL       strlen
000030  f1000801          ADD      r8,r0,#1              ;552
000034  4640              MOV      r0,r8                 ;553
000036  f7fffffe          BL       malloc
00003a  9000              STR      r0,[sp,#0]            ;553
00003c  4639              MOV      r1,r7                 ;554
00003e  9800              LDR      r0,[sp,#0]            ;554
000040  f7fffffe          BL       strcpy
000044  2000              MOVS     r0,#0                 ;555
000046  f8ad0004          STRH     r0,[sp,#4]            ;555
00004a  9002              STR      r0,[sp,#8]            ;556
00004c  9603              STR      r6,[sp,#0xc]          ;557
00004e  4c0e              LDR      r4,|L15.136|
000050  e9d40100          LDRD     r0,r1,[r4,#0]         ;559
000054  4288              CMP      r0,r1                 ;559
000056  d108              BNE      |L15.106|
000058  6860              LDR      r0,[r4,#4]            ;559
00005a  f1000110          ADD      r1,r0,#0x10           ;559
00005e  4620              MOV      r0,r4                 ;559
000060  f7fffffe          BL       _ZN12SimpleVectorI6ShadowE6resizeEi ; SimpleVector<Shadow>::resize(int)
000064  2800              CMP      r0,#0                 ;559
000066  da00              BGE      |L15.106|
000068  e00a              B        |L15.128|
                  |L15.106|
00006a  6821              LDR      r1,[r4,#0]            ;559
00006c  1c48              ADDS     r0,r1,#1              ;559
00006e  6020              STR      r0,[r4,#0]            ;559
000070  68a0              LDR      r0,[r4,#8]            ;559
000072  eb001001          ADD      r0,r0,r1,LSL #4       ;559
000076  e89d100e          LDM      sp,{r1-r3,r12}        ;559
00007a  e8a0100e          STM      r0!,{r1-r3,r12}       ;559
00007e  bf00              NOP                            ;559
                  |L15.128|
000080  bf00              NOP                            ;560
                  |L15.130|
000082  2000              MOVS     r0,#0                 ;562
000084  e7c7              B        |L15.22|
;;;564    
                          ENDP

000086  0000              DCW      0x0000
                  |L15.136|
                          DCD      g_shadowTable

                          AREA ||i._Z7prm_addPKcjS0_z||, CODE, READONLY, ALIGN=1

                  _Z7prm_addPKcjS0_z PROC ; prm_add(const char*, unsigned, const char*, ...)
;;;448    
;;;449    int prm_add(const char *id, uint32_t flags, const char *desc, ...)
000000  b40f              PUSH     {r0-r3}
;;;450    {
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  b0c2              SUB      sp,sp,#0x108
000008  4607              MOV      r7,r0
00000a  4688              MOV      r8,r1
;;;451    	char buf[PRM_MAX_LEN];
;;;452    	int len;
;;;453        uint32_t freeLoc, offset=PRM_HEADER_LEN;
00000c  2408              MOVS     r4,#8
;;;454        va_list args;
;;;455    	ParamRecord *rec = (ParamRecord *)buf;
00000e  ad02              ADD      r5,sp,#8
;;;456    
;;;457    	// if it already exists, 
;;;458    	if (prm_find(id))
000010  2100              MOVS     r1,#0
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000018  b130              CBZ      r0,|L16.40|
;;;459    		return -2;
00001a  f06f0001          MVN      r0,#1
                  |L16.30|
;;;460    
;;;461    	memset((void *)rec, 0, PRM_MAX_LEN);
;;;462    
;;;463    	strcpy((char *)rec+offset, id);
;;;464    	offset += strlen(id) + 1;
;;;465    	if (desc!=NULL)
;;;466    	{
;;;467    		strcpy((char *)rec+offset, desc);
;;;468    		offset += strlen(desc) + 1;
;;;469    	}
;;;470    	else
;;;471    	{
;;;472    		*(char *)(rec+offset) = '\0';
;;;473    	 	offset++;
;;;474    	}
;;;475    
;;;476    	// data section should be aligned to 4 bytes	
;;;477    	ALIGN(offset, 4);
;;;478    
;;;479        va_start(args, desc);
;;;480        len = Chirp::vserialize(NULL, (uint8_t *)rec+offset, PRM_MAX_LEN-offset, &args);
;;;481        va_end(args);
;;;482    
;;;483    	if (len<0)
;;;484    		return -3;
;;;485    
;;;486    	rec->flags = flags;
;;;487    	rec->len = len;
;;;488    	rec->crc = prm_crc(rec); 
;;;489    
;;;490    	if ((freeLoc=prm_nextFree())==NULL)
;;;491    		return -4;
;;;492    	
;;;493    	return flash_program(freeLoc, (uint8_t *)rec, len+prm_getDataOffset(rec));	
;;;494    }
00001e  b042              ADD      sp,sp,#0x108
000020  e8bd07f0          POP      {r4-r10}
000024  f85dfb14          LDR      pc,[sp],#0x14
                  |L16.40|
000028  f44f7180          MOV      r1,#0x100             ;461
00002c  4628              MOV      r0,r5                 ;461
00002e  f7fffffe          BL       __aeabi_memclr4
000032  1928              ADDS     r0,r5,r4              ;463
000034  4639              MOV      r1,r7                 ;463
000036  f7fffffe          BL       strcpy
00003a  4638              MOV      r0,r7                 ;464
00003c  f7fffffe          BL       strlen
000040  1c40              ADDS     r0,r0,#1              ;464
000042  4404              ADD      r4,r4,r0              ;464
000044  984c              LDR      r0,[sp,#0x130]        ;465
000046  b148              CBZ      r0,|L16.92|
000048  1928              ADDS     r0,r5,r4              ;467
00004a  994c              LDR      r1,[sp,#0x130]        ;467
00004c  f7fffffe          BL       strcpy
000050  984c              LDR      r0,[sp,#0x130]        ;468
000052  f7fffffe          BL       strlen
000056  1c40              ADDS     r0,r0,#1              ;468
000058  4404              ADD      r4,r4,r0              ;468
00005a  e004              B        |L16.102|
                  |L16.92|
00005c  2000              MOVS     r0,#0                 ;472
00005e  eb052104          ADD      r1,r5,r4,LSL #8       ;472
000062  7008              STRB     r0,[r1,#0]            ;472
000064  1c64              ADDS     r4,r4,#1              ;473
                  |L16.102|
000066  f0040003          AND      r0,r4,#3              ;477
00006a  b118              CBZ      r0,|L16.116|
00006c  f0240003          BIC      r0,r4,#3              ;477
000070  1d00              ADDS     r0,r0,#4              ;477
000072  e000              B        |L16.118|
                  |L16.116|
000074  4620              MOV      r0,r4                 ;477
                  |L16.118|
000076  4604              MOV      r4,r0                 ;477
000078  a84d              ADD      r0,sp,#0x134          ;479
00007a  9001              STR      r0,[sp,#4]            ;479
00007c  f5c47280          RSB      r2,r4,#0x100          ;480
000080  1929              ADDS     r1,r5,r4              ;480
000082  ab01              ADD      r3,sp,#4              ;480
000084  2000              MOVS     r0,#0                 ;480
000086  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
00008a  4606              MOV      r6,r0                 ;480
00008c  2000              MOVS     r0,#0                 ;481
00008e  9001              STR      r0,[sp,#4]            ;481
000090  2e00              CMP      r6,#0                 ;483
000092  da01              BGE      |L16.152|
000094  1ec0              SUBS     r0,r0,#3              ;484
000096  e7c2              B        |L16.30|
                  |L16.152|
000098  f8c58004          STR      r8,[r5,#4]            ;486
00009c  806e              STRH     r6,[r5,#2]            ;487
00009e  4628              MOV      r0,r5                 ;488
0000a0  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
0000a4  8028              STRH     r0,[r5,#0]            ;488
0000a6  f7fffffe          BL       _Z12prm_nextFreev ; prm_nextFree()
0000aa  ea5f0a00          MOVS     r10,r0                ;490
0000ae  d101              BNE      |L16.180|
0000b0  1f00              SUBS     r0,r0,#4              ;491
0000b2  e7b4              B        |L16.30|
                  |L16.180|
0000b4  4628              MOV      r0,r5                 ;493
0000b6  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
0000ba  eb000906          ADD      r9,r0,r6              ;493
0000be  464a              MOV      r2,r9                 ;493
0000c0  4629              MOV      r1,r5                 ;493
0000c2  4650              MOV      r0,r10                ;493
0000c4  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
0000c8  e7a9              B        |L16.30|
;;;495    
                          ENDP


                          AREA ||i._Z7prm_crcPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z7prm_crcPK11ParamRecord PROC ; prm_crc(const ParamRecord*)
;;;264    
;;;265    uint16_t prm_crc(const ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267    	uint16_t crc;
;;;268    
;;;269    	if (rec->len>PRM_MAX_LEN)
000004  8860              LDRH     r0,[r4,#2]
000006  f5b07f80          CMP      r0,#0x100
00000a  dd01              BLE      |L17.16|
;;;270    		return 0;
00000c  2000              MOVS     r0,#0
                  |L17.14|
;;;271    
;;;272    	crc = Chirp::calcCrc((uint8_t *)rec+2, rec->len+prm_getDataOffset(rec)-2); // +2, -2 because we don't include crc 
;;;273    
;;;274    	// crc can't equal 0xffff
;;;275    	if (crc==0xffff)
;;;276    		crc = 0;
;;;277    
;;;278    	return crc;
;;;279    }
00000e  bd70              POP      {r4-r6,pc}
                  |L17.16|
000010  4620              MOV      r0,r4                 ;272
000012  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000016  8861              LDRH     r1,[r4,#2]            ;272
000018  4408              ADD      r0,r0,r1              ;272
00001a  1e86              SUBS     r6,r0,#2              ;272
00001c  4631              MOV      r1,r6                 ;272
00001e  1ca0              ADDS     r0,r4,#2              ;272
000020  f7fffffe          BL       _ZN5Chirp7calcCrcEPhj ; Chirp::calcCrc(unsigned char*, unsigned)
000024  4605              MOV      r5,r0                 ;272
000026  f64f70ff          MOV      r0,#0xffff            ;275
00002a  4285              CMP      r5,r0                 ;275
00002c  d100              BNE      |L17.48|
00002e  2500              MOVS     r5,#0                 ;276
                  |L17.48|
000030  4628              MOV      r0,r5                 ;278
000032  e7ec              B        |L17.14|
;;;280    
                          ENDP


                          AREA ||i._Z7prm_getPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_getPKcz PROC ; prm_get(const char*, ...)
;;;400    
;;;401    int32_t prm_get(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;402    {
000002  b5f8              PUSH     {r3-r7,lr}
;;;403    	va_list args;
;;;404    	ParamRecord *rec;
;;;405    	int res;
;;;406    	Shadow *shadow = prm_findShadow(id);
000004  9806              LDR      r0,[sp,#0x18]
000006  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
00000a  4605              MOV      r5,r0
;;;407    
;;;408    	if (shadow && shadow->data)
00000c  b165              CBZ      r5,|L18.40|
00000e  68a8              LDR      r0,[r5,#8]
000010  b150              CBZ      r0,|L18.40|
;;;409    	{
;;;410    		va_start(args, id);
000012  a807              ADD      r0,sp,#0x1c
000014  9000              STR      r0,[sp,#0]
;;;411    		res = Chirp::vdeserialize(shadow->data, shadow->len, &args);
000016  88a9              LDRH     r1,[r5,#4]
000018  466a              MOV      r2,sp
00001a  68a8              LDR      r0,[r5,#8]
00001c  f7fffffe          BL       _ZN5Chirp12vdeserializeEPhjPSt9__va_list ; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
000020  4606              MOV      r6,r0
;;;412    		va_end(args);
000022  2000              MOVS     r0,#0
000024  9000              STR      r0,[sp,#0]
000026  e018              B        |L18.90|
                  |L18.40|
;;;413    	}
;;;414    	else
;;;415    	{
;;;416    		rec = prm_find(id);
000028  2100              MOVS     r1,#0
00002a  9806              LDR      r0,[sp,#0x18]
00002c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000030  4604              MOV      r4,r0
;;;417    		if (rec==NULL)
000032  b924              CBNZ     r4,|L18.62|
;;;418    			return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L18.56|
;;;419    	
;;;420    		va_start(args, id);
;;;421    		res = Chirp::vdeserialize((uint8_t *)rec+prm_getDataOffset(rec), rec->len, &args);
;;;422    		va_end(args);
;;;423    	}
;;;424    	 	
;;;425    	return res;
;;;426    }
000038  bcf8              POP      {r3-r7}
00003a  f85dfb14          LDR      pc,[sp],#0x14
                  |L18.62|
00003e  a807              ADD      r0,sp,#0x1c           ;420
000040  9000              STR      r0,[sp,#0]            ;420
000042  4620              MOV      r0,r4                 ;421
000044  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000048  1907              ADDS     r7,r0,r4              ;421
00004a  8861              LDRH     r1,[r4,#2]            ;421
00004c  466a              MOV      r2,sp                 ;421
00004e  4638              MOV      r0,r7                 ;421
000050  f7fffffe          BL       _ZN5Chirp12vdeserializeEPhjPSt9__va_list ; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
000054  4606              MOV      r6,r0                 ;421
000056  2000              MOVS     r0,#0                 ;422
000058  9000              STR      r0,[sp,#0]            ;422
                  |L18.90|
00005a  4630              MOV      r0,r6                 ;425
00005c  e7ec              B        |L18.56|
;;;427    
                          ENDP


                          AREA ||i._Z7prm_setPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_setPKcz PROC ; prm_set(const char*, ...)
;;;332    
;;;333    int32_t prm_set(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;334    {
000002  b510              PUSH     {r4,lr}
000004  b0c2              SUB      sp,sp,#0x108
;;;335    	va_list args;
;;;336    	int res;
;;;337       	uint8_t buf[PRM_MAX_LEN];
;;;338    
;;;339    	va_start(args, id);
000006  a845              ADD      r0,sp,#0x114
000008  9040              STR      r0,[sp,#0x100]
;;;340    	res = Chirp::vserialize(NULL, buf, PRM_MAX_LEN, &args);
00000a  ab40              ADD      r3,sp,#0x100
00000c  f44f7280          MOV      r2,#0x100
000010  4669              MOV      r1,sp
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
000018  4604              MOV      r4,r0
;;;341    	va_end(args);
00001a  2000              MOVS     r0,#0
00001c  9040              STR      r0,[sp,#0x100]
;;;342    	if (res<0)
00001e  2c00              CMP      r4,#0
000020  da04              BGE      |L19.44|
;;;343    		return res;
000022  4620              MOV      r0,r4
                  |L19.36|
;;;344    
;;;345    	prm_setChirp(id, res, buf);
;;;346    
;;;347    	return 0;
;;;348    }
000024  b042              ADD      sp,sp,#0x108
000026  bc10              POP      {r4}
000028  f85dfb14          LDR      pc,[sp],#0x14
                  |L19.44|
00002c  466a              MOV      r2,sp                 ;345
00002e  a941              ADD      r1,sp,#0x104          ;345
000030  9441              STR      r4,[sp,#0x104]        ;345
000032  9844              LDR      r0,[sp,#0x110]        ;345
000034  f7fffffe          BL       _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
000038  2000              MOVS     r0,#0                 ;347
00003a  e7f3              B        |L19.36|
;;;349    
                          ENDP


                          AREA ||i._Z8prm_findPKcPh||, CODE, READONLY, ALIGN=2

                  _Z8prm_findPKcPh PROC ; prm_find(const char*, unsigned char*)
;;;280    
;;;281    ParamRecord *prm_find(const char *id, uint8_t *buf=NULL)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;282    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;283    	ParamRecord *rec, *begin, *end;
;;;284    
;;;285    	if (buf)
000008  b11d              CBZ      r5,|L20.18|
;;;286    	{
;;;287    		begin =  (ParamRecord *)buf;
00000a  462e              MOV      r6,r5
;;;288    		end = (ParamRecord *)(buf+FLASH_SECTOR_SIZE);
00000c  f5055780          ADD      r7,r5,#0x1000
000010  e009              B        |L20.38|
                  |L20.18|
;;;289    	}
;;;290    	else
;;;291    	{
;;;292    		begin =	(ParamRecord *)PRM_FLASH_LOC;
000012  4810              LDR      r0,|L20.84|
000014  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000016  f10050a0          ADD      r0,r0,#0x14000000
00001a  f5a04600          SUB      r6,r0,#0x8000
;;;293    		end = (ParamRecord *)PRM_ENDREC;
00001e  480d              LDR      r0,|L20.84|
000020  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000022  f10057a0          ADD      r7,r0,#0x14000000
                  |L20.38|
;;;294    	}
;;;295    	
;;;296    	for (rec=begin; rec->crc!=0xffff && rec<end; rec++)
000026  4634              MOV      r4,r6
000028  e00a              B        |L20.64|
                  |L20.42|
;;;297    	{
;;;298    		if(strcmp(id, (char *)rec->data)==0)
00002a  f1040108          ADD      r1,r4,#8
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       strcmp
000034  b910              CBNZ     r0,|L20.60|
;;;299    			return rec;
000036  4620              MOV      r0,r4
                  |L20.56|
;;;300    	}
;;;301    	return NULL;
;;;302    }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L20.60|
00003c  f5047480          ADD      r4,r4,#0x100          ;296
                  |L20.64|
000040  8820              LDRH     r0,[r4,#0]            ;296
000042  f64f71ff          MOV      r1,#0xffff            ;296
000046  4288              CMP      r0,r1                 ;296
000048  d001              BEQ      |L20.78|
00004a  42bc              CMP      r4,r7                 ;296
00004c  d3ed              BCC      |L20.42|
                  |L20.78|
00004e  2000              MOVS     r0,#0                 ;301
000050  e7f2              B        |L20.56|
;;;303    
                          ENDP

000052  0000              DCW      0x0000
                  |L20.84|
                          DCD      g_spifi

                          AREA ||i._Z8prm_initP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z8prm_initP5Chirp PROC ; prm_init(Chirp*)
;;;120    
;;;121    int prm_init(Chirp *chirp)
000000  b510              PUSH     {r4,lr}
;;;122    {
000002  4604              MOV      r4,r0
;;;123    #if 0
;;;124    	int i, count;
;;;125    	// check integrity
;;;126    	if (!prm_verifyAll()) 
;;;127    	{
;;;128    		// take a more stochastic approach becuause there may be power-related issues that would cause us to 
;;;129    		// mis-read.  But if we truly are corrupt, count will not increment. 
;;;130    		for (i=0, count=0; i<10; i++)
;;;131    		{
;;;132    			if (prm_verifyAll())
;;;133    				count++;
;;;134    		}	
;;;135    		// if we're corrupt, format, start over
;;;136    		if (count==0)
;;;137    			prm_format();
;;;138    	} 
;;;139    #endif
;;;140    
;;;141    	chirp->registerModule(g_module);
000004  4902              LDR      r1,|L21.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;142    		
;;;143    	return 0;	
00000c  2000              MOVS     r0,#0
;;;144    }
00000e  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  |L21.16|
                          DCD      g_module

                          AREA ||i._Z9prm_dirtyv||, CODE, READONLY, ALIGN=2

                  _Z9prm_dirtyv PROC ; prm_dirty()
;;;495    
;;;496    bool prm_dirty()
000000  4902              LDR      r1,|L22.12|
;;;497    {
;;;498    	// one-shot 
;;;499    	bool res = g_dirty;
000002  7808              LDRB     r0,[r1,#0]  ; g_dirty
;;;500    	g_dirty = false;
000004  2100              MOVS     r1,#0
000006  4a01              LDR      r2,|L22.12|
000008  7011              STRB     r1,[r2,#0]
;;;501    
;;;502    	return res;
;;;503    }
00000a  4770              BX       lr
;;;504    
                          ENDP

                  |L22.12|
                          DCD      g_dirty

                          AREA ||i._Z9prm_getIdP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z9prm_getIdP11ParamRecord PROC ; prm_getId(ParamRecord*)
;;;178    
;;;179    const char *prm_getId(ParamRecord *rec)
000000  4601              MOV      r1,r0
;;;180    {
;;;181    	return (char *)rec+PRM_HEADER_LEN;
000002  f1010008          ADD      r0,r1,#8
;;;182    }
000006  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.__sti___9_param_cpp_55d340e8||, CODE, READONLY, ALIGN=2

                  __sti___9_param_cpp_55d340e8 PROC
000000  b570              PUSH     {r4-r6,lr}
000002  4c0a              LDR      r4,|L24.44|
000004  2500              MOVS     r5,#0
000006  2000              MOVS     r0,#0
000008  6020              STR      r0,[r4,#0]
00000a  f1050010          ADD      r0,r5,#0x10
00000e  6060              STR      r0,[r4,#4]
000010  6861              LDR      r1,[r4,#4]
000012  0108              LSLS     r0,r1,#4
000014  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
000018  60a0              STR      r0,[r4,#8]
00001a  bf00              NOP      
00001c  4626              MOV      r6,r4
00001e  4a04              LDR      r2,|L24.48|
000020  4904              LDR      r1,|L24.52|
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       __aeabi_atexit
000028  bd70              POP      {r4-r6,pc}
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      g_shadowTable
                  |L24.48|
                          DCD      __dso_handle
                  |L24.52|
                          DCD      _ZN12SimpleVectorI6ShadowED1Ev ; SimpleVector<Shadow>::~SimpleVector()

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z8prm_initP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_initP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._Z14prm_findShadowPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14prm_findShadowPKc||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._Z16prm_resetShadowsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16prm_resetShadowsv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._Z9prm_getIdP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_getIdP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._Z11prm_getDescP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getDescP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._Z17prm_getDataOffsetPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17prm_getDataOffsetPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z11prm_getInfoPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getInfoPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z10prm_getAllRKtP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_getAllRKtP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z10prm_formatv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_formatv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z7prm_crcPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_crcPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z8prm_findPKcPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_findPKcPh||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z12prm_nextFreev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_nextFreev||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z16prm_verifyRecordPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16prm_verifyRecordPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z13prm_verifyAllv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13prm_verifyAllv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z12prm_setChirpPKcRKjPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setChirpPKcRKjPKh||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._Z7prm_setPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_setPKcz||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._Z7prm_getPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_getPKcz||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._Z12prm_getChirpPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_getChirpPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._Z7prm_addPKcjS0_z||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_addPKcjS0_z||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._Z9prm_dirtyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_dirtyv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._Z12prm_setDirtyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setDirtyv||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._Z18prm_setShadowChirpPKcRKjPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18prm_setShadowChirpPKcRKjPKh||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i.__sti___9_param_cpp_55d340e8||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___9_param_cpp_55d340e8||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_shadowTable
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z10prm_formatv ; prm_format()
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x64
                          DCD      _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
000020  a1810000          DCB      0xa1,0x81,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0xf0
                          DCD      _Z12prm_setDirtyv ; prm_setDirty()
000038  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xfc
                          DCD      ||.conststring||+0x144
                          DCD      _Z18prm_setShadowChirpPKcRKjPKh ; prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
000050  a1810000          DCB      0xa1,0x81,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x154
                          DCD      ||.conststring||+0x1e0
                          DCD      _Z16prm_resetShadowsv ; prm_resetShadows()
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f4
                          DCD      ||.conststring||+0x240
                          DCD      _Z12prm_getChirpPKcP5Chirp ; prm_getChirp(const char*, Chirp*)
000080  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x248
                          DCD      ||.conststring||+0x2a8
                          DCD      _Z11prm_getInfoPKcP5Chirp ; prm_getInfo(const char*, Chirp*)
000098  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2b4
                          DCD      ||.conststring||+0x318
                          DCD      _Z10prm_getAllRKtP5Chirp ; prm_getAll(const unsigned short&, Chirp*)
0000b0  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x324
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  70726d5f          DCB      "prm_restore",0
000004  72657374
000008  6f726500
00000c  45726173          DCB      "Erase all parameters and restore to default values@r 0 "
000010  6520616c
000014  6c207061
000018  72616d65
00001c  74657273
000020  20616e64
000024  20726573
000028  746f7265
00002c  20746f20
000030  64656661
000034  756c7420
000038  76616c75
00003c  65734072
000040  203020  
000043  69662073          DCB      "if success, negative if error",0
000047  75636365
00004b  73732c20
00004f  6e656761
000053  74697665
000057  20696620
00005b  6572726f
00005f  7200    
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  70726d5f          DCB      "prm_set",0
000068  73657400
00006c  53657420          DCB      "Set parameter value@p identifier name of parameter (str"
000070  70617261
000074  6d657465
000078  72207661
00007c  6c756540
000080  70206964
000084  656e7469
000088  66696572
00008c  206e616d
000090  65206f66
000094  20706172
000098  616d6574
00009c  65722028
0000a0  737472  
0000a3  696e6729          DCB      "ing)@p value value of parameter (encoded)@r 0 if succes"
0000a7  40702076
0000ab  616c7565
0000af  2076616c
0000b3  7565206f
0000b7  66207061
0000bb  72616d65
0000bf  74657220
0000c3  28656e63
0000c7  6f646564
0000cb  29407220
0000cf  30206966
0000d3  20737563
0000d7  636573  
0000da  732c206e          DCB      "s, negative if error",0
0000de  65676174
0000e2  69766520
0000e6  69662065
0000ea  72726f72
0000ee  00      
0000ef  00                DCB      0
0000f0  70726d5f          DCB      "prm_reload",0
0000f4  72656c6f
0000f8  616400  
0000fb  00                DCB      0
0000fc  43617573          DCB      "Causes all parameters to be reloaded@r 0 if success, ne"
000100  65732061
000104  6c6c2070
000108  6172616d
00010c  65746572
000110  7320746f
000114  20626520
000118  72656c6f
00011c  61646564
000120  40722030
000124  20696620
000128  73756363
00012c  6573732c
000130  206e65  
000133  67617469          DCB      "gative if error",0
000137  76652069
00013b  66206572
00013f  726f7200
000143  00                DCB      0
000144  70726d5f          DCB      "prm_setShadow",0
000148  73657453
00014c  6861646f
000150  7700    
000152  00                DCB      0
000153  00                DCB      0
000154  53657420          DCB      "Set parameter's shadow value@p identifier name of param"
000158  70617261
00015c  6d657465
000160  72277320
000164  73686164
000168  6f772076
00016c  616c7565
000170  40702069
000174  64656e74
000178  69666965
00017c  72206e61
000180  6d65206f
000184  66207061
000188  72616d  
00018b  65746572          DCB      "eter (string)@p value value of parameter (encoded)@r 0 "
00018f  20287374
000193  72696e67
000197  29407020
00019b  76616c75
00019f  65207661
0001a3  6c756520
0001a7  6f662070
0001ab  6172616d
0001af  65746572
0001b3  2028656e
0001b7  636f6465
0001bb  64294072
0001bf  203020  
0001c2  69662073          DCB      "if success, negative if error",0
0001c6  75636365
0001ca  73732c20
0001ce  6e656761
0001d2  74697665
0001d6  20696620
0001da  6572726f
0001de  7200    
0001e0  70726d5f          DCB      "prm_resetShadows",0
0001e4  72657365
0001e8  74536861
0001ec  646f7773
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
0001f4  52657365          DCB      "Reset the shadow values of all parameters@r 0 if succes"
0001f8  74207468
0001fc  65207368
000200  61646f77
000204  2076616c
000208  75657320
00020c  6f662061
000210  6c6c2070
000214  6172616d
000218  65746572
00021c  73407220
000220  30206966
000224  20737563
000228  636573  
00022b  732c206e          DCB      "s, negative if error",0
00022f  65676174
000233  69766520
000237  69662065
00023b  72726f72
00023f  00      
000240  70726d5f          DCB      "prm_get",0
000244  67657400
000248  47657420          DCB      "Get parameter value@p identifier name of parameter (str"
00024c  70617261
000250  6d657465
000254  72207661
000258  6c756540
00025c  70206964
000260  656e7469
000264  66696572
000268  206e616d
00026c  65206f66
000270  20706172
000274  616d6574
000278  65722028
00027c  737472  
00027f  696e6729          DCB      "ing)@r 0 if success, negative if error",0
000283  40722030
000287  20696620
00028b  73756363
00028f  6573732c
000293  206e6567
000297  61746976
00029b  65206966
00029f  20657272
0002a3  6f7200  
0002a6  00                DCB      0
0002a7  00                DCB      0
0002a8  70726d5f          DCB      "prm_getInfo",0
0002ac  67657449
0002b0  6e666f00
0002b4  47657420          DCB      "Get parameter information@p identifier name of paramete"
0002b8  70617261
0002bc  6d657465
0002c0  7220696e
0002c4  666f726d
0002c8  6174696f
0002cc  6e407020
0002d0  6964656e
0002d4  74696669
0002d8  6572206e
0002dc  616d6520
0002e0  6f662070
0002e4  6172616d
0002e8  657465  
0002eb  72202873          DCB      "r (string)@r 0 if success, negative if error",0
0002ef  7472696e
0002f3  67294072
0002f7  20302069
0002fb  66207375
0002ff  63636573
000303  732c206e
000307  65676174
00030b  69766520
00030f  69662065
000313  72726f72
000317  00      
000318  70726d5f          DCB      "prm_getAll",0
00031c  67657441
000320  6c6c00  
000323  00                DCB      0
000324  47657420          DCB      "Get all information@p index index of parameter@r 0 if s"
000328  616c6c20
00032c  696e666f
000330  726d6174
000334  696f6e40
000338  7020696e
00033c  64657820
000340  696e6465
000344  78206f66
000348  20706172
00034c  616d6574
000350  65724072
000354  20302069
000358  662073  
00035b  75636365          DCB      "uccess, negative if error",0
00035f  73732c20
000363  6e656761
000367  74697665
00036b  20696620
00036f  6572726f
000373  7200    
000375  00                DCB      0
000376  00                DCB      0
000377  00                DCB      0
000378  416c6c20          DCB      "All parameters have been erased and restored to their d"
00037c  70617261
000380  6d657465
000384  72732068
000388  61766520
00038c  6265656e
000390  20657261
000394  73656420
000398  616e6420
00039c  72657374
0003a0  6f726564
0003a4  20746f20
0003a8  74686569
0003ac  722064  
0003af  65666175          DCB      "efaults!\n",0
0003b3  6c747321
0003b7  0a00    

                          AREA ||.data||, DATA, ALIGN=0

                  g_dirty
000000  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___9_param_cpp_55d340e8

                          AREA ||t._ZN12SimpleVectorI6ShadowEixEi||, COMGROUP=_ZN12SimpleVectorI6ShadowEixEi, CODE, READONLY, ALIGN=1

                  _ZN12SimpleVectorI6ShadowEixEi PROC ; SimpleVector<Shadow>::operator [](int)
;;;55     
;;;56         Object & operator[](int index)
000000  4602              MOV      r2,r0
;;;57         { return m_objects[index]; }
000002  6890              LDR      r0,[r2,#8]
000004  eb001001          ADD      r0,r0,r1,LSL #4
000008  4770              BX       lr
;;;58     
                          ENDP


                          AREA ||area_number.178||, COMGROUP=_ZN12SimpleVectorI6ShadowEixEi, LINKORDER=||t._ZN12SimpleVectorI6ShadowEixEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.178||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI6ShadowEixEi||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI6ShadowE6resizeEi||, COMGROUP=_ZN12SimpleVectorI6ShadowE6resizeEi, CODE, READONLY, ALIGN=2

                  _ZN12SimpleVectorI6ShadowE6resizeEi PROC ; SimpleVector<Shadow>::resize(int)
;;;33     
;;;34         int resize(int newCapacity)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;35         {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;36             if(newCapacity < m_size)
000008  6820              LDR      r0,[r4,#0]
00000a  42a8              CMP      r0,r5
00000c  dd02              BLE      |L184.20|
;;;37                 return 0;
00000e  2000              MOVS     r0,#0
                  |L184.16|
;;;38     
;;;39             Object *oldArray = m_objects;
;;;40     
;;;41             m_objects = new (std::nothrow) Object[newCapacity];
;;;42             if (m_objects==NULL)
;;;43             {
;;;44                 m_objects = oldArray;
;;;45                 return -1;
;;;46             }
;;;47             for(int k = 0; k<m_size; k++)
;;;48                 m_objects[k] = oldArray[k];
;;;49     
;;;50             m_capacity = newCapacity;
;;;51     
;;;52             delete [] oldArray;
;;;53             return 0;
;;;54         }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L184.20|
000014  68a6              LDR      r6,[r4,#8]            ;39
000016  0128              LSLS     r0,r5,#4              ;41
000018  490f              LDR      r1,|L184.88|
00001a  f7fffffe          BL       _ZnajRKSt9nothrow_t ; operator new[] (unsigned, const std::nothrow_t&)
00001e  60a0              STR      r0,[r4,#8]            ;41
000020  68a0              LDR      r0,[r4,#8]            ;42
000022  b918              CBNZ     r0,|L184.44|
000024  60a6              STR      r6,[r4,#8]            ;44
000026  f04f30ff          MOV      r0,#0xffffffff        ;45
00002a  e7f1              B        |L184.16|
                  |L184.44|
00002c  2000              MOVS     r0,#0                 ;47
00002e  e009              B        |L184.68|
                  |L184.48|
000030  68a1              LDR      r1,[r4,#8]            ;48
000032  eb011100          ADD      r1,r1,r0,LSL #4       ;48
000036  eb061c00          ADD      r12,r6,r0,LSL #4      ;48
00003a  e89c108c          LDM      r12,{r2,r3,r7,r12}    ;48
00003e  e8a1108c          STM      r1!,{r2,r3,r7,r12}    ;48
000042  1c40              ADDS     r0,r0,#1              ;47
                  |L184.68|
000044  6821              LDR      r1,[r4,#0]            ;47
000046  4281              CMP      r1,r0                 ;47
000048  dcf2              BGT      |L184.48|
00004a  6065              STR      r5,[r4,#4]            ;50
00004c  4630              MOV      r0,r6                 ;52
00004e  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000052  2000              MOVS     r0,#0                 ;53
000054  e7dc              B        |L184.16|
;;;55     
                          ENDP

000056  0000              DCW      0x0000
                  |L184.88|
                          DCD      _ZSt7nothrow ; std::nothrow

                          AREA ||area_number.185||, COMGROUP=_ZN12SimpleVectorI6ShadowE6resizeEi, LINKORDER=||t._ZN12SimpleVectorI6ShadowE6resizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.185||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI6ShadowE6resizeEi||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI6ShadowED1Ev||, COMGROUP=_ZN12SimpleVectorI6ShadowED1Ev, CODE, READONLY, ALIGN=1

                  _ZN12SimpleVectorI6ShadowED2Ev                  ; Alternate entry point ; SimpleVector<Shadow>::~SimpleVector__sub_object()
                  _ZN12SimpleVectorI6ShadowED1Ev PROC ; SimpleVector<Shadow>::~SimpleVector()
;;;30     
;;;31         ~SimpleVector()
;;;32         { delete [] m_objects; }
;;;33     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  68a0              LDR      r0,[r4,#8]
000006  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.192||, COMGROUP=_ZN12SimpleVectorI6ShadowED1Ev, LINKORDER=||t._ZN12SimpleVectorI6ShadowED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.192||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI6ShadowED1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "param.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REV16j|
#line 130 ".\\core_cmInstr.h"
|__asm___9_param_cpp_55d340e8___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REVSHi|
#line 144
|__asm___9_param_cpp_55d340e8___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
