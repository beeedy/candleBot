; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\lpc43xx_ssp.o --asm_dir=.\ --list_dir=.\ --depend=.\lpc43xx_ssp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\lpc43xx_ssp.crf lpc43xx_ssp.c]
                          THUMB

                          AREA ||i.SSP_ClearIntPending||, CODE, READONLY, ALIGN=1

                  SSP_ClearIntPending PROC
;;;616     **********************************************************************/
;;;617    void SSP_ClearIntPending(LPC_SSPn_Type *SSPx, uint32_t IntType)
000000  6201              STR      r1,[r0,#0x20]
;;;618    {
;;;619    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;620    	CHECK_PARAM(PARAM_SSP_INTCLR(IntType));
;;;621    
;;;622    	SSPx->ICR = IntType;
;;;623    }
000002  4770              BX       lr
;;;624    
                          ENDP


                          AREA ||i.SSP_Cmd||, CODE, READONLY, ALIGN=1

                  SSP_Cmd PROC
;;;220     **********************************************************************/
;;;221    void SSP_Cmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;222    {
;;;223    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;224    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;225    
;;;226    	if (NewState == ENABLE)
000002  d104              BNE      |L2.14|
;;;227    	{
;;;228    		SSPx->CR1 |= SSP_CR1_SSP_EN;
000004  6842              LDR      r2,[r0,#4]
000006  f0420202          ORR      r2,r2,#2
00000a  6042              STR      r2,[r0,#4]
00000c  e003              B        |L2.22|
                  |L2.14|
;;;229    	}
;;;230    	else
;;;231    	{
;;;232    		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
00000e  6842              LDR      r2,[r0,#4]
000010  f002020d          AND      r2,r2,#0xd
000014  6042              STR      r2,[r0,#4]
                  |L2.22|
;;;233    	}
;;;234    }
000016  4770              BX       lr
;;;235    
                          ENDP


                          AREA ||i.SSP_ConfigStructInit||, CODE, READONLY, ALIGN=2

                  SSP_ConfigStructInit PROC
;;;199     *******************************************************************************/
;;;200    void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
000000  2100              MOVS     r1,#0
;;;201    {
;;;202    	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
000002  6041              STR      r1,[r0,#4]
;;;203    	SSP_InitStruct->CPOL = SSP_CPOL_HI;
000004  6081              STR      r1,[r0,#8]
;;;204    	SSP_InitStruct->ClockRate = 100000;
000006  4904              LDR      r1,|L3.24|
000008  6141              STR      r1,[r0,#0x14]
;;;205    	SSP_InitStruct->Databit = SSP_DATABIT_8;
00000a  2107              MOVS     r1,#7
00000c  6001              STR      r1,[r0,#0]
;;;206    	SSP_InitStruct->Mode = SSP_MASTER_MODE;
00000e  2100              MOVS     r1,#0
000010  60c1              STR      r1,[r0,#0xc]
;;;207    	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
000012  6101              STR      r1,[r0,#0x10]
;;;208    }
000014  4770              BX       lr
;;;209    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x000186a0

                          AREA ||i.SSP_DMACmd||, CODE, READONLY, ALIGN=1

                  SSP_DMACmd PROC
;;;638     **********************************************************************/
;;;639    void SSP_DMACmd(LPC_SSPn_Type *SSPx, uint32_t DMAMode, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;640    {
;;;641    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;642    	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
;;;643    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;644    
;;;645    	if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d103              BNE      |L4.14|
;;;646    	{
;;;647    		SSPx->DMACR |= DMAMode;
000006  6a43              LDR      r3,[r0,#0x24]
000008  430b              ORRS     r3,r3,r1
00000a  6243              STR      r3,[r0,#0x24]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;648    	}
;;;649    	else
;;;650    	{
;;;651    		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
00000e  6a43              LDR      r3,[r0,#0x24]
000010  2403              MOVS     r4,#3
000012  438c              BICS     r4,r4,r1
000014  4023              ANDS     r3,r3,r4
000016  6243              STR      r3,[r0,#0x24]
                  |L4.24|
;;;652    	}
;;;653    }
000018  bd10              POP      {r4,pc}
;;;654    
                          ENDP


                          AREA ||i.SSP_DeInit||, CODE, READONLY, ALIGN=1

                  SSP_DeInit PROC
;;;162     **********************************************************************/
;;;163    void SSP_DeInit(LPC_SSPn_Type* SSPx)
000000  6841              LDR      r1,[r0,#4]
;;;164    {
;;;165    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;166    
;;;167    	/* Disable SSP operation*/
;;;168    	SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
000002  f001010d          AND      r1,r1,#0xd
000006  6041              STR      r1,[r0,#4]
;;;169    }
000008  4770              BX       lr
;;;170    
                          ENDP


                          AREA ||i.SSP_GetDataSize||, CODE, READONLY, ALIGN=1

                  SSP_GetDataSize PROC
;;;181    *******************************************************************************/
;;;182    uint8_t SSP_GetDataSize(LPC_SSPn_Type* SSPx)
000000  4601              MOV      r1,r0
;;;183    {
;;;184    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;185    	return (SSPx->CR0 & (0xF));
000002  6808              LDR      r0,[r1,#0]
000004  f000000f          AND      r0,r0,#0xf
;;;186    }
000008  4770              BX       lr
;;;187    
                          ENDP


                          AREA ||i.SSP_GetIntStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetIntStatus PROC
;;;596     **********************************************************************/
;;;597    IntStatus SSP_GetIntStatus (LPC_SSPn_Type *SSPx, uint32_t IntType)
000000  4602              MOV      r2,r0
;;;598    {
;;;599    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;600    	CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));
;;;601    
;;;602    	return ((SSPx->MIS & IntType) ? SET :RESET);
000002  69d0              LDR      r0,[r2,#0x1c]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L7.12|
000008  2001              MOVS     r0,#1
                  |L7.10|
;;;603    }
00000a  4770              BX       lr
                  |L7.12|
00000c  2000              MOVS     r0,#0                 ;602
00000e  e7fc              B        |L7.10|
;;;604    
                          ENDP


                          AREA ||i.SSP_GetRawIntStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetRawIntStatus PROC
;;;572     **********************************************************************/
;;;573    IntStatus SSP_GetRawIntStatus(LPC_SSPn_Type *SSPx, uint32_t RawIntType)
000000  4602              MOV      r2,r0
;;;574    {
;;;575    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;576    	CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));
;;;577    
;;;578    	return ((SSPx->RIS & RawIntType) ? SET : RESET);
000002  6990              LDR      r0,[r2,#0x18]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L8.12|
000008  2001              MOVS     r0,#1
                  |L8.10|
;;;579    }
00000a  4770              BX       lr
                  |L8.12|
00000c  2000              MOVS     r0,#0                 ;578
00000e  e7fc              B        |L8.10|
;;;580    
                          ENDP


                          AREA ||i.SSP_GetStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetStatus PROC
;;;519     **********************************************************************/
;;;520    FlagStatus SSP_GetStatus(LPC_SSPn_Type* SSPx, uint32_t FlagType)
000000  4602              MOV      r2,r0
;;;521    {
;;;522    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;523    	CHECK_PARAM(PARAM_SSP_STAT(FlagType));
;;;524    
;;;525    	return ((SSPx->SR & FlagType) ? SET : RESET);
000002  68d0              LDR      r0,[r2,#0xc]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L9.12|
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;526    }
00000a  4770              BX       lr
                  |L9.12|
00000c  2000              MOVS     r0,#0                 ;525
00000e  e7fc              B        |L9.10|
;;;527    
                          ENDP


                          AREA ||i.SSP_Init||, CODE, READONLY, ALIGN=2

                  SSP_Init PROC
;;;93      *********************************************************************/
;;;94     void SSP_Init(LPC_SSPn_Type *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;95     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;96     	uint32_t tmp;
;;;97     	uint32_t prescale, cr0_div, cmp_clk;
;;;98     	uint64_t ssp_clk;
;;;99     
;;;100    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;101    
;;;102    	if(SSPx == LPC_SSP0) {
000008  482f              LDR      r0,|L10.200|
00000a  4284              CMP      r4,r0
00000c  d104              BNE      |L10.24|
;;;103    		/* Set up clock and power for SSP0 module */
;;;104    		//LPC_CGU->BASE_SSP0_CLK = (SRC_PL160M_0<<24) | (1<<11);
;;;105    		CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_SSP0);
00000e  211f              MOVS     r1,#0x1f
000010  2009              MOVS     r0,#9
000012  f7fffffe          BL       CGU_EntityConnect
000016  e009              B        |L10.44|
                  |L10.24|
;;;106    	} else if(SSPx == LPC_SSP1) {
000018  482c              LDR      r0,|L10.204|
00001a  4284              CMP      r4,r0
00001c  d104              BNE      |L10.40|
;;;107    		/* Set up clock and power for SSP1 module */
;;;108    		//LPC_CGU->BASE_SSP1_CLK = (SRC_PL160M_0<<24) | (1<<11);
;;;109    		CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_SSP1);
00001e  2120              MOVS     r1,#0x20
000020  2009              MOVS     r0,#9
000022  f7fffffe          BL       CGU_EntityConnect
000026  e001              B        |L10.44|
                  |L10.40|
;;;110    	} else {
;;;111    		return;
;;;112    	}
;;;113    
;;;114    	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
;;;115    	 * SSP is disable, Slave output is disable as default
;;;116    	 */
;;;117    	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
;;;118    		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
;;;119    		& SSP_CR0_BITMASK;
;;;120    	// write back to SSP control register
;;;121    	SSPx->CR0 = tmp;
;;;122    
;;;123    	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
;;;124    	// Write back to CR1
;;;125    	SSPx->CR1 = tmp;
;;;126    
;;;127    	// Set clock rate for SSP peripheral
;;;128    	if(SSPx == LPC_SSP0)
;;;129    		ssp_clk = CGU_GetPCLKFrequency(CGU_PERIPHERAL_SSP0);
;;;130    	else
;;;131    		ssp_clk = CGU_GetPCLKFrequency(CGU_PERIPHERAL_SSP1);
;;;132    	cr0_div = 0;
;;;133    	cmp_clk = 0xFFFFFFFF;
;;;134    	prescale = 2;
;;;135    	while (cmp_clk > SSP_ConfigStruct->ClockRate)
;;;136    	{
;;;137    		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
;;;138    		if (cmp_clk > SSP_ConfigStruct->ClockRate)
;;;139    		{
;;;140    			cr0_div++;
;;;141    			if (cr0_div > 0xFF)
;;;142    			{
;;;143    				cr0_div = 0;
;;;144    				prescale += 2;
;;;145    			}
;;;146    		}
;;;147    	}
;;;148    
;;;149        /* Write computed prescaler and divider back to register */
;;;150        SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
;;;151        SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
;;;152        SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
;;;153    }
000028  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.44|
00002c  88a8              LDRH     r0,[r5,#4]            ;117
00002e  8929              LDRH     r1,[r5,#8]            ;117
000030  4308              ORRS     r0,r0,r1              ;117
000032  8a29              LDRH     r1,[r5,#0x10]         ;117
000034  4308              ORRS     r0,r0,r1              ;117
000036  8829              LDRH     r1,[r5,#0]            ;117
000038  4308              ORRS     r0,r0,r1              ;117
00003a  fa1ffb80          UXTH     r11,r0                ;117
00003e  f8c4b000          STR      r11,[r4,#0]           ;121
000042  7b28              LDRB     r0,[r5,#0xc]          ;123
000044  f0000b0f          AND      r11,r0,#0xf           ;123
000048  f8c4b004          STR      r11,[r4,#4]           ;125
00004c  481e              LDR      r0,|L10.200|
00004e  4284              CMP      r4,r0                 ;128
000050  d105              BNE      |L10.94|
000052  201a              MOVS     r0,#0x1a              ;129
000054  f7fffffe          BL       CGU_GetPCLKFrequency
000058  2700              MOVS     r7,#0                 ;129
00005a  4606              MOV      r6,r0                 ;129
00005c  e004              B        |L10.104|
                  |L10.94|
00005e  201b              MOVS     r0,#0x1b              ;131
000060  f7fffffe          BL       CGU_GetPCLKFrequency
000064  2700              MOVS     r7,#0                 ;131
000066  4606              MOV      r6,r0                 ;131
                  |L10.104|
000068  f04f0800          MOV      r8,#0                 ;132
00006c  f04f3aff          MOV      r10,#0xffffffff       ;133
000070  f04f0902          MOV      r9,#2                 ;134
000074  e016              B        |L10.164|
                  |L10.118|
000076  f1080001          ADD      r0,r8,#1              ;137
00007a  fb00fc09          MUL      r12,r0,r9             ;137
00007e  4662              MOV      r2,r12                ;137
000080  2300              MOVS     r3,#0                 ;137
000082  4630              MOV      r0,r6                 ;137
000084  4639              MOV      r1,r7                 ;137
000086  f7fffffe          BL       __aeabi_uldivmod
00008a  4682              MOV      r10,r0                ;137
00008c  6968              LDR      r0,[r5,#0x14]         ;138
00008e  4550              CMP      r0,r10                ;138
000090  d208              BCS      |L10.164|
000092  f1080801          ADD      r8,r8,#1              ;140
000096  f1b80fff          CMP      r8,#0xff              ;141
00009a  d903              BLS      |L10.164|
00009c  f04f0800          MOV      r8,#0                 ;143
0000a0  f1090902          ADD      r9,r9,#2              ;144
                  |L10.164|
0000a4  6968              LDR      r0,[r5,#0x14]         ;135
0000a6  4550              CMP      r0,r10                ;135
0000a8  d3e5              BCC      |L10.118|
0000aa  6820              LDR      r0,[r4,#0]            ;150
0000ac  b2c0              UXTB     r0,r0                 ;150
0000ae  6020              STR      r0,[r4,#0]            ;150
0000b0  6820              LDR      r0,[r4,#0]            ;151
0000b2  f64f71ff          MOV      r1,#0xffff            ;151
0000b6  ea012108          AND      r1,r1,r8,LSL #8       ;151
0000ba  4308              ORRS     r0,r0,r1              ;151
0000bc  6020              STR      r0,[r4,#0]            ;151
0000be  f00900ff          AND      r0,r9,#0xff           ;152
0000c2  6120              STR      r0,[r4,#0x10]         ;152
0000c4  bf00              NOP      
0000c6  e7af              B        |L10.40|
;;;154    
                          ENDP

                  |L10.200|
                          DCD      0x40083000
                  |L10.204|
                          DCD      0x400c5000

                          AREA ||i.SSP_IntConfig||, CODE, READONLY, ALIGN=1

                  SSP_IntConfig PROC
;;;542     **********************************************************************/
;;;543    void SSP_IntConfig(LPC_SSPn_Type *SSPx, uint32_t IntType, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;544    {
;;;545    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;546    	CHECK_PARAM(PARAM_SSP_INTCFG(IntType));
;;;547    
;;;548    	if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d103              BNE      |L11.14|
;;;549    	{
;;;550    		SSPx->IMSC |= IntType;
000006  6943              LDR      r3,[r0,#0x14]
000008  430b              ORRS     r3,r3,r1
00000a  6143              STR      r3,[r0,#0x14]
00000c  e004              B        |L11.24|
                  |L11.14|
;;;551    	}
;;;552    	else
;;;553    	{
;;;554    		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
00000e  6943              LDR      r3,[r0,#0x14]
000010  240f              MOVS     r4,#0xf
000012  438c              BICS     r4,r4,r1
000014  4023              ANDS     r3,r3,r4
000016  6143              STR      r3,[r0,#0x14]
                  |L11.24|
;;;555    	}
;;;556    }
000018  bd10              POP      {r4,pc}
;;;557    
                          ENDP


                          AREA ||i.SSP_LoopBackCmd||, CODE, READONLY, ALIGN=1

                  SSP_LoopBackCmd PROC
;;;245     **********************************************************************/
;;;246    void SSP_LoopBackCmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;247    {
;;;248    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;249    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;250    
;;;251    	if (NewState == ENABLE)
000002  d104              BNE      |L12.14|
;;;252    	{
;;;253    		SSPx->CR1 |= SSP_CR1_LBM_EN;
000004  6842              LDR      r2,[r0,#4]
000006  f0420201          ORR      r2,r2,#1
00000a  6042              STR      r2,[r0,#4]
00000c  e003              B        |L12.22|
                  |L12.14|
;;;254    	}
;;;255    	else
;;;256    	{
;;;257    		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
00000e  6842              LDR      r2,[r0,#4]
000010  f002020e          AND      r2,r2,#0xe
000014  6042              STR      r2,[r0,#4]
                  |L12.22|
;;;258    	}
;;;259    }
000016  4770              BX       lr
;;;260    
                          ENDP


                          AREA ||i.SSP_ReadWrite||, CODE, READONLY, ALIGN=1

                  SSP_ReadWrite PROC
;;;335     ***********************************************************************/
;;;336    int32_t SSP_ReadWrite (LPC_SSPn_Type *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;337    						SSP_TRANSFER_Type xfType)
;;;338    {
000004  4605              MOV      r5,r0
000006  460b              MOV      r3,r1
;;;339    	uint8_t *rdata8;
;;;340        uint8_t *wdata8;
;;;341    	uint16_t *rdata16;
;;;342        uint16_t *wdata16;
;;;343        uint32_t stat;
;;;344        uint32_t tmp;
;;;345        int32_t dataword;
;;;346    
;;;347        dataCfg->rx_cnt = 0;
000008  2000              MOVS     r0,#0
00000a  60d8              STR      r0,[r3,#0xc]
;;;348        dataCfg->tx_cnt = 0;
00000c  6058              STR      r0,[r3,#4]
;;;349        dataCfg->status = 0;
00000e  6158              STR      r0,[r3,#0x14]
;;;350    
;;;351    
;;;352    	/* Clear all remaining data in RX FIFO */
;;;353    	while (SSPx->SR & SSP_SR_RNE){
000010  e003              B        |L13.26|
                  |L13.18|
;;;354    		tmp = (uint32_t) SSP_ReceiveData(SSPx);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       SSP_ReceiveData
000018  4606              MOV      r6,r0
                  |L13.26|
00001a  68e8              LDR      r0,[r5,#0xc]          ;353
00001c  f0000004          AND      r0,r0,#4              ;353
000020  2800              CMP      r0,#0                 ;353
000022  d1f6              BNE      |L13.18|
;;;355    	}
;;;356    
;;;357    	// Clear status
;;;358    	SSPx->ICR = SSP_ICR_BITMASK;
000024  2003              MOVS     r0,#3
000026  6228              STR      r0,[r5,#0x20]
;;;359    	if(SSP_GetDataSize(SSPx)>8)
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       SSP_GetDataSize
00002e  2808              CMP      r0,#8
000030  dd01              BLE      |L13.54|
;;;360    		dataword = 1;
000032  2401              MOVS     r4,#1
000034  e000              B        |L13.56|
                  |L13.54|
;;;361    	else dataword = 0;
000036  2400              MOVS     r4,#0
                  |L13.56|
;;;362    
;;;363    	// Polling mode ----------------------------------------------------------------------
;;;364    	if (xfType == SSP_TRANSFER_POLLING){
000038  9802              LDR      r0,[sp,#8]
00003a  2800              CMP      r0,#0
00003c  d17e              BNE      |L13.316|
;;;365    		if (dataword == 0){
00003e  b924              CBNZ     r4,|L13.74|
;;;366    			rdata8 = (uint8_t *)dataCfg->rx_data;
000040  f8d38008          LDR      r8,[r3,#8]
;;;367    			wdata8 = (uint8_t *)dataCfg->tx_data;
000044  f8d39000          LDR      r9,[r3,#0]
000048  e003              B        |L13.82|
                  |L13.74|
;;;368    		} else {
;;;369    			rdata16 = (uint16_t *)dataCfg->rx_data;
00004a  f8d3a008          LDR      r10,[r3,#8]
;;;370    			wdata16 = (uint16_t *)dataCfg->tx_data;
00004e  f8d3b000          LDR      r11,[r3,#0]
                  |L13.82|
;;;371    		}
;;;372    		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
000052  e05d              B        |L13.272|
                  |L13.84|
;;;373    			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
000054  68e8              LDR      r0,[r5,#0xc]
000056  f0000002          AND      r0,r0,#2
00005a  b310              CBZ      r0,|L13.162|
00005c  6919              LDR      r1,[r3,#0x10]
00005e  6858              LDR      r0,[r3,#4]
000060  4288              CMP      r0,r1
000062  d029              BEQ      |L13.184|
;;;374    				// Write data to buffer
;;;375    				if(dataCfg->tx_data == NULL){
000064  6818              LDR      r0,[r3,#0]
000066  b988              CBNZ     r0,|L13.140|
;;;376    					if (dataword == 0){
000068  b93c              CBNZ     r4,|L13.122|
;;;377    						SSP_SendData(SSPx, 0xFF);
00006a  21ff              MOVS     r1,#0xff
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       SSP_SendData
;;;378    						dataCfg->tx_cnt++;
000072  6858              LDR      r0,[r3,#4]
000074  1c40              ADDS     r0,r0,#1
000076  6058              STR      r0,[r3,#4]
000078  e01e              B        |L13.184|
                  |L13.122|
;;;379    					} else {
;;;380    						SSP_SendData(SSPx, 0xFFFF);
00007a  f64f71ff          MOV      r1,#0xffff
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       SSP_SendData
;;;381    						dataCfg->tx_cnt += 2;
000084  6858              LDR      r0,[r3,#4]
000086  1c80              ADDS     r0,r0,#2
000088  6058              STR      r0,[r3,#4]
00008a  e015              B        |L13.184|
                  |L13.140|
;;;382    					}
;;;383    				} else {
;;;384    					if (dataword == 0){
00008c  b954              CBNZ     r4,|L13.164|
;;;385    						SSP_SendData(SSPx, *wdata8);
00008e  f8991000          LDRB     r1,[r9,#0]
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       SSP_SendData
;;;386    						wdata8++;
000098  f1090901          ADD      r9,r9,#1
;;;387    						dataCfg->tx_cnt++;
00009c  6858              LDR      r0,[r3,#4]
00009e  1c40              ADDS     r0,r0,#1
0000a0  6058              STR      r0,[r3,#4]
                  |L13.162|
0000a2  e009              B        |L13.184|
                  |L13.164|
;;;388    					} else {
;;;389    						SSP_SendData(SSPx, *wdata16);
0000a4  f8bb1000          LDRH     r1,[r11,#0]
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       SSP_SendData
;;;390    						wdata16++;
0000ae  f10b0b02          ADD      r11,r11,#2
;;;391    						dataCfg->tx_cnt += 2;
0000b2  6858              LDR      r0,[r3,#4]
0000b4  1c80              ADDS     r0,r0,#2
0000b6  6058              STR      r0,[r3,#4]
                  |L13.184|
;;;392    					}
;;;393    				}
;;;394    			}
;;;395    
;;;396    			// Check overrun error
;;;397    			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
0000b8  69af              LDR      r7,[r5,#0x18]
0000ba  f0070001          AND      r0,r7,#1
0000be  b130              CBZ      r0,|L13.206|
;;;398    				// save status and return
;;;399    				dataCfg->status = stat | SSP_STAT_ERROR;
0000c0  f4477000          ORR      r0,r7,#0x200
0000c4  6158              STR      r0,[r3,#0x14]
;;;400    				return (-1);
0000c6  f04f30ff          MOV      r0,#0xffffffff
                  |L13.202|
;;;401    			}
;;;402    
;;;403    			// Check for any data available in RX FIFO
;;;404    			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
;;;405    				// Read data from SSP data
;;;406    				tmp = SSP_ReceiveData(SSPx);
;;;407    
;;;408    				// Store data to destination
;;;409    				if (dataCfg->rx_data != NULL)
;;;410    				{
;;;411    					if (dataword == 0){
;;;412    						*(rdata8) = (uint8_t) tmp;
;;;413    						rdata8++;
;;;414    					} else {
;;;415    						*(rdata16) = (uint16_t) tmp;
;;;416    						rdata16++;
;;;417    					}
;;;418    				}
;;;419    				// Increase counter
;;;420    				if (dataword == 0){
;;;421    					dataCfg->rx_cnt++;
;;;422    				} else {
;;;423    					dataCfg->rx_cnt += 2;
;;;424    				}
;;;425    			}
;;;426    		}
;;;427    
;;;428    		// save status
;;;429    		dataCfg->status = SSP_STAT_DONE;
;;;430    
;;;431    		if (dataCfg->tx_data != NULL){
;;;432    			return dataCfg->tx_cnt;
;;;433    		} else if (dataCfg->rx_data != NULL){
;;;434    			return dataCfg->rx_cnt;
;;;435    		} else {
;;;436    			return (0);
;;;437    		}
;;;438    	}
;;;439    
;;;440    	// Interrupt mode ----------------------------------------------------------------------
;;;441    	else if (xfType == SSP_TRANSFER_INTERRUPT){
;;;442    
;;;443    		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
;;;444    			// Write data to buffer
;;;445    			if(dataCfg->tx_data == NULL){
;;;446    				if (dataword == 0){
;;;447    					SSP_SendData(SSPx, 0xFF);
;;;448    					dataCfg->tx_cnt++;
;;;449    				} else {
;;;450    					SSP_SendData(SSPx, 0xFFFF);
;;;451    					dataCfg->tx_cnt += 2;
;;;452    				}
;;;453    			} else {
;;;454    				if (dataword == 0){
;;;455    					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
;;;456    					dataCfg->tx_cnt++;
;;;457    				} else {
;;;458    					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
;;;459    					dataCfg->tx_cnt += 2;
;;;460    				}
;;;461    			}
;;;462    
;;;463    			// Check error
;;;464    			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
;;;465    				// save status and return
;;;466    				dataCfg->status = stat | SSP_STAT_ERROR;
;;;467    				return (-1);
;;;468    			}
;;;469    
;;;470    			// Check for any data available in RX FIFO
;;;471    			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
;;;472    				// Read data from SSP data
;;;473    				tmp = SSP_ReceiveData(SSPx);
;;;474    
;;;475    				// Store data to destination
;;;476    				if (dataCfg->rx_data != NULL)
;;;477    				{
;;;478    					if (dataword == 0){
;;;479    						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
;;;480    					} else {
;;;481    						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
;;;482    					}
;;;483    				}
;;;484    				// Increase counter
;;;485    				if (dataword == 0){
;;;486    					dataCfg->rx_cnt++;
;;;487    				} else {
;;;488    					dataCfg->rx_cnt += 2;
;;;489    				}
;;;490    			}
;;;491    		}
;;;492    
;;;493    		// If there more data to sent or receive
;;;494    		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
;;;495    			// Enable all interrupt
;;;496    			SSPx->IMSC = SSP_IMSC_BITMASK;
;;;497    		} else {
;;;498    			// Save status
;;;499    			dataCfg->status = SSP_STAT_DONE;
;;;500    		}
;;;501    		return (0);
;;;502    	}
;;;503    
;;;504    	return (-1);
;;;505    }
0000ca  e8bd8ffe          POP      {r1-r11,pc}
                  |L13.206|
0000ce  e017              B        |L13.256|
                  |L13.208|
0000d0  4628              MOV      r0,r5                 ;406
0000d2  f7fffffe          BL       SSP_ReceiveData
0000d6  4606              MOV      r6,r0                 ;406
0000d8  6898              LDR      r0,[r3,#8]            ;409
0000da  b148              CBZ      r0,|L13.240|
0000dc  b924              CBNZ     r4,|L13.232|
0000de  f8886000          STRB     r6,[r8,#0]            ;412
0000e2  f1080801          ADD      r8,r8,#1              ;413
0000e6  e003              B        |L13.240|
                  |L13.232|
0000e8  f8aa6000          STRH     r6,[r10,#0]           ;415
0000ec  f10a0a02          ADD      r10,r10,#2            ;416
                  |L13.240|
0000f0  b91c              CBNZ     r4,|L13.250|
0000f2  68d8              LDR      r0,[r3,#0xc]          ;421
0000f4  1c40              ADDS     r0,r0,#1              ;421
0000f6  60d8              STR      r0,[r3,#0xc]          ;421
0000f8  e002              B        |L13.256|
                  |L13.250|
0000fa  68d8              LDR      r0,[r3,#0xc]          ;423
0000fc  1c80              ADDS     r0,r0,#2              ;423
0000fe  60d8              STR      r0,[r3,#0xc]          ;423
                  |L13.256|
000100  68e8              LDR      r0,[r5,#0xc]          ;404
000102  f0000004          AND      r0,r0,#4              ;404
000106  b118              CBZ      r0,|L13.272|
000108  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;404
00010c  4288              CMP      r0,r1                 ;404
00010e  d1df              BNE      |L13.208|
                  |L13.272|
000110  6919              LDR      r1,[r3,#0x10]         ;372
000112  6858              LDR      r0,[r3,#4]            ;372
000114  4288              CMP      r0,r1                 ;372
000116  d19d              BNE      |L13.84|
000118  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;372
00011c  4288              CMP      r0,r1                 ;372
00011e  d199              BNE      |L13.84|
000120  f44f7080          MOV      r0,#0x100             ;429
000124  6158              STR      r0,[r3,#0x14]         ;429
000126  6818              LDR      r0,[r3,#0]            ;431
000128  b110              CBZ      r0,|L13.304|
00012a  6858              LDR      r0,[r3,#4]            ;432
00012c  e7cd              B        |L13.202|
00012e  e005              B        |L13.316|
                  |L13.304|
000130  6898              LDR      r0,[r3,#8]            ;433
000132  b108              CBZ      r0,|L13.312|
000134  68d8              LDR      r0,[r3,#0xc]          ;434
000136  e7c8              B        |L13.202|
                  |L13.312|
000138  2000              MOVS     r0,#0                 ;436
00013a  e7c6              B        |L13.202|
                  |L13.316|
00013c  9802              LDR      r0,[sp,#8]            ;441
00013e  2801              CMP      r0,#1                 ;441
000140  d169              BNE      |L13.534|
000142  e050              B        |L13.486|
                  |L13.324|
000144  6818              LDR      r0,[r3,#0]            ;445
000146  b988              CBNZ     r0,|L13.364|
000148  b93c              CBNZ     r4,|L13.346|
00014a  21ff              MOVS     r1,#0xff              ;447
00014c  4628              MOV      r0,r5                 ;447
00014e  f7fffffe          BL       SSP_SendData
000152  6858              LDR      r0,[r3,#4]            ;448
000154  1c40              ADDS     r0,r0,#1              ;448
000156  6058              STR      r0,[r3,#4]            ;448
000158  e01c              B        |L13.404|
                  |L13.346|
00015a  f64f71ff          MOV      r1,#0xffff            ;450
00015e  4628              MOV      r0,r5                 ;450
000160  f7fffffe          BL       SSP_SendData
000164  6858              LDR      r0,[r3,#4]            ;451
000166  1c80              ADDS     r0,r0,#2              ;451
000168  6058              STR      r0,[r3,#4]            ;451
00016a  e013              B        |L13.404|
                  |L13.364|
00016c  b94c              CBNZ     r4,|L13.386|
00016e  e9d30200          LDRD     r0,r2,[r3,#0]         ;455
000172  5c81              LDRB     r1,[r0,r2]            ;455
000174  4628              MOV      r0,r5                 ;455
000176  f7fffffe          BL       SSP_SendData
00017a  6858              LDR      r0,[r3,#4]            ;456
00017c  1c40              ADDS     r0,r0,#1              ;456
00017e  6058              STR      r0,[r3,#4]            ;456
000180  e008              B        |L13.404|
                  |L13.386|
000182  e9d30200          LDRD     r0,r2,[r3,#0]         ;458
000186  5a81              LDRH     r1,[r0,r2]            ;458
000188  4628              MOV      r0,r5                 ;458
00018a  f7fffffe          BL       SSP_SendData
00018e  6858              LDR      r0,[r3,#4]            ;459
000190  1c80              ADDS     r0,r0,#2              ;459
000192  6058              STR      r0,[r3,#4]            ;459
                  |L13.404|
000194  69af              LDR      r7,[r5,#0x18]         ;464
000196  f0070001          AND      r0,r7,#1              ;464
00019a  b128              CBZ      r0,|L13.424|
00019c  f4477000          ORR      r0,r7,#0x200          ;466
0001a0  6158              STR      r0,[r3,#0x14]         ;466
0001a2  f04f30ff          MOV      r0,#0xffffffff        ;467
0001a6  e790              B        |L13.202|
                  |L13.424|
0001a8  e015              B        |L13.470|
                  |L13.426|
0001aa  4628              MOV      r0,r5                 ;473
0001ac  f7fffffe          BL       SSP_ReceiveData
0001b0  4606              MOV      r6,r0                 ;473
0001b2  6898              LDR      r0,[r3,#8]            ;476
0001b4  b138              CBZ      r0,|L13.454|
0001b6  b91c              CBNZ     r4,|L13.448|
0001b8  e9d31202          LDRD     r1,r2,[r3,#8]         ;479
0001bc  548e              STRB     r6,[r1,r2]            ;479
0001be  e002              B        |L13.454|
                  |L13.448|
0001c0  e9d31202          LDRD     r1,r2,[r3,#8]         ;481
0001c4  528e              STRH     r6,[r1,r2]            ;481
                  |L13.454|
0001c6  b91c              CBNZ     r4,|L13.464|
0001c8  68d8              LDR      r0,[r3,#0xc]          ;486
0001ca  1c40              ADDS     r0,r0,#1              ;486
0001cc  60d8              STR      r0,[r3,#0xc]          ;486
0001ce  e002              B        |L13.470|
                  |L13.464|
0001d0  68d8              LDR      r0,[r3,#0xc]          ;488
0001d2  1c80              ADDS     r0,r0,#2              ;488
0001d4  60d8              STR      r0,[r3,#0xc]          ;488
                  |L13.470|
0001d6  68e8              LDR      r0,[r5,#0xc]          ;471
0001d8  f0000004          AND      r0,r0,#4              ;471
0001dc  b118              CBZ      r0,|L13.486|
0001de  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;471
0001e2  4288              CMP      r0,r1                 ;471
0001e4  d1e1              BNE      |L13.426|
                  |L13.486|
0001e6  68e8              LDR      r0,[r5,#0xc]          ;443
0001e8  f0000002          AND      r0,r0,#2              ;443
0001ec  b118              CBZ      r0,|L13.502|
0001ee  6919              LDR      r1,[r3,#0x10]         ;443
0001f0  6858              LDR      r0,[r3,#4]            ;443
0001f2  4288              CMP      r0,r1                 ;443
0001f4  d1a6              BNE      |L13.324|
                  |L13.502|
0001f6  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;494
0001fa  4288              CMP      r0,r1                 ;494
0001fc  d103              BNE      |L13.518|
0001fe  6919              LDR      r1,[r3,#0x10]         ;494
000200  6858              LDR      r0,[r3,#4]            ;494
000202  4288              CMP      r0,r1                 ;494
000204  d002              BEQ      |L13.524|
                  |L13.518|
000206  200f              MOVS     r0,#0xf               ;496
000208  6168              STR      r0,[r5,#0x14]         ;496
00020a  e002              B        |L13.530|
                  |L13.524|
00020c  f44f7080          MOV      r0,#0x100             ;499
000210  6158              STR      r0,[r3,#0x14]         ;499
                  |L13.530|
000212  2000              MOVS     r0,#0                 ;501
000214  e759              B        |L13.202|
                  |L13.534|
000216  f04f30ff          MOV      r0,#0xffffffff        ;504
00021a  e756              B        |L13.202|
;;;506    
                          ENDP


                          AREA ||i.SSP_ReceiveData||, CODE, READONLY, ALIGN=1

                  SSP_ReceiveData PROC
;;;312     **********************************************************************/
;;;313    uint16_t SSP_ReceiveData(LPC_SSPn_Type* SSPx)
000000  4601              MOV      r1,r0
;;;314    {
;;;315    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;316    
;;;317    	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;318    }
000006  4770              BX       lr
;;;319    
                          ENDP


                          AREA ||i.SSP_SendData||, CODE, READONLY, ALIGN=1

                  SSP_SendData PROC
;;;296     **********************************************************************/
;;;297    void SSP_SendData(LPC_SSPn_Type* SSPx, uint16_t Data)
000000  b28a              UXTH     r2,r1
;;;298    {
;;;299    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;300    
;;;301    	SSPx->DR = SSP_DR_BITMASK(Data);
000002  6082              STR      r2,[r0,#8]
;;;302    }
000004  4770              BX       lr
;;;303    
                          ENDP


                          AREA ||i.SSP_SlaveOutputCmd||, CODE, READONLY, ALIGN=1

                  SSP_SlaveOutputCmd PROC
;;;272     **********************************************************************/
;;;273    void SSP_SlaveOutputCmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;274    {
;;;275    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;276    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;277    
;;;278    	if (NewState == ENABLE)
000002  d104              BNE      |L16.14|
;;;279    	{
;;;280    		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
000004  6842              LDR      r2,[r0,#4]
000006  f0020207          AND      r2,r2,#7
00000a  6042              STR      r2,[r0,#4]
00000c  e003              B        |L16.22|
                  |L16.14|
;;;281    	}
;;;282    	else
;;;283    	{
;;;284    		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
00000e  6842              LDR      r2,[r0,#4]
000010  f0420208          ORR      r2,r2,#8
000014  6042              STR      r2,[r0,#4]
                  |L16.22|
;;;285    	}
;;;286    }
000016  4770              BX       lr
;;;287    
                          ENDP


;*** Start embedded assembler ***

#line 1 "lpc43xx_ssp.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_ssp_c_SSP_Init____REV16|
#line 130 ".\\core_cmInstr.h"
|__asm___13_lpc43xx_ssp_c_SSP_Init____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_ssp_c_SSP_Init____REVSH|
#line 144
|__asm___13_lpc43xx_ssp_c_SSP_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
