<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\spifi\pixy_firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\spifi\pixy_firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun May 03 03:58:32 2015
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[276]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f8]">Chirp::updateTable(const char*, unsigned(*)(Chirp*))</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f8]">Chirp::updateTable(const char*, unsigned(*)(Chirp*))</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">ADC0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[38]">ADC1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[50]">ATIMER_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1d]">BusFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[54]">CAN0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4e]">CAN1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[23]">DAC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[25]">DMA_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[20]">DebugMon_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[28]">ETH_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4d]">EVRT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[26]">EZH_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[27]">FLASH_EEPROM_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4b]">GINT0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4c]">GINT1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[43]">GPIO0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[44]">GPIO1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[45]">GPIO2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[46]">GPIO3_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[47]">GPIO4_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[48]">GPIO5_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[49]">GPIO6_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4a]">GPIO7_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1b]">HardFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[35]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[36]">I2C1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3f]">I2S0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[40]">I2S1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2a]">LCD_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[24]">M0CORE_IRQHandler</a> from ipc_mbx.o(i.M0CORE_IRQHandler) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[53]">M0s_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1c]">MemManage_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1a]">NMI_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[21]">PendSV_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[55]">QEI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2e]">RIT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[51]">RTC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[18]">Reset_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2d]">SCT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[29]">SDIO_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[42]">SGPIO_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[41]">SPIFI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[37]">SPI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[39]">SSP0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3a]">SSP1_IRQHandler</a> from spi.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1f]">SVC_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[22]">SysTick_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2f]">TIMER0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[30]">TIMER1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[31]">TIMER2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[32]">TIMER3_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3b]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3c]">UART1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3d]">UART2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[7a]">UARTGetChar</a> from debug_frmwrk.o(i.UARTGetChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[73]">UARTPutChar</a> from debug_frmwrk.o(i.UARTPutChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[77]">UARTPutDec</a> from debug_frmwrk.o(i.UARTPutDec) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[78]">UARTPutDec16</a> from debug_frmwrk.o(i.UARTPutDec16) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[79]">UARTPutDec32</a> from debug_frmwrk.o(i.UARTPutDec32) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[74]">UARTPutHex</a> from debug_frmwrk.o(i.UARTPutHex) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[75]">UARTPutHex16</a> from debug_frmwrk.o(i.UARTPutHex16) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[76]">UARTPutHex32</a> from debug_frmwrk.o(i.UARTPutHex32) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[71]">UARTPuts</a> from debug_frmwrk.o(i.UARTPuts) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[72]">UARTPuts_</a> from debug_frmwrk.o(i.UARTPuts_) referenced from debug_frmwrk.o(i.debug_frmwrk_init_clk)
 <LI><a href="#[2b]">USB0_IRQHandler</a> from usbhw.o(i.USB0_IRQHandler) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2c]">USB1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[6a]">USB_EndPoint0</a> from usbcore.o(i.USB_EndPoint0) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[6b]">USB_EndPoint1</a> from usbuser.o(i.USB_EndPoint1) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[6c]">USB_EndPoint2</a> from usbuser.o(i.USB_EndPoint2) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[69]">USB_Reset_Event</a> from usbuser.o(i.USB_Reset_Event) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[1e]">UsageFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4f]">VADC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[52]">WDT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[12]">blobsSetup()</a> from progblobs.o(.text) referenced 2 times from progblobs.o(.data)
 <LI><a href="#[90]">cam_getAEC()</a> from camera.o(i._Z10cam_getAECv) referenced from camera.o(.constdata)
 <LI><a href="#[8c]">cam_getAWB()</a> from camera.o(i._Z10cam_getAWBv) referenced from camera.o(.constdata)
 <LI><a href="#[92]">cam_getECV()</a> from camera.o(i._Z10cam_getECVv) referenced from camera.o(.constdata)
 <LI><a href="#[8e]">cam_getWBV()</a> from camera.o(i._Z10cam_getWBVv) referenced from camera.o(.constdata)
 <LI><a href="#[8f]">cam_setAEC(const unsigned char&)</a> from camera.o(i._Z10cam_setAECRKh) referenced from camera.o(.constdata)
 <LI><a href="#[8b]">cam_setAWB(const unsigned char&)</a> from camera.o(i._Z10cam_setAWBRKh) referenced from camera.o(.constdata)
 <LI><a href="#[91]">cam_setECV(const unsigned&)</a> from camera.o(i._Z10cam_setECVRKj) referenced from camera.o(.constdata)
 <LI><a href="#[8d]">cam_setWBV(const unsigned&)</a> from camera.o(i._Z10cam_setWBVRKj) referenced from camera.o(.constdata)
 <LI><a href="#[9c]">led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)</a> from led.o(i._Z10led_setRGBRKhS0_S0_) referenced from led.o(.constdata)
 <LI><a href="#[a4]">prm_format()</a> from param.o(i._Z10prm_formatv) referenced from param.o(.constdata)
 <LI><a href="#[ab]">prm_getAll(const unsigned short&, Chirp*)</a> from param.o(i._Z10prm_getAllRKtP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[ac]">pwr_getVin()</a> from power.o(i._Z10pwr_getVinv) referenced from power.o(.constdata)
 <LI><a href="#[a1]">rcs_enable(const unsigned char&, const unsigned char&)</a> from rcservo.o(i._Z10rcs_enableRKhS0_) referenced from rcservo.o(.constdata)
 <LI><a href="#[a0]">rcs_getPos(const unsigned char&)</a> from rcservo.o(i._Z10rcs_getPosRKh) referenced from rcservo.o(.constdata)
 <LI><a href="#[9f]">rcs_setPos(const unsigned char&, const unsigned short&)</a> from rcservo.o(i._Z10rcs_setPosRKhRKt) referenced from rcservo.o(.constdata)
 <LI><a href="#[14]">videoSetup()</a> from progvideo.o(.text) referenced 2 times from progvideo.o(.data)
 <LI><a href="#[8a]">cam_getMode()</a> from camera.o(i._Z11cam_getModev) referenced from camera.o(.constdata)
 <LI><a href="#[89]">cam_setMode(const unsigned char&)</a> from camera.o(i._Z11cam_setModeRKh) referenced from camera.o(.constdata)
 <LI><a href="#[7e]">cc_clearSig(const unsigned char&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[aa]">prm_getInfo(const char*, Chirp*)</a> from param.o(i._Z11prm_getInfoPKcP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[ae]">pwr_getVbus()</a> from power.o(i._Z11pwr_getVbusv) referenced from power.o(.constdata)
 <LI><a href="#[a3]">rcs_setFreq(const unsigned short&)</a> from rcservo.o(i._Z11rcs_setFreqRKt) referenced from rcservo.o(.constdata)
 <LI><a href="#[80]">cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[81]">exec_running()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[84]">exec_runprog(const unsigned char&)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[87]">exec_version(Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[a9]">prm_getChirp(const char*, Chirp*)</a> from param.o(i._Z12prm_getChirpPKcP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[a5]">prm_setChirp(const char*, const unsigned&, const unsigned char*)</a> from param.o(i._Z12prm_setChirpPKcRKjPKh) referenced from param.o(.constdata)
 <LI><a href="#[a6]">prm_setDirty()</a> from param.o(i._Z12prm_setDirtyv) referenced from param.o(.constdata)
 <LI><a href="#[a2]">rcs_setLimits(const unsigned char&, const short&, const short&)</a> from rcservo.o(i._Z13rcs_setLimitsRKhRKsS2_) referenced from rcservo.o(.constdata)
 <LI><a href="#[7f]">cc_clearAllSig(Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[7d]">cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[88]">exec_getAction(const unsigned short&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[af]">pwr_USBpowered()</a> from power.o(i._Z14pwr_USBpoweredv) referenced from power.o(.constdata)
 <LI><a href="#[9a]">cam_getRegister(const unsigned char&)</a> from camera.o(i._Z15cam_getRegisterRKh) referenced from camera.o(.constdata)
 <LI><a href="#[99]">cam_setRegister(const unsigned char&, const unsigned char&)</a> from camera.o(i._Z15cam_setRegisterRKhS0_) referenced from camera.o(.constdata)
 <LI><a href="#[97]">cam_testPattern(const unsigned char&)</a> from camera.o(i._Z15cam_testPatternRKh) referenced from camera.o(.constdata)
 <LI><a href="#[7c]">cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[85]">exec_runprogArg(const unsigned char&, const int&)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[96]">cam_getLightMode()</a> from camera.o(i._Z16cam_getLightModev) referenced from camera.o(.constdata)
 <LI><a href="#[95]">cam_setLightMode(const unsigned char&)</a> from camera.o(i._Z16cam_setLightModeRKh) referenced from camera.o(.constdata)
 <LI><a href="#[a8]">prm_resetShadows()</a> from param.o(i._Z16prm_resetShadowsv) referenced from param.o(.constdata)
 <LI><a href="#[94]">cam_getBrightness()</a> from camera.o(i._Z17cam_getBrightnessv) referenced from camera.o(.constdata)
 <LI><a href="#[98]">cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</a> from camera.o(i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp) referenced from camera.o(.constdata)
 <LI><a href="#[93]">cam_setBrightness(const unsigned char&)</a> from camera.o(i._Z17cam_setBrightnessRKh) referenced from camera.o(.constdata)
 <LI><a href="#[128]">cc_shadowCallback(const char*, const float&)</a> from conncomp.o(.text) referenced 2 times from conncomp.o(.text)
 <LI><a href="#[9e]">led_getMaxCurrent()</a> from led.o(i._Z17led_getMaxCurrentv) referenced from led.o(.constdata)
 <LI><a href="#[9d]">led_setMaxCurrent(const unsigned&)</a> from led.o(i._Z17led_setMaxCurrentRKj) referenced from led.o(.constdata)
 <LI><a href="#[6d]">cam_shadowCallback(const char*, const unsigned char&)</a> from camera.o(i._Z18cam_shadowCallbackPKcRKh) referenced from camera.o(i._Z14cam_loadParamsv)
 <LI><a href="#[a7]">prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)</a> from param.o(i._Z18prm_setShadowChirpPKcRKjPKh) referenced from param.o(.constdata)
 <LI><a href="#[7b]">cc_getRLSFrameChirp(Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[6e]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[12d]">cc_teachThreshCallback(const char*, const unsigned&)</a> from conncomp.o(.text) referenced from conncomp.o(.text)
 <LI><a href="#[12f]">cc_ledBrightnessCallback(const char*, const unsigned short&)</a> from conncomp.o(.text) referenced from conncomp.o(.text)
 <LI><a href="#[17]">ptLoop()</a> from progpt.o(.text) referenced 2 times from progpt.o(.data)
 <LI><a href="#[9b]">led_set(const unsigned&)</a> from led.o(i._Z7led_setRKj) referenced from led.o(.constdata)
 <LI><a href="#[16]">ptSetup()</a> from progpt.o(.text) referenced 2 times from progpt.o(.data)
 <LI><a href="#[1e6]">callback(unsigned char*, unsigned)</a> from serial.o(.text) referenced 3 times from serial.o(.text)
 <LI><a href="#[83]">exec_run()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[13]">blobsLoop()</a> from progblobs.o(.text) referenced 2 times from progblobs.o(.data)
 <LI><a href="#[86]">exec_list()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[82]">exec_stop()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[ad]">pwr_get5v()</a> from power.o(i._Z9pwr_get5vv) referenced from power.o(.constdata)
 <LI><a href="#[15]">videoLoop()</a> from progvideo.o(.text) referenced 2 times from progvideo.o(.data)
 <LI><a href="#[70]">SimpleVector&lang;Shadow&rang;::~SimpleVector()</a> from param.o(t._ZN12SimpleVectorI6ShadowED1Ev) referenced from param.o(i.__sti___9_param_cpp_55d340e8)
 <LI><a href="#[57]">CBlobAssembler::CBlobAssembler()</a> from blob.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[58]">CBlobAssembler::~CBlobAssembler()</a> from blob.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[59]">ColorSignature::ColorSignature()</a> from conncomp.o(i._ZN14ColorSignatureC1Ev) referenced from colorlut.o(.text)
 <LI><a href="#[67]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[b3]">I2c::receiveLen()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[b0]">I2c::open()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[b1]">I2c::close()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[b4]">I2c::update()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[b2]">I2c::receive(unsigned char*, unsigned)</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[b8]">Spi::receiveLen()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[b5]">Spi::open()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[b6]">Spi::close()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[b9]">Spi::update()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[b7]">Spi::receive(unsigned char*, unsigned)</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[bb]">Link::getFlags(unsigned char)</a> from usblink.o(i._ZN4Link8getFlagsEh) referenced from usblink.o(.constdata__ZTV4Link)
 <LI><a href="#[bb]">Link::getFlags(unsigned char)</a> from usblink.o(i._ZN4Link8getFlagsEh) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[bc]">Link::blockSize()</a> from usblink.o(i._ZN4Link9blockSizeEv) referenced from usblink.o(.constdata__ZTV4Link)
 <LI><a href="#[bc]">Link::blockSize()</a> from usblink.o(i._ZN4Link9blockSizeEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[bc]">Link::blockSize()</a> from usblink.o(i._ZN4Link9blockSizeEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[c0]">Uart::receiveLen()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[bd]">Uart::open()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[be]">Uart::close()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[c1]">Uart::update()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[bf]">Uart::receive(unsigned char*, unsigned)</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[c3]">Chirp::handleChirp(unsigned char, short, const void**)</a> from chirp.o(i._ZN5Chirp11handleChirpEhsPPKv) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[c4]">Chirp::handleXdata(const void**)</a> from chirp.o(i._ZN5Chirp11handleXdataEPPKv) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[c2]">Chirp::init(bool)</a> from chirp.o(i._ZN5Chirp4initEb) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[c5]">Chirp::sendChirp(unsigned char, short)</a> from chirp.o(i._ZN5Chirp9sendChirpEhs) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[c6]">SMLink::send(const unsigned char*, unsigned, unsigned short)</a> from smlink.o(i._ZN6SMLink4sendEPKhjt) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[c7]">SMLink::receive(unsigned char*, unsigned, unsigned short)</a> from smlink.o(i._ZN6SMLink7receiveEPhjt) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[ca]">SMLink::getFlags(unsigned char)</a> from smlink.o(i._ZN6SMLink8getFlagsEh) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[c9]">SMLink::getTimer()</a> from smlink.o(i._ZN6SMLink8getTimerEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[c8]">SMLink::setTimer()</a> from smlink.o(i._ZN6SMLink8setTimerEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[ce]">Iserial::receiveLen()</a> from i2c.o(i._ZN7Iserial10receiveLenEv) referenced from i2c.o(.constdata__ZTV7Iserial)
 <LI><a href="#[ce]">Iserial::receiveLen()</a> from i2c.o(i._ZN7Iserial10receiveLenEv) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[cb]">Iserial::open()</a> from i2c.o(i._ZN7Iserial4openEv) referenced from i2c.o(.constdata__ZTV7Iserial)
 <LI><a href="#[cc]">Iserial::close()</a> from i2c.o(i._ZN7Iserial5closeEv) referenced from i2c.o(.constdata__ZTV7Iserial)
 <LI><a href="#[cf]">Iserial::update()</a> from i2c.o(i._ZN7Iserial6updateEv) referenced from i2c.o(.constdata__ZTV7Iserial)
 <LI><a href="#[cd]">Iserial::receive(unsigned char*, unsigned)</a> from i2c.o(i._ZN7Iserial7receiveEPhj) referenced from i2c.o(.constdata__ZTV7Iserial)
 <LI><a href="#[cd]">Iserial::receive(unsigned char*, unsigned)</a> from i2c.o(i._ZN7Iserial7receiveEPhj) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[56]">Point16::Point16()</a> from conncomp.o(i._ZN7Point16C1Ev) referenced 2 times from conncomp.o(.text)
 <LI><a href="#[56]">Point16::Point16()</a> from conncomp.o(i._ZN7Point16C1Ev) referenced from colorlut.o(t._ZN12SimpleVectorI7Point16E6resizeEi)
 <LI><a href="#[d0]">USBLink::send(const unsigned char*, unsigned, unsigned short)</a> from usblink.o(i._ZN7USBLink4sendEPKhjt) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[d1]">USBLink::receive(unsigned char*, unsigned, unsigned short)</a> from usblink.o(i._ZN7USBLink7receiveEPhjt) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[d3]">USBLink::getTimer()</a> from usblink.o(i._ZN7USBLink8getTimerEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[d2]">USBLink::setTimer()</a> from usblink.o(i._ZN7USBLink8setTimerEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[d4]">AnalogDig::open()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[d5]">AnalogDig::close()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[d6]">AnalogDig::update()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[6f]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[ba]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from usblink.o(.constdata__ZTV4Link)
 <LI><a href="#[db]">__main</a> from __main.o(!!!main) referenced from startup_lpc43xx_m4.o(.text)
 <LI><a href="#[d9]">__sti___10_camera_cpp_g_sccb</a> from camera.o(i.__sti___10_camera_cpp_g_sccb) referenced from camera.o(.init_array)
 <LI><a href="#[d7]">__sti___10_progpt_cpp_g_progPt</a> from progpt.o(.text) referenced from progpt.o(.init_array)
 <LI><a href="#[d8]">__sti___13_progchase_cpp_bdb05ac4</a> from progchase.o(.text) referenced from progchase.o(.init_array)
 <LI><a href="#[da]">__sti___9_param_cpp_55d340e8</a> from param.o(i.__sti___9_param_cpp_55d340e8) referenced from param.o(.init_array)
 <LI><a href="#[68]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[66]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[65]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[5e]">amic</a> from amic.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[5c]">atm</a> from atmel.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[5f]">chi</a> from chi.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[5b]">eon</a> from eon.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[60]">esmt</a> from esmt.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[63]">giga</a> from giga.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[62]">mxic</a> from macronix.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[5d]">numo</a> from numonyx.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[5a]">span</a> from spansion.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[61]">sst</a> from sst.o(.text) referenced from spifi_rom_api.o(.text)
 <LI><a href="#[64]">wbd</a> from winbond.o(.text) referenced from spifi_rom_api.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e0]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[24c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e2]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[e4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e6]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[349]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[34a]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[e8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ea]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[eb]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ec]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ee]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[f0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f2]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f3]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f4]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[f6]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[34b]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[f8]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[fa]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[fc]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[fe]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[34c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[10f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[34d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[34f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[350]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[351]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[352]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[353]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[354]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[355]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[356]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[357]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[109]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[358]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[359]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[35d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[360]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[361]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[362]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[363]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[364]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[365]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[366]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[de]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2 (via Veneer)
</UL>

<P><STRONG><a name="[367]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[368]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[110]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; cc_init(Chirp*) &rArr; cc_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[369]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[277]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[113]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[36a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[115]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[117]"></a>__default_signal_handler</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, main_m4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
</UL>

<P><STRONG><a name="[36b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[111]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, main_m4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = main &rArr; cc_init(Chirp*) &rArr; cc_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_addProg(Program*, bool)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[36c]"></a>cc_servo(const unsigned&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, conncomp.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>cc_loadLut()</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = cc_loadLut() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
</UL>

<P><STRONG><a name="[128]"></a>cc_shadowCallback(const char*, const float&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cc_shadowCallback(const char*, const float&) &rArr; exec_resume() &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSigRange(unsigned char, float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resume()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pause()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>cc_teachThreshCallback(const char*, const unsigned&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cc_teachThreshCallback(const char*, const unsigned&) &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setGrowDist(unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>cc_ledBrightnessCallback(const char*, const unsigned short&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cc_ledBrightnessCallback(const char*, const unsigned short&) &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>cc_loadParams()</STRONG> (Thumb, 506 bytes, Stack size 224 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = cc_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setCCGain(float)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSigRange(unsigned char, float)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setGrowDist(unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[11b]"></a>cc_init(Chirp*)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = cc_init(Chirp*) &rArr; cc_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::Qqueue()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 522 bytes, Stack size 120 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getSignature(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[7d]"></a>cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 254 bytes, Stack size 128 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getSignature(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::~SimpleVector()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setSignature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>cc_clearSig(const unsigned char&, Chirp*)</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = cc_clearSig(const unsigned char&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>cc_clearAllSig(Chirp*)</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = cc_clearAllSig(Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>cc_getRLSFrame(unsigned char*, unsigned char*, bool)</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cc_getRLSFrame(unsigned char*, unsigned char*, bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
</UL>

<P><STRONG><a name="[14b]"></a>cc_getRLSFrameChirpFlags(Chirp*, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = cc_getRLSFrameChirpFlags(Chirp*, unsigned char) &rArr; cc_getRLSFrame(unsigned char*, unsigned char*, bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::readAll(Qval*, unsigned)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrame(unsigned char*, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirp(Chirp*)
</UL>

<P><STRONG><a name="[7b]"></a>cc_getRLSFrameChirp(Chirp*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cc_getRLSFrameChirp(Chirp*) &rArr; cc_getRLSFrameChirpFlags(Chirp*, unsigned char) &rArr; cc_getRLSFrame(unsigned char*, unsigned char*, bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, conncomp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>

<P><STRONG><a name="[150]"></a>cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[151]"></a>ledBrightness(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ledBrightness(unsigned) &rArr; logf &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
</UL>

<P><STRONG><a name="[156]"></a>cc_setLED()</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cc_setLED() &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[11d]"></a>exec_init(Chirp*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = exec_init(Chirp*) &rArr; loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ButtonMachine()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>exec_addProg(Program*, bool)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>exec_running()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, exec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>exec_stop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>exec_run()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprog(const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>exec_runprog(const unsigned char&)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = exec_runprog(const unsigned char&) &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_run()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprogArg(const unsigned char&, const int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>exec_runprogArg(const unsigned char&, const int&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = exec_runprogArg(const unsigned char&, const int&) &rArr; exec_runprog(const unsigned char&) &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprog(const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>exec_list()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = exec_list() &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>exec_version(Chirp*)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = exec_version(Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>exec_getAction(const unsigned short&, Chirp*)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = exec_getAction(const unsigned short&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>exec_runM0(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsSetup()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resume()
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
</UL>

<P><STRONG><a name="[15c]"></a>exec_stopM0()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = exec_stopM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pause()
</UL>

<P><STRONG><a name="[15d]"></a>exec_runningM0()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pause()
</UL>

<P><STRONG><a name="[15e]"></a>exec_loadParams()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[162]"></a>exec_periodic()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, exec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_dirty()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
</UL>

<P><STRONG><a name="[166]"></a>exec_select()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, exec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprog(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
</UL>

<P><STRONG><a name="[168]"></a>exec_loop()</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, exec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::connected()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprog(const unsigned char&)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_run()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
</UL>

<P><STRONG><a name="[12b]"></a>exec_pause()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = exec_pause() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runningM0()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[12c]"></a>exec_resume()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = exec_resume() &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[13f]"></a>exec_sendEvent(Chirp*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = exec_sendEvent(Chirp*, unsigned) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setSignature()
</UL>

<P><STRONG><a name="[12]"></a>blobsSetup()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = blobsSetup() &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.data)
</UL>
<P><STRONG><a name="[16b]"></a>handleRecv()</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = handleRecv() &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
</UL>

<P><STRONG><a name="[13]"></a>blobsLoop()</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = blobsLoop() &rArr; Blobs::blobify() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRecv()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>videoSetup()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, progvideo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>sendCustom(unsigned char)</STRONG> (Thumb, 1270 bytes, Stack size 88 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sendCustom(unsigned char) &rArr; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoLoop()
</UL>

<P><STRONG><a name="[15]"></a>videoLoop()</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = videoLoop() &rArr; sendCustom(unsigned char) &rArr; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>ServoLoop::reset()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ServoLoop::reset() &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
</UL>

<P><STRONG><a name="[171]"></a>ServoLoop::setGains(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progpt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
</UL>

<P><STRONG><a name="[11f]"></a>ptLoadParams()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ptLoadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::setGains(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
</UL>

<P><STRONG><a name="[16]"></a>ptSetup()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = ptSetup() &rArr; ptLoadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::reset()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>ServoLoop::update(int)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ServoLoop::update(int) &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
</UL>

<P><STRONG><a name="[17]"></a>ptLoop()</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ptLoop() &rArr; Blobs::blobify() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::update(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_progpt_cpp_g_progPt
</UL>

<P><STRONG><a name="[36d]"></a>ServoLoop::ServoLoop__sub_object(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, progpt.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>scaleLED(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[178]"></a>ButtonMachine::reset()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ButtonMachine::reset() &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ButtonMachine()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
</UL>

<P><STRONG><a name="[15a]"></a>ButtonMachine::ButtonMachine()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ButtonMachine::ButtonMachine() &rArr; ButtonMachine::reset() &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
</UL>

<P><STRONG><a name="[36e]"></a>ButtonMachine::ButtonMachine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, button.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>ButtonMachine::~ButtonMachine()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>ButtonMachine::~ButtonMachine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, button.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>ButtonMachine::wait(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setLED()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::flashLED(unsigned char)
</UL>

<P><STRONG><a name="[17c]"></a>ButtonMachine::flashLED(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setSignature()
</UL>

<P><STRONG><a name="[17d]"></a>ButtonMachine::setSignature()</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::flashLED(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
</UL>

<P><STRONG><a name="[17e]"></a>ButtonMachine::setLED()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
</UL>

<P><STRONG><a name="[17f]"></a>ButtonMachine::ledPipe()</STRONG> (Thumb, 158 bytes, Stack size 104 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
</UL>

<P><STRONG><a name="[164]"></a>ButtonMachine::handleSignature()</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getAWB()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setLED()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setSignature()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::flashLED(unsigned char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[167]"></a>ButtonMachine::selectProgram(int)</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setLED()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::flashLED(unsigned char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
</UL>

<P><STRONG><a name="[183]"></a>CBlob::Reset()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::CBlob()
</UL>

<P><STRONG><a name="[185]"></a>CBlob::CBlob()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CBlob::CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[371]"></a>CBlob::CBlob__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>CBlob::~CBlob()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>

<P><STRONG><a name="[372]"></a>CBlob::~CBlob__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>CBlob::NewRow()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, blob.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
</UL>

<P><STRONG><a name="[188]"></a>CBlob::UpdateBoundingBox(int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Assimilate(CBlob&)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
</UL>

<P><STRONG><a name="[187]"></a>CBlob::Add(const SSegment&)</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CBlob::Add(const SSegment&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMoments::Add(const SMoments&)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::UpdateBoundingBox(int, int, int)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[18b]"></a>CBlob::Assimilate(CBlob&)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CBlob::Assimilate(CBlob&) &rArr; CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMoments::Add(const SMoments&)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[57]"></a>CBlobAssembler::CBlobAssembler()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, blob.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[373]"></a>CBlobAssembler::CBlobAssembler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>CBlobAssembler::Reset()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::~CBlobAssembler()
</UL>

<P><STRONG><a name="[18e]"></a>CBlobAssembler::EndFrame()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CBlobAssembler::EndFrame()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::NewRow()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::~CBlobAssembler()
</UL>

<P><STRONG><a name="[58]"></a>CBlobAssembler::~CBlobAssembler()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::~CBlobAssembler() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[374]"></a>CBlobAssembler::~CBlobAssembler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>CBlobAssembler::BlobNewRow(CBlob**)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::NewRow()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::RewindCurrent()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AdvanceCurrent()
</UL>

<P><STRONG><a name="[191]"></a>CBlobAssembler::AdvanceCurrent()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CBlobAssembler::AdvanceCurrent() &rArr; CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[192]"></a>CBlobAssembler::RewindCurrent()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CBlobAssembler::RewindCurrent() &rArr; CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[193]"></a>CBlobAssembler::Add(const SSegment&)</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::Add(const SSegment&) &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::RewindCurrent()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AdvanceCurrent()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Assimilate(CBlob&)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::CBlob()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[375]"></a>CBlobAssembler::ListLength(const CBlob*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>CBlobAssembler::SplitList(CBlob*, CBlob*&, CBlob*&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CBlobAssembler::SplitList(CBlob*, CBlob*&, CBlob*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
</UL>

<P><STRONG><a name="[196]"></a>CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
</UL>

<P><STRONG><a name="[194]"></a>CBlobAssembler::SortFinished()</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CBlobAssembler::SortFinished() &rArr; CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SplitList(CBlob*, CBlob*&, CBlob*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
</UL>

<P><STRONG><a name="[197]"></a>CBlobAssembler::AssertFinishedSorted()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, blob.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[136]"></a>Blobs::Blobs(Qqueue*, unsigned char*)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Blobs::Blobs(Qqueue*, unsigned char*) &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[376]"></a>Blobs::Blobs__sub_object(Qqueue*, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, blobs.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>Blobs::~Blobs()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blobs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::~ColorLUT()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[377]"></a>Blobs::~Blobs__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blobs.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>Blobs::compress(unsigned short*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Blobs::compress(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[19e]"></a>Blobs::angle(BlobA*, BlobA*)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Blobs::angle(BlobA*, BlobA*) &rArr; atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1ab]"></a>Blobs::cleanup2(BlobA**, short*)</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Blobs::cleanup2(BlobA**, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1a4]"></a>Blobs::distance(BlobA*, BlobA*, bool)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Blobs::distance(BlobA*, BlobA*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
</UL>

<P><STRONG><a name="[1a3]"></a>Blobs::sort(BlobA**, unsigned short, BlobA*, bool)</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Blobs::sort(BlobA**, unsigned short, BlobA*, bool) &rArr; Blobs::distance(BlobA*, BlobA*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1aa]"></a>Blobs::cleanup(BlobA**, short*)</STRONG> (Thumb, 410 bytes, Stack size 84 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Blobs::cleanup(BlobA**, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1a9]"></a>Blobs::mergeClumps(unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Blobs::mergeClumps(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1a7]"></a>Blobs::distance(BlobA*, BlobA*)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[1a5]"></a>Blobs::closeby(BlobA*, BlobA*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Blobs::closeby(BlobA*, BlobA*) &rArr; Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[1a8]"></a>Blobs::processCC()</STRONG> (Thumb, 1048 bytes, Stack size 136 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Blobs::processCC() &rArr; Blobs::cleanup(BlobA**, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::mergeClumps(unsigned short, unsigned short)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::cleanup(BlobA**, short*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::cleanup2(BlobA**, short*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[1b1]"></a>Blobs::combine(unsigned short*, unsigned short)</STRONG> (Thumb, 194 bytes, Stack size 44 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Blobs::combine(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[1b0]"></a>Blobs::combine2(unsigned short*, unsigned short)</STRONG> (Thumb, 370 bytes, Stack size 60 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Blobs::combine2(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[1ac]"></a>Blobs::endFrame()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Blobs::endFrame() &rArr; CBlobAssembler::SortFinished() &rArr; CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[1ad]"></a>Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short) &rArr; CBlobAssembler::Add(const SSegment&) &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[1ae]"></a>Blobs::runlengthAnalysis()</STRONG> (Thumb, 534 bytes, Stack size 80 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Blobs::runlengthAnalysis() &rArr; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short) &rArr; CBlobAssembler::Add(const SSegment&) &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::dequeue(Qval*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[16c]"></a>Blobs::blobify()</STRONG> (Thumb, 532 bytes, Stack size 64 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = Blobs::blobify() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::combine2(unsigned short*, unsigned short)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::combine(unsigned short*, unsigned short)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::compress(unsigned short*, unsigned short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[1b4]"></a>Blobs::getCCBlock(unsigned char*, unsigned)</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Blobs::getCCBlock(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlock(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1b3]"></a>Blobs::getBlock(unsigned char*, unsigned)</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Blobs::getBlock(unsigned char*, unsigned) &rArr; Blobs::getCCBlock(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getCCBlock(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[157]"></a>Blobs::getMaxBlob(unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Blobs::getMaxBlob(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::update()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[16d]"></a>Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoop()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[132]"></a>Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>

<P><STRONG><a name="[1b5]"></a>Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, blobs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[378]"></a>Blobs::printBlobs()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blobs.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>IterPixel::reset(bool)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::operator [](int) const
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
</UL>

<P><STRONG><a name="[13c]"></a>IterPixel::IterPixel(const Frame8&, const RectA&)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame8::Frame8()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
</UL>

<P><STRONG><a name="[379]"></a>IterPixel::IterPixel__sub_object(const Frame8&, const RectA&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame8::Frame8()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[37a]"></a>IterPixel::IterPixel__sub_object(const Frame8&, const SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>IterPixel::nextHelper(UVPixel*, RGBPixel*)</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IterPixel::nextHelper(UVPixel*, RGBPixel*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
</UL>

<P><STRONG><a name="[1bb]"></a>IterPixel::next(UVPixel*, RGBPixel*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::nextHelper(UVPixel*, RGBPixel*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
</UL>

<P><STRONG><a name="[13d]"></a>IterPixel::averageRgb(unsigned*)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IterPixel::averageRgb(unsigned*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[12a]"></a>ColorLUT::setMinBrightness(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ColorLUT::setMinBrightness(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const float&)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[1bd]"></a>ColorLUT::clearLUT(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ColorLUT::clearLUT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[198]"></a>ColorLUT::ColorLUT(unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ColorLUT::ColorLUT(unsigned char*) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::clearLUT(unsigned char)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
</UL>

<P><STRONG><a name="[37b]"></a>ColorLUT::ColorLUT__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>ColorLUT::~ColorLUT()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, colorlut.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
</UL>

<P><STRONG><a name="[37c]"></a>ColorLUT::~ColorLUT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>ColorLUT::updateSignature(unsigned char)</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
</UL>

<P><STRONG><a name="[1c0]"></a>ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UVPixel::UVPixel()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
</UL>

<P><STRONG><a name="[1c3]"></a>ColorLUT::iterate(IterPixel*, ColorSignature*)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ColorLUT::iterate(IterPixel*, ColorSignature*) &rArr; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char) &rArr; ColorLUT::iterate(IterPixel*, ColorSignature*) &rArr; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[1c9]"></a>ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[1c5]"></a>ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UVPixel::UVPixel()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[1c6]"></a>ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UVPixel::UVPixel()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point16::Point16(short, short)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[180]"></a>ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UVPixel::UVPixel()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point16::Point16(short, short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[146]"></a>ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char) &rArr; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[13b]"></a>ColorLUT::getSignature(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[125]"></a>ColorLUT::setSignature(unsigned char, const ColorSignature&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ColorLUT::setSignature(unsigned char, const ColorSignature&) &rArr; ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
</UL>

<P><STRONG><a name="[126]"></a>ColorLUT::generateLUT()</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ColorLUT::generateLUT() &rArr; ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::clearLUT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsSetup()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const float&)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
</UL>

<P><STRONG><a name="[129]"></a>ColorLUT::setSigRange(unsigned char, float)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ColorLUT::setSigRange(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[12e]"></a>ColorLUT::setGrowDist(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_teachThreshCallback(const char*, const unsigned&)
</UL>

<P><STRONG><a name="[133]"></a>ColorLUT::setCCGain(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>

<P><STRONG><a name="[1a6]"></a>ColorLUT::getType(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[135]"></a>Qqueue::Qqueue()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Qqueue::Qqueue()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[37d]"></a>Qqueue::Qqueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>Qqueue::~Qqueue()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>Qqueue::~Qqueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>Qqueue::dequeue(Qval*)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, qqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Qqueue::dequeue(Qval*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[14c]"></a>Qqueue::readAll(Qval*, unsigned)</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, qqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Qqueue::readAll(Qval*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>Qqueue::flush()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, qqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsSetup()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resume()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
</UL>

<P><STRONG><a name="[1cd]"></a>I2C_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Init &rArr; CGU_EntityConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[380]"></a>I2C_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>I2C_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>I2C_IntCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_MasterHandler</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1d6]"></a>I2C_SlaveHandler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1d7]"></a>I2C_MasterTransferData</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1db]"></a>I2C_SlaveTransferData</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1e1]"></a>I2C_SetOwnSlaveAddr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lpc43xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SetOwnSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
</UL>

<P><STRONG><a name="[382]"></a>I2C_MonitorModeConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>I2C_MonitorModeCmd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>I2C_MonitorGetDatabuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>I2C_MonitorHandler</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>I2C_MasterTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1dd]"></a>I2C_SlaveTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[1de]"></a>I2c::slaveHandler()</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c::slaveHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>I2C0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C0_IRQHandler &rArr; I2c::slaveHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1e0]"></a>I2c::setSlaveAddr(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c::setSlaveAddr(unsigned char) &rArr; I2C_SetOwnSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetOwnSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1e2]"></a>I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned)) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[386]"></a>I2c::I2c__sub_object(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>i2c_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2c_init(unsigned(*)(unsigned char*, unsigned)) &rArr; I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned)) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
</UL>

<P><STRONG><a name="[1e5]"></a>I2c::startSlave()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::update()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::open()
</UL>

<P><STRONG><a name="[b0]"></a>I2c::open()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2c::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::startSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[b1]"></a>I2c::close()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2c::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[b2]"></a>I2c::receive(unsigned char*, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c::receive(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[b3]"></a>I2c::receiveLen()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2c::receiveLen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[b4]"></a>I2c::update()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2c::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::startSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[1e6]"></a>callback(unsigned char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = callback(unsigned char*, unsigned) &rArr; Blobs::getBlock(unsigned char*, unsigned) &rArr; Blobs::getCCBlock(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlock(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>ser_setInterface(unsigned char)</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ser_setInterface(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::setDirection(bool)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::setAutoSlaveSelect(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>ser_loadParams()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ser_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::setBaudrate(unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
</UL>

<P><STRONG><a name="[11c]"></a>ser_init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = ser_init() &rArr; ser_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[387]"></a>ser_getInterface()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>ser_getSerial()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRecv()
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsSetup()
</UL>

<P><STRONG><a name="[1ed]"></a>AnalogDig::AnalogDig()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, analogdig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
</UL>

<P><STRONG><a name="[388]"></a>AnalogDig::AnalogDig__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, analogdig.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>ad_init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ad_init() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::AnalogDig()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
</UL>

<P><STRONG><a name="[1e8]"></a>AnalogDig::setDirection(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, analogdig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[d4]"></a>AnalogDig::open()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AnalogDig::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[d5]"></a>AnalogDig::close()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AnalogDig::close() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[d6]"></a>AnalogDig::update()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AnalogDig::update() &rArr; Blobs::getMaxBlob(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[1ef]"></a>Spi::slaveHandler()</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi::slaveHandler() &rArr; TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::write(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>SSP1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSP1_IRQHandler &rArr; Spi::slaveHandler() &rArr; TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1e7]"></a>Spi::setAutoSlaveSelect(bool)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1f2]"></a>Spi::Spi(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Spi::Spi(unsigned(*)(unsigned char*, unsigned)) &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::setAutoSlaveSelect(bool)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[389]"></a>Spi::Spi__sub_object(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>spi_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spi_init(unsigned(*)(unsigned char*, unsigned)) &rArr; Spi::Spi(unsigned(*)(unsigned char*, unsigned)) &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
</UL>

<P><STRONG><a name="[1f8]"></a>Spi::checkIdle()</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>

<P><STRONG><a name="[1f7]"></a>Spi::sync()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi::sync() &rArr; SSP_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::checkIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::update()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::open()
</UL>

<P><STRONG><a name="[b5]"></a>Spi::open()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi::open() &rArr; Spi::sync() &rArr; SSP_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[b6]"></a>Spi::close()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[b7]"></a>Spi::receive(unsigned char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi::receive(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[b8]"></a>Spi::receiveLen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi::receiveLen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[b9]"></a>Spi::update()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Spi::update() &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[1fa]"></a>Uart::irqHandler()</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart::irqHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[3b]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_IRQHandler &rArr; Uart::irqHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::irqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1fb]"></a>Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned)) &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[38a]"></a>Uart::Uart__sub_object(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>uart_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uart_init(unsigned(*)(unsigned char*, unsigned)) &rArr; Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned)) &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init()
</UL>

<P><STRONG><a name="[bd]"></a>Uart::open()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[be]"></a>Uart::close()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart::close() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[bf]"></a>Uart::receive(unsigned char*, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart::receive(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[c0]"></a>Uart::receiveLen()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart::receiveLen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::receiveLen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[c1]"></a>Uart::update()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[1e9]"></a>Uart::setBaudrate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Uart::setBaudrate(unsigned) &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
</UL>

<P><STRONG><a name="[202]"></a>MotorLoop::update(int)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine(unsigned, unsigned)
</UL>

<P><STRONG><a name="[201]"></a>combine(unsigned, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorLoop::update(int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axisMap(int*, int*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleMotor(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
</UL>

<P><STRONG><a name="[206]"></a>MotorLoop::setGains(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoadParams()
</UL>

<P><STRONG><a name="[205]"></a>chaseLoadParams()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorLoop::setGains(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
</UL>

<P><STRONG><a name="[207]"></a>chaseSetup()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoadParams()
</UL>

<P><STRONG><a name="[208]"></a>chaseLoop()</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine(unsigned, unsigned)
</UL>

<P><STRONG><a name="[209]"></a>MotorLoop::MotorLoop(unsigned, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, progchase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_progchase_cpp_bdb05ac4
</UL>

<P><STRONG><a name="[38b]"></a>MotorLoop::MotorLoop__sub_object(unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, progchase.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>hsvc(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, calc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>rgbPack(unsigned, unsigned, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, calc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lighten(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[158]"></a>rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, calc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lighten(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>lighten(unsigned, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, calc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[177]"></a>saturate(unsigned)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, calc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[20b]"></a>toggleLED()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, edgedetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = toggleLED() &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[123]"></a>edgeDetect_run()</STRONG> (Thumb, 1534 bytes, Stack size 96 bytes, edgedetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = edgeDetect_run() &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22d]"></a>memcpy_spifi_lib</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy_spifi_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[22a]"></a>memset_spifi_lib</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
</UL>

<P><STRONG><a name="[38d]"></a>spifi_get_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifi_rom_api.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>read_flash</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>

<P><STRONG><a name="[219]"></a>cmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send04
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>

<P><STRONG><a name="[21a]"></a>all_quad</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readProt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_sendAd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send04
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>

<P><STRONG><a name="[218]"></a>read04</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moreId
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWPSEL
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
</UL>

<P><STRONG><a name="[21c]"></a>readAd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = readAd
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
</UL>

<P><STRONG><a name="[21d]"></a>send04</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
</UL>

<P><STRONG><a name="[21e]"></a>wren</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wren &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prog_cmd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_sendAd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
</UL>

<P><STRONG><a name="[21f]"></a>wren_send04</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send04
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[220]"></a>wren_sendAd</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wren_sendAd &rArr; wren &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
</UL>

<P><STRONG><a name="[222]"></a>cancel_mem_mode</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[221]"></a>wait_busy</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_block
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[223]"></a>write_stat</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_sendAd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxic
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
</UL>

<P><STRONG><a name="[224]"></a>set_mem_mode</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send04
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[225]"></a>setWPSEL</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setWPSEL &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
</UL>

<P><STRONG><a name="[239]"></a>setProtEnts</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setProtEnts
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm
</UL>

<P><STRONG><a name="[227]"></a>getProtBytes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readProt
</UL>

<P><STRONG><a name="[226]"></a>readProt</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readProt
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getProtBytes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
</UL>

<P><STRONG><a name="[238]"></a>setSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moreId
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxic
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giga
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eon
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chi
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amic
</UL>

<P><STRONG><a name="[228]"></a>setDev</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWPSEL
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send04
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxic
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giga
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eon
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chi
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amic
</UL>

<P><STRONG><a name="[229]"></a>spifi_init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = spifi_init &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pullMISO
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readProt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_spifi_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[22c]"></a>setProt</STRONG> (Thumb, 1060 bytes, Stack size 88 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readProt
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getProtBytes
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWPSEL
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_sendAd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_spifi_lib
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[235]"></a>checkAd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = checkAd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[22e]"></a>send_erase_cmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = send_erase_cmd &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_quad
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[22f]"></a>send_prog_cmd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = send_prog_cmd &rArr; wren &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_block
</UL>

<P><STRONG><a name="[230]"></a>prog_block</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prog_block &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prog_cmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[236]"></a>ck_erase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[232]"></a>ck_setup</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifi_rom_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_block
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_prog
</UL>

<P><STRONG><a name="[231]"></a>ck_prog</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ck_prog
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
</UL>

<P><STRONG><a name="[233]"></a>check_block</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_block
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
</UL>

<P><STRONG><a name="[234]"></a>spifi_program</STRONG> (Thumb, 598 bytes, Stack size 160 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_block
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_prog
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_erase
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_block
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_spifi_lib
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[237]"></a>spifi_erase</STRONG> (Thumb, 512 bytes, Stack size 152 bytes, spifi_rom_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = spifi_erase &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_prog
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ck_erase
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_block
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_erase_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_mode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_mode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wren_send04
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_spifi_lib
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
</UL>

<P><STRONG><a name="[5e]"></a>amic</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, amic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = amic &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>atm</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, atmel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = atm &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtEnts
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>chi</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, chi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = chi &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>eon</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, eon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = eon &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>esmt</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, esmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = esmt &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>giga</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, giga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = giga &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>mxic</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, macronix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mxic &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtEnts
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>numo_dummies</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, numonyx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = numo_dummies
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numo
</UL>

<P><STRONG><a name="[5d]"></a>numo</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, numonyx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = numo &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numo_dummies
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>moreId</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spansion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = moreId &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read04
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
</UL>

<P><STRONG><a name="[5a]"></a>span</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, spansion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = span &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moreId
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>sst</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sst.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sst &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProtEnts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>wbd_dummies</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, winbond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wbd_dummies
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbd
</UL>

<P><STRONG><a name="[64]"></a>wbd</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, winbond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wbd &rArr; setDev &rArr; write_stat &rArr; wait_busy &rArr; read04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbd_dummies
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifi_rom_api.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>set_uart</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, falcon_details.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spifi_clk
</UL>

<P><STRONG><a name="[22b]"></a>pullMISO</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, falcon_details.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
</UL>

<P><STRONG><a name="[38e]"></a>set_spifi_io</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, falcon_details.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>set_spifi_clk</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, falcon_details.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart
</UL>

<P><STRONG><a name="[23f]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__new_nothrow(unsigned)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[242]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[38f]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
</UL>

<P><STRONG><a name="[243]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[245]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>

<P><STRONG><a name="[118]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>

<P><STRONG><a name="[e9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[24a]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AssertFinishedSorted()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>

<P><STRONG><a name="[390]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[2cc]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
</UL>

<P><STRONG><a name="[2c2]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[24f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[391]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[392]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::Qqueue()
</UL>

<P><STRONG><a name="[250]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[395]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
</UL>

<P><STRONG><a name="[396]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2c3]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[398]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
</UL>

<P><STRONG><a name="[240]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[307]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[30c]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[399]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[253]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[103]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[255]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[258]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[25a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[25b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[247]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[248]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[259]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[249]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[246]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[f1]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[25f]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ed]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[f5]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[260]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ef]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[f7]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[e3]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[24e]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[262]"></a>__rt_SIGPVFN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_pvfn_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[24d]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[6e]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[264]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[116]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[39b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__rt_raise</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[39d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[25e]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[39f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[26f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[fb]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[270]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[fd]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ff]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[25d]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[261]"></a>__rt_SIGABRT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_abrt_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[254]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_rtmem_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[265]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[272]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[3a0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[271]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[105]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[273]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[26e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[268]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[266]"></a>__raise</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, __raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>

<P><STRONG><a name="[309]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[30a]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[274]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[3a3]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[279]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[278]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[27a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[27b]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[26a]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26b]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[325]"></a>ADC_ChannelCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc43xx_adc.o(i.ADC_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[328]"></a>ADC_ChannelGetData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_ChannelGetData))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[327]"></a>ADC_ChannelGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc43xx_adc.o(i.ADC_ChannelGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[27d]"></a>ADC_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lpc43xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
</UL>

<P><STRONG><a name="[2cf]"></a>ADC_IntConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc43xx_adc.o(i.ADC_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
</UL>

<P><STRONG><a name="[326]"></a>ADC_StartCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_StartCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[27e]"></a>CGU_EnableEntity</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lpc43xx_cgu.o(i.CGU_EnableEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[1ce]"></a>CGU_EntityConnect</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lpc43xx_cgu.o(i.CGU_EntityConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[1cf]"></a>CGU_GetPCLKFrequency</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_GetPCLKFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[32c]"></a>CGU_SetDIV</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc43xx_cgu.o(i.CGU_SetDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGU_SetDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[2a0]"></a>CGU_SetPLL0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetPLL0))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[32b]"></a>CGU_SetPLL1</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lpc43xx_cgu.o(i.CGU_SetPLL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGU_SetPLL1
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[32a]"></a>CGU_SetXTALOSC</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetXTALOSC))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[32d]"></a>CGU_UpdateClock</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, lpc43xx_cgu.o(i.CGU_UpdateClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_UpdateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[28a]"></a>EPAdr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(i.EPAdr))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>

<P><STRONG><a name="[27f]"></a>IPC_downloadSlaveImage</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ipc_mbx.o(i.IPC_downloadSlaveImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IPC_downloadSlaveImage &rArr; IPC_haltSlave
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_haltSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[280]"></a>IPC_haltSlave</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ipc_mbx.o(i.IPC_haltSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPC_haltSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_downloadSlaveImage
</UL>

<P><STRONG><a name="[281]"></a>IPC_queryLocalMbx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc_mbx.o(i.IPC_queryLocalMbx))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0CORE_IRQHandler
</UL>

<P><STRONG><a name="[2dd]"></a>IPC_startSlave</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ipc_mbx.o(i.IPC_startSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPC_startSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[24]"></a>M0CORE_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ipc_mbx.o(i.M0CORE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M0CORE_IRQHandler &rArr; _mbxProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_queryLocalMbx
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbxProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1f5]"></a>SSP_ClearIntPending</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1f4]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1f3]"></a>SSP_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lpc43xx_ssp.o(i.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1f6]"></a>SSP_IntConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc43xx_ssp.o(i.SSP_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[283]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_lpc43xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPC (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[7a]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UARTGetChar &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[73]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[77]"></a>UARTPutDec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[78]"></a>UARTPutDec16</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, debug_frmwrk.o(i.UARTPutDec16))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[79]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(i.UARTPutDec32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[74]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[75]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[76]"></a>UARTPutHex32</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[71]"></a>UARTPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[72]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts_))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init_clk)
</UL>
<P><STRONG><a name="[32f]"></a>UART_ConfigStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[1fd]"></a>UART_FIFOConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_FIFOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1fc]"></a>UART_Init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, lpc43xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[1ff]"></a>UART_IntConfig</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lpc43xx_uart.o(i.UART_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[285]"></a>UART_Receive</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, lpc43xx_uart.o(i.UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
</UL>

<P><STRONG><a name="[286]"></a>UART_ReceiveByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[217]"></a>UART_Send</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, lpc43xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>

<P><STRONG><a name="[287]"></a>UART_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[1fe]"></a>UART_TxCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[200]"></a>UART_setBaudRate</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, lpc43xx_uart.o(i.UART_setBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::setBaudrate(unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b]"></a>USB0_IRQHandler</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, usbhw.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB0_IRQHandler &rArr; USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[29c]"></a>USB_ClrStallEP</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usbhw.o(i.USB_ClrStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[289]"></a>USB_ConfigEP</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, usbhw.o(i.USB_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[2a9]"></a>USB_Configure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[297]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(i.USB_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2af]"></a>USB_Connect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhw.o(i.USB_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
</UL>

<P><STRONG><a name="[28b]"></a>USB_DataInStage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[28d]"></a>USB_DataOutStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[290]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2a8]"></a>USB_DisableEP</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbhw.o(i.USB_DisableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[2aa]"></a>USB_EnableEP</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbhw.o(i.USB_EnableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[6a]"></a>USB_EndPoint0</STRONG> (Thumb, 590 bytes, Stack size 8 bytes, usbcore.o(i.USB_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_EndPoint0 &rArr; USB_StatusInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetStatus
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetDescriptor
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[6b]"></a>USB_EndPoint1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbuser.o(i.USB_EndPoint1))
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[6c]"></a>USB_EndPoint2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbuser.o(i.USB_EndPoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_EndPoint2 &rArr; sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[29f]"></a>USB_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, usbhw.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_Init &rArr; CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL0
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
</UL>

<P><STRONG><a name="[2a1]"></a>USB_ProgDTD</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usbhw.o(i.USB_ProgDTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>

<P><STRONG><a name="[28e]"></a>USB_ReadEP</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, usbhw.o(i.USB_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
</UL>

<P><STRONG><a name="[299]"></a>USB_ReadReqEP</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbhw.o(i.USB_ReadReqEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>

<P><STRONG><a name="[2a2]"></a>USB_ReadSetupPkt</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, usbhw.o(i.USB_ReadSetupPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
</UL>

<P><STRONG><a name="[2a3]"></a>USB_Recv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbuser.o(i.USB_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_Recv &rArr; recvChunk &rArr; USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[2a4]"></a>USB_RecvReset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbuser.o(i.USB_RecvReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_RecvReset &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[294]"></a>USB_ReqGetDescriptor</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, usbcore.o(i.USB_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[291]"></a>USB_ReqGetStatus</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, usbcore.o(i.USB_ReqGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[292]"></a>USB_ReqSetClrFeature</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, usbcore.o(i.USB_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReqSetClrFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTestMode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[296]"></a>USB_ReqSetConfiguration</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, usbcore.o(i.USB_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ReqSetConfiguration &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[298]"></a>USB_ReqSetInterface</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, usbcore.o(i.USB_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ReqSetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[288]"></a>USB_Reset</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, usbhw.o(i.USB_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>USB_ResetCore</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbcore.o(i.USB_ResetCore))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[2a5]"></a>USB_ResetEP</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbhw.o(i.USB_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendReset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvReset
</UL>

<P><STRONG><a name="[69]"></a>USB_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbuser.o(i.USB_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[2ac]"></a>USB_Send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbuser.o(i.USB_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_Send &rArr; sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[2ad]"></a>USB_SendReset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbuser.o(i.USB_SendReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SendReset &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[29b]"></a>USB_SetAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[295]"></a>USB_SetStallEP</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2a7]"></a>USB_SetTestMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[28f]"></a>USB_SetupStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetupStage &rArr; USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[293]"></a>USB_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[29a]"></a>USB_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(i.USB_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2ae]"></a>USB_UserInit</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, usbuser.o(i.USB_UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_UserInit &rArr; USB_Init &rArr; CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[2a6]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[28c]"></a>USB_WriteEP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbhw.o(i.USB_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
</UL>

<P><STRONG><a name="[2b0]"></a>USB_handleState</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbuser.o(i.USB_handleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[2dc]"></a>CameraInit()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pixy_init.o(i._Z10CameraInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CameraInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[90]"></a>cam_getAEC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z10cam_getAECv))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>cam_getAWB()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z10cam_getAWBv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>cam_getECV()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, camera.o(i._Z10cam_getECVv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_getECV() &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>cam_getWBV()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, camera.o(i._Z10cam_getWBVv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_getWBV() &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>cam_setAEC(const unsigned char&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, camera.o(i._Z10cam_setAECRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_setAEC(const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>cam_setAWB(const unsigned char&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, camera.o(i._Z10cam_setAWBRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_setAWB(const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>cam_setECV(const unsigned&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, camera.o(i._Z10cam_setECVRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_setECV(const unsigned&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>cam_setWBV(const unsigned&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, camera.o(i._Z10cam_setWBVRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_setWBV(const unsigned&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>commonInit()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pixy_init.o(i._Z10commonInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = commonInit() &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2d2]"></a>led_setPWM(unsigned char, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, led.o(i._Z10led_setPWMht))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>

<P><STRONG><a name="[9c]"></a>led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, led.o(i._Z10led_setRGBRKhS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRecv()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleLED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>prm_format()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, param.o(i._Z10prm_formatv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = prm_format() &rArr; cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>prm_getAll(const unsigned short&, Chirp*)</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, param.o(i._Z10prm_getAllRKtP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prm_getAll(const unsigned short&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getId(ParamRecord*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>pwr_getVin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, power.o(i._Z10pwr_getVinv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_getVin() &rArr; adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>rcs_enable(const unsigned char&, const unsigned char&)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rcservo.o(i._Z10rcs_enableRKhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcs_enable(const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>rcs_getPos(const unsigned char&)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rcservo.o(i._Z10rcs_getPosRKh))
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>rcs_setPos(const unsigned char&, const unsigned short&)</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, rcservo.o(i._Z10rcs_setPosRKhRKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::reset()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRecv()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::update(int)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoop()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine(unsigned, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits(const unsigned char&, const short&, const short&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>cam_getMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z11cam_getModev))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>cam_setMode(const unsigned char&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, camera.o(i._Z11cam_setModeRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cam_setMode(const unsigned char&) &rArr; cam_setRegs(const unsigned char*, int) &rArr; cam_setBrightness(const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegs(const unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsSetup()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrame(unsigned char*, unsigned char*, bool)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptSetup()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseSetup()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>flash_erase(unsigned, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, flash.o(i._Z11flash_erasejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = flash_erase(unsigned, unsigned) &rArr; spifi_erase &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[2bf]"></a>prm_getDesc(ParamRecord*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, param.o(i._Z11prm_getDescP11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prm_getDesc(ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[aa]"></a>prm_getInfo(const char*, Chirp*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, param.o(i._Z11prm_getInfoPKcP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prm_getInfo(const char*, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>pwr_getVbus()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, power.o(i._Z11pwr_getVbusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_getVbus() &rArr; adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>rcs_setFreq(const unsigned short&)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rcservo.o(i._Z11rcs_setFreqRKt))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, camera.o(i._Z12cam_getFramePhjhtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
</UL>

<P><STRONG><a name="[a9]"></a>prm_getChirp(const char*, Chirp*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, param.o(i._Z12prm_getChirpPKcP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prm_getChirp(const char*, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[2d4]"></a>prm_nextFree()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, param.o(i._Z12prm_nextFreev))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
</UL>

<P><STRONG><a name="[a5]"></a>prm_setChirp(const char*, const unsigned&, const unsigned char*)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, param.o(i._Z12prm_setChirpPKcRKjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>prm_setDirty()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i._Z12prm_setDirtyv))
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>__new_nothrow(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, new_cheapnothrow.o(i._Z13__new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[2c7]"></a>flash_program(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, flash.o(i._Z13flash_programjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_program
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[a2]"></a>rcs_setLimits(const unsigned char&, const short&, const short&)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rcservo.o(i._Z13rcs_setLimitsRKhRKsS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rcs_setLimits(const unsigned char&, const short&, const short&) &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>cam_loadParams()</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, camera.o(i._Z14cam_loadParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setWBV(const unsigned&)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setECV(const unsigned&)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[2bc]"></a>prm_findShadow(const char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, param.o(i._Z14prm_findShadowPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prm_findShadow(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::operator [](int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[af]"></a>pwr_USBpowered()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, power.o(i._Z14pwr_USBpoweredv))
<BR>[Address Reference Count : 1]<UL><LI> power.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>rcs_loadParams()</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, rcservo.o(i._Z14rcs_loadParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = rcs_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits(const unsigned char&, const short&, const short&)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setFreq(const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
</UL>

<P><STRONG><a name="[9a]"></a>cam_getRegister(const unsigned char&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, camera.o(i._Z15cam_getRegisterRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_getRegister(const unsigned char&) &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>cam_setRegister(const unsigned char&, const unsigned char&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, camera.o(i._Z15cam_setRegisterRKhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cam_setRegister(const unsigned char&, const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>cam_testPattern(const unsigned char&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, camera.o(i._Z15cam_testPatternRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_testPattern(const unsigned char&) &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>cam_getLightMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z16cam_getLightModev))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>cam_setLightMode(const unsigned char&)</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, camera.o(i._Z16cam_setLightModeRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cam_setLightMode(const unsigned char&) &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>prm_resetShadows()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, param.o(i._Z16prm_resetShadowsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prm_resetShadows() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::operator [](int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>cam_getBrightness()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z17cam_getBrightnessv))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, camera.o(i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoLoop()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>cam_setBrightness(const unsigned char&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, camera.o(i._Z17cam_setBrightnessRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cam_setBrightness(const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRecv()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegs(const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>led_getMaxCurrent()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(i._Z17led_getMaxCurrentv))
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>led_setMaxCurrent(const unsigned&)</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, led.o(i._Z17led_setMaxCurrentRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = led_setMaxCurrent(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_ledBrightnessCallback(const char*, const unsigned short&)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>prm_getDataOffset(const ParamRecord*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, param.o(i._Z17prm_getDataOffsetPK11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[6d]"></a>cam_shadowCallback(const char*, const unsigned char&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, camera.o(i._Z18cam_shadowCallbackPKcRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cam_shadowCallback(const char*, const unsigned char&) &rArr; cam_getWBV() &rArr; CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getWBV()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getECV()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i._Z14cam_loadParamsv)
</UL>
<P><STRONG><a name="[a7]"></a>prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, param.o(i._Z18prm_setShadowChirpPKcRKjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prm_setShadowChirp(const char*, const unsigned&, const unsigned char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>prm_setShadowCallback(const char*, void(*)(const char*, const void*))</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, param.o(i._Z21prm_setShadowCallbackPKcPFvS0_PKvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prm_setShadowCallback(const char*, void(*)(const char*, const void*)) &rArr; SimpleVector&lang;Shadow&rang;::resize(int) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::resize(int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>

<P><STRONG><a name="[182]"></a>cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, camera.o(i._Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
</UL>

<P><STRONG><a name="[2ce]"></a>ADCInit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pixy_init.o(i._Z7ADCInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADCInit() &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2db]"></a>SCTInit()</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, pixy_init.o(i._Z7SCTInitv))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[139]"></a>cprintf(const char*, ...)</STRONG> (Thumb, 46 bytes, Stack size 160 bytes, pixy_init.o(i._Z7cprintfPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = cprintf(const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blobsLoop()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_list()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::update()
</UL>

<P><STRONG><a name="[9b]"></a>led_set(const unsigned&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led.o(i._Z7led_setRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::setLED()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::flashLED(unsigned char)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::reset()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>led_set(unsigned char, unsigned char, bool)</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, led.o(i._Z7led_sethhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setPWM(unsigned char, unsigned short)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
</UL>

<P><STRONG><a name="[121]"></a>prm_add(const char*, unsigned, const char*, ...)</STRONG> (Thumb, 202 bytes, Stack size 312 bytes, param.o(i._Z7prm_addPKcjS0_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_nextFree()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoadParams()
</UL>

<P><STRONG><a name="[2c6]"></a>prm_crc(const ParamRecord*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, param.o(i._Z7prm_crcPK11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prm_crc(const ParamRecord*) &rArr; prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[120]"></a>prm_get(const char*, ...)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, param.o(i._Z7prm_getPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runprog(const unsigned char&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_ledBrightnessCallback(const char*, const unsigned short&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_teachThreshCallback(const char*, const unsigned&)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptLoadParams()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chaseLoadParams()
</UL>

<P><STRONG><a name="[13e]"></a>prm_set(const char*, ...)</STRONG> (Thumb, 60 bytes, Stack size 288 bytes, param.o(i._Z7prm_setPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[2b7]"></a>GPIOInit()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pixy_init.o(i._Z8GPIOInitv))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[2d7]"></a>cam_init()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, camera.o(i._Z8cam_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = cam_init() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegs(const unsigned char*, int)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2d9]"></a>led_init()</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, led.o(i._Z8led_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = led_init() &rArr; Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[163]"></a>periodic()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pixy_init.o(i._Z8periodicv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::wait(unsigned)
</UL>

<P><STRONG><a name="[11a]"></a>pixyInit(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, pixy_init.o(i._Z8pixyInitjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = pixyInit(unsigned, const unsigned char*, unsigned) &rArr; cam_init() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_haltSlave
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_downloadSlaveImage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTInit()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::USBLink()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::SMLink()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setSendTimeout(unsigned)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_enable(const unsigned char&, const unsigned char&)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_startSlave
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c4]"></a>prm_find(const char*, unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, param.o(i._Z8prm_findPKcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prm_find(const char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
</UL>

<P><STRONG><a name="[2e2]"></a>prm_init(Chirp*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, param.o(i._Z8prm_initP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prm_init(Chirp*) &rArr; Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2e3]"></a>pwr_init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, power.o(i._Z8pwr_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pwr_init() &rArr; Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_getVin()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2e4]"></a>rcs_init()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rcservo.o(i._Z8rcs_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = rcs_init() &rArr; rcs_loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_enable(const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2ed]"></a>copyAlign(char*, const char*, int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chirp.o(i._Z9copyAlignPcPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copyAlign(char*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>

<P><STRONG><a name="[2da]"></a>handleAWB()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pixy_init.o(i._Z9handleAWBv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
</UL>

<P><STRONG><a name="[165]"></a>prm_dirty()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, param.o(i._Z9prm_dirtyv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[2bb]"></a>prm_getId(ParamRecord*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, param.o(i._Z9prm_getIdP11ParamRecord))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[ad]"></a>pwr_get5v()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, power.o(i._Z9pwr_get5vv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_get5v() &rArr; adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>timerInit()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pixy_init.o(i._Z9timerInitv))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[59]"></a>ColorSignature::ColorSignature()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conncomp.o(i._ZN14ColorSignatureC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> colorlut.o(.text)
</UL>
<P><STRONG><a name="[3a5]"></a>ColorSignature::ColorSignature__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, conncomp.o(i._ZN14ColorSignatureC1Ev), UNUSED)

<P><STRONG><a name="[bb]"></a>Link::getFlags(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usblink.o(i._ZN4Link8getFlagsEh))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::getFlags(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
<LI> usblink.o(.constdata__ZTV4Link)
</UL>
<P><STRONG><a name="[bc]"></a>Link::blockSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usblink.o(i._ZN4Link9blockSizeEv))
<BR>[Address Reference Count : 3]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
<LI> usblink.o(.constdata__ZTV4Link)
<LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[2b2]"></a>CSccb::Read(unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sccb.o(i._ZN5CSccb4ReadEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CSccb::Read(unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setLightMode(const unsigned char&)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_testPattern(const unsigned char&)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getRegister(const unsigned char&)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getWBV()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getECV()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegs(const unsigned char*, int)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[2e7]"></a>CSccb::Stop()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSccb::Stop() &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>

<P><STRONG><a name="[2ea]"></a>CSccb::Drive()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb5DriveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
</UL>

<P><STRONG><a name="[2e5]"></a>CSccb::Start()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSccb::Start() &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>

<P><STRONG><a name="[2e6]"></a>CSccb::Write(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sccb.o(i._ZN5CSccb5WriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>

<P><STRONG><a name="[2b3]"></a>CSccb::Write(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sccb.o(i._ZN5CSccb5WriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setLightMode(const unsigned char&)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_testPattern(const unsigned char&)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegister(const unsigned char&, const unsigned char&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setWBV(const unsigned&)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setECV(const unsigned&)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setRegs(const unsigned char*, int)
</UL>

<P><STRONG><a name="[2e8]"></a>CSccb::TriState()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb8TriStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>

<P><STRONG><a name="[2e9]"></a>CSccb::PortWrite(unsigned char, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, sccb.o(i._ZN5CSccb9PortWriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>

<P><STRONG><a name="[2d8]"></a>CSccb::CSccb(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sccb.o(i._ZN5CSccbC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CSccb::CSccb(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[3a6]"></a>CSccb::CSccb__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sccb.o(i._ZN5CSccbC1Eh), UNUSED)

<P><STRONG><a name="[2be]"></a>Chirp::getArgList(unsigned char*, unsigned, unsigned char*)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp10getArgListEPhjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chirp::getArgList(unsigned char*, unsigned, unsigned char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[2eb]"></a>Chirp::handleInit(unsigned short*, unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp10handleInitEPtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Chirp::handleInit(unsigned short*, unsigned char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[2ec]"></a>Chirp::recvHeader(unsigned char*, short*, bool)</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, chirp.o(i._ZN5Chirp10recvHeaderEPhPsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chirp::recvHeader(unsigned char*, short*, bool) &rArr; Chirp::sendAck(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendAck(bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyAlign(char*, const char*, int)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[2ef]"></a>Chirp::remoteInit(bool)</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, chirp.o(i._ZN5Chirp10remoteInitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
</UL>

<P><STRONG><a name="[2f0]"></a>Chirp::sendHeader(unsigned char, short)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp10sendHeaderEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chirp::sendHeader(unsigned char, short) &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvAck(bool*, unsigned short)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[2d3]"></a>Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, chirp.o(i._ZN5Chirp10vserializeEPS_PhjPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
</UL>

<P><STRONG><a name="[c3]"></a>Chirp::handleChirp(unsigned char, short, const void**)</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, chirp.o(i._ZN5Chirp11handleChirpEhsPPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Chirp::handleChirp(unsigned char, short, const void**) &rArr; Chirp::handleEnumerateInfo(short*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerateInfo(short*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerate(char*, short*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleInit(unsigned short*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[c4]"></a>Chirp::handleXdata(const void**)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp11handleXdataEPPKv))
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[2f7]"></a>Chirp::lookupTable(const char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp11lookupTableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::lookupTable(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerate(char*, short*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>

<P><STRONG><a name="[2f8]"></a>Chirp::updateTable(const char*, unsigned(*)(Chirp*))</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp11updateTableEPKcPFjPS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>

<P><STRONG><a name="[2f9]"></a>Chirp::reallocTable()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp12reallocTableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>

<P><STRONG><a name="[2d6]"></a>Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, chirp.o(i._ZN5Chirp12vdeserializeEPhjPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>

<P><STRONG><a name="[2f6]"></a>Chirp::restoreBuffer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp13restoreBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[137]"></a>Chirp::registerModule(const ProcModule*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp14registerModuleEPK10ProcModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[2f5]"></a>Chirp::sendChirpRetry(unsigned char, short)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp14sendChirpRetryEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[2e0]"></a>Chirp::setSendTimeout(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp14setSendTimeoutEj))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2f3]"></a>Chirp::handleEnumerate(char*, short*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp15handleEnumerateEPcPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chirp::handleEnumerate(char*, short*) &rArr; Chirp::lookupTable(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[2cb]"></a>Chirp::deserializeParse(unsigned char*, unsigned, void**)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp16deserializeParseEPhjPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[2f4]"></a>Chirp::handleEnumerateInfo(short*)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, chirp.o(i._ZN5Chirp19handleEnumerateInfoEPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Chirp::handleEnumerateInfo(short*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[2fd]"></a>Chirp::call(unsigned char, short, std::__va_list)</STRONG> (Thumb, 296 bytes, Stack size 104 bytes, chirp.o(i._ZN5Chirp4callEhsSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>

<P><STRONG><a name="[14a]"></a>Chirp::call(unsigned char, short, ...)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp4callEhsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runningM0()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrame(unsigned char*, unsigned char*, bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::remoteInit(bool)
</UL>

<P><STRONG><a name="[c2]"></a>Chirp::init(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp4initEb))
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[2d5]"></a>Chirp::calcCrc(unsigned char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chirp.o(i._ZN5Chirp7calcCrcEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
</UL>

<P><STRONG><a name="[138]"></a>Chirp::getProc(const char*, unsigned(*)(Chirp*))</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, chirp.o(i._ZN5Chirp7getProcEPKcPFjPS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Chirp::getProc(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[302]"></a>Chirp::getType(const void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp7getTypeEPKv))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
</UL>

<P><STRONG><a name="[2f2]"></a>Chirp::realloc(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7reallocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvFull(unsigned char*, short*, bool)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>

<P><STRONG><a name="[2f1]"></a>Chirp::recvAck(bool*, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp7recvAckEPbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
</UL>

<P><STRONG><a name="[2ee]"></a>Chirp::sendAck(bool)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp7sendAckEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chirp::sendAck(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>

<P><STRONG><a name="[14d]"></a>Chirp::service(bool)</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, chirp.o(i._ZN5Chirp7serviceEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Chirp::service(bool) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvFull(unsigned char*, short*, bool) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[300]"></a>Chirp::setLink(Link*)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7setLinkEP4Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Chirp::setLink(Link*) &rArr; Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::remoteInit(bool)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log(const char*, ...)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
</UL>

<P><STRONG><a name="[2fc]"></a>Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp7setProcEPKcPFjPS_EP18ProcTableExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr;  Chirp::updateTable(const char*, unsigned(*)(Chirp*)) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
</UL>

<P><STRONG><a name="[14f]"></a>Chirp::assemble(unsigned char, ...)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp8assembleEhz))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getAction(const unsigned short&, Chirp*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_version(Chirp*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(const char*, ...)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerateInfo(short*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleInit(unsigned short*, unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[2fb]"></a>Chirp::loadArgs(std::__va_list*, void**)</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, chirp.o(i._ZN5Chirp8loadArgsEPSt9__va_listPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chirp::loadArgs(std::__va_list*, void**)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getType(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
</UL>

<P><STRONG><a name="[303]"></a>Chirp::recvData()</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp8recvDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendAck(bool)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyAlign(char*, const char*, int)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[304]"></a>Chirp::recvFull(unsigned char*, short*, bool)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp8recvFullEPhPsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chirp::recvFull(unsigned char*, short*, bool) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[305]"></a>Chirp::sendData()</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp8sendDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chirp::sendData() &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvAck(bool*, unsigned short)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[306]"></a>Chirp::sendFull(unsigned char, short)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp8sendFullEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chirp::sendFull(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[169]"></a>Chirp::connected()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp9connectedEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop()
</UL>

<P><STRONG><a name="[2ff]"></a>Chirp::recvChirp(unsigned char*, short*, void**, bool)</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp9recvChirpEPhPsPPvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvFull(unsigned char*, short*, bool) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvFull(unsigned char*, short*, bool)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>

<P><STRONG><a name="[c5]"></a>Chirp::sendChirp(unsigned char, short)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp9sendChirpEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chirp::sendChirp(unsigned char, short) &rArr; Chirp::sendHeader(unsigned char, short) &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendFull(unsigned char, short)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[141]"></a>Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp9serializeEPS_Phjz))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
</UL>

<P><STRONG><a name="[143]"></a>Chirp::useBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp9useBufferEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chirp::useBuffer(unsigned char*, unsigned) &rArr; Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCustom(unsigned char)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
</UL>

<P><STRONG><a name="[2fe]"></a>Chirp::vassemble(std::__va_list*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp9vassembleEPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>

<P><STRONG><a name="[2df]"></a>Chirp::Chirp(bool, bool, Link*)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, chirp.o(i._ZN5ChirpC1EbbP4Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Chirp::Chirp(bool, bool, Link*) &rArr; Chirp::setLink(Link*) &rArr; Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log(const char*, ...)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3a7]"></a>Chirp::Chirp__sub_object(bool, bool, Link*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, chirp.o(i._ZN5ChirpC1EbbP4Link), UNUSED)

<P><STRONG><a name="[1b8]"></a>RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, colorlut.o(i._ZN5RectAC1Etttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>

<P><STRONG><a name="[3a8]"></a>RectA::RectA__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, colorlut.o(i._ZN5RectAC1Etttt), UNUSED)

<P><STRONG><a name="[1ba]"></a>RectA::RectA()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, colorlut.o(i._ZN5RectAC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[3a9]"></a>RectA::RectA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN5RectAC1Ev), UNUSED)

<P><STRONG><a name="[1b9]"></a>Frame8::Frame8()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, colorlut.o(i._ZN6Frame8C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[3aa]"></a>Frame8::Frame8__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN6Frame8C1Ev), UNUSED)

<P><STRONG><a name="[c6]"></a>SMLink::send(const unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, smlink.o(i._ZN6SMLink4sendEPKhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMLink::send(const unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[c7]"></a>SMLink::receive(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, smlink.o(i._ZN6SMLink7receiveEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMLink::receive(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[ca]"></a>SMLink::getFlags(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smlink.o(i._ZN6SMLink8getFlagsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMLink::getFlags(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link::getFlags(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[c9]"></a>SMLink::getTimer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smlink.o(i._ZN6SMLink8getTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMLink::getTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[c8]"></a>SMLink::setTimer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smlink.o(i._ZN6SMLink8setTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMLink::setTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[2e1]"></a>SMLink::SMLink()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smlink.o(i._ZN6SMLinkC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3ab]"></a>SMLink::SMLink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, smlink.o(i._ZN6SMLinkC1Ev), UNUSED)

<P><STRONG><a name="[ce]"></a>Iserial::receiveLen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._ZN7Iserial10receiveLenEv))
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(.constdata__ZTV7Iserial)
<LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[cb]"></a>Iserial::open()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._ZN7Iserial4openEv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV7Iserial)
</UL>
<P><STRONG><a name="[cc]"></a>Iserial::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._ZN7Iserial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV7Iserial)
</UL>
<P><STRONG><a name="[cf]"></a>Iserial::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._ZN7Iserial6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV7Iserial)
</UL>
<P><STRONG><a name="[cd]"></a>Iserial::receive(unsigned char*, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i._ZN7Iserial7receiveEPhj))
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(.constdata__ZTV7Iserial)
<LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[1c7]"></a>Point16::Point16(short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, colorlut.o(i._ZN7Point16C1Ess))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[3ac]"></a>Point16::Point16__sub_object(short, short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN7Point16C1Ess), UNUSED)

<P><STRONG><a name="[56]"></a>Point16::Point16()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conncomp.o(i._ZN7Point16C1Ev))
<BR>[Address Reference Count : 3]<UL><LI> conncomp.o(.text)
<LI> button.o(.text)
<LI> colorlut.o(t._ZN12SimpleVectorI7Point16E6resizeEi)
</UL>
<P><STRONG><a name="[3ad]"></a>Point16::Point16__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, conncomp.o(i._ZN7Point16C1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>USBLink::send(const unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usblink.o(i._ZN7USBLink4sendEPKhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = USBLink::send(const unsigned char*, unsigned, unsigned short) &rArr; USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendReset
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[d1]"></a>USBLink::receive(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usblink.o(i._ZN7USBLink7receiveEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = USBLink::receive(unsigned char*, unsigned, unsigned short) &rArr; USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvReset
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Recv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[d3]"></a>USBLink::getTimer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usblink.o(i._ZN7USBLink8getTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLink::getTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[d2]"></a>USBLink::setTimer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usblink.o(i._ZN7USBLink8setTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLink::setTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[2de]"></a>USBLink::USBLink()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLinkC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3ae]"></a>USBLink::USBLink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLinkC1Ev), UNUSED)

<P><STRONG><a name="[1c1]"></a>UVPixel::UVPixel()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, colorlut.o(i._ZN7UVPixelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[3af]"></a>UVPixel::UVPixel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN7UVPixelC1Ev), UNUSED)

<P><STRONG><a name="[189]"></a>SMoments::Add(const SMoments&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blob.o(i._ZN8SMoments3AddERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Assimilate(CBlob&)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
</UL>

<P><STRONG><a name="[6f]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::~SimpleVector()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::resize(int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::~SimpleVector()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::resize(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[184]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[19a]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_param_cpp_55d340e8
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[2fa]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_nonew.o(i._ZnajRKSt9nothrow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::resize(int)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::resize(int)
</UL>

<P><STRONG><a name="[134]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[18a]"></a>operator new(unsigned, const std::nothrow_t&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new_wrapnothrow.o(i._ZnwjRKSt9nothrow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__new_nothrow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[308]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[26d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[316]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[30b]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_param_cpp_55d340e8
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::resize(int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_vec_new_nocookie</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aeabi_vec_new_nocookie.o(i.__aeabi_vec_new_nocookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::ledPipe()
</UL>

<P><STRONG><a name="[10b]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[ba]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV4Link)
</UL>
<P><STRONG><a name="[30d]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
</UL>

<P><STRONG><a name="[30e]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[315]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[319]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[2d1]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[3b0]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[2ca]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[3b1]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[31b]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[31d]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[312]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[31c]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[324]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[30f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[31a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[310]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[321]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[31e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[318]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[320]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[31f]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[317]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[24b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2c0]"></a>adc_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, misc.o(i.adc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_get5v()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_getVbus()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_getVin()
</UL>

<P><STRONG><a name="[211]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[1a0]"></a>atan2f</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[181]"></a>button</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, misc.o(i.button), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
</UL>

<P><STRONG><a name="[329]"></a>clockInit</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, platform_config.o(i.clockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = clockInit &rArr; spifi_init &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetXTALOSC
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetDIV
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[212]"></a>cos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[2b8]"></a>debug_frmwrk_init_clk</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(i.debug_frmwrk_init_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = debug_frmwrk_init_clk &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[1ee]"></a>delayus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, misc.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::update()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>

<P><STRONG><a name="[311]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[330]"></a>fpuInit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fpu_init.o(i.fpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[17b]"></a>getTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.getTimer))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::wait(unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::getTimer()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::getTimer()
</UL>

<P><STRONG><a name="[153]"></a>logf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = logf &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
</UL>

<P><STRONG><a name="[2b1]"></a>lpc_printf</STRONG> (Thumb, 44 bytes, Stack size 544 bytes, debug_frmwrk.o(i.lpc_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
</UL>

<P><STRONG><a name="[2b5]"></a>platformInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, platform_config.o(i.platformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = platformInit &rArr; clockInit &rArr; spifi_init &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpuInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOInit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[29d]"></a>recvChunk</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbuser.o(i.recvChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = recvChunk &rArr; USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Recv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[1e4]"></a>scu_pinmux</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, lpc43xx_scu.o(i.scu_pinmux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::close()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::open()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::open()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::close()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::open()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::open()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOInit
</UL>

<P><STRONG><a name="[29e]"></a>sendChunk</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbuser.o(i.sendChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[17a]"></a>setTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, misc.o(i.setTimer))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::handleSignature()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::selectProgram(int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMachine::wait(unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::setTimer()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::setTimer()
</UL>

<P><STRONG><a name="[119]"></a>showError</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, misc.o(i.showError))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>

<P><STRONG><a name="[175]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[213]"></a>tan</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[331]"></a>vIOInit</STRONG> (Thumb, 572 bytes, Stack size 8 bytes, platform_config.o(i.vIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vIOInit &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[108]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[68]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2cd]"></a>SimpleVector&lang;Shadow&rang;::resize(int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, param.o(t._ZN12SimpleVectorI6ShadowE6resizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SimpleVector&lang;Shadow&rang;::resize(int) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
</UL>

<P><STRONG><a name="[70]"></a>SimpleVector&lang;Shadow&rang;::~SimpleVector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, param.o(t._ZN12SimpleVectorI6ShadowED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleVector&lang;Shadow&rang;::~SimpleVector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(i.__sti___9_param_cpp_55d340e8)
</UL>
<P><STRONG><a name="[3b2]"></a>SimpleVector&lang;Shadow&rang;::~SimpleVector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, param.o(t._ZN12SimpleVectorI6ShadowED1Ev), UNUSED)

<P><STRONG><a name="[2c9]"></a>SimpleVector&lang;Shadow&rang;::operator [](int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(t._ZN12SimpleVectorI6ShadowEixEi))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
</UL>

<P><STRONG><a name="[332]"></a>SimpleVector&lang;Point16&rang;::resize(int)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, colorlut.o(t._ZN12SimpleVectorI7Point16E6resizeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SimpleVector&lang;Point16&rang;::resize(int) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
</UL>

<P><STRONG><a name="[1c8]"></a>SimpleVector&lang;Point16&rang;::push_back(const Point16&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, colorlut.o(t._ZN12SimpleVectorI7Point16E9push_backERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SimpleVector&lang;Point16&rang;::push_back(const Point16&) &rArr; SimpleVector&lang;Point16&rang;::resize(int) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::resize(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[145]"></a>SimpleVector&lang;Point16&rang;::~SimpleVector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, conncomp.o(t._ZN12SimpleVectorI7Point16ED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleVector&lang;Point16&rang;::~SimpleVector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[3b3]"></a>SimpleVector&lang;Point16&rang;::~SimpleVector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, conncomp.o(t._ZN12SimpleVectorI7Point16ED1Ev), UNUSED)

<P><STRONG><a name="[1df]"></a>ReceiveQ&lang;unsigned char&rang;::receiveLen()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(t._ZN8ReceiveQIhE10receiveLenEv))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::receiveLen()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::receive(unsigned char*, unsigned)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::receiveLen()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::receive(unsigned char*, unsigned)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::irqHandler()
</UL>

<P><STRONG><a name="[1f9]"></a>ReceiveQ&lang;unsigned short&rang;::receiveLen()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(t._ZN8ReceiveQItE10receiveLenEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::write(unsigned short)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::receiveLen()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::receive(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1f1]"></a>ReceiveQ&lang;unsigned short&rang;::write(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi.o(t._ZN8ReceiveQItE5writeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReceiveQ&lang;unsigned short&rang;::write(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::receiveLen()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>

<P><STRONG><a name="[1f0]"></a>TransmitQ&lang;unsigned short&rang;::read(unsigned short*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi.o(t._ZN9TransmitQItE4readEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>

<P><STRONG><a name="[1b7]"></a>SimpleVector&lang;Point16&rang;::operator [](int) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, colorlut.o(t._ZNK12SimpleVectorI7Point16EixEi))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>

<P><STRONG><a name="[314]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3b4]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3b5]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3b6]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3b7]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3b8]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>

<P><STRONG><a name="[333]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[336]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[33c]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[339]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[33a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3b9]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2d0]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3ba]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[33b]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[33f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[33d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[335]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[338]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
</UL>

<P><STRONG><a name="[33e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[340]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[342]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[343]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
</UL>

<P><STRONG><a name="[3bb]"></a>_fadd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[346]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
</UL>

<P><STRONG><a name="[3bc]"></a>_fdiv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[3bd]"></a>_ffix</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3be]"></a>_ffixu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[3bf]"></a>_fflt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeDetect_run()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3c0]"></a>_ffltu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[345]"></a>_fcmple</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[348]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3c1]"></a>_fmul</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[344]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[101]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3c2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3c3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[334]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
</UL>

<P><STRONG><a name="[347]"></a>_frcmple</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[e5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[db]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[3c4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3c5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3c6]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3c7]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3c8]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)

<P><STRONG><a name="[3c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc43xx_m4.o(RESET)
<LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[34]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[38]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[50]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[54]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[23]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[25]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[28]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4d]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[26]"></a>EZH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4b]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4c]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[43]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[44]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[45]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[46]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[47]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[48]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[49]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3f]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[40]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2a]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[53]"></a>M0s_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[55]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2e]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[51]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2d]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[29]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[42]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[41]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[37]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[39]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[30]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[31]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[32]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2c]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4f]"></a>VADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[52]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[276]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc43xx_m4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap (via Veneer)
</UL>

<P><STRONG><a name="[284]"></a>getPC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[159]"></a>loadParams()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = loadParams() &rArr; prm_add(const char*, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; spifi_program &rArr; setProt &rArr; set_mem_mode &rArr; wren_send04 &rArr; send04 &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
</UL>

<P><STRONG><a name="[d7]"></a>__sti___10_progpt_cpp_g_progPt</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __sti___10_progpt_cpp_g_progPt &rArr; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.init_array)
</UL>
<P><STRONG><a name="[1d4]"></a>I2C_getNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferComplete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferComplete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[1d8]"></a>I2C_Start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[1d5]"></a>I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[1d9]"></a>I2C_SendByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[1da]"></a>I2C_GetByte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[1d1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[1d2]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[204]"></a>scaleMotor(int)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine(unsigned, unsigned)
</UL>

<P><STRONG><a name="[203]"></a>axisMap(int*, int*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, progchase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine(unsigned, unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>__sti___13_progchase_cpp_bdb05ac4</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, progchase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___13_progchase_cpp_bdb05ac4
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorLoop::MotorLoop(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progchase.o(.init_array)
</UL>
<P><STRONG><a name="[2c1]"></a>cam_setRegs(const unsigned char*, int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, camera.o(i._Z11cam_setRegsPKhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cam_setRegs(const unsigned char*, int) &rArr; cam_setBrightness(const unsigned char&) &rArr; CSccb::Write(unsigned char, unsigned char) &rArr; CSccb::Write(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write(unsigned char, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init()
</UL>

<P><STRONG><a name="[d9]"></a>__sti___10_camera_cpp_g_sccb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, camera.o(i.__sti___10_camera_cpp_g_sccb))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.init_array)
</UL>
<P><STRONG><a name="[da]"></a>__sti___9_param_cpp_55d340e8</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, param.o(i.__sti___9_param_cpp_55d340e8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___9_param_cpp_55d340e8 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.init_array)
</UL>
<P><STRONG><a name="[301]"></a>log(const char*, ...)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chirp.o(i._Z3logPKcz))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
</UL>

<P><STRONG><a name="[32e]"></a>delayus</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, platform_config.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[282]"></a>_mbxProcess</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc_mbx.o(i._mbxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mbxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0CORE_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[337]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[66]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[67]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
