; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\button.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\button.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\button.crf button.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z8scaleLEDjjjj PROC ; scaleLED(unsigned, unsigned, unsigned, unsigned)
;;;39     // In general with an RGB LED, you can only communicate 2 things--- brightness and hue, so you have 2 dof to play with....   
;;;40     void scaleLED(uint32_t r, uint32_t g, uint32_t b, uint32_t n)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;41     {
000004  b085              SUB      sp,sp,#0x14
000006  461e              MOV      r6,r3
;;;42     	uint32_t max, min, current, sat, t; 
;;;43     
;;;44     #if 0  // it seems that green is a little attenuated on this sensor
;;;45     	t = (uint32_t)(G_GAIN*g);
;;;46     	if (t>255)
;;;47     		g = 255;
;;;48     	else
;;;49     		g = t;
;;;50     #endif
;;;51     
;;;52        	// find min
;;;53     	min = MIN(r, g);
000008  e9dd0105          LDRD     r0,r1,[sp,#0x14]
00000c  4288              CMP      r0,r1
00000e  d201              BCS      |L1.20|
000010  9805              LDR      r0,[sp,#0x14]
000012  e000              B        |L1.22|
                  |L1.20|
000014  9806              LDR      r0,[sp,#0x18]
                  |L1.22|
000016  4604              MOV      r4,r0
;;;54     	min = MIN(min, b);
000018  9807              LDR      r0,[sp,#0x1c]
00001a  4284              CMP      r4,r0
00001c  d201              BCS      |L1.34|
00001e  4620              MOV      r0,r4
000020  e000              B        |L1.36|
                  |L1.34|
000022  9807              LDR      r0,[sp,#0x1c]
                  |L1.36|
000024  4604              MOV      r4,r0
;;;55     
;;;56     	// find max
;;;57     	max = MAX(r, g);
000026  e9dd0105          LDRD     r0,r1,[sp,#0x14]
00002a  4288              CMP      r0,r1
00002c  d901              BLS      |L1.50|
00002e  9805              LDR      r0,[sp,#0x14]
000030  e000              B        |L1.52|
                  |L1.50|
000032  9806              LDR      r0,[sp,#0x18]
                  |L1.52|
000034  4607              MOV      r7,r0
;;;58     	max = MAX(max, b);
000036  9807              LDR      r0,[sp,#0x1c]
000038  4287              CMP      r7,r0
00003a  d901              BLS      |L1.64|
00003c  4638              MOV      r0,r7
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9807              LDR      r0,[sp,#0x1c]
                  |L1.66|
000042  4607              MOV      r7,r0
;;;59     
;;;60     	// subtract min and form sataration from the distance from origin
;;;61     	sat = sqrt((float)((r-min)*(r-min) + (g-min)*(g-min) + (b-min)*(b-min)));
000044  9905              LDR      r1,[sp,#0x14]
000046  1b09              SUBS     r1,r1,r4
000048  4349              MULS     r1,r1,r1
00004a  9a06              LDR      r2,[sp,#0x18]
00004c  1b12              SUBS     r2,r2,r4
00004e  9b06              LDR      r3,[sp,#0x18]
000050  1b1b              SUBS     r3,r3,r4
000052  fb021103          MLA      r1,r2,r3,r1
000056  9a07              LDR      r2,[sp,#0x1c]
000058  1b12              SUBS     r2,r2,r4
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  1b1b              SUBS     r3,r3,r4
00005e  fb021003          MLA      r0,r2,r3,r1
000062  f7fffffe          BL       __aeabi_ui2f
000066  4681              MOV      r9,r0
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       sqrtf
00006e  4680              MOV      r8,r0
000070  f7fffffe          BL       __aeabi_f2uiz
000074  4605              MOV      r5,r0
;;;62     	if (sat>30) // limit saturation to preven things from getting too bright
000076  2d1e              CMP      r5,#0x1e
000078  d900              BLS      |L1.124|
;;;63     		sat = 30;
00007a  251e              MOVS     r5,#0x1e
                  |L1.124|
;;;64     	if (sat<10) // anything less than 15 is pretty uninteresting, no sense in displaying....
00007c  2d0a              CMP      r5,#0xa
00007e  d202              BCS      |L1.134|
;;;65     		current = 0;
000080  2000              MOVS     r0,#0
000082  9001              STR      r0,[sp,#4]
000084  e012              B        |L1.172|
                  |L1.134|
;;;66     	else
;;;67     	{
;;;68     		//sat2 = exp(sat/13.0f);
;;;69     		//current = (uint32_t)(SAT_GAIN*sat2) + (uint32_t)(AREA_GAIN*n) + (uint32_t)(SA_GAIN*n*sat2);
;;;70     		current = (uint32_t)(SA_GAIN*n*sat);
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       __aeabi_ui2f
00008c  4682              MOV      r10,r0
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       __aeabi_ui2f
000094  4683              MOV      r11,r0
000096  49fb              LDR      r1,|L1.1156|
000098  f7fffffe          BL       __aeabi_fmul
00009c  4681              MOV      r9,r0
00009e  4651              MOV      r1,r10
0000a0  f7fffffe          BL       __aeabi_fmul
0000a4  4680              MOV      r8,r0
0000a6  f7fffffe          BL       __aeabi_f2uiz
0000aa  9001              STR      r0,[sp,#4]
                  |L1.172|
;;;71     	}
;;;72     	if (current>LED_MAX_CURRENT/5)
0000ac  9801              LDR      r0,[sp,#4]
0000ae  f5b06f7a          CMP      r0,#0xfa0
0000b2  d902              BLS      |L1.186|
;;;73     		current = LED_MAX_CURRENT/5;
0000b4  f44f607a          MOV      r0,#0xfa0
0000b8  9001              STR      r0,[sp,#4]
                  |L1.186|
;;;74     	led_setMaxCurrent(current);
0000ba  a801              ADD      r0,sp,#4
0000bc  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;75     
;;;76     #if 0
;;;77     	// find reasonable bias to subtract out
;;;78     	bias = min*75/100;
;;;79     	r -= bias;
;;;80     	g -= bias;
;;;81     	b -= bias;
;;;82     	
;;;83     	// saturate
;;;84     	m = 255.0f/(max-bias);
;;;85     	r = (uint8_t)(m*r);
;;;86     	g = (uint8_t)(m*g);
;;;87     	b = (uint8_t)(m*b);
;;;88     #endif
;;;89     #if 1
;;;90     	// saturate
;;;91     	rgbUnpack(saturate(rgbPack(r, g, b)), &r, &g, &b);
0000c0  a805              ADD      r0,sp,#0x14
0000c2  c807              LDM      r0,{r0-r2}
0000c4  f7fffffe          BL       _Z7rgbPackjjj ; rgbPack(unsigned, unsigned, unsigned)
0000c8  4681              MOV      r9,r0
0000ca  f7fffffe          BL       _Z8saturatej ; saturate(unsigned)
0000ce  4680              MOV      r8,r0
0000d0  ab07              ADD      r3,sp,#0x1c
0000d2  aa06              ADD      r2,sp,#0x18
0000d4  a905              ADD      r1,sp,#0x14
0000d6  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;92     #endif
;;;93     	//cprintf("r %d g %d b %d min %d max %d sat %d sat2 %d n %d\n", r, g, b, min, max, sat, sat2, n);
;;;94     	led_setRGB(r, g, b);	 	
0000da  9805              LDR      r0,[sp,#0x14]
0000dc  b2c0              UXTB     r0,r0
0000de  9004              STR      r0,[sp,#0x10]
0000e0  9806              LDR      r0,[sp,#0x18]
0000e2  b2c0              UXTB     r0,r0
0000e4  9003              STR      r0,[sp,#0xc]
0000e6  9807              LDR      r0,[sp,#0x1c]
0000e8  b2c0              UXTB     r0,r0
0000ea  aa02              ADD      r2,sp,#8
0000ec  a903              ADD      r1,sp,#0xc
0000ee  9002              STR      r0,[sp,#8]
0000f0  a804              ADD      r0,sp,#0x10
0000f2  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;95     }
0000f6  b009              ADD      sp,sp,#0x24
0000f8  e8bd8ff0          POP      {r4-r11,pc}
;;;96     	
                          ENDP

                  _ZN13ButtonMachine5resetEv PROC ; ButtonMachine::reset()
;;;315    
;;;316    void ButtonMachine::reset()
0000fc  b538              PUSH     {r3-r5,lr}
;;;317    {
0000fe  4604              MOV      r4,r0
;;;318    	m_ledPipe = false;
000100  2000              MOVS     r0,#0
000102  7220              STRB     r0,[r4,#8]
;;;319    	led_set(0);
000104  9000              STR      r0,[sp,#0]
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;320    	m_goto = 0;
00010c  2000              MOVS     r0,#0
00010e  7020              STRB     r0,[r4,#0]
;;;321    }
000110  bd38              POP      {r3-r5,pc}
;;;322    
                          ENDP

                  _ZN13ButtonMachineC2Ev                  ; Alternate entry point ; ButtonMachine::ButtonMachine__sub_object()
                  _ZN13ButtonMachineC1Ev PROC ; ButtonMachine::ButtonMachine()
;;;97     
;;;98     ButtonMachine::ButtonMachine()
;;;99     {
;;;100    	reset();
;;;101    }
;;;102    
000112  b510              PUSH     {r4,lr}
000114  4604              MOV      r4,r0
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
00011c  4620              MOV      r0,r4
00011e  bd10              POP      {r4,pc}
                          ENDP

                  _ZN13ButtonMachineD2Ev                  ; Alternate entry point ; ButtonMachine::~ButtonMachine__sub_object()
                  _ZN13ButtonMachineD1Ev PROC ; ButtonMachine::~ButtonMachine()
;;;103    ButtonMachine::~ButtonMachine()
;;;104    {
;;;105    }
;;;106    
000120  4770              BX       lr
                          ENDP

                  _ZN13ButtonMachine4waitEj PROC ; ButtonMachine::wait(unsigned)
;;;305    
;;;306    void ButtonMachine::wait(uint32_t us)
000122  b538              PUSH     {r3-r5,lr}
;;;307    {
000124  4605              MOV      r5,r0
000126  460c              MOV      r4,r1
;;;308    	uint32_t timer;
;;;309    
;;;310    	setTimer(&timer);
000128  4668              MOV      r0,sp
00012a  f7fffffe          BL       setTimer
;;;311    
;;;312    	while(getTimer(timer)<us);
00012e  bf00              NOP      
                  |L1.304|
000130  9800              LDR      r0,[sp,#0]
000132  f7fffffe          BL       getTimer
000136  42a0              CMP      r0,r4
000138  d3fa              BCC      |L1.304|
;;;313    		periodic();
00013a  f7fffffe          BL       _Z8periodicv ; periodic()
;;;314    }
00013e  bd38              POP      {r3-r5,pc}
;;;315    
                          ENDP

                  _ZN13ButtonMachine8flashLEDEh PROC ; ButtonMachine::flashLED(unsigned char)
;;;322    
;;;323    void ButtonMachine::flashLED(uint8_t flashes)
000140  b5f8              PUSH     {r3-r7,lr}
;;;324    {
000142  4604              MOV      r4,r0
000144  460d              MOV      r5,r1
;;;325    	 int i;
;;;326    
;;;327    	 for (i=0; i<flashes; i++)
000146  2600              MOVS     r6,#0
000148  e015              B        |L1.374|
                  |L1.330|
;;;328    	 {
;;;329    		led_set(0);
00014a  2000              MOVS     r0,#0
00014c  9000              STR      r0,[sp,#0]
00014e  4668              MOV      r0,sp
000150  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;330    		wait(BT_FLASH_TIMEOUT); // flash for just a little bit
000154  f64e2160          MOV      r1,#0xea60
000158  4620              MOV      r0,r4
00015a  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
;;;331    		led_set(g_colors[m_index]);
00015e  7861              LDRB     r1,[r4,#1]
000160  4ac9              LDR      r2,|L1.1160|
000162  eb020081          ADD      r0,r2,r1,LSL #2
000166  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;332    		wait(BT_FLASH_TIMEOUT); // flash for just a little bit
00016a  f64e2160          MOV      r1,#0xea60
00016e  4620              MOV      r0,r4
000170  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
000174  1c76              ADDS     r6,r6,#1              ;327
                  |L1.374|
000176  42ae              CMP      r6,r5                 ;327
000178  dbe7              BLT      |L1.330|
;;;333    	 }
;;;334    	 	
;;;335    }
00017a  bdf8              POP      {r3-r7,pc}
;;;336    
                          ENDP

                  _ZN13ButtonMachine12setSignatureEv PROC ; ButtonMachine::setSignature()
;;;121    
;;;122    void ButtonMachine::setSignature()
00017c  b57f              PUSH     {r0-r6,lr}
;;;123    {
00017e  4604              MOV      r4,r0
;;;124    	int res;
;;;125    
;;;126    	// grow region, create model, save
;;;127    	res = cc_setSigPoint(0, m_index, CAM_RES2_WIDTH/2, CAM_RES2_HEIGHT/2);
000180  2000              MOVS     r0,#0
000182  9003              STR      r0,[sp,#0xc]
000184  20a0              MOVS     r0,#0xa0
000186  9002              STR      r0,[sp,#8]
000188  2064              MOVS     r0,#0x64
00018a  9001              STR      r0,[sp,#4]
00018c  2000              MOVS     r0,#0
00018e  ab01              ADD      r3,sp,#4
000190  aa02              ADD      r2,sp,#8
000192  1c61              ADDS     r1,r4,#1
000194  9000              STR      r0,[sp,#0]
000196  a803              ADD      r0,sp,#0xc
000198  f7fffffe          BL       _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
00019c  4605              MOV      r5,r0
;;;128    	if (res<0)
00019e  2d00              CMP      r5,#0
0001a0  da00              BGE      |L1.420|
                  |L1.418|
;;;129    		return;
;;;130    	exec_sendEvent(g_chirpUsb, EVT_PARAM_CHANGE);
;;;131    	flashLED(4); 
;;;132    }
0001a2  bd7f              POP      {r0-r6,pc}
                  |L1.420|
0001a4  2101              MOVS     r1,#1                 ;130
0001a6  48b9              LDR      r0,|L1.1164|
0001a8  6800              LDR      r0,[r0,#0]            ;130  ; g_chirpUsb
0001aa  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0001ae  2104              MOVS     r1,#4                 ;131
0001b0  4620              MOV      r0,r4                 ;131
0001b2  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
0001b6  bf00              NOP      
0001b8  e7f3              B        |L1.418|
;;;133    
                          ENDP

                  _ZN13ButtonMachine6setLEDEv PROC ; ButtonMachine::setLED()
;;;337    
;;;338    void ButtonMachine::setLED()
0001ba  b538              PUSH     {r3-r5,lr}
;;;339    {
0001bc  4604              MOV      r4,r0
;;;340    	if (m_index>7)
0001be  7860              LDRB     r0,[r4,#1]
0001c0  2807              CMP      r0,#7
0001c2  dd00              BLE      |L1.454|
                  |L1.452|
;;;341    		return;
;;;342    
;;;343    	led_set(0);
;;;344    	wait(BT_FLASH_TIMEOUT); // flash for just a little bit
;;;345    	led_set(g_colors[m_index]);
;;;346    }
0001c4  bd38              POP      {r3-r5,pc}
                  |L1.454|
0001c6  2000              MOVS     r0,#0                 ;343
0001c8  9000              STR      r0,[sp,#0]            ;343
0001ca  4668              MOV      r0,sp                 ;343
0001cc  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
0001d0  f64e2160          MOV      r1,#0xea60            ;344
0001d4  4620              MOV      r0,r4                 ;344
0001d6  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
0001da  7861              LDRB     r1,[r4,#1]            ;345
0001dc  4aaa              LDR      r2,|L1.1160|
0001de  eb020081          ADD      r0,r2,r1,LSL #2       ;345
0001e2  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
0001e6  bf00              NOP      
0001e8  e7ec              B        |L1.452|
;;;347    
                          ENDP

                  _ZN13ButtonMachine7ledPipeEv PROC ; ButtonMachine::ledPipe()
;;;106    
;;;107    void ButtonMachine::ledPipe()
0001ea  e92d41f0          PUSH     {r4-r8,lr}
;;;108    {
0001ee  b094              SUB      sp,sp,#0x50
0001f0  4607              MOV      r7,r0
;;;109    	Points points;
0001f2  ac10              ADD      r4,sp,#0x40
0001f4  2500              MOVS     r5,#0
0001f6  2000              MOVS     r0,#0
0001f8  6020              STR      r0,[r4,#0]
0001fa  f1050010          ADD      r0,r5,#0x10
0001fe  6060              STR      r0,[r4,#4]
000200  4aa3              LDR      r2,|L1.1168|
000202  f8d48004          LDR      r8,[r4,#4]
000206  4641              MOV      r1,r8
000208  2004              MOVS     r0,#4
00020a  f7fffffe          BL       __aeabi_vec_new_nocookie
00020e  60a0              STR      r0,[r4,#8]
000210  bf00              NOP      
;;;110    	RGBPixel rgb;
000212  a80f              ADD      r0,sp,#0x3c
000214  2100              MOVS     r1,#0
000216  7081              STRB     r1,[r0,#2]
000218  7041              STRB     r1,[r0,#1]
00021a  7001              STRB     r1,[r0,#0]
00021c  bf00              NOP      
;;;111    	uint32_t color, r, g, b, n;
;;;112    	g_blobs->m_clut.growRegion(g_rawFrame, Point16(CAM_RES2_WIDTH/2, CAM_RES2_HEIGHT/2), &points);	
00021e  a813              ADD      r0,sp,#0x4c
000220  21a0              MOVS     r1,#0xa0
000222  2264              MOVS     r2,#0x64
000224  8001              STRH     r1,[r0,#0]
000226  8042              STRH     r2,[r0,#2]
000228  bf00              NOP      
00022a  4604              MOV      r4,r0
00022c  ab10              ADD      r3,sp,#0x40
00022e  4622              MOV      r2,r4
000230  4998              LDR      r1,|L1.1172|
000232  4899              LDR      r0,|L1.1176|
000234  6800              LDR      r0,[r0,#0]  ; g_blobs
000236  f7fffffe          BL       _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
;;;113    	cc_sendPoints(points, CL_GROW_INC, CL_GROW_INC, g_chirpUsb);
00023a  2003              MOVS     r0,#3
00023c  9000              STR      r0,[sp,#0]
00023e  4893              LDR      r0,|L1.1164|
000240  2204              MOVS     r2,#4
000242  4611              MOV      r1,r2
000244  6803              LDR      r3,[r0,#0]  ; g_chirpUsb
000246  a810              ADD      r0,sp,#0x40
000248  f7fffffe          BL       _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
;;;114    
;;;115    	IterPixel ip(g_rawFrame, &points);
00024c  aa10              ADD      r2,sp,#0x40
00024e  4991              LDR      r1,|L1.1172|
000250  a802              ADD      r0,sp,#8
000252  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
;;;116    	color = ip.averageRgb(&n);
000256  a90b              ADD      r1,sp,#0x2c
000258  a802              ADD      r0,sp,#8
00025a  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
00025e  4606              MOV      r6,r0
;;;117    
;;;118    	rgbUnpack(color, &r, &g, &b);
000260  ab0c              ADD      r3,sp,#0x30
000262  aa0d              ADD      r2,sp,#0x34
000264  a90e              ADD      r1,sp,#0x38
000266  4630              MOV      r0,r6
000268  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;119    	scaleLED(r, g, b, n);
00026c  e9dd320b          LDRD     r3,r2,[sp,#0x2c]
000270  e9dd100d          LDRD     r1,r0,[sp,#0x34]
000274  f7fffffe          BL       _Z8scaleLEDjjjj ; scaleLED(unsigned, unsigned, unsigned, unsigned)
;;;120    }
000278  ac10              ADD      r4,sp,#0x40
00027a  68a0              LDR      r0,[r4,#8]
00027c  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000280  bf00              NOP      
000282  b014              ADD      sp,sp,#0x50
000284  e8bd81f0          POP      {r4-r8,pc}
;;;121    
                          ENDP

                  _ZN13ButtonMachine15handleSignatureEv PROC ; ButtonMachine::handleSignature()
;;;133    
;;;134    bool ButtonMachine::handleSignature()
000288  b530              PUSH     {r4,r5,lr}
;;;135    {
00028a  b089              SUB      sp,sp,#0x24
00028c  4604              MOV      r4,r0
;;;136    	uint32_t bt;
;;;137    
;;;138    	bt = button();
00028e  f7fffffe          BL       button
000292  4605              MOV      r5,r0
;;;139    
;;;140       	if (m_ledPipe) // if ledpipe, grab frame, but don't flush 
000294  7a20              LDRB     r0,[r4,#8]
000296  b1d0              CBZ      r0,|L1.718|
;;;141    	{
;;;142    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb, 0);
000298  2021              MOVS     r0,#0x21
00029a  9008              STR      r0,[sp,#0x20]
00029c  2000              MOVS     r0,#0
00029e  9007              STR      r0,[sp,#0x1c]
0002a0  9006              STR      r0,[sp,#0x18]
0002a2  f44f70a0          MOV      r0,#0x140
0002a6  9005              STR      r0,[sp,#0x14]
0002a8  20c8              MOVS     r0,#0xc8
0002aa  9004              STR      r0,[sp,#0x10]
0002ac  2000              MOVS     r0,#0
0002ae  4977              LDR      r1,|L1.1164|
0002b0  6809              LDR      r1,[r1,#0]  ; g_chirpUsb
0002b2  aa04              ADD      r2,sp,#0x10
0002b4  ab05              ADD      r3,sp,#0x14
0002b6  e9cd2100          STRD     r2,r1,[sp,#0]
0002ba  9002              STR      r0,[sp,#8]
0002bc  aa06              ADD      r2,sp,#0x18
0002be  a907              ADD      r1,sp,#0x1c
0002c0  a808              ADD      r0,sp,#0x20
0002c2  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;143    		ledPipe();
0002c6  4620              MOV      r0,r4
0002c8  f7fffffe          BL       _ZN13ButtonMachine7ledPipeEv ; ButtonMachine::ledPipe()
;;;144    	}
0002cc  e019              B        |L1.770|
                  |L1.718|
;;;145    	else if (m_goto!=0) // else grab frame and flush
0002ce  7820              LDRB     r0,[r4,#0]
0002d0  b1b8              CBZ      r0,|L1.770|
;;;146    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
0002d2  2021              MOVS     r0,#0x21
0002d4  9008              STR      r0,[sp,#0x20]
0002d6  2000              MOVS     r0,#0
0002d8  9007              STR      r0,[sp,#0x1c]
0002da  9006              STR      r0,[sp,#0x18]
0002dc  f44f70a0          MOV      r0,#0x140
0002e0  9005              STR      r0,[sp,#0x14]
0002e2  20c8              MOVS     r0,#0xc8
0002e4  9004              STR      r0,[sp,#0x10]
0002e6  2001              MOVS     r0,#1
0002e8  4968              LDR      r1,|L1.1164|
0002ea  6809              LDR      r1,[r1,#0]  ; g_chirpUsb
0002ec  aa04              ADD      r2,sp,#0x10
0002ee  ab05              ADD      r3,sp,#0x14
0002f0  e9cd2100          STRD     r2,r1,[sp,#0]
0002f4  9002              STR      r0,[sp,#8]
0002f6  aa06              ADD      r2,sp,#0x18
0002f8  a907              ADD      r1,sp,#0x1c
0002fa  a808              ADD      r0,sp,#0x20
0002fc  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;147    
;;;148    	switch(m_goto)
000300  bf00              NOP      
                  |L1.770|
000302  7820              LDRB     r0,[r4,#0]
000304  2806              CMP      r0,#6
000306  d27a              BCS      |L1.1022|
000308  e8dff000          TBB      [pc,r0]
00030c  0316315b          DCB      0x03,0x16,0x31,0x5b
000310  6c95              DCB      0x6c,0x95
;;;149    	{
;;;150    	case 0:  // wait for button press
;;;151    		if (bt)
000312  b185              CBZ      r5,|L1.822|
;;;152    		{
;;;153    			setTimer(&m_timer);
000314  1d20              ADDS     r0,r4,#4
000316  f7fffffe          BL       setTimer
;;;154    			led_setMaxCurrent(g_ledBrightness); // restore default brightness
00031a  4860              LDR      r0,|L1.1180|
00031c  8800              LDRH     r0,[r0,#0]  ; g_ledBrightness
00031e  9008              STR      r0,[sp,#0x20]
000320  a808              ADD      r0,sp,#0x20
000322  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;155    			m_goto = 1;
000326  2001              MOVS     r0,#1
000328  7020              STRB     r0,[r4,#0]
;;;156    			led_set(0);
00032a  2000              MOVS     r0,#0
00032c  9008              STR      r0,[sp,#0x20]
00032e  a808              ADD      r0,sp,#0x20
000330  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;157    		}
000334  bf00              NOP      
                  |L1.822|
;;;158    		break;
000336  e087              B        |L1.1096|
;;;159    
;;;160    	case 1: // wait for button timeout
;;;161    		if (!bt)
000338  b915              CBNZ     r5,|L1.832|
;;;162    			m_goto = 0;
00033a  2000              MOVS     r0,#0
00033c  7020              STRB     r0,[r4,#0]
00033e  e015              B        |L1.876|
                  |L1.832|
;;;163    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
000340  6860              LDR      r0,[r4,#4]
000342  f7fffffe          BL       getTimer
000346  4956              LDR      r1,|L1.1184|
000348  4288              CMP      r0,r1
00034a  d90f              BLS      |L1.876|
;;;164    		{
;;;165    			if (cam_getAWB())
00034c  f7fffffe          BL       _Z10cam_getAWBv ; cam_getAWB()
000350  b110              CBZ      r0,|L1.856|
;;;166    				m_index = 1;
000352  2001              MOVS     r0,#1
000354  7060              STRB     r0,[r4,#1]
000356  e001              B        |L1.860|
                  |L1.856|
;;;167    			else
;;;168    				m_index = 0;
000358  2000              MOVS     r0,#0
00035a  7060              STRB     r0,[r4,#1]
                  |L1.860|
;;;169    			setTimer(&m_timer);
00035c  1d20              ADDS     r0,r4,#4
00035e  f7fffffe          BL       setTimer
;;;170    			setLED();
000362  4620              MOV      r0,r4
000364  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
;;;171    			m_goto = 2;
000368  2002              MOVS     r0,#2
00036a  7020              STRB     r0,[r4,#0]
                  |L1.876|
;;;172    		}
;;;173    		break;
00036c  e06c              B        |L1.1096|
;;;174    
;;;175    	case 2: // wait and increment index 
;;;176    		if (!bt)
00036e  b99d              CBNZ     r5,|L1.920|
;;;177    		{
;;;178    			flashLED(3);
000370  2103              MOVS     r1,#3
000372  4620              MOV      r0,r4
000374  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
;;;179    			setTimer(&m_timer);
000378  1d20              ADDS     r0,r4,#4
00037a  f7fffffe          BL       setTimer
;;;180    			if (m_index==0)
00037e  7860              LDRB     r0,[r4,#1]
000380  b928              CBNZ     r0,|L1.910|
;;;181    				cam_setAWB(1);
000382  2001              MOVS     r0,#1
000384  9008              STR      r0,[sp,#0x20]
000386  a808              ADD      r0,sp,#0x20
000388  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;182    			else
00038c  e001              B        |L1.914|
                  |L1.910|
;;;183    				m_ledPipe = true;
00038e  2001              MOVS     r0,#1
000390  7220              STRB     r0,[r4,#8]
                  |L1.914|
;;;184    			m_goto = 3;
000392  2003              MOVS     r0,#3
000394  7020              STRB     r0,[r4,#0]
000396  e013              B        |L1.960|
                  |L1.920|
;;;185    		}
;;;186    		else if (getTimer(m_timer)>BT_INDEX_CYCLE_TIMEOUT)
000398  6860              LDR      r0,[r4,#4]
00039a  f7fffffe          BL       getTimer
00039e  4941              LDR      r1,|L1.1188|
0003a0  4288              CMP      r0,r1
0003a2  d90d              BLS      |L1.960|
;;;187    		{
;;;188    			setTimer(&m_timer);
0003a4  1d20              ADDS     r0,r4,#4
0003a6  f7fffffe          BL       setTimer
;;;189    			m_index++;
0003aa  7860              LDRB     r0,[r4,#1]
0003ac  1c40              ADDS     r0,r0,#1
0003ae  7060              STRB     r0,[r4,#1]
;;;190    			if (m_index==CL_NUM_SIGNATURES+1)
0003b0  7860              LDRB     r0,[r4,#1]
0003b2  2808              CMP      r0,#8
0003b4  d101              BNE      |L1.954|
;;;191    				m_index = 0;
0003b6  2000              MOVS     r0,#0
0003b8  7060              STRB     r0,[r4,#1]
                  |L1.954|
;;;192    
;;;193    			setLED();
0003ba  4620              MOV      r0,r4
0003bc  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
                  |L1.960|
;;;194    		}							   
;;;195    		break;
0003c0  e042              B        |L1.1096|
;;;196    
;;;197    	case 3: // wait for button down
;;;198    		if (bt)
0003c2  b12d              CBZ      r5,|L1.976|
;;;199    		{
;;;200    			setTimer(&m_timer);
0003c4  1d20              ADDS     r0,r4,#4
0003c6  f7fffffe          BL       setTimer
;;;201    			m_goto = 4;
0003ca  2004              MOVS     r0,#4
0003cc  7020              STRB     r0,[r4,#0]
0003ce  e008              B        |L1.994|
                  |L1.976|
;;;202    		}
;;;203    		else if (getTimer(m_timer)>BT_LIGHTPIPE_TIMEOUT) // abort
0003d0  6860              LDR      r0,[r4,#4]
0003d2  f7fffffe          BL       getTimer
0003d6  4934              LDR      r1,|L1.1192|
0003d8  4288              CMP      r0,r1
0003da  d902              BLS      |L1.994|
;;;204    			reset();
0003dc  4620              MOV      r0,r4
0003de  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
                  |L1.994|
;;;205    		break;
0003e2  e031              B        |L1.1096|
;;;206    
;;;207    	case 4: // wait for button up
;;;208    		if (!bt)
0003e4  b99d              CBNZ     r5,|L1.1038|
;;;209    		{
;;;210    			if (m_index==0)
0003e6  7860              LDRB     r0,[r4,#1]
0003e8  b950              CBNZ     r0,|L1.1024|
;;;211    			{
;;;212    				cam_setAWB(0);
0003ea  2000              MOVS     r0,#0
0003ec  9008              STR      r0,[sp,#0x20]
0003ee  a808              ADD      r0,sp,#0x20
0003f0  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;213    				flashLED(4); 
0003f4  2104              MOVS     r1,#4
0003f6  4620              MOV      r0,r4
0003f8  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
;;;214    			}
0003fc  e003              B        |L1.1030|
                  |L1.1022|
0003fe  e01f              B        |L1.1088|
                  |L1.1024|
;;;215    			else
;;;216    				setSignature();
000400  4620              MOV      r0,r4
000402  f7fffffe          BL       _ZN13ButtonMachine12setSignatureEv ; ButtonMachine::setSignature()
                  |L1.1030|
;;;217    			reset(); // done	
000406  4620              MOV      r0,r4
000408  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
00040c  e012              B        |L1.1076|
                  |L1.1038|
;;;218    		}
;;;219    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
00040e  6860              LDR      r0,[r4,#4]
000410  f7fffffe          BL       getTimer
000414  4922              LDR      r1,|L1.1184|
000416  4288              CMP      r0,r1
000418  d90c              BLS      |L1.1076|
;;;220    		{
;;;221     			if (m_index==0)
00041a  7860              LDRB     r0,[r4,#1]
00041c  b928              CBNZ     r0,|L1.1066|
;;;222    				cam_setAWB(0);
00041e  2000              MOVS     r0,#0
000420  9008              STR      r0,[sp,#0x20]
000422  a808              ADD      r0,sp,#0x20
000424  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;223    
;;;224    			reset();
000428  bf00              NOP      
                  |L1.1066|
00042a  4620              MOV      r0,r4
00042c  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
;;;225    			m_goto = 5;
000430  2005              MOVS     r0,#5
000432  7020              STRB     r0,[r4,#0]
                  |L1.1076|
;;;226    		}
;;;227    	 	break;
000434  e008              B        |L1.1096|
;;;228    
;;;229    	case 5: // wait for button up only
;;;230    		if (!bt)
000436  b915              CBNZ     r5,|L1.1086|
;;;231    			reset();
000438  4620              MOV      r0,r4
00043a  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
                  |L1.1086|
;;;232    		break;
00043e  e003              B        |L1.1096|
                  |L1.1088|
;;;233    
;;;234    	default:
;;;235    		reset();
000440  4620              MOV      r0,r4
000442  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
000446  bf00              NOP                            ;148
                  |L1.1096|
000448  bf00              NOP                            ;158
;;;236    	}	
;;;237    
;;;238    	return m_goto!=0;
00044a  7820              LDRB     r0,[r4,#0]
00044c  b110              CBZ      r0,|L1.1108|
00044e  2001              MOVS     r0,#1
                  |L1.1104|
;;;239    }
000450  b009              ADD      sp,sp,#0x24
000452  bd30              POP      {r4,r5,pc}
                  |L1.1108|
000454  2000              MOVS     r0,#0                 ;238
000456  e7fb              B        |L1.1104|
;;;240    
                          ENDP

                  _ZN13ButtonMachine13selectProgramEi PROC ; ButtonMachine::selectProgram(int)
;;;241    int ButtonMachine::selectProgram(int progs)
000458  e92d41f0          PUSH     {r4-r8,lr}
;;;242    {
00045c  4604              MOV      r4,r0
00045e  460d              MOV      r5,r1
;;;243    	int result;
;;;244    
;;;245    	uint32_t bt; 
;;;246    
;;;247    	if (progs<=1)
000460  2d01              CMP      r5,#1
000462  dc02              BGT      |L1.1130|
;;;248    		return 0;
000464  2000              MOVS     r0,#0
                  |L1.1126|
;;;249    
;;;250    	while(1)
;;;251    	{
;;;252    		bt = button();
;;;253    		periodic();
;;;254    
;;;255    		switch(m_goto)
;;;256    		{
;;;257    		case 0:  // wait for nothing
;;;258    			setTimer(&m_timer);
;;;259    			m_goto = 1;
;;;260    			setLED();
;;;261    			break;
;;;262    
;;;263    		case 1:	// wait for button down
;;;264    			if (bt)
;;;265    			{
;;;266    				setTimer(&m_timer);
;;;267    				m_index=1;
;;;268    				setLED();
;;;269    				m_goto = 2;
;;;270    			}
;;;271    			else if (getTimer(m_timer)>BT_PROG_TIMEOUT)
;;;272    			{
;;;273    				flashLED(4); 
;;;274    				reset();
;;;275    				return 0;
;;;276    			}
;;;277    			break;
;;;278    
;;;279    		case 2: // cycle through choices, wait for button up
;;;280    			if (!bt)
;;;281    			{
;;;282    				result = m_index; // save m_index
;;;283    				flashLED(4); 
;;;284    				reset(); // resets m_index
;;;285    				return result;
;;;286    			}
;;;287    			else if (getTimer(m_timer)>BT_INDEX_CYCLE_TIMEOUT)
;;;288    			{
;;;289    				setTimer(&m_timer);
;;;290    				m_index++;
;;;291    				if (m_index==progs+1)
;;;292    					m_index = 1;
;;;293    
;;;294    				setLED();
;;;295    			}							   
;;;296    			break;
;;;297    
;;;298    		default:
;;;299    			reset();
;;;300    		}
;;;301    	}
;;;302    }
000466  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1130|
00046a  e06a              B        |L1.1346|
                  |L1.1132|
00046c  f7fffffe          BL       button
000470  4606              MOV      r6,r0                 ;252
000472  f7fffffe          BL       _Z8periodicv ; periodic()
000476  7820              LDRB     r0,[r4,#0]            ;255
000478  b1c0              CBZ      r0,|L1.1196|
00047a  2801              CMP      r0,#1                 ;255
00047c  d01f              BEQ      |L1.1214|
00047e  2802              CMP      r0,#2                 ;255
000480  d15a              BNE      |L1.1336|
000482  e038              B        |L1.1270|
                  |L1.1156|
                          DCD      0x3c75c28f
                  |L1.1160|
                          DCD      g_colors
                  |L1.1164|
                          DCD      g_chirpUsb
                  |L1.1168|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()
                  |L1.1172|
                          DCD      g_rawFrame
                  |L1.1176|
                          DCD      g_blobs
                  |L1.1180|
                          DCD      g_ledBrightness
                  |L1.1184|
                          DCD      0x001312d0
                  |L1.1188|
                          DCD      0x000f4240
                  |L1.1192|
                          DCD      0x03938700
                  |L1.1196|
0004ac  1d20              ADDS     r0,r4,#4              ;258
0004ae  f7fffffe          BL       setTimer
0004b2  2001              MOVS     r0,#1                 ;259
0004b4  7020              STRB     r0,[r4,#0]            ;259
0004b6  4620              MOV      r0,r4                 ;260
0004b8  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
0004bc  e040              B        |L1.1344|
                  |L1.1214|
0004be  b156              CBZ      r6,|L1.1238|
0004c0  1d20              ADDS     r0,r4,#4              ;266
0004c2  f7fffffe          BL       setTimer
0004c6  2001              MOVS     r0,#1                 ;267
0004c8  7060              STRB     r0,[r4,#1]            ;267
0004ca  4620              MOV      r0,r4                 ;268
0004cc  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
0004d0  2002              MOVS     r0,#2                 ;269
0004d2  7020              STRB     r0,[r4,#0]            ;269
0004d4  e00e              B        |L1.1268|
                  |L1.1238|
0004d6  6860              LDR      r0,[r4,#4]            ;271
0004d8  f7fffffe          BL       getTimer
0004dc  4919              LDR      r1,|L1.1348|
0004de  4288              CMP      r0,r1                 ;271
0004e0  d908              BLS      |L1.1268|
0004e2  2104              MOVS     r1,#4                 ;273
0004e4  4620              MOV      r0,r4                 ;273
0004e6  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
0004ea  4620              MOV      r0,r4                 ;274
0004ec  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0004f0  2000              MOVS     r0,#0                 ;275
0004f2  e7b8              B        |L1.1126|
                  |L1.1268|
0004f4  e024              B        |L1.1344|
                  |L1.1270|
0004f6  b94e              CBNZ     r6,|L1.1292|
0004f8  7867              LDRB     r7,[r4,#1]            ;282
0004fa  2104              MOVS     r1,#4                 ;283
0004fc  4620              MOV      r0,r4                 ;283
0004fe  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
000502  4620              MOV      r0,r4                 ;284
000504  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
000508  4638              MOV      r0,r7                 ;285
00050a  e7ac              B        |L1.1126|
                  |L1.1292|
00050c  6860              LDR      r0,[r4,#4]            ;287
00050e  f7fffffe          BL       getTimer
000512  490d              LDR      r1,|L1.1352|
000514  4288              CMP      r0,r1                 ;287
000516  d90e              BLS      |L1.1334|
000518  1d20              ADDS     r0,r4,#4              ;289
00051a  f7fffffe          BL       setTimer
00051e  7860              LDRB     r0,[r4,#1]            ;290
000520  1c40              ADDS     r0,r0,#1              ;290
000522  7060              STRB     r0,[r4,#1]            ;290
000524  7861              LDRB     r1,[r4,#1]            ;291
000526  1c68              ADDS     r0,r5,#1              ;291
000528  4281              CMP      r1,r0                 ;291
00052a  d101              BNE      |L1.1328|
00052c  2001              MOVS     r0,#1                 ;292
00052e  7060              STRB     r0,[r4,#1]            ;292
                  |L1.1328|
000530  4620              MOV      r0,r4                 ;294
000532  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
                  |L1.1334|
000536  e003              B        |L1.1344|
                  |L1.1336|
000538  4620              MOV      r0,r4                 ;299
00053a  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
00053e  bf00              NOP                            ;255
                  |L1.1344|
000540  bf00              NOP                            ;261
                  |L1.1346|
000542  e793              B        |L1.1132|
;;;303    
                          ENDP

                  |L1.1348|
                          DCD      0x0016e360
                  |L1.1352|
                          DCD      0x000f4240

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;38     {
;;;39         Point16()
;;;40         {
;;;41             m_x = m_y = 0;
;;;42         }
;;;43     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.15||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "button.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_button_cpp_71fc33b1___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___10_button_cpp_71fc33b1___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_button_cpp_71fc33b1___Z7__REVSHi|
#line 144
|__asm___10_button_cpp_71fc33b1___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
