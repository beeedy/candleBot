; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\colorlut.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\colorlut.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\colorlut.crf ..\..\common\colorlut.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9IterPixel5resetEb PROC ; IterPixel::reset(bool)
;;;41     
;;;42     bool IterPixel::reset(bool cleari)
000000  b5fe              PUSH     {r1-r7,lr}
;;;43     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;44         if (cleari)
000006  b10d              CBZ      r5,|L1.12|
;;;45             m_i = 0;
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
                  |L1.12|
;;;46         if (m_points)
00000c  69e0              LDR      r0,[r4,#0x1c]
00000e  b1f8              CBZ      r0,|L1.80|
;;;47         {
;;;48             if (m_points->size()>m_i)
000010  69e0              LDR      r0,[r4,#0x1c]
000012  6801              LDR      r1,[r0,#0]
000014  6a20              LDR      r0,[r4,#0x20]
000016  4281              CMP      r1,r0
000018  dd1b              BLE      |L1.82|
;;;49             {
;;;50                 m_region = RectA((*m_points)[m_i].m_x, (*m_points)[m_i].m_y, CL_GROW_INC, CL_GROW_INC);
00001a  e9d40107          LDRD     r0,r1,[r4,#0x1c]
00001e  f7fffffe          BL       _ZNK12SimpleVectorI7Point16EixEi ; SimpleVector<Point16>::operator [](int) const
000022  8840              LDRH     r0,[r0,#2]
000024  b286              UXTH     r6,r0
000026  e9d40107          LDRD     r0,r1,[r4,#0x1c]
00002a  f7fffffe          BL       _ZNK12SimpleVectorI7Point16EixEi ; SimpleVector<Point16>::operator [](int) const
00002e  8800              LDRH     r0,[r0,#0]
000030  b287              UXTH     r7,r0
000032  2004              MOVS     r0,#4
000034  4603              MOV      r3,r0
000036  4632              MOV      r2,r6
000038  4639              MOV      r1,r7
00003a  9000              STR      r0,[sp,#0]
00003c  a801              ADD      r0,sp,#4
00003e  f7fffffe          BL       _ZN5RectAC1Etttt ; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
000042  6801              LDR      r1,[r0,#0]
000044  60a1              STR      r1,[r4,#8]
000046  6840              LDR      r0,[r0,#4]
000048  60e0              STR      r0,[r4,#0xc]
;;;51                 m_i++;
00004a  6a20              LDR      r0,[r4,#0x20]
00004c  1c40              ADDS     r0,r0,#1
00004e  6220              STR      r0,[r4,#0x20]
                  |L1.80|
;;;52             }
000050  e001              B        |L1.86|
                  |L1.82|
;;;53             else
;;;54                 return false; // empty!
000052  2000              MOVS     r0,#0
                  |L1.84|
;;;55         }
;;;56         m_x = m_y = 0;
;;;57         m_pixels = m_frame.m_pixels + (m_region.m_yOffset | 1)*m_frame.m_width + (m_region.m_xOffset | 1);
;;;58         return true;
;;;59     }
000054  bdfe              POP      {r1-r7,pc}
                  |L1.86|
000056  2000              MOVS     r0,#0                 ;56
000058  6160              STR      r0,[r4,#0x14]         ;56
00005a  6120              STR      r0,[r4,#0x10]         ;56
00005c  8960              LDRH     r0,[r4,#0xa]          ;57
00005e  f0400001          ORR      r0,r0,#1              ;57
000062  f9b42004          LDRSH    r2,[r4,#4]            ;57
000066  6821              LDR      r1,[r4,#0]            ;57
000068  fb001002          MLA      r0,r0,r2,r1           ;57
00006c  8921              LDRH     r1,[r4,#8]            ;57
00006e  f0410101          ORR      r1,r1,#1              ;57
000072  4408              ADD      r0,r0,r1              ;57
000074  61a0              STR      r0,[r4,#0x18]         ;57
000076  2001              MOVS     r0,#1                 ;58
000078  e7ec              B        |L1.84|
;;;60     
                          ENDP

                  _ZN9IterPixelC2ERK6Frame8RK5RectA                  ; Alternate entry point ; IterPixel::IterPixel__sub_object(const Frame8&, const RectA&)
                  _ZN9IterPixelC1ERK6Frame8RK5RectA PROC ; IterPixel::IterPixel(const Frame8&, const RectA&)
;;;26     
;;;27     IterPixel::IterPixel(const Frame8 &frame, const RectA &region)
;;;28     {
;;;29         m_frame = frame;
;;;30         m_region = region;
;;;31         m_points = NULL;
;;;32         reset();
;;;33     }
;;;34     
00007a  b570              PUSH     {r4-r6,lr}
00007c  4604              MOV      r4,r0
00007e  460d              MOV      r5,r1
000080  4616              MOV      r6,r2
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       _ZN6Frame8C1Ev ; Frame8::Frame8()
000088  4604              MOV      r4,r0
00008a  f1040008          ADD      r0,r4,#8
00008e  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000092  f1a00408          SUB      r4,r0,#8
000096  e9d50100          LDRD     r0,r1,[r5,#0]
00009a  e9c40100          STRD     r0,r1,[r4,#0]
00009e  6830              LDR      r0,[r6,#0]
0000a0  60a0              STR      r0,[r4,#8]
0000a2  6870              LDR      r0,[r6,#4]
0000a4  60e0              STR      r0,[r4,#0xc]
0000a6  2000              MOVS     r0,#0
0000a8  61e0              STR      r0,[r4,#0x1c]
0000aa  2101              MOVS     r1,#1
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
0000b2  4620              MOV      r0,r4
0000b4  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN9IterPixelC2ERK6Frame8PK12SimpleVectorI7Point16E                  ; Alternate entry point ; IterPixel::IterPixel__sub_object(const Frame8&, const SimpleVector<Point16>*)
                  _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E PROC ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
;;;35     IterPixel::IterPixel(const Frame8 &frame, const Points *points)
;;;36     {
;;;37         m_frame = frame;
;;;38         m_points = points;
;;;39         reset();
;;;40     }
;;;41     
0000b6  b570              PUSH     {r4-r6,lr}
0000b8  4604              MOV      r4,r0
0000ba  460d              MOV      r5,r1
0000bc  4616              MOV      r6,r2
0000be  4620              MOV      r0,r4
0000c0  f7fffffe          BL       _ZN6Frame8C1Ev ; Frame8::Frame8()
0000c4  4604              MOV      r4,r0
0000c6  f1040008          ADD      r0,r4,#8
0000ca  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
0000ce  f1a00408          SUB      r4,r0,#8
0000d2  e9d50100          LDRD     r0,r1,[r5,#0]
0000d6  e9c40100          STRD     r0,r1,[r4,#0]
0000da  61e6              STR      r6,[r4,#0x1c]
0000dc  2101              MOVS     r1,#1
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
0000e4  4620              MOV      r0,r4
0000e6  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel PROC ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
;;;79     
;;;80     bool IterPixel::nextHelper(UVPixel *uv, RGBPixel *rgb)
0000e8  e92d4ff0          PUSH     {r4-r11,lr}
;;;81     {
0000ec  4603              MOV      r3,r0
0000ee  460d              MOV      r5,r1
;;;82         int32_t r, g1, g2, b, u, v, c, miny=CL_MIN_Y;
0000f0  f04f0a26          MOV      r10,#0x26
;;;83     
;;;84         while(1)
0000f4  e066              B        |L1.452|
                  |L1.246|
;;;85         {
;;;86             if (m_x>=m_region.m_width)
0000f6  8998              LDRH     r0,[r3,#0xc]
0000f8  f8d3b010          LDR      r11,[r3,#0x10]
0000fc  4583              CMP      r11,r0
0000fe  d30b              BCC      |L1.280|
;;;87             {
;;;88                 m_x = 0;
000100  2000              MOVS     r0,#0
000102  6118              STR      r0,[r3,#0x10]
;;;89                 m_y += 2;
000104  6958              LDR      r0,[r3,#0x14]
000106  1c80              ADDS     r0,r0,#2
000108  6158              STR      r0,[r3,#0x14]
;;;90                 m_pixels += m_frame.m_width*2;
00010a  f9b30004          LDRSH    r0,[r3,#4]
00010e  f8d3b018          LDR      r11,[r3,#0x18]
000112  eb0b0040          ADD      r0,r11,r0,LSL #1
000116  6198              STR      r0,[r3,#0x18]
                  |L1.280|
;;;91             }
;;;92             if (m_y>=m_region.m_height)
000118  89d8              LDRH     r0,[r3,#0xe]
00011a  f8d3b014          LDR      r11,[r3,#0x14]
00011e  4583              CMP      r11,r0
000120  d302              BCC      |L1.296|
;;;93                 return false;
000122  2000              MOVS     r0,#0
                  |L1.292|
;;;94     
;;;95             r = m_pixels[m_x];
;;;96             g1 = m_pixels[m_x - 1];
;;;97             g2 = m_pixels[-m_frame.m_width + m_x];
;;;98             b = m_pixels[-m_frame.m_width + m_x - 1];
;;;99     		if (rgb)
;;;100    		{
;;;101    		  	rgb->m_r = r;
;;;102    			rgb->m_g = (g1+g2)/2;
;;;103    			rgb->m_b = b;
;;;104    		}
;;;105    		if (uv)
;;;106    		{
;;;107            	c = r+g1+b;
;;;108                if (c<miny)
;;;109    			{
;;;110    				m_x += 2;
;;;111                	continue;
;;;112    			}
;;;113            	u = ((r-g1)<<CL_LUT_ENTRY_SCALE)/c;
;;;114            	c = r+g2+b;
;;;115                if (c<miny)
;;;116    			{
;;;117    				m_x += 2;
;;;118                	continue;
;;;119    			}
;;;120            	v = ((b-g2)<<CL_LUT_ENTRY_SCALE)/c;
;;;121    
;;;122            	uv->m_u = u;
;;;123            	uv->m_v = v;
;;;124    		}
;;;125    
;;;126    		m_x += 2;
;;;127            return true;
;;;128        }
;;;129    }
000124  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.296|
000128  f8d3b010          LDR      r11,[r3,#0x10]        ;95
00012c  6998              LDR      r0,[r3,#0x18]         ;95
00012e  f810100b          LDRB     r1,[r0,r11]           ;95
000132  6918              LDR      r0,[r3,#0x10]         ;96
000134  1e40              SUBS     r0,r0,#1              ;96
000136  f8d3b018          LDR      r11,[r3,#0x18]        ;96
00013a  f81b6000          LDRB     r6,[r11,r0]           ;96
00013e  f9b30004          LDRSH    r0,[r3,#4]            ;97
000142  4240              RSBS     r0,r0,#0              ;97
000144  f8d3b010          LDR      r11,[r3,#0x10]        ;97
000148  4458              ADD      r0,r0,r11             ;97
00014a  f8d3b018          LDR      r11,[r3,#0x18]        ;97
00014e  f81b7000          LDRB     r7,[r11,r0]           ;97
000152  f9b30004          LDRSH    r0,[r3,#4]            ;98
000156  4240              RSBS     r0,r0,#0              ;98
000158  f8d3b010          LDR      r11,[r3,#0x10]        ;98
00015c  4458              ADD      r0,r0,r11             ;98
00015e  1e40              SUBS     r0,r0,#1              ;98
000160  f8d3b018          LDR      r11,[r3,#0x18]        ;98
000164  f81b4000          LDRB     r4,[r11,r0]           ;98
000168  b142              CBZ      r2,|L1.380|
00016a  7011              STRB     r1,[r2,#0]            ;101
00016c  19f0              ADDS     r0,r6,r7              ;102
00016e  eb007bd0          ADD      r11,r0,r0,LSR #31     ;102
000172  f3cb0b47          UBFX     r11,r11,#1,#8         ;102
000176  f882b001          STRB     r11,[r2,#1]           ;102
00017a  7094              STRB     r4,[r2,#2]            ;103
                  |L1.380|
00017c  b1ed              CBZ      r5,|L1.442|
00017e  1988              ADDS     r0,r1,r6              ;107
000180  eb000c04          ADD      r12,r0,r4             ;107
000184  45d4              CMP      r12,r10               ;108
000186  da03              BGE      |L1.400|
000188  6918              LDR      r0,[r3,#0x10]         ;110
00018a  1c80              ADDS     r0,r0,#2              ;110
00018c  6118              STR      r0,[r3,#0x10]         ;110
00018e  e019              B        |L1.452|
                  |L1.400|
000190  1b88              SUBS     r0,r1,r6              ;113
000192  03c0              LSLS     r0,r0,#15             ;113
000194  fb90f8fc          SDIV     r8,r0,r12             ;113
000198  19c8              ADDS     r0,r1,r7              ;114
00019a  eb000c04          ADD      r12,r0,r4             ;114
00019e  45d4              CMP      r12,r10               ;115
0001a0  da03              BGE      |L1.426|
0001a2  6918              LDR      r0,[r3,#0x10]         ;117
0001a4  1c80              ADDS     r0,r0,#2              ;117
0001a6  6118              STR      r0,[r3,#0x10]         ;117
0001a8  e00c              B        |L1.452|
                  |L1.426|
0001aa  1be0              SUBS     r0,r4,r7              ;120
0001ac  03c0              LSLS     r0,r0,#15             ;120
0001ae  fb90f9fc          SDIV     r9,r0,r12             ;120
0001b2  f8c58000          STR      r8,[r5,#0]            ;122
0001b6  f8c59004          STR      r9,[r5,#4]            ;123
                  |L1.442|
0001ba  6918              LDR      r0,[r3,#0x10]         ;126
0001bc  1c80              ADDS     r0,r0,#2              ;126
0001be  6118              STR      r0,[r3,#0x10]         ;126
0001c0  2001              MOVS     r0,#1                 ;127
0001c2  e7af              B        |L1.292|
                  |L1.452|
0001c4  e797              B        |L1.246|
;;;130    
                          ENDP

                  _ZN9IterPixel4nextEP7UVPixelP8RGBPixel PROC ; IterPixel::next(UVPixel*, RGBPixel*)
;;;60     
;;;61     bool IterPixel::next(UVPixel *uv, RGBPixel *rgb)
0001c6  b570              PUSH     {r4-r6,lr}
;;;62     {
0001c8  4604              MOV      r4,r0
0001ca  460d              MOV      r5,r1
0001cc  4616              MOV      r6,r2
;;;63         if (m_points)
0001ce  69e0              LDR      r0,[r4,#0x1c]
0001d0  b1a0              CBZ      r0,|L1.508|
;;;64         {
;;;65             if (nextHelper(uv, rgb))
0001d2  4632              MOV      r2,r6
0001d4  4629              MOV      r1,r5
0001d6  4620              MOV      r0,r4
0001d8  f7fffffe          BL       _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
0001dc  b108              CBZ      r0,|L1.482|
;;;66                 return true; // working on the current block
0001de  2001              MOVS     r0,#1
                  |L1.480|
;;;67             else // get new block
;;;68             {
;;;69                 if (reset(false)) // reset indexes, increment m_i, get new block
;;;70                     return nextHelper(uv, rgb);  // we have another block!
;;;71                 else
;;;72                     return false; // blocks are empty
;;;73             }
;;;74         }
;;;75         else
;;;76             return nextHelper(uv, rgb);
;;;77     }
0001e0  bd70              POP      {r4-r6,pc}
                  |L1.482|
0001e2  2100              MOVS     r1,#0                 ;69
0001e4  4620              MOV      r0,r4                 ;69
0001e6  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
0001ea  b128              CBZ      r0,|L1.504|
0001ec  4632              MOV      r2,r6                 ;70
0001ee  4629              MOV      r1,r5                 ;70
0001f0  4620              MOV      r0,r4                 ;70
0001f2  f7fffffe          BL       _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
0001f6  e7f3              B        |L1.480|
                  |L1.504|
0001f8  2000              MOVS     r0,#0                 ;72
0001fa  e7f1              B        |L1.480|
                  |L1.508|
0001fc  4632              MOV      r2,r6                 ;76
0001fe  4629              MOV      r1,r5                 ;76
000200  4620              MOV      r0,r4                 ;76
000202  f7fffffe          BL       _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
000206  e7eb              B        |L1.480|
;;;78     
                          ENDP

                  _ZN9IterPixel10averageRgbEPj PROC ; IterPixel::averageRgb(unsigned*)
;;;130    
;;;131    uint32_t IterPixel::averageRgb(uint32_t *pixels)
000208  e92d43f8          PUSH     {r3-r9,lr}
;;;132    {
00020c  4681              MOV      r9,r0
00020e  460d              MOV      r5,r1
;;;133    	RGBPixel rgb;
000210  4668              MOV      r0,sp
000212  2100              MOVS     r1,#0
000214  7081              STRB     r1,[r0,#2]
000216  7041              STRB     r1,[r0,#1]
000218  7001              STRB     r1,[r0,#0]
00021a  bf00              NOP      
;;;134    	uint32_t r, g, b, n;
;;;135    	reset();
00021c  2101              MOVS     r1,#1
00021e  4648              MOV      r0,r9
000220  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
;;;136    	for (r=g=b=n=0; next(NULL, &rgb); n++)
000224  2000              MOVS     r0,#0
000226  4604              MOV      r4,r0
000228  4680              MOV      r8,r0
00022a  4607              MOV      r7,r0
00022c  4606              MOV      r6,r0
00022e  e009              B        |L1.580|
                  |L1.560|
;;;137    	{
;;;138    		r += rgb.m_r;
000230  f89d0000          LDRB     r0,[sp,#0]
000234  4406              ADD      r6,r6,r0
;;;139    		g += rgb.m_g;
000236  f89d0001          LDRB     r0,[sp,#1]
00023a  4407              ADD      r7,r7,r0
;;;140    		b += rgb.m_b;		
00023c  f89d0002          LDRB     r0,[sp,#2]
000240  4480              ADD      r8,r8,r0
000242  1c64              ADDS     r4,r4,#1              ;136
                  |L1.580|
000244  466a              MOV      r2,sp                 ;136
000246  2100              MOVS     r1,#0                 ;136
000248  4648              MOV      r0,r9                 ;136
00024a  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
00024e  2800              CMP      r0,#0                 ;136
000250  d1ee              BNE      |L1.560|
;;;141    	}
;;;142    
;;;143    	r /= n;
000252  fbb6f6f4          UDIV     r6,r6,r4
;;;144    	g /= n;
000256  fbb7f7f4          UDIV     r7,r7,r4
;;;145    	b /= n;
00025a  fbb8f8f4          UDIV     r8,r8,r4
;;;146    
;;;147    	if (pixels)
00025e  b105              CBZ      r5,|L1.610|
;;;148    		*pixels = n;
000260  602c              STR      r4,[r5,#0]
                  |L1.610|
;;;149    	return (r<<16) | (g<<8) | b;
000262  0430              LSLS     r0,r6,#16
000264  ea402007          ORR      r0,r0,r7,LSL #8
000268  ea400008          ORR      r0,r0,r8
;;;150    }
00026c  e8bd83f8          POP      {r3-r9,pc}
;;;151    
                          ENDP

                  _ZN8ColorLUT16setMinBrightnessEf PROC ; ColorLUT::setMinBrightness(float)
;;;552    
;;;553    void ColorLUT::setMinBrightness(float miny)
000270  b570              PUSH     {r4-r6,lr}
;;;554    {
000272  4604              MOV      r4,r0
000274  460d              MOV      r5,r1
;;;555        m_miny = 3*((1<<8)-1)*miny;
000276  4629              MOV      r1,r5
000278  48fa              LDR      r0,|L1.1636|
00027a  f7fffffe          BL       __aeabi_fmul
00027e  4606              MOV      r6,r0
000280  f7fffffe          BL       __aeabi_f2uiz
000284  f8c4016c          STR      r0,[r4,#0x16c]
;;;556        if (m_miny==0)
000288  f8d4016c          LDR      r0,[r4,#0x16c]
00028c  b910              CBNZ     r0,|L1.660|
;;;557            m_miny = 1;
00028e  2001              MOVS     r0,#1
000290  f8c4016c          STR      r0,[r4,#0x16c]
                  |L1.660|
;;;558    
;;;559    }
000294  bd70              POP      {r4-r6,pc}
;;;560    
                          ENDP

                  _ZN8ColorLUT8clearLUTEh PROC ; ColorLUT::clearLUT(unsigned char)
;;;365    
;;;366    void ColorLUT::clearLUT(uint8_t signum)
000296  b510              PUSH     {r4,lr}
;;;367    {
000298  4602              MOV      r2,r0
;;;368        int i;
;;;369    
;;;370        for (i=0; i<CL_LUT_SIZE; i++)
00029a  2000              MOVS     r0,#0
00029c  e00f              B        |L1.702|
                  |L1.670|
;;;371        {
;;;372            if (signum==0)
00029e  b921              CBNZ     r1,|L1.682|
;;;373                m_lut[i] = 0;
0002a0  2300              MOVS     r3,#0
0002a2  f8d24170          LDR      r4,[r2,#0x170]
0002a6  5423              STRB     r3,[r4,r0]
0002a8  e008              B        |L1.700|
                  |L1.682|
;;;374            else if (m_lut[i]==signum)
0002aa  f8d23170          LDR      r3,[r2,#0x170]
0002ae  5c1b              LDRB     r3,[r3,r0]
0002b0  428b              CMP      r3,r1
0002b2  d103              BNE      |L1.700|
;;;375                m_lut[i] = 0;
0002b4  2300              MOVS     r3,#0
0002b6  f8d24170          LDR      r4,[r2,#0x170]
0002ba  5423              STRB     r3,[r4,r0]
                  |L1.700|
0002bc  1c40              ADDS     r0,r0,#1              ;370
                  |L1.702|
0002be  f5b05f80          CMP      r0,#0x1000            ;370
0002c2  dbec              BLT      |L1.670|
;;;376        }
;;;377    }
0002c4  bd10              POP      {r4,pc}
;;;378    
                          ENDP

                  _ZN8ColorLUTC2EPh                  ; Alternate entry point ; ColorLUT::ColorLUT__sub_object(unsigned char*)
                  _ZN8ColorLUTC1EPh PROC ; ColorLUT::ColorLUT(unsigned char*)
;;;151    
;;;152    ColorLUT::ColorLUT(uint8_t *lut)
;;;153    {
;;;154    	int i; 
;;;155        m_lut = lut;
;;;156        memset((void *)m_signatures, 0, sizeof(ColorSignature)*CL_NUM_SIGNATURES);
;;;157        memset((void *)m_runtimeSigs, 0, sizeof(RuntimeSignature)*CL_NUM_SIGNATURES);
;;;158    	clearLUT();
;;;159    
;;;160        setMinBrightness(CL_DEFAULT_MINY);
;;;161        m_minRatio = CL_MIN_RATIO;
;;;162        m_maxDist = CL_MAX_DIST;
;;;163        m_ratio = CL_DEFAULT_TOL;
;;;164        m_ccGain = CL_DEFAULT_CCGAIN;
;;;165    	for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;166    		m_sigRanges[i] = CL_DEFAULT_SIG_RANGE;
;;;167    }
;;;168    
0002c6  b570              PUSH     {r4-r6,lr}
0002c8  4604              MOV      r4,r0
0002ca  460e              MOV      r6,r1
0002cc  2307              MOVS     r3,#7
0002ce  2220              MOVS     r2,#0x20
0002d0  49e5              LDR      r1,|L1.1640|
0002d2  4620              MOV      r0,r4
0002d4  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
0002d8  4604              MOV      r4,r0
0002da  f8c46170          STR      r6,[r4,#0x170]
0002de  21e0              MOVS     r1,#0xe0
0002e0  4620              MOV      r0,r4
0002e2  f7fffffe          BL       __aeabi_memclr4
0002e6  218c              MOVS     r1,#0x8c
0002e8  f10400e0          ADD      r0,r4,#0xe0
0002ec  f7fffffe          BL       __aeabi_memclr4
0002f0  2100              MOVS     r1,#0
0002f2  4620              MOV      r0,r4
0002f4  f7fffffe          BL       _ZN8ColorLUT8clearLUTEh ; ColorLUT::clearLUT(unsigned char)
0002f8  49dc              LDR      r1,|L1.1644|
0002fa  4620              MOV      r0,r4
0002fc  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
000300  f04f507a          MOV      r0,#0x3e800000
000304  f8c4017c          STR      r0,[r4,#0x17c]
000308  14c0              ASRS     r0,r0,#19
00030a  f8c40174          STR      r0,[r4,#0x174]
00030e  48d8              LDR      r0,|L1.1648|
000310  f8c40178          STR      r0,[r4,#0x178]
000314  f04f507f          MOV      r0,#0x3fc00000
000318  f8c40180          STR      r0,[r4,#0x180]
00031c  2500              MOVS     r5,#0
00031e  e005              B        |L1.812|
                  |L1.800|
000320  49d4              LDR      r1,|L1.1652|
000322  f50470c2          ADD      r0,r4,#0x184
000326  f8401025          STR      r1,[r0,r5,LSL #2]
00032a  1c6d              ADDS     r5,r5,#1
                  |L1.812|
00032c  2d07              CMP      r5,#7
00032e  dbf7              BLT      |L1.800|
000330  4620              MOV      r0,r4
000332  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN8ColorLUTD2Ev                  ; Alternate entry point ; ColorLUT::~ColorLUT__sub_object()
                  _ZN8ColorLUTD1Ev PROC ; ColorLUT::~ColorLUT()
;;;169    
;;;170    ColorLUT::~ColorLUT()
;;;171    {
;;;172    }
;;;173    
000334  4770              BX       lr
                          ENDP

                  _ZN8ColorLUT15updateSignatureEh PROC ; ColorLUT::updateSignature(unsigned char)
;;;275    
;;;276    void ColorLUT::updateSignature(uint8_t signum)
000336  e92d47f0          PUSH     {r4-r10,lr}
;;;277    {
00033a  4605              MOV      r5,r0
00033c  460c              MOV      r4,r1
;;;278        float range;
;;;279    
;;;280    	if (signum<1 || signum>CL_NUM_SIGNATURES)
00033e  2c01              CMP      r4,#1
000340  db01              BLT      |L1.838|
000342  2c07              CMP      r4,#7
000344  dd01              BLE      |L1.842|
                  |L1.838|
;;;281    		return;
;;;282    	signum--;
;;;283    
;;;284        if (m_signatures[signum].m_type==CL_MODEL_TYPE_COLORCODE)
;;;285            range = m_sigRanges[signum]*m_ccGain;
;;;286    	else
;;;287    		range = m_sigRanges[signum];
;;;288        m_runtimeSigs[signum].m_uMin = m_signatures[signum].m_uMean + (m_signatures[signum].m_uMin - m_signatures[signum].m_uMean)*range;
;;;289    	m_runtimeSigs[signum].m_uMax = m_signatures[signum].m_uMean + (m_signatures[signum].m_uMax - m_signatures[signum].m_uMean)*range;
;;;290    	m_runtimeSigs[signum].m_vMin = m_signatures[signum].m_vMean + (m_signatures[signum].m_vMin - m_signatures[signum].m_vMean)*range;
;;;291    	m_runtimeSigs[signum].m_vMax = m_signatures[signum].m_vMean + (m_signatures[signum].m_vMax - m_signatures[signum].m_vMean)*range;
;;;292    
;;;293        m_runtimeSigs[signum].m_rgbSat = saturate(m_signatures[signum].m_rgb);
;;;294    }
000346  e8bd87f0          POP      {r4-r10,pc}
                  |L1.842|
00034a  1e60              SUBS     r0,r4,#1              ;282
00034c  b2c4              UXTB     r4,r0                 ;282
00034e  eb051044          ADD      r0,r5,r4,LSL #5       ;284
000352  69c0              LDR      r0,[r0,#0x1c]         ;284
000354  2801              CMP      r0,#1                 ;284
000356  d109              BNE      |L1.876|
000358  f50572c2          ADD      r2,r5,#0x184          ;285
00035c  f8520024          LDR      r0,[r2,r4,LSL #2]     ;285
000360  f8d51180          LDR      r1,[r5,#0x180]        ;285
000364  f7fffffe          BL       __aeabi_fmul
000368  4606              MOV      r6,r0                 ;285
00036a  e003              B        |L1.884|
                  |L1.876|
00036c  f50570c2          ADD      r0,r5,#0x184          ;287
000370  f8506024          LDR      r6,[r0,r4,LSL #2]     ;287
                  |L1.884|
000374  eb051144          ADD      r1,r5,r4,LSL #5       ;288
000378  6809              LDR      r1,[r1,#0]            ;288
00037a  eb051244          ADD      r2,r5,r4,LSL #5       ;288
00037e  6892              LDR      r2,[r2,#8]            ;288
000380  1a88              SUBS     r0,r1,r2              ;288
000382  f7fffffe          BL       __aeabi_i2f
000386  4682              MOV      r10,r0                ;288
000388  4631              MOV      r1,r6                 ;288
00038a  f7fffffe          BL       __aeabi_fmul
00038e  4680              MOV      r8,r0                 ;288
000390  eb051144          ADD      r1,r5,r4,LSL #5       ;288
000394  6888              LDR      r0,[r1,#8]            ;288
000396  f7fffffe          BL       __aeabi_i2f
00039a  4681              MOV      r9,r0                 ;288
00039c  4641              MOV      r1,r8                 ;288
00039e  f7fffffe          BL       __aeabi_fadd
0003a2  4607              MOV      r7,r0                 ;288
0003a4  f7fffffe          BL       __aeabi_f2iz
0003a8  eb040284          ADD      r2,r4,r4,LSL #2       ;288
0003ac  f10501e0          ADD      r1,r5,#0xe0           ;288
0003b0  f8410022          STR      r0,[r1,r2,LSL #2]     ;288
0003b4  eb051144          ADD      r1,r5,r4,LSL #5       ;289
0003b8  6849              LDR      r1,[r1,#4]            ;289
0003ba  eb051244          ADD      r2,r5,r4,LSL #5       ;289
0003be  6892              LDR      r2,[r2,#8]            ;289
0003c0  1a88              SUBS     r0,r1,r2              ;289
0003c2  f7fffffe          BL       __aeabi_i2f
0003c6  4682              MOV      r10,r0                ;289
0003c8  4631              MOV      r1,r6                 ;289
0003ca  f7fffffe          BL       __aeabi_fmul
0003ce  4680              MOV      r8,r0                 ;289
0003d0  eb051144          ADD      r1,r5,r4,LSL #5       ;289
0003d4  6888              LDR      r0,[r1,#8]            ;289
0003d6  f7fffffe          BL       __aeabi_i2f
0003da  4681              MOV      r9,r0                 ;289
0003dc  4641              MOV      r1,r8                 ;289
0003de  f7fffffe          BL       __aeabi_fadd
0003e2  4607              MOV      r7,r0                 ;289
0003e4  f7fffffe          BL       __aeabi_f2iz
0003e8  eb040284          ADD      r2,r4,r4,LSL #2       ;289
0003ec  f10501e0          ADD      r1,r5,#0xe0           ;289
0003f0  eb010182          ADD      r1,r1,r2,LSL #2       ;289
0003f4  6048              STR      r0,[r1,#4]            ;289
0003f6  eb051144          ADD      r1,r5,r4,LSL #5       ;290
0003fa  68c9              LDR      r1,[r1,#0xc]          ;290
0003fc  eb051244          ADD      r2,r5,r4,LSL #5       ;290
000400  6952              LDR      r2,[r2,#0x14]         ;290
000402  1a88              SUBS     r0,r1,r2              ;290
000404  f7fffffe          BL       __aeabi_i2f
000408  4682              MOV      r10,r0                ;290
00040a  4631              MOV      r1,r6                 ;290
00040c  f7fffffe          BL       __aeabi_fmul
000410  4680              MOV      r8,r0                 ;290
000412  eb051144          ADD      r1,r5,r4,LSL #5       ;290
000416  6948              LDR      r0,[r1,#0x14]         ;290
000418  f7fffffe          BL       __aeabi_i2f
00041c  4681              MOV      r9,r0                 ;290
00041e  4641              MOV      r1,r8                 ;290
000420  f7fffffe          BL       __aeabi_fadd
000424  4607              MOV      r7,r0                 ;290
000426  f7fffffe          BL       __aeabi_f2iz
00042a  eb040284          ADD      r2,r4,r4,LSL #2       ;290
00042e  f10501e0          ADD      r1,r5,#0xe0           ;290
000432  eb010182          ADD      r1,r1,r2,LSL #2       ;290
000436  6088              STR      r0,[r1,#8]            ;290
000438  eb051144          ADD      r1,r5,r4,LSL #5       ;291
00043c  6909              LDR      r1,[r1,#0x10]         ;291
00043e  eb051244          ADD      r2,r5,r4,LSL #5       ;291
000442  6952              LDR      r2,[r2,#0x14]         ;291
000444  1a88              SUBS     r0,r1,r2              ;291
000446  f7fffffe          BL       __aeabi_i2f
00044a  4682              MOV      r10,r0                ;291
00044c  4631              MOV      r1,r6                 ;291
00044e  f7fffffe          BL       __aeabi_fmul
000452  4680              MOV      r8,r0                 ;291
000454  eb051144          ADD      r1,r5,r4,LSL #5       ;291
000458  6948              LDR      r0,[r1,#0x14]         ;291
00045a  f7fffffe          BL       __aeabi_i2f
00045e  4681              MOV      r9,r0                 ;291
000460  4641              MOV      r1,r8                 ;291
000462  f7fffffe          BL       __aeabi_fadd
000466  4607              MOV      r7,r0                 ;291
000468  f7fffffe          BL       __aeabi_f2iz
00046c  eb040284          ADD      r2,r4,r4,LSL #2       ;291
000470  f10501e0          ADD      r1,r5,#0xe0           ;291
000474  eb010182          ADD      r1,r1,r2,LSL #2       ;291
000478  60c8              STR      r0,[r1,#0xc]          ;291
00047a  eb051144          ADD      r1,r5,r4,LSL #5       ;293
00047e  6988              LDR      r0,[r1,#0x18]         ;293
000480  f7fffffe          BL       _Z8saturatej ; saturate(unsigned)
000484  eb040284          ADD      r2,r4,r4,LSL #2       ;293
000488  f10501e0          ADD      r1,r5,#0xe0           ;293
00048c  eb010182          ADD      r1,r1,r2,LSL #2       ;293
000490  6108              STR      r0,[r1,#0x10]         ;293
000492  bf00              NOP      
000494  e757              B        |L1.838|
;;;295    
                          ENDP

                  _ZN8ColorLUT10calcRatiosEP9IterPixelP14ColorSignaturePf PROC ; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
;;;174    
;;;175    void ColorLUT::calcRatios(IterPixel *ip, ColorSignature *sig, float ratios[])
000496  e92d4ff0          PUSH     {r4-r11,lr}
;;;176    {
00049a  b089              SUB      sp,sp,#0x24
00049c  468b              MOV      r11,r1
00049e  4614              MOV      r4,r2
0004a0  469a              MOV      r10,r3
;;;177        UVPixel uv;
0004a2  a807              ADD      r0,sp,#0x1c
0004a4  f7fffffe          BL       _ZN7UVPixelC1Ev ; UVPixel::UVPixel()
;;;178        uint32_t n=0, counts[4];
0004a8  f04f0900          MOV      r9,#0
;;;179        longlong usum=0, vsum=0;
0004ac  2100              MOVS     r1,#0
0004ae  460d              MOV      r5,r1
0004b0  460e              MOV      r6,r1
0004b2  460f              MOV      r7,r1
0004b4  4688              MOV      r8,r1
;;;180        counts[0] = counts[1] = counts[2] = counts[3] = 0;
0004b6  2000              MOVS     r0,#0
0004b8  9006              STR      r0,[sp,#0x18]
0004ba  9005              STR      r0,[sp,#0x14]
0004bc  9004              STR      r0,[sp,#0x10]
0004be  9003              STR      r0,[sp,#0xc]
;;;181    
;;;182        ip->reset();
0004c0  2101              MOVS     r1,#1
0004c2  4658              MOV      r0,r11
0004c4  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
;;;183        while(ip->next(&uv))
0004c8  e025              B        |L1.1302|
                  |L1.1226|
;;;184        {
;;;185            if (uv.m_u>sig->m_uMin)
0004ca  9807              LDR      r0,[sp,#0x1c]
0004cc  6821              LDR      r1,[r4,#0]
0004ce  4288              CMP      r0,r1
0004d0  dd02              BLE      |L1.1240|
;;;186                counts[0]++;
0004d2  9803              LDR      r0,[sp,#0xc]
0004d4  1c40              ADDS     r0,r0,#1
0004d6  9003              STR      r0,[sp,#0xc]
                  |L1.1240|
;;;187    
;;;188            if (uv.m_u<sig->m_uMax)
0004d8  9807              LDR      r0,[sp,#0x1c]
0004da  6861              LDR      r1,[r4,#4]
0004dc  4288              CMP      r0,r1
0004de  da02              BGE      |L1.1254|
;;;189                counts[1]++;
0004e0  9804              LDR      r0,[sp,#0x10]
0004e2  1c40              ADDS     r0,r0,#1
0004e4  9004              STR      r0,[sp,#0x10]
                  |L1.1254|
;;;190    
;;;191            if (uv.m_v>sig->m_vMin)
0004e6  9808              LDR      r0,[sp,#0x20]
0004e8  68e1              LDR      r1,[r4,#0xc]
0004ea  4288              CMP      r0,r1
0004ec  dd02              BLE      |L1.1268|
;;;192                counts[2]++;
0004ee  9805              LDR      r0,[sp,#0x14]
0004f0  1c40              ADDS     r0,r0,#1
0004f2  9005              STR      r0,[sp,#0x14]
                  |L1.1268|
;;;193    
;;;194            if (uv.m_v<sig->m_vMax)
0004f4  9808              LDR      r0,[sp,#0x20]
0004f6  6921              LDR      r1,[r4,#0x10]
0004f8  4288              CMP      r0,r1
0004fa  da02              BGE      |L1.1282|
;;;195                counts[3]++;
0004fc  9806              LDR      r0,[sp,#0x18]
0004fe  1c40              ADDS     r0,r0,#1
000500  9006              STR      r0,[sp,#0x18]
                  |L1.1282|
;;;196    
;;;197            usum += uv.m_u;
000502  9807              LDR      r0,[sp,#0x1c]
000504  1945              ADDS     r5,r0,r5
000506  eb4676e0          ADC      r6,r6,r0,ASR #31
;;;198            vsum += uv.m_v;
00050a  9808              LDR      r0,[sp,#0x20]
00050c  19c7              ADDS     r7,r0,r7
00050e  eb4878e0          ADC      r8,r8,r0,ASR #31
;;;199            n++;
000512  f1090901          ADD      r9,r9,#1
                  |L1.1302|
000516  f04f0200          MOV      r2,#0                 ;183
00051a  a907              ADD      r1,sp,#0x1c           ;183
00051c  4658              MOV      r0,r11                ;183
00051e  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
000522  2800              CMP      r0,#0                 ;183
000524  d1d1              BNE      |L1.1226|
;;;200        }
;;;201    
;;;202        // calc ratios
;;;203        ratios[0] = (float)counts[0]/n;
000526  4648              MOV      r0,r9
000528  f7fffffe          BL       __aeabi_ui2f
00052c  9002              STR      r0,[sp,#8]
00052e  9803              LDR      r0,[sp,#0xc]
000530  f7fffffe          BL       __aeabi_ui2f
000534  9001              STR      r0,[sp,#4]
000536  9902              LDR      r1,[sp,#8]
000538  f7fffffe          BL       __aeabi_fdiv
00053c  f8ca0000          STR      r0,[r10,#0]
;;;204        ratios[1] = (float)counts[1]/n;
000540  4648              MOV      r0,r9
000542  f7fffffe          BL       __aeabi_ui2f
000546  9002              STR      r0,[sp,#8]
000548  9804              LDR      r0,[sp,#0x10]
00054a  f7fffffe          BL       __aeabi_ui2f
00054e  9001              STR      r0,[sp,#4]
000550  9902              LDR      r1,[sp,#8]
000552  f7fffffe          BL       __aeabi_fdiv
000556  f8ca0004          STR      r0,[r10,#4]
;;;205        ratios[2] = (float)counts[2]/n;
00055a  4648              MOV      r0,r9
00055c  f7fffffe          BL       __aeabi_ui2f
000560  9002              STR      r0,[sp,#8]
000562  9805              LDR      r0,[sp,#0x14]
000564  f7fffffe          BL       __aeabi_ui2f
000568  9001              STR      r0,[sp,#4]
00056a  9902              LDR      r1,[sp,#8]
00056c  f7fffffe          BL       __aeabi_fdiv
000570  f8ca0008          STR      r0,[r10,#8]
;;;206        ratios[3] = (float)counts[3]/n;
000574  4648              MOV      r0,r9
000576  f7fffffe          BL       __aeabi_ui2f
00057a  9002              STR      r0,[sp,#8]
00057c  9806              LDR      r0,[sp,#0x18]
00057e  f7fffffe          BL       __aeabi_ui2f
000582  9001              STR      r0,[sp,#4]
000584  9902              LDR      r1,[sp,#8]
000586  f7fffffe          BL       __aeabi_fdiv
00058a  f8ca000c          STR      r0,[r10,#0xc]
;;;207        // calc mean (because it's cheap to do it here)
;;;208        sig->m_uMean = usum/n;
00058e  464a              MOV      r2,r9
000590  2300              MOVS     r3,#0
000592  4628              MOV      r0,r5
000594  4631              MOV      r1,r6
000596  f7fffffe          BL       __aeabi_ldivmod
00059a  60a0              STR      r0,[r4,#8]
;;;209        sig->m_vMean = vsum/n;
00059c  464a              MOV      r2,r9
00059e  2300              MOVS     r3,#0
0005a0  4638              MOV      r0,r7
0005a2  4641              MOV      r1,r8
0005a4  f7fffffe          BL       __aeabi_ldivmod
0005a8  6160              STR      r0,[r4,#0x14]
;;;210    }
0005aa  b009              ADD      sp,sp,#0x24
0005ac  e8bd8ff0          POP      {r4-r11,pc}
;;;211    
                          ENDP

                  _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature PROC ; ColorLUT::iterate(IterPixel*, ColorSignature*)
;;;212    
;;;213    void ColorLUT::iterate(IterPixel *ip, ColorSignature *sig)
0005b0  e92d41ff          PUSH     {r0-r8,lr}
;;;214    {
0005b4  4606              MOV      r6,r0
0005b6  460f              MOV      r7,r1
0005b8  4614              MOV      r4,r2
;;;215        int32_t scale;
;;;216        float ratios[4];
;;;217    
;;;218        // binary search -- this rouine is guaranteed to find the right value +/- 1, which is good enough!
;;;219        // find all four values, umin, umax, vmin, vmax simultaneously
;;;220        for (scale=1<<30, sig->m_uMin=sig->m_uMax=sig->m_vMin=sig->m_vMax=0; scale!=0; scale>>=1)
0005ba  f04f4580          MOV      r5,#0x40000000
0005be  2000              MOVS     r0,#0
0005c0  6120              STR      r0,[r4,#0x10]
0005c2  60e0              STR      r0,[r4,#0xc]
0005c4  6060              STR      r0,[r4,#4]
0005c6  6020              STR      r0,[r4,#0]
0005c8  e03a              B        |L1.1600|
                  |L1.1482|
;;;221        {
;;;222            calcRatios(ip, sig, ratios);
0005ca  466b              MOV      r3,sp
0005cc  4622              MOV      r2,r4
0005ce  4639              MOV      r1,r7
0005d0  4630              MOV      r0,r6
0005d2  f7fffffe          BL       _ZN8ColorLUT10calcRatiosEP9IterPixelP14ColorSignaturePf ; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
;;;223            if (ratios[0]>m_ratio)
0005d6  f8d61178          LDR      r1,[r6,#0x178]
0005da  9800              LDR      r0,[sp,#0]
0005dc  f7fffffe          BL       __aeabi_cfrcmple
0005e0  d203              BCS      |L1.1514|
;;;224                sig->m_uMin += scale;
0005e2  6820              LDR      r0,[r4,#0]
0005e4  4428              ADD      r0,r0,r5
0005e6  6020              STR      r0,[r4,#0]
0005e8  e002              B        |L1.1520|
                  |L1.1514|
;;;225            else
;;;226                sig->m_uMin -= scale;
0005ea  6820              LDR      r0,[r4,#0]
0005ec  1b40              SUBS     r0,r0,r5
0005ee  6020              STR      r0,[r4,#0]
                  |L1.1520|
;;;227    
;;;228            if (ratios[1]>m_ratio)
0005f0  f8d61178          LDR      r1,[r6,#0x178]
0005f4  9801              LDR      r0,[sp,#4]
0005f6  f7fffffe          BL       __aeabi_cfrcmple
0005fa  d203              BCS      |L1.1540|
;;;229                sig->m_uMax -= scale;
0005fc  6860              LDR      r0,[r4,#4]
0005fe  1b40              SUBS     r0,r0,r5
000600  6060              STR      r0,[r4,#4]
000602  e002              B        |L1.1546|
                  |L1.1540|
;;;230            else
;;;231                sig->m_uMax += scale;
000604  6860              LDR      r0,[r4,#4]
000606  4428              ADD      r0,r0,r5
000608  6060              STR      r0,[r4,#4]
                  |L1.1546|
;;;232    
;;;233            if (ratios[2]>m_ratio)
00060a  f8d61178          LDR      r1,[r6,#0x178]
00060e  9802              LDR      r0,[sp,#8]
000610  f7fffffe          BL       __aeabi_cfrcmple
000614  d203              BCS      |L1.1566|
;;;234                sig->m_vMin += scale;
000616  68e0              LDR      r0,[r4,#0xc]
000618  4428              ADD      r0,r0,r5
00061a  60e0              STR      r0,[r4,#0xc]
00061c  e002              B        |L1.1572|
                  |L1.1566|
;;;235            else
;;;236                sig->m_vMin -= scale;
00061e  68e0              LDR      r0,[r4,#0xc]
000620  1b40              SUBS     r0,r0,r5
000622  60e0              STR      r0,[r4,#0xc]
                  |L1.1572|
;;;237    
;;;238            if (ratios[3]>m_ratio)
000624  f8d61178          LDR      r1,[r6,#0x178]
000628  9803              LDR      r0,[sp,#0xc]
00062a  f7fffffe          BL       __aeabi_cfrcmple
00062e  d203              BCS      |L1.1592|
;;;239                sig->m_vMax -= scale;
000630  6920              LDR      r0,[r4,#0x10]
000632  1b40              SUBS     r0,r0,r5
000634  6120              STR      r0,[r4,#0x10]
000636  e002              B        |L1.1598|
                  |L1.1592|
;;;240            else
;;;241                sig->m_vMax += scale;
000638  6920              LDR      r0,[r4,#0x10]
00063a  4428              ADD      r0,r0,r5
00063c  6120              STR      r0,[r4,#0x10]
                  |L1.1598|
00063e  106d              ASRS     r5,r5,#1              ;220
                  |L1.1600|
000640  2d00              CMP      r5,#0                 ;220
000642  d1c2              BNE      |L1.1482|
;;;242        }
;;;243    }
000644  e8bd81ff          POP      {r0-r8,pc}
;;;244    
                          ENDP

                  _ZN8ColorLUT17generateSignatureERK6Frame8RK5RectAh PROC ; ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
;;;247    
;;;248    int ColorLUT::generateSignature(const Frame8 &frame, const RectA &region, uint8_t signum)
000648  b5f0              PUSH     {r4-r7,lr}
;;;249    {
00064a  b089              SUB      sp,sp,#0x24
00064c  4605              MOV      r5,r0
00064e  460e              MOV      r6,r1
000650  4617              MOV      r7,r2
000652  461c              MOV      r4,r3
;;;250     	if (signum<1 || signum>CL_NUM_SIGNATURES)
000654  2c01              CMP      r4,#1
000656  db01              BLT      |L1.1628|
000658  2c07              CMP      r4,#7
00065a  dd0d              BLE      |L1.1656|
                  |L1.1628|
;;;251    		return -1;
00065c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1632|
;;;252       // this is cool-- this routine doesn't allocate any extra memory other than some stack variables
;;;253        IterPixel ip(frame, region);
;;;254        iterate(&ip, m_signatures+signum-1);
;;;255    	m_signatures[signum-1].m_type = 0;
;;;256    
;;;257    	updateSignature(signum);
;;;258        return 0;
;;;259    }
000660  b009              ADD      sp,sp,#0x24
000662  bdf0              POP      {r4-r7,pc}
                  |L1.1636|
                          DCD      0x443f4000
                  |L1.1640|
                          DCD      _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
                  |L1.1644|
                          DCD      0x3dcccccd
                  |L1.1648|
                          DCD      0x3f666666
                  |L1.1652|
                          DCD      0x40200000
                  |L1.1656|
000678  463a              MOV      r2,r7                 ;253
00067a  4631              MOV      r1,r6                 ;253
00067c  4668              MOV      r0,sp                 ;253
00067e  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
000682  eb051044          ADD      r0,r5,r4,LSL #5       ;254
000686  f1a00220          SUB      r2,r0,#0x20           ;254
00068a  4669              MOV      r1,sp                 ;254
00068c  4628              MOV      r0,r5                 ;254
00068e  f7fffffe          BL       _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature ; ColorLUT::iterate(IterPixel*, ColorSignature*)
000692  2100              MOVS     r1,#0                 ;255
000694  1e60              SUBS     r0,r4,#1              ;255
000696  eb051040          ADD      r0,r5,r0,LSL #5       ;255
00069a  61c1              STR      r1,[r0,#0x1c]         ;255
00069c  4621              MOV      r1,r4                 ;257
00069e  4628              MOV      r0,r5                 ;257
0006a0  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
0006a4  2000              MOVS     r0,#0                 ;258
0006a6  e7db              B        |L1.1632|
;;;260    
                          ENDP

                  _ZN8ColorLUT10growRegionEP5RectARK6Frame8h PROC ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
;;;379    
;;;380    bool ColorLUT::growRegion(RectA *region, const Frame8 &frame, uint8_t dir)
0006a8  b530              PUSH     {r4,r5,lr}
;;;381    {
0006aa  4604              MOV      r4,r0
;;;382        if (dir==0) // grow left
0006ac  b95b              CBNZ     r3,|L1.1734|
;;;383        {
;;;384            if (region->m_xOffset>=CL_GROW_INC)
0006ae  8808              LDRH     r0,[r1,#0]
0006b0  2804              CMP      r0,#4
0006b2  db06              BLT      |L1.1730|
;;;385            {
;;;386                region->m_xOffset -= CL_GROW_INC;
0006b4  8808              LDRH     r0,[r1,#0]
0006b6  1f00              SUBS     r0,r0,#4
0006b8  8008              STRH     r0,[r1,#0]
;;;387                region->m_width += CL_GROW_INC;
0006ba  8888              LDRH     r0,[r1,#4]
0006bc  1d00              ADDS     r0,r0,#4
0006be  8088              STRH     r0,[r1,#4]
0006c0  e02e              B        |L1.1824|
                  |L1.1730|
;;;388            }
;;;389            else
;;;390                return true;
0006c2  2001              MOVS     r0,#1
                  |L1.1732|
;;;391        }
;;;392        else if (dir==1) // grow top
;;;393        {
;;;394            if (region->m_yOffset>=CL_GROW_INC)
;;;395            {
;;;396                region->m_yOffset -= CL_GROW_INC;
;;;397                region->m_height += CL_GROW_INC;
;;;398            }
;;;399            else
;;;400                return true;
;;;401        }
;;;402        else if (dir==2) // grow right
;;;403        {
;;;404            if (region->m_xOffset+region->m_width+CL_GROW_INC>frame.m_width)
;;;405                return true;
;;;406            region->m_width += CL_GROW_INC;
;;;407        }
;;;408        else if (dir==3) // grow bottom
;;;409        {
;;;410            if (region->m_yOffset+region->m_height+CL_GROW_INC>frame.m_height)
;;;411                return true;
;;;412            region->m_height += CL_GROW_INC;
;;;413        }
;;;414        return false;
;;;415    }
0006c4  bd30              POP      {r4,r5,pc}
                  |L1.1734|
0006c6  2b01              CMP      r3,#1                 ;392
0006c8  d10b              BNE      |L1.1762|
0006ca  8848              LDRH     r0,[r1,#2]            ;394
0006cc  2804              CMP      r0,#4                 ;394
0006ce  db06              BLT      |L1.1758|
0006d0  8848              LDRH     r0,[r1,#2]            ;396
0006d2  1f00              SUBS     r0,r0,#4              ;396
0006d4  8048              STRH     r0,[r1,#2]            ;396
0006d6  88c8              LDRH     r0,[r1,#6]            ;397
0006d8  1d00              ADDS     r0,r0,#4              ;397
0006da  80c8              STRH     r0,[r1,#6]            ;397
0006dc  e020              B        |L1.1824|
                  |L1.1758|
0006de  2001              MOVS     r0,#1                 ;400
0006e0  e7f0              B        |L1.1732|
                  |L1.1762|
0006e2  2b02              CMP      r3,#2                 ;402
0006e4  d10d              BNE      |L1.1794|
0006e6  8808              LDRH     r0,[r1,#0]            ;404
0006e8  888d              LDRH     r5,[r1,#4]            ;404
0006ea  4428              ADD      r0,r0,r5              ;404
0006ec  1d00              ADDS     r0,r0,#4              ;404
0006ee  f9b25004          LDRSH    r5,[r2,#4]            ;404
0006f2  42a8              CMP      r0,r5                 ;404
0006f4  dd01              BLE      |L1.1786|
0006f6  2001              MOVS     r0,#1                 ;405
0006f8  e7e4              B        |L1.1732|
                  |L1.1786|
0006fa  8888              LDRH     r0,[r1,#4]            ;406
0006fc  1d00              ADDS     r0,r0,#4              ;406
0006fe  8088              STRH     r0,[r1,#4]            ;406
000700  e00e              B        |L1.1824|
                  |L1.1794|
000702  2b03              CMP      r3,#3                 ;408
000704  d10c              BNE      |L1.1824|
000706  8848              LDRH     r0,[r1,#2]            ;410
000708  88cd              LDRH     r5,[r1,#6]            ;410
00070a  4428              ADD      r0,r0,r5              ;410
00070c  1d00              ADDS     r0,r0,#4              ;410
00070e  f9b25006          LDRSH    r5,[r2,#6]            ;410
000712  42a8              CMP      r0,r5                 ;410
000714  dd01              BLE      |L1.1818|
000716  2001              MOVS     r0,#1                 ;411
000718  e7d4              B        |L1.1732|
                  |L1.1818|
00071a  88c8              LDRH     r0,[r1,#6]            ;412
00071c  1d00              ADDS     r0,r0,#4              ;412
00071e  80c8              STRH     r0,[r1,#6]            ;412
                  |L1.1824|
000720  2000              MOVS     r0,#0                 ;414
000722  e7cf              B        |L1.1732|
;;;416    
                          ENDP

                  _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel PROC ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
;;;521    
;;;522    void ColorLUT::getMean(const RectA &region ,const Frame8 &frame, UVPixel *mean)
000724  e92d4ff0          PUSH     {r4-r11,lr}
;;;523    {
000728  b08b              SUB      sp,sp,#0x2c
00072a  468a              MOV      r10,r1
00072c  4693              MOV      r11,r2
00072e  4699              MOV      r9,r3
;;;524        UVPixel uv;
000730  a809              ADD      r0,sp,#0x24
000732  f7fffffe          BL       _ZN7UVPixelC1Ev ; UVPixel::UVPixel()
;;;525        uint32_t n=0;
000736  2400              MOVS     r4,#0
;;;526        IterPixel ip(frame, region);
000738  4652              MOV      r2,r10
00073a  4659              MOV      r1,r11
00073c  4668              MOV      r0,sp
00073e  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
;;;527    
;;;528        longlong usum=0, vsum=0;
000742  2100              MOVS     r1,#0
000744  460d              MOV      r5,r1
000746  460e              MOV      r6,r1
000748  460f              MOV      r7,r1
00074a  4688              MOV      r8,r1
;;;529    
;;;530        while(ip.next(&uv))
00074c  e009              B        |L1.1890|
                  |L1.1870|
;;;531        {
;;;532            usum += uv.m_u;
00074e  9809              LDR      r0,[sp,#0x24]
000750  1945              ADDS     r5,r0,r5
000752  eb4676e0          ADC      r6,r6,r0,ASR #31
;;;533            vsum += uv.m_v;
000756  980a              LDR      r0,[sp,#0x28]
000758  19c7              ADDS     r7,r0,r7
00075a  eb4878e0          ADC      r8,r8,r0,ASR #31
;;;534            n++;
00075e  f1040401          ADD      r4,r4,#1
                  |L1.1890|
000762  f04f0200          MOV      r2,#0                 ;530
000766  a909              ADD      r1,sp,#0x24           ;530
000768  4668              MOV      r0,sp                 ;530
00076a  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
00076e  2800              CMP      r0,#0                 ;530
000770  d1ed              BNE      |L1.1870|
;;;535        }
;;;536    
;;;537        mean->m_u = usum/n;
000772  4622              MOV      r2,r4
000774  2300              MOVS     r3,#0
000776  4628              MOV      r0,r5
000778  4631              MOV      r1,r6
00077a  f7fffffe          BL       __aeabi_ldivmod
00077e  f8c90000          STR      r0,[r9,#0]
;;;538        mean->m_v = vsum/n;
000782  4622              MOV      r2,r4
000784  2300              MOVS     r3,#0
000786  4638              MOV      r0,r7
000788  4641              MOV      r1,r8
00078a  f7fffffe          BL       __aeabi_ldivmod
00078e  f8c90004          STR      r0,[r9,#4]
;;;539    }
000792  b00b              ADD      sp,sp,#0x2c
000794  e8bd8ff0          POP      {r4-r11,pc}
;;;540    
                          ENDP

                  _ZN8ColorLUT10testRegionERK5RectARK6Frame8P7UVPixelP12SimpleVectorI7Point16E PROC ; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector<Point16>*)
;;;417    
;;;418    float ColorLUT::testRegion(const RectA &region, const Frame8 &frame, UVPixel *mean, Points *points)
000798  e92d4fff          PUSH     {r0-r11,lr}
;;;419    {
00079c  b089              SUB      sp,sp,#0x24
00079e  4682              MOV      r10,r0
0007a0  460d              MOV      r5,r1
0007a2  461c              MOV      r4,r3
0007a4  f8ddb058          LDR      r11,[sp,#0x58]
;;;420        UVPixel subMean;
0007a8  a807              ADD      r0,sp,#0x1c
0007aa  f7fffffe          BL       _ZN7UVPixelC1Ev ; UVPixel::UVPixel()
;;;421        float distance;
;;;422        RectA subRegion(0, 0, CL_GROW_INC, CL_GROW_INC);
0007ae  2004              MOVS     r0,#4
0007b0  4603              MOV      r3,r0
0007b2  2200              MOVS     r2,#0
0007b4  4611              MOV      r1,r2
0007b6  9000              STR      r0,[sp,#0]
0007b8  a805              ADD      r0,sp,#0x14
0007ba  f7fffffe          BL       _ZN5RectAC1Etttt ; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
;;;423        subRegion.m_xOffset = region.m_xOffset;
0007be  8828              LDRH     r0,[r5,#0]
0007c0  f8ad0014          STRH     r0,[sp,#0x14]
;;;424        subRegion.m_yOffset = region.m_yOffset;
0007c4  8868              LDRH     r0,[r5,#2]
0007c6  f8ad0016          STRH     r0,[sp,#0x16]
;;;425        bool horiz = region.m_width>region.m_height;
0007ca  88a8              LDRH     r0,[r5,#4]
0007cc  88e9              LDRH     r1,[r5,#6]
0007ce  4288              CMP      r0,r1
0007d0  dd01              BLE      |L1.2006|
0007d2  2001              MOVS     r0,#1
0007d4  e000              B        |L1.2008|
                  |L1.2006|
0007d6  2000              MOVS     r0,#0
                  |L1.2008|
0007d8  9004              STR      r0,[sp,#0x10]
;;;426        uint32_t i, test, endpoint = horiz ? region.m_width : region.m_height;
0007da  9804              LDR      r0,[sp,#0x10]
0007dc  b108              CBZ      r0,|L1.2018|
0007de  88a8              LDRH     r0,[r5,#4]
0007e0  e000              B        |L1.2020|
                  |L1.2018|
0007e2  88e8              LDRH     r0,[r5,#6]
                  |L1.2020|
0007e4  9003              STR      r0,[sp,#0xc]
;;;427    
;;;428        for (i=0, test=0; i<endpoint; i+=CL_GROW_INC)
0007e6  f04f0800          MOV      r8,#0
0007ea  46c1              MOV      r9,r8
0007ec  e068              B        |L1.2240|
                  |L1.2030|
;;;429        {
;;;430            getMean(subRegion, frame, &subMean);
0007ee  ab07              ADD      r3,sp,#0x1c
0007f0  a905              ADD      r1,sp,#0x14
0007f2  4650              MOV      r0,r10
0007f4  9a0b              LDR      r2,[sp,#0x2c]
0007f6  f7fffffe          BL       _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
;;;431            distance = sqrt((float)((mean->m_u-subMean.m_u)*(mean->m_u-subMean.m_u) + (mean->m_v-subMean.m_v)*(mean->m_v-subMean.m_v)));
0007fa  6821              LDR      r1,[r4,#0]
0007fc  9a07              LDR      r2,[sp,#0x1c]
0007fe  1a89              SUBS     r1,r1,r2
000800  4349              MULS     r1,r1,r1
000802  6862              LDR      r2,[r4,#4]
000804  9b08              LDR      r3,[sp,#0x20]
000806  1ad2              SUBS     r2,r2,r3
000808  6863              LDR      r3,[r4,#4]
00080a  9e08              LDR      r6,[sp,#0x20]
00080c  1b9b              SUBS     r3,r3,r6
00080e  fb021003          MLA      r0,r2,r3,r1
000812  f7fffffe          BL       __aeabi_i2f
000816  9002              STR      r0,[sp,#8]
000818  9802              LDR      r0,[sp,#8]
00081a  f7fffffe          BL       sqrtf
00081e  4607              MOV      r7,r0
;;;432            if ((uint32_t)distance<m_maxDist)
000820  4638              MOV      r0,r7
000822  f7fffffe          BL       __aeabi_f2uiz
000826  f8da1174          LDR      r1,[r10,#0x174]
00082a  4288              CMP      r0,r1
00082c  d237              BCS      |L1.2206|
;;;433            {
;;;434                int32_t n = points->size();
00082e  bf00              NOP      
000830  f8db0000          LDR      r0,[r11,#0]
000834  4606              MOV      r6,r0
;;;435                mean->m_u = ((longlong)mean->m_u*n + subMean.m_u)/(n+1);
000836  6820              LDR      r0,[r4,#0]
000838  fb803106          SMULL    r3,r1,r0,r6
00083c  9807              LDR      r0,[sp,#0x1c]
00083e  17c2              ASRS     r2,r0,#31
000840  1818              ADDS     r0,r3,r0
000842  4151              ADCS     r1,r1,r2
000844  e9cd0100          STRD     r0,r1,[sp,#0]
000848  1c70              ADDS     r0,r6,#1
00084a  17c3              ASRS     r3,r0,#31
00084c  4602              MOV      r2,r0
00084e  9800              LDR      r0,[sp,#0]
000850  f7fffffe          BL       __aeabi_ldivmod
000854  6020              STR      r0,[r4,#0]
;;;436                mean->m_v = ((longlong)mean->m_v*n + subMean.m_v)/(n+1);
000856  6860              LDR      r0,[r4,#4]
000858  fb803106          SMULL    r3,r1,r0,r6
00085c  9808              LDR      r0,[sp,#0x20]
00085e  17c2              ASRS     r2,r0,#31
000860  1818              ADDS     r0,r3,r0
000862  4151              ADCS     r1,r1,r2
000864  e9cd0100          STRD     r0,r1,[sp,#0]
000868  1c70              ADDS     r0,r6,#1
00086a  17c3              ASRS     r3,r0,#31
00086c  4602              MOV      r2,r0
00086e  9800              LDR      r0,[sp,#0]
000870  f7fffffe          BL       __aeabi_ldivmod
000874  6060              STR      r0,[r4,#4]
;;;437                if (points->push_back(Point16(subRegion.m_xOffset, subRegion.m_yOffset))<0)
000876  f8bd0016          LDRH     r0,[sp,#0x16]
00087a  b202              SXTH     r2,r0
00087c  f8bd0014          LDRH     r0,[sp,#0x14]
000880  b201              SXTH     r1,r0
000882  a802              ADD      r0,sp,#8
000884  f7fffffe          BL       _ZN7Point16C1Ess ; Point16::Point16(short, short)
000888  4601              MOV      r1,r0
00088a  9001              STR      r0,[sp,#4]
00088c  4658              MOV      r0,r11
00088e  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
000892  2800              CMP      r0,#0
000894  da00              BGE      |L1.2200|
;;;438                    break;
000896  e016              B        |L1.2246|
                  |L1.2200|
;;;439                //DBG("add %d %d %d", subRegion.m_xOffset, subRegion.m_yOffset, points->size());
;;;440                test++;
000898  f1090901          ADD      r9,r9,#1
;;;441            }
00089c  bf00              NOP      
                  |L1.2206|
;;;442    
;;;443            if (horiz)
00089e  9804              LDR      r0,[sp,#0x10]
0008a0  b130              CBZ      r0,|L1.2224|
;;;444                subRegion.m_xOffset += CL_GROW_INC;
0008a2  f8bd0014          LDRH     r0,[sp,#0x14]
0008a6  1d00              ADDS     r0,r0,#4
0008a8  b280              UXTH     r0,r0
0008aa  f8ad0014          STRH     r0,[sp,#0x14]
0008ae  e005              B        |L1.2236|
                  |L1.2224|
;;;445            else
;;;446                subRegion.m_yOffset += CL_GROW_INC;
0008b0  f8bd0016          LDRH     r0,[sp,#0x16]
0008b4  1d00              ADDS     r0,r0,#4
0008b6  b280              UXTH     r0,r0
0008b8  f8ad0016          STRH     r0,[sp,#0x16]
                  |L1.2236|
0008bc  f1080804          ADD      r8,r8,#4              ;428
                  |L1.2240|
0008c0  9803              LDR      r0,[sp,#0xc]          ;428
0008c2  4580              CMP      r8,r0                 ;428
0008c4  d393              BCC      |L1.2030|
                  |L1.2246|
0008c6  bf00              NOP                            ;438
;;;447        }
;;;448    
;;;449        //DBG("return %f", (float)test*CL_GROW_INC/endpoint);
;;;450        return (float)test*CL_GROW_INC/endpoint;
0008c8  9803              LDR      r0,[sp,#0xc]
0008ca  f7fffffe          BL       __aeabi_ui2f
0008ce  9002              STR      r0,[sp,#8]
0008d0  4648              MOV      r0,r9
0008d2  f7fffffe          BL       __aeabi_ui2f
0008d6  f04f4181          MOV      r1,#0x40800000
0008da  9001              STR      r0,[sp,#4]
0008dc  f7fffffe          BL       __aeabi_fmul
0008e0  4606              MOV      r6,r0
0008e2  9902              LDR      r1,[sp,#8]
0008e4  f7fffffe          BL       __aeabi_fdiv
;;;451    }
0008e8  b00d              ADD      sp,sp,#0x34
0008ea  e8bd8ff0          POP      {r4-r11,pc}
;;;452    
                          ENDP

                  _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E PROC ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
;;;453    
;;;454    void ColorLUT::growRegion(const Frame8 &frame, const Point16 &seed, Points *points)
0008ee  e92d4ff0          PUSH     {r4-r11,lr}
;;;455    {
0008f2  b087              SUB      sp,sp,#0x1c
0008f4  4680              MOV      r8,r0
0008f6  4689              MOV      r9,r1
0008f8  4616              MOV      r6,r2
0008fa  461f              MOV      r7,r3
;;;456        uint8_t dir, done;
;;;457        RectA region, newRegion;
0008fc  a805              ADD      r0,sp,#0x14
0008fe  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000902  a803              ADD      r0,sp,#0xc
000904  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
;;;458        UVPixel mean;
000908  a801              ADD      r0,sp,#4
00090a  f7fffffe          BL       _ZN7UVPixelC1Ev ; UVPixel::UVPixel()
;;;459        float ratio;
;;;460    
;;;461        done = 0;
00090e  2500              MOVS     r5,#0
;;;462    
;;;463        // create seed 2*CL_GROW_INCx2*CL_GROW_INC region from seed position, make sure it's within the frame
;;;464        region.m_xOffset = seed.m_x;
000910  8830              LDRH     r0,[r6,#0]
000912  b280              UXTH     r0,r0
000914  f8ad0014          STRH     r0,[sp,#0x14]
;;;465        region.m_yOffset = seed.m_y;
000918  8870              LDRH     r0,[r6,#2]
00091a  b280              UXTH     r0,r0
00091c  f8ad0016          STRH     r0,[sp,#0x16]
;;;466        if (growRegion(&region, frame, 0))
000920  2300              MOVS     r3,#0
000922  464a              MOV      r2,r9
000924  a905              ADD      r1,sp,#0x14
000926  4640              MOV      r0,r8
000928  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
00092c  b110              CBZ      r0,|L1.2356|
;;;467            done |= 1<<0;
00092e  f0450501          ORR      r5,r5,#1
000932  e00e              B        |L1.2386|
                  |L1.2356|
;;;468        else
;;;469            points->push_back(Point16(region.m_xOffset, region.m_yOffset));
000934  f8bd0016          LDRH     r0,[sp,#0x16]
000938  b202              SXTH     r2,r0
00093a  f8bd0014          LDRH     r0,[sp,#0x14]
00093e  b201              SXTH     r1,r0
000940  4668              MOV      r0,sp
000942  f7fffffe          BL       _ZN7Point16C1Ess ; Point16::Point16(short, short)
000946  4683              MOV      r11,r0
000948  4659              MOV      r1,r11
00094a  4638              MOV      r0,r7
00094c  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
;;;470        if (growRegion(&region, frame, 1))
000950  bf00              NOP      
                  |L1.2386|
000952  2301              MOVS     r3,#1
000954  464a              MOV      r2,r9
000956  a905              ADD      r1,sp,#0x14
000958  4640              MOV      r0,r8
00095a  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
00095e  b110              CBZ      r0,|L1.2406|
;;;471            done |= 1<<1;
000960  f0450502          ORR      r5,r5,#2
000964  e00e              B        |L1.2436|
                  |L1.2406|
;;;472        else
;;;473            points->push_back(Point16(region.m_xOffset, region.m_yOffset));
000966  f8bd0016          LDRH     r0,[sp,#0x16]
00096a  b202              SXTH     r2,r0
00096c  f8bd0014          LDRH     r0,[sp,#0x14]
000970  b201              SXTH     r1,r0
000972  4668              MOV      r0,sp
000974  f7fffffe          BL       _ZN7Point16C1Ess ; Point16::Point16(short, short)
000978  4683              MOV      r11,r0
00097a  4659              MOV      r1,r11
00097c  4638              MOV      r0,r7
00097e  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
;;;474        if (growRegion(&region, frame, 2))
000982  bf00              NOP      
                  |L1.2436|
000984  2302              MOVS     r3,#2
000986  464a              MOV      r2,r9
000988  a905              ADD      r1,sp,#0x14
00098a  4640              MOV      r0,r8
00098c  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
000990  b110              CBZ      r0,|L1.2456|
;;;475            done |= 1<<2;
000992  f0450504          ORR      r5,r5,#4
000996  e00d              B        |L1.2484|
                  |L1.2456|
;;;476        else
;;;477            points->push_back(Point16(seed.m_x, region.m_yOffset));
000998  f8bd0016          LDRH     r0,[sp,#0x16]
00099c  b202              SXTH     r2,r0
00099e  f9b61000          LDRSH    r1,[r6,#0]
0009a2  4668              MOV      r0,sp
0009a4  f7fffffe          BL       _ZN7Point16C1Ess ; Point16::Point16(short, short)
0009a8  4683              MOV      r11,r0
0009aa  4659              MOV      r1,r11
0009ac  4638              MOV      r0,r7
0009ae  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
;;;478        if (growRegion(&region, frame, 3))
0009b2  bf00              NOP      
                  |L1.2484|
0009b4  2303              MOVS     r3,#3
0009b6  464a              MOV      r2,r9
0009b8  a905              ADD      r1,sp,#0x14
0009ba  4640              MOV      r0,r8
0009bc  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
0009c0  b110              CBZ      r0,|L1.2504|
;;;479            done |= 1<<3;
0009c2  f0450508          ORR      r5,r5,#8
0009c6  e003              B        |L1.2512|
                  |L1.2504|
;;;480        else
;;;481            points->push_back(seed);
0009c8  4631              MOV      r1,r6
0009ca  4638              MOV      r0,r7
0009cc  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
                  |L1.2512|
;;;482    
;;;483        getMean(region, frame, &mean);
0009d0  ab01              ADD      r3,sp,#4
0009d2  464a              MOV      r2,r9
0009d4  a905              ADD      r1,sp,#0x14
0009d6  4640              MOV      r0,r8
0009d8  f7fffffe          BL       _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
;;;484    
;;;485        while(done!=0x0f)
0009dc  e05a              B        |L1.2708|
                  |L1.2526|
;;;486        {
;;;487            for (dir=0; dir<4; dir++)
0009de  2400              MOVS     r4,#0
0009e0  e056              B        |L1.2704|
                  |L1.2530|
;;;488            {
;;;489                newRegion = region;
0009e2  e9dd0105          LDRD     r0,r1,[sp,#0x14]
0009e6  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;490                if (done&(1<<dir))
0009ea  2001              MOVS     r0,#1
0009ec  40a0              LSLS     r0,r0,r4
0009ee  4028              ANDS     r0,r0,r5
0009f0  b100              CBZ      r0,|L1.2548|
;;;491                    continue;
0009f2  e04b              B        |L1.2700|
                  |L1.2548|
;;;492                else if (dir==0) // left
0009f4  b91c              CBNZ     r4,|L1.2558|
;;;493                    newRegion.m_width = 0;
0009f6  2000              MOVS     r0,#0
0009f8  f8ad0010          STRH     r0,[sp,#0x10]
0009fc  e020              B        |L1.2624|
                  |L1.2558|
;;;494                else if (dir==1) // top
0009fe  2c01              CMP      r4,#1
000a00  d103              BNE      |L1.2570|
;;;495                    newRegion.m_height = 0; // top and bottom
000a02  2000              MOVS     r0,#0
000a04  f8ad0012          STRH     r0,[sp,#0x12]
000a08  e01a              B        |L1.2624|
                  |L1.2570|
;;;496                else if (dir==2) // right
000a0a  2c02              CMP      r4,#2
000a0c  d10b              BNE      |L1.2598|
;;;497                {
;;;498                    newRegion.m_xOffset += newRegion.m_width;
000a0e  f8bd000c          LDRH     r0,[sp,#0xc]
000a12  f8bd1010          LDRH     r1,[sp,#0x10]
000a16  4408              ADD      r0,r0,r1
000a18  b280              UXTH     r0,r0
000a1a  f8ad000c          STRH     r0,[sp,#0xc]
;;;499                    newRegion.m_width = 0;
000a1e  2000              MOVS     r0,#0
000a20  f8ad0010          STRH     r0,[sp,#0x10]
000a24  e00c              B        |L1.2624|
                  |L1.2598|
;;;500                }
;;;501                else if (dir==3) // bottom
000a26  2c03              CMP      r4,#3
000a28  d10a              BNE      |L1.2624|
;;;502                {
;;;503                    newRegion.m_yOffset += newRegion.m_height;
000a2a  f8bd000e          LDRH     r0,[sp,#0xe]
000a2e  f8bd1012          LDRH     r1,[sp,#0x12]
000a32  4408              ADD      r0,r0,r1
000a34  b280              UXTH     r0,r0
000a36  f8ad000e          STRH     r0,[sp,#0xe]
;;;504                    newRegion.m_height = 0;
000a3a  2000              MOVS     r0,#0
000a3c  f8ad0012          STRH     r0,[sp,#0x12]
                  |L1.2624|
;;;505                }
;;;506    
;;;507                if (growRegion(&newRegion, frame, dir))
000a40  4623              MOV      r3,r4
000a42  464a              MOV      r2,r9
000a44  a903              ADD      r1,sp,#0xc
000a46  4640              MOV      r0,r8
000a48  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
000a4c  b120              CBZ      r0,|L1.2648|
;;;508                    done |= 1<<dir;
000a4e  2001              MOVS     r0,#1
000a50  40a0              LSLS     r0,r0,r4
000a52  4328              ORRS     r0,r0,r5
000a54  b2c5              UXTB     r5,r0
000a56  e018              B        |L1.2698|
                  |L1.2648|
;;;509                else
;;;510                {
;;;511                    ratio = testRegion(newRegion, frame, &mean, points);
000a58  ab01              ADD      r3,sp,#4
000a5a  464a              MOV      r2,r9
000a5c  a903              ADD      r1,sp,#0xc
000a5e  4640              MOV      r0,r8
000a60  9700              STR      r7,[sp,#0]
000a62  f7fffffe          BL       _ZN8ColorLUT10testRegionERK5RectARK6Frame8P7UVPixelP12SimpleVectorI7Point16E ; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector<Point16>*)
000a66  4682              MOV      r10,r0
;;;512                    if (ratio<m_minRatio)
000a68  4650              MOV      r0,r10
000a6a  f8d8117c          LDR      r1,[r8,#0x17c]
000a6e  f7fffffe          BL       __aeabi_cfcmple
000a72  d204              BCS      |L1.2686|
;;;513                        done |= 1<<dir;
000a74  2001              MOVS     r0,#1
000a76  40a0              LSLS     r0,r0,r4
000a78  4328              ORRS     r0,r0,r5
000a7a  b2c5              UXTB     r5,r0
000a7c  e005              B        |L1.2698|
                  |L1.2686|
;;;514                    else
;;;515                        growRegion(&region, frame, dir);
000a7e  4623              MOV      r3,r4
000a80  464a              MOV      r2,r9
000a82  a905              ADD      r1,sp,#0x14
000a84  4640              MOV      r0,r8
000a86  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
                  |L1.2698|
000a8a  bf00              NOP                            ;491
                  |L1.2700|
000a8c  1c60              ADDS     r0,r4,#1              ;487
000a8e  b2c4              UXTB     r4,r0                 ;487
                  |L1.2704|
000a90  2c04              CMP      r4,#4                 ;487
000a92  dba6              BLT      |L1.2530|
                  |L1.2708|
000a94  2d0f              CMP      r5,#0xf               ;485
000a96  d1a2              BNE      |L1.2526|
;;;516                }
;;;517            }
;;;518        }
;;;519    }
000a98  b007              ADD      sp,sp,#0x1c
000a9a  e8bd8ff0          POP      {r4-r11,pc}
;;;520    
                          ENDP

                  _ZN8ColorLUT17generateSignatureERK6Frame8RK7Point16P12SimpleVectorIS3_Eh PROC ; ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector<Point16>*, unsigned char)
;;;261    
;;;262    int ColorLUT::generateSignature(const Frame8 &frame, const Point16 &point, Points *points, uint8_t signum)
000a9e  e92d41f0          PUSH     {r4-r8,lr}
;;;263    {
000aa2  b08a              SUB      sp,sp,#0x28
000aa4  4605              MOV      r5,r0
000aa6  460f              MOV      r7,r1
000aa8  4690              MOV      r8,r2
000aaa  461e              MOV      r6,r3
000aac  9c10              LDR      r4,[sp,#0x40]
;;;264    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000aae  2c01              CMP      r4,#1
000ab0  db01              BLT      |L1.2742|
000ab2  2c07              CMP      r4,#7
000ab4  dd04              BLE      |L1.2752|
                  |L1.2742|
;;;265    		return -1;
000ab6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2746|
;;;266        // this routine requires some memory to store the region which consists of some consistently-sized blocks
;;;267        growRegion(frame, point, points);
;;;268        IterPixel ip(frame, points);
;;;269        iterate(&ip, m_signatures+signum-1);
;;;270    	m_signatures[signum-1].m_type = 0;
;;;271    
;;;272    	updateSignature(signum);
;;;273        return 0;
;;;274    }
000aba  b00a              ADD      sp,sp,#0x28
000abc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2752|
000ac0  4633              MOV      r3,r6                 ;267
000ac2  4642              MOV      r2,r8                 ;267
000ac4  4639              MOV      r1,r7                 ;267
000ac6  4628              MOV      r0,r5                 ;267
000ac8  f7fffffe          BL       _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
000acc  4632              MOV      r2,r6                 ;268
000ace  4639              MOV      r1,r7                 ;268
000ad0  a801              ADD      r0,sp,#4              ;268
000ad2  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
000ad6  eb051044          ADD      r0,r5,r4,LSL #5       ;269
000ada  f1a00220          SUB      r2,r0,#0x20           ;269
000ade  a901              ADD      r1,sp,#4              ;269
000ae0  4628              MOV      r0,r5                 ;269
000ae2  f7fffffe          BL       _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature ; ColorLUT::iterate(IterPixel*, ColorSignature*)
000ae6  2100              MOVS     r1,#0                 ;270
000ae8  1e60              SUBS     r0,r4,#1              ;270
000aea  eb051040          ADD      r0,r5,r0,LSL #5       ;270
000aee  61c1              STR      r1,[r0,#0x1c]         ;270
000af0  4621              MOV      r1,r4                 ;272
000af2  4628              MOV      r0,r5                 ;272
000af4  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000af8  2000              MOVS     r0,#0                 ;273
000afa  e7de              B        |L1.2746|
;;;275    
                          ENDP

                  _ZN8ColorLUT12getSignatureEh PROC ; ColorLUT::getSignature(unsigned char)
;;;295    
;;;296    ColorSignature *ColorLUT::getSignature(uint8_t signum)
000afc  4602              MOV      r2,r0
;;;297    {
;;;298    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000afe  2901              CMP      r1,#1
000b00  db01              BLT      |L1.2822|
000b02  2907              CMP      r1,#7
000b04  dd01              BLE      |L1.2826|
                  |L1.2822|
;;;299    		return NULL;
000b06  2000              MOVS     r0,#0
                  |L1.2824|
;;;300    
;;;301    	return m_signatures+signum-1;
;;;302    }
000b08  4770              BX       lr
                  |L1.2826|
000b0a  eb021041          ADD      r0,r2,r1,LSL #5       ;301
000b0e  3820              SUBS     r0,r0,#0x20           ;301
000b10  e7fa              B        |L1.2824|
;;;303    
                          ENDP

                  _ZN8ColorLUT12setSignatureEhRK14ColorSignature PROC ; ColorLUT::setSignature(unsigned char, const ColorSignature&)
;;;304    int ColorLUT::setSignature(uint8_t signum, const ColorSignature &sig)
000b12  b570              PUSH     {r4-r6,lr}
;;;305    {
000b14  4605              MOV      r5,r0
000b16  460c              MOV      r4,r1
000b18  4616              MOV      r6,r2
;;;306    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000b1a  2c01              CMP      r4,#1
000b1c  db01              BLT      |L1.2850|
000b1e  2c07              CMP      r4,#7
000b20  dd02              BLE      |L1.2856|
                  |L1.2850|
;;;307    		return -1;
000b22  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2854|
;;;308    
;;;309    	m_signatures[signum-1] = sig;
;;;310    	updateSignature(signum);
;;;311    	return 0;
;;;312    }
000b26  bd70              POP      {r4-r6,pc}
                  |L1.2856|
000b28  1e61              SUBS     r1,r4,#1              ;309
000b2a  eb051041          ADD      r0,r5,r1,LSL #5       ;309
000b2e  2220              MOVS     r2,#0x20              ;309
000b30  4631              MOV      r1,r6                 ;309
000b32  f7fffffe          BL       __aeabi_memcpy4
000b36  4621              MOV      r1,r4                 ;310
000b38  4628              MOV      r0,r5                 ;310
000b3a  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000b3e  2000              MOVS     r0,#0                 ;311
000b40  e7f1              B        |L1.2854|
;;;313    
                          ENDP

                  _ZN8ColorLUT11generateLUTEv PROC ; ColorLUT::generateLUT()
;;;314    
;;;315    int ColorLUT::generateLUT()
000b42  e92d4ff8          PUSH     {r3-r11,lr}
;;;316    {
000b46  4604              MOV      r4,r0
;;;317        int32_t r, g, b, u, v, y, bin, sig;
;;;318    
;;;319        clearLUT();
000b48  2100              MOVS     r1,#0
000b4a  4620              MOV      r0,r4
000b4c  f7fffffe          BL       _ZN8ColorLUT8clearLUTEh ; ColorLUT::clearLUT(unsigned char)
;;;320    
;;;321        // recalc bounds for each signature
;;;322        for (r=0; r<CL_NUM_SIGNATURES; r++)
000b50  2600              MOVS     r6,#0
000b52  e005              B        |L1.2912|
                  |L1.2900|
;;;323            updateSignature(r+1);
000b54  1c70              ADDS     r0,r6,#1
000b56  b2c1              UXTB     r1,r0
000b58  4620              MOV      r0,r4
000b5a  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000b5e  1c76              ADDS     r6,r6,#1              ;322
                  |L1.2912|
000b60  2e07              CMP      r6,#7                 ;322
000b62  dbf7              BLT      |L1.2900|
;;;324    
;;;325        for (r=0; r<1<<8; r+=1<<(8-CL_LUT_COMPONENT_SCALE))
000b64  2600              MOVS     r6,#0
000b66  e072              B        |L1.3150|
                  |L1.2920|
;;;326        {
;;;327            for (g=0; g<1<<8; g+=1<<(8-CL_LUT_COMPONENT_SCALE))
000b68  2700              MOVS     r7,#0
000b6a  e06d              B        |L1.3144|
                  |L1.2924|
;;;328            {
;;;329                for (b=0; b<1<<8; b+=1<<(8-CL_LUT_COMPONENT_SCALE))
000b6c  f04f0800          MOV      r8,#0
000b70  e066              B        |L1.3136|
                  |L1.2930|
;;;330                {
;;;331                    y = r+g+b;
000b72  19f0              ADDS     r0,r6,r7
000b74  eb000b08          ADD      r11,r0,r8
;;;332    
;;;333                    if (y<(int32_t)m_miny)
000b78  f8d4016c          LDR      r0,[r4,#0x16c]
000b7c  4558              CMP      r0,r11
000b7e  dd00              BLE      |L1.2946|
;;;334                        continue;
000b80  e05c              B        |L1.3132|
                  |L1.2946|
;;;335                    u = ((r-g)<<CL_LUT_ENTRY_SCALE)/y;
000b82  1bf0              SUBS     r0,r6,r7
000b84  03c0              LSLS     r0,r0,#15
000b86  fb90f9fb          SDIV     r9,r0,r11
;;;336                    v = ((b-g)<<CL_LUT_ENTRY_SCALE)/y;
000b8a  eba80007          SUB      r0,r8,r7
000b8e  03c0              LSLS     r0,r0,#15
000b90  fb90fafb          SDIV     r10,r0,r11
;;;337    
;;;338                    for (sig=0; sig<CL_NUM_SIGNATURES; sig++)
000b94  2500              MOVS     r5,#0
000b96  e04e              B        |L1.3126|
                  |L1.2968|
;;;339                    {
;;;340                        if (m_signatures[sig].m_uMin==0 && m_signatures[sig].m_uMax==0)
000b98  eb041045          ADD      r0,r4,r5,LSL #5
000b9c  6800              LDR      r0,[r0,#0]
000b9e  b920              CBNZ     r0,|L1.2986|
000ba0  eb041045          ADD      r0,r4,r5,LSL #5
000ba4  6840              LDR      r0,[r0,#4]
000ba6  b900              CBNZ     r0,|L1.2986|
;;;341                            continue;
000ba8  e044              B        |L1.3124|
                  |L1.2986|
;;;342                        if ((m_runtimeSigs[sig].m_uMin<u) && (u<m_runtimeSigs[sig].m_uMax) &&
000baa  eb050185          ADD      r1,r5,r5,LSL #2
000bae  f10400e0          ADD      r0,r4,#0xe0
000bb2  f8500021          LDR      r0,[r0,r1,LSL #2]
000bb6  4548              CMP      r0,r9
000bb8  da3b              BGE      |L1.3122|
000bba  eb050185          ADD      r1,r5,r5,LSL #2
000bbe  f10400e0          ADD      r0,r4,#0xe0
000bc2  eb000081          ADD      r0,r0,r1,LSL #2
000bc6  6840              LDR      r0,[r0,#4]
000bc8  4548              CMP      r0,r9
000bca  dd32              BLE      |L1.3122|
;;;343                                (m_runtimeSigs[sig].m_vMin<v) && (v<m_runtimeSigs[sig].m_vMax))
000bcc  eb050185          ADD      r1,r5,r5,LSL #2
000bd0  f10400e0          ADD      r0,r4,#0xe0
000bd4  eb000081          ADD      r0,r0,r1,LSL #2
000bd8  6880              LDR      r0,[r0,#8]
000bda  4550              CMP      r0,r10
000bdc  da29              BGE      |L1.3122|
000bde  eb050185          ADD      r1,r5,r5,LSL #2
000be2  f10400e0          ADD      r0,r4,#0xe0
000be6  eb000081          ADD      r0,r0,r1,LSL #2
000bea  68c0              LDR      r0,[r0,#0xc]
000bec  4550              CMP      r0,r10
000bee  dd20              BLE      |L1.3122|
;;;344                        {
;;;345                            u = r-g;
000bf0  eba60907          SUB      r9,r6,r7
;;;346                            u >>= 9-CL_LUT_COMPONENT_SCALE;
000bf4  ea4f09e9          ASR      r9,r9,#3
;;;347                            u &= (1<<CL_LUT_COMPONENT_SCALE)-1;
000bf8  f009093f          AND      r9,r9,#0x3f
;;;348                            v = b-g;
000bfc  eba80a07          SUB      r10,r8,r7
;;;349                            v >>= 9-CL_LUT_COMPONENT_SCALE;
000c00  ea4f0aea          ASR      r10,r10,#3
;;;350                            v &= (1<<CL_LUT_COMPONENT_SCALE)-1;
000c04  f00a0a3f          AND      r10,r10,#0x3f
;;;351    
;;;352                            bin = (u<<CL_LUT_COMPONENT_SCALE)+ v;
000c08  eb0a1089          ADD      r0,r10,r9,LSL #6
000c0c  9000              STR      r0,[sp,#0]
;;;353    
;;;354                            if (m_lut[bin]==0 || m_lut[bin]>sig+1)
000c0e  f8d41170          LDR      r1,[r4,#0x170]
000c12  9800              LDR      r0,[sp,#0]
000c14  5c08              LDRB     r0,[r1,r0]
000c16  b130              CBZ      r0,|L1.3110|
000c18  f8d41170          LDR      r1,[r4,#0x170]
000c1c  9800              LDR      r0,[sp,#0]
000c1e  5c09              LDRB     r1,[r1,r0]
000c20  1c68              ADDS     r0,r5,#1
000c22  4281              CMP      r1,r0
000c24  dd05              BLE      |L1.3122|
                  |L1.3110|
;;;355                                m_lut[bin] = sig+1;
000c26  1c68              ADDS     r0,r5,#1
000c28  b2c1              UXTB     r1,r0
000c2a  f8d42170          LDR      r2,[r4,#0x170]
000c2e  9800              LDR      r0,[sp,#0]
000c30  5411              STRB     r1,[r2,r0]
                  |L1.3122|
000c32  bf00              NOP                            ;341
                  |L1.3124|
000c34  1c6d              ADDS     r5,r5,#1              ;338
                  |L1.3126|
000c36  2d07              CMP      r5,#7                 ;338
000c38  dbae              BLT      |L1.2968|
000c3a  bf00              NOP                            ;334
                  |L1.3132|
000c3c  f1080804          ADD      r8,r8,#4              ;329
                  |L1.3136|
000c40  f1b80fff          CMP      r8,#0xff              ;329
000c44  dd95              BLE      |L1.2930|
000c46  1d3f              ADDS     r7,r7,#4              ;327
                  |L1.3144|
000c48  2fff              CMP      r7,#0xff              ;327
000c4a  dd8f              BLE      |L1.2924|
000c4c  1d36              ADDS     r6,r6,#4              ;325
                  |L1.3150|
000c4e  2eff              CMP      r6,#0xff              ;325
000c50  dd8a              BLE      |L1.2920|
;;;356                        }
;;;357                    }
;;;358                }
;;;359            }
;;;360        }
;;;361    
;;;362        return 0;
000c52  2000              MOVS     r0,#0
;;;363    }
000c54  e8bd8ff8          POP      {r3-r11,pc}
;;;364    
                          ENDP

                  _ZN8ColorLUT11setSigRangeEhf PROC ; ColorLUT::setSigRange(unsigned char, float)
;;;540    
;;;541    void ColorLUT::setSigRange(uint8_t signum, float range)
000c58  b510              PUSH     {r4,lr}
;;;542    {
;;;543    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000c5a  2901              CMP      r1,#1
000c5c  db01              BLT      |L1.3170|
000c5e  2907              CMP      r1,#7
000c60  dd00              BLE      |L1.3172|
                  |L1.3170|
;;;544    		return;
;;;545    	m_sigRanges[signum-1] = range;
;;;546    }
000c62  bd10              POP      {r4,pc}
                  |L1.3172|
000c64  1e4b              SUBS     r3,r1,#1              ;545
000c66  f50074c2          ADD      r4,r0,#0x184          ;545
000c6a  f8442023          STR      r2,[r4,r3,LSL #2]     ;545
000c6e  bf00              NOP      
000c70  e7f7              B        |L1.3170|
;;;547    
                          ENDP

                  _ZN8ColorLUT11setGrowDistEj PROC ; ColorLUT::setGrowDist(unsigned)
;;;548    void ColorLUT::setGrowDist(uint32_t dist)
000c72  f8c01174          STR      r1,[r0,#0x174]
;;;549    {
;;;550    	m_maxDist = dist;
;;;551    }
000c76  4770              BX       lr
;;;552    
                          ENDP

                  _ZN8ColorLUT9setCCGainEf PROC ; ColorLUT::setCCGain(float)
;;;560    
;;;561    void ColorLUT::setCCGain(float gain)
000c78  f8c01180          STR      r1,[r0,#0x180]
;;;562    {
;;;563        m_ccGain = gain;
;;;564    }
000c7c  4770              BX       lr
;;;565    
                          ENDP

                  _ZN8ColorLUT7getTypeEh PROC ; ColorLUT::getType(unsigned char)
;;;566    uint32_t ColorLUT::getType(uint8_t signum)
000c7e  4602              MOV      r2,r0
;;;567    {
;;;568        if (signum<1 || signum>CL_NUM_SIGNATURES)
000c80  2901              CMP      r1,#1
000c82  db01              BLT      |L1.3208|
000c84  2907              CMP      r1,#7
000c86  dd01              BLE      |L1.3212|
                  |L1.3208|
;;;569            return 0;
000c88  2000              MOVS     r0,#0
                  |L1.3210|
;;;570    
;;;571        return m_signatures[signum-1].m_type;
;;;572    }
000c8a  4770              BX       lr
                  |L1.3212|
000c8c  1e48              SUBS     r0,r1,#1              ;571
000c8e  eb021040          ADD      r0,r2,r0,LSL #5       ;571
000c92  69c0              LDR      r0,[r0,#0x1c]         ;571
000c94  e7f9              B        |L1.3210|
;;;573    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||i._ZN5RectAC1Etttt||, COMGROUP=_ZN5RectAC1Etttt, CODE, READONLY, ALIGN=1

                  _ZN5RectAC2Etttt                  ; Alternate entry point ; RectA::RectA__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)
                  _ZN5RectAC1Etttt PROC ; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
;;;97     
;;;98         RectA(uint16_t xOffset, uint16_t yOffset, uint16_t width, uint16_t height)
;;;99         {
;;;100            m_xOffset = xOffset;
;;;101            m_yOffset = yOffset;
;;;102            m_width = width;
;;;103            m_height = height;
;;;104        }
;;;105    
000000  b510              PUSH     {r4,lr}
000002  9c02              LDR      r4,[sp,#8]
000004  8001              STRH     r1,[r0,#0]
000006  8042              STRH     r2,[r0,#2]
000008  8083              STRH     r3,[r0,#4]
00000a  80c4              STRH     r4,[r0,#6]
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.14||, COMGROUP=_ZN5RectAC1Etttt, LINKORDER=||i._ZN5RectAC1Etttt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5RectAC1Etttt||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||, COMGROUP=_ZN12SimpleVectorI7Point16E9push_backERKS0_, CODE, READONLY, ALIGN=1

                  _ZN12SimpleVectorI7Point16E9push_backERKS0_ PROC ; SimpleVector<Point16>::push_back(const Point16&)
;;;73     
;;;74         int push_back(const Object& x)
000000  b570              PUSH     {r4-r6,lr}
;;;75         {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;76             if(m_size == m_capacity)
000006  e9d40100          LDRD     r0,r1,[r4,#0]
00000a  4288              CMP      r0,r1
00000c  d10a              BNE      |L20.36|
;;;77                 if (resize(m_capacity + SPARE_CAPACITY)<0)
00000e  6860              LDR      r0,[r4,#4]
000010  f1000110          ADD      r1,r0,#0x10
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN12SimpleVectorI7Point16E6resizeEi ; SimpleVector<Point16>::resize(int)
00001a  2800              CMP      r0,#0
00001c  da02              BGE      |L20.36|
;;;78                     return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L20.34|
;;;79             m_objects[m_size++] = x;
;;;80             return 0;
;;;81         }
000022  bd70              POP      {r4-r6,pc}
                  |L20.36|
000024  6821              LDR      r1,[r4,#0]            ;79
000026  1c48              ADDS     r0,r1,#1              ;79
000028  6020              STR      r0,[r4,#0]            ;79
00002a  68a0              LDR      r0,[r4,#8]            ;79
00002c  eb000081          ADD      r0,r0,r1,LSL #2       ;79
000030  6829              LDR      r1,[r5,#0]            ;79
000032  6001              STR      r1,[r0,#0]            ;79
000034  2000              MOVS     r0,#0                 ;80
000036  e7f4              B        |L20.34|
;;;82     
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN12SimpleVectorI7Point16E9push_backERKS0_, LINKORDER=||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ess||, COMGROUP=_ZN7Point16C1Ess, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ess                  ; Alternate entry point ; Point16::Point16__sub_object(short, short)
                  _ZN7Point16C1Ess PROC ; Point16::Point16(short, short)
;;;43     
;;;44         Point16(int16_t x, int16_t y)
;;;45         {
;;;46             m_x = x;
;;;47             m_y = y;
;;;48         }
;;;49     
000000  8001              STRH     r1,[r0,#0]
000002  8042              STRH     r2,[r0,#2]
000004  4770              BX       lr
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN7Point16C1Ess, LINKORDER=||i._ZN7Point16C1Ess||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ess||
                          DCD      0x00000001

                          AREA ||i._ZN6Frame8C1Ev||, COMGROUP=_ZN6Frame8C1Ev, CODE, READONLY, ALIGN=1

                  _ZN6Frame8C2Ev                  ; Alternate entry point ; Frame8::Frame8__sub_object()
                  _ZN6Frame8C1Ev PROC ; Frame8::Frame8()
;;;72     {
;;;73         Frame8()
;;;74         {
;;;75             m_pixels = (uint8_t *)NULL;
;;;76             m_width = m_height = 0;
;;;77         }
;;;78     
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  80c1              STRH     r1,[r0,#6]
000006  8081              STRH     r1,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN6Frame8C1Ev, LINKORDER=||i._ZN6Frame8C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Frame8C1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN5RectAC1Ev||, COMGROUP=_ZN5RectAC1Ev, CODE, READONLY, ALIGN=1

                  _ZN5RectAC2Ev                  ; Alternate entry point ; RectA::RectA__sub_object()
                  _ZN5RectAC1Ev PROC ; RectA::RectA()
;;;92     {
;;;93         RectA()
;;;94         {
;;;95             m_xOffset = m_yOffset = m_width = m_height = 0;
;;;96         }
;;;97     
000000  2100              MOVS     r1,#0
000002  80c1              STRH     r1,[r0,#6]
000004  8081              STRH     r1,[r0,#4]
000006  8041              STRH     r1,[r0,#2]
000008  8001              STRH     r1,[r0,#0]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.42||, COMGROUP=_ZN5RectAC1Ev, LINKORDER=||i._ZN5RectAC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5RectAC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN7UVPixelC1Ev||, COMGROUP=_ZN7UVPixelC1Ev, CODE, READONLY, ALIGN=1

                  _ZN7UVPixelC2Ev                  ; Alternate entry point ; UVPixel::UVPixel__sub_object()
                  _ZN7UVPixelC1Ev PROC ; UVPixel::UVPixel()
;;;217    {
;;;218        UVPixel()
;;;219        {
;;;220            m_u = m_v = 0;
;;;221        }
;;;222    
000000  2100              MOVS     r1,#0
000002  6041              STR      r1,[r0,#4]
000004  6001              STR      r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZN7UVPixelC1Ev, LINKORDER=||i._ZN7UVPixelC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7UVPixelC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN14ColorSignatureC1Ev||, COMGROUP=_ZN14ColorSignatureC1Ev, CODE, READONLY, ALIGN=1

                  _ZN14ColorSignatureC2Ev                  ; Alternate entry point ; ColorSignature::ColorSignature__sub_object()
                  _ZN14ColorSignatureC1Ev PROC ; ColorSignature::ColorSignature()
;;;39     {
;;;40     	ColorSignature()
;;;41     	{
;;;42     		m_uMin = m_uMax = m_uMean = m_vMin = m_vMax = m_vMean = m_type = 0;
;;;43     	}	
;;;44     
000000  2100              MOVS     r1,#0
000002  61c1              STR      r1,[r0,#0x1c]
000004  6141              STR      r1,[r0,#0x14]
000006  6101              STR      r1,[r0,#0x10]
000008  60c1              STR      r1,[r0,#0xc]
00000a  6081              STR      r1,[r0,#8]
00000c  6041              STR      r1,[r0,#4]
00000e  6001              STR      r1,[r0,#0]
000010  4770              BX       lr
                          ENDP


                          AREA ||area_number.56||, COMGROUP=_ZN14ColorSignatureC1Ev, LINKORDER=||i._ZN14ColorSignatureC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN14ColorSignatureC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNK12SimpleVectorI7Point16EixEi||, COMGROUP=_ZNK12SimpleVectorI7Point16EixEi, CODE, READONLY, ALIGN=1

                  _ZNK12SimpleVectorI7Point16EixEi PROC ; SimpleVector<Point16>::operator [](int) const
;;;58     
;;;59         const Object& operator[](int index) const
000000  4602              MOV      r2,r0
;;;60         { return m_objects[index]; }
000002  6890              LDR      r0,[r2,#8]
000004  eb000081          ADD      r0,r0,r1,LSL #2
000008  4770              BX       lr
;;;61     
                          ENDP


                          AREA ||area_number.63||, COMGROUP=_ZNK12SimpleVectorI7Point16EixEi, LINKORDER=||t._ZNK12SimpleVectorI7Point16EixEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNK12SimpleVectorI7Point16EixEi||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI7Point16E6resizeEi||, COMGROUP=_ZN12SimpleVectorI7Point16E6resizeEi, CODE, READONLY, ALIGN=2

                  _ZN12SimpleVectorI7Point16E6resizeEi PROC ; SimpleVector<Point16>::resize(int)
;;;33     
;;;34         int resize(int newCapacity)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;35         {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;36             if(newCapacity < m_size)
000008  6820              LDR      r0,[r4,#0]
00000a  42a8              CMP      r0,r5
00000c  dd02              BLE      |L69.20|
;;;37                 return 0;
00000e  2000              MOVS     r0,#0
                  |L69.16|
;;;38     
;;;39             Object *oldArray = m_objects;
;;;40     
;;;41             m_objects = new (std::nothrow) Object[newCapacity];
;;;42             if (m_objects==NULL)
;;;43             {
;;;44                 m_objects = oldArray;
;;;45                 return -1;
;;;46             }
;;;47             for(int k = 0; k<m_size; k++)
;;;48                 m_objects[k] = oldArray[k];
;;;49     
;;;50             m_capacity = newCapacity;
;;;51     
;;;52             delete [] oldArray;
;;;53             return 0;
;;;54         }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L69.20|
000014  68a6              LDR      r6,[r4,#8]            ;39
000016  462f              MOV      r7,r5                 ;41
000018  00a8              LSLS     r0,r5,#2              ;41
00001a  4914              LDR      r1,|L69.108|
00001c  f7fffffe          BL       _ZnajRKSt9nothrow_t ; operator new[] (unsigned, const std::nothrow_t&)
000020  ea5f0800          MOVS     r8,r0                 ;41
000024  d006              BEQ      |L69.52|
000026  463b              MOV      r3,r7                 ;41
000028  2204              MOVS     r2,#4                 ;41
00002a  4911              LDR      r1,|L69.112|
00002c  4640              MOV      r0,r8                 ;41
00002e  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000032  e000              B        |L69.54|
                  |L69.52|
000034  2000              MOVS     r0,#0                 ;41
                  |L69.54|
000036  60a0              STR      r0,[r4,#8]            ;41
000038  68a0              LDR      r0,[r4,#8]            ;42
00003a  b918              CBNZ     r0,|L69.68|
00003c  60a6              STR      r6,[r4,#8]            ;44
00003e  f04f30ff          MOV      r0,#0xffffffff        ;45
000042  e7e5              B        |L69.16|
                  |L69.68|
000044  2000              MOVS     r0,#0                 ;47
000046  e007              B        |L69.88|
                  |L69.72|
000048  68a1              LDR      r1,[r4,#8]            ;48
00004a  eb010180          ADD      r1,r1,r0,LSL #2       ;48
00004e  eb060280          ADD      r2,r6,r0,LSL #2       ;48
000052  6812              LDR      r2,[r2,#0]            ;48
000054  600a              STR      r2,[r1,#0]            ;48
000056  1c40              ADDS     r0,r0,#1              ;47
                  |L69.88|
000058  6821              LDR      r1,[r4,#0]            ;47
00005a  4281              CMP      r1,r0                 ;47
00005c  dcf4              BGT      |L69.72|
00005e  6065              STR      r5,[r4,#4]            ;50
000060  4630              MOV      r0,r6                 ;52
000062  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000066  2000              MOVS     r0,#0                 ;53
000068  e7d2              B        |L69.16|
;;;55     
                          ENDP

00006a  0000              DCW      0x0000
                  |L69.108|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L69.112|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()

                          AREA ||area_number.70||, COMGROUP=_ZN12SimpleVectorI7Point16E6resizeEi, LINKORDER=||t._ZN12SimpleVectorI7Point16E6resizeEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI7Point16E6resizeEi||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;38     {
;;;39         Point16()
;;;40         {
;;;41             m_x = m_y = 0;
;;;42         }
;;;43     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.77||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.77||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001
