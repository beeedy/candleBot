<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\m0\m0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\m0\m0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat May 02 22:22:39 2015
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; exec_loop &rArr; chirpService &rArr; handleChirp &rArr; handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">M0_NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">M0_NMI_Handler</a><BR>
 <LI><a href="#[3]">M0_HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">M0_HardFault_Handler</a><BR>
 <LI><a href="#[4]">M0_SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">M0_SVC_Handler</a><BR>
 <LI><a href="#[5]">M0_DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">M0_DebugMon_Handler</a><BR>
 <LI><a href="#[6]">M0_PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">M0_PendSV_Handler</a><BR>
 <LI><a href="#[7]">M0_SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">M0_SysTick_Handler</a><BR>
 <LI><a href="#[16]">M0_ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">M0_ADC0_IRQHandler</a><BR>
 <LI><a href="#[4f]">updateTable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">updateTable</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">M0_ADC0_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1a]">M0_ADC1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[21]">M0_C_CAN0_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[a]">M0_DMA_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[5]">M0_DebugMon_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[b]">M0_ETH_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1c]">M0_EVENTROUTER_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[13]">M0_GINT1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[3]">M0_HardFault_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[17]">M0_I2C0_OR_I2C1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[20]">M0_I2S0_OR_I2S1_OR_QEI_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[d]">M0_LCD_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[9]">M0_M4CORE_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[15]">M0_MCPWM_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[2]">M0_NMI_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[6]">M0_PendSV_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[11]">M0_RIT_OR_WWDT_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[8]">M0_RTC_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1]">M0_Reset_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[10]">M0_SCT_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[c]">M0_SDIO_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[18]">M0_SGPIO_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[19]">M0_SPI_OR_DAC_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1b]">M0_SSP0_OR_SSP1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[4]">M0_SVC_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[7]">M0_SysTick_Handler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[12]">M0_TIMER0_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[14]">M0_TIMER3_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1d]">M0_USART0_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1e]">M0_USART2_OR_C_CAN1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[1f]">M0_USART3_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[e]">M0_USB0_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[f]">M0_USB1_IRQHandler</a> from startup_lpc43xx_m0.o(.text) referenced from startup_lpc43xx_m0.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc43xx_m0.o(.text)
 <LI><a href="#[25]">exec_run</a> from exec_m0.o(i.exec_run) referenced from exec_m0.o(i.exec_init)
 <LI><a href="#[27]">exec_running</a> from exec_m0.o(i.exec_running) referenced from exec_m0.o(i.exec_init)
 <LI><a href="#[26]">exec_stop</a> from exec_m0.o(i.exec_stop) referenced from exec_m0.o(i.exec_init)
 <LI><a href="#[24]">fputc</a> from debug.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[28]">getFrame</a> from frame_m0.o(i.getFrame) referenced from frame_m0.o(i.frame_init)
 <LI><a href="#[29]">getRLSFrame</a> from rls_m0.o(i.getRLSFrame) referenced from rls_m0.o(i.rls_init)
 <LI><a href="#[22]">main</a> from main_m0.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[70]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[71]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[72]"></a>__asm___10_frame_m0_c_vsync____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frame_m0.o(.emb_text), UNUSED)

<P><STRONG><a name="[73]"></a>__asm___10_frame_m0_c_vsync____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frame_m0.o(.emb_text), UNUSED)

<P><STRONG><a name="[43]"></a>syncM0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM0
</UL>

<P><STRONG><a name="[44]"></a>syncM1</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>

<P><STRONG><a name="[2c]"></a>lineM0</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineM0 &rArr; callSyncM0
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM0
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM0R0
</UL>

<P><STRONG><a name="[2e]"></a>lineM1R1</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineM1R1 &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R1
</UL>

<P><STRONG><a name="[30]"></a>lineM1R2</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineM1R2 &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R2
</UL>

<P><STRONG><a name="[31]"></a>lineM1R2Merge</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, frame_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineM1R2Merge &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R2
</UL>

<P><STRONG><a name="[74]"></a>__asm___8_rls_m0_c_g_logLut____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rls_m0.o(.emb_text), UNUSED)

<P><STRONG><a name="[75]"></a>__asm___8_rls_m0_c_g_logLut____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rls_m0.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>lineProcessedRL0A</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rls_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineProcessedRL0A &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
</UL>

<P><STRONG><a name="[33]"></a>lineProcessedRL1A</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, rls_m0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lineProcessedRL1A &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSyncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
</UL>

<P><STRONG><a name="[1]"></a>M0_Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>M0_NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>M0_HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>M0_SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>M0_DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>M0_PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>M0_SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>M0_ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>M0_ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>M0_C_CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>M0_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>M0_ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>M0_EVENTROUTER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>M0_GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>M0_I2C0_OR_I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>M0_I2S0_OR_I2S1_OR_QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>M0_LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>M0_M4CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>M0_MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>M0_RIT_OR_WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>M0_RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>M0_SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>M0_SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>M0_SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>M0_SPI_OR_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>M0_SSP0_OR_SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>M0_TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>M0_TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>M0_USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>M0_USART2_OR_C_CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>M0_USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>M0_USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>M0_USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m0.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>getPC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx_m0.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assembleHelper
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qq_enqueue
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocTable
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocTable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpOpen
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[40]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChirp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assembleHelper
</UL>

<P><STRONG><a name="[60]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupTable
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assembleHelper
</UL>

<P><STRONG><a name="[7b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[7c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3b]"></a>UART_Send</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, lpc43xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>

<P><STRONG><a name="[3c]"></a>UART_SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[3d]"></a>__0printf$bare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[61]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[80]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2d]"></a>callSyncM0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, frame_m0.o(i.callSyncM0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = callSyncM0
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncM0
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM0
</UL>

<P><STRONG><a name="[2f]"></a>callSyncM1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, frame_m0.o(i.callSyncM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncM1
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineProcessedRL1A
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineProcessedRL0A
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R2Merge
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R2
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R1
</UL>

<P><STRONG><a name="[45]"></a>chirpAssemble</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, chirp.o(i.chirpAssemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assembleHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInit
</UL>

<P><STRONG><a name="[5f]"></a>chirpInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i.chirpInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInit
</UL>

<P><STRONG><a name="[46]"></a>chirpOpen</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, chirp.o(i.chirpOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = chirpOpen &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkGetFlags
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkBlockSize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>chirpService</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, chirp.o(i.chirpService))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = chirpService &rArr; handleChirp &rArr; handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChirp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleChirp
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop
</UL>

<P><STRONG><a name="[4e]"></a>chirpSetProc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chirp.o(i.chirpSetProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = chirpSetProc &rArr; updateTable &rArr;  updateTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init
</UL>

<P><STRONG><a name="[50]"></a>exec_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, exec_m0.o(i.exec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = exec_init &rArr; chirpSetProc &rArr; updateTable &rArr;  updateTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpSetProc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>exec_loop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, exec_m0.o(i.exec_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = exec_loop &rArr; chirpService &rArr; handleChirp &rArr; handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpService
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup0
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop0
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>exec_run</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exec_m0.o(i.exec_run))
<BR>[Address Reference Count : 1]<UL><LI> exec_m0.o(i.exec_init)
</UL>
<P><STRONG><a name="[27]"></a>exec_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exec_m0.o(i.exec_running))
<BR>[Address Reference Count : 1]<UL><LI> exec_m0.o(i.exec_init)
</UL>
<P><STRONG><a name="[26]"></a>exec_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec_m0.o(i.exec_stop))
<BR>[Address Reference Count : 1]<UL><LI> exec_m0.o(i.exec_init)
</UL>
<P><STRONG><a name="[24]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = fputc &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[54]"></a>frame_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, frame_m0.o(i.frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = frame_init &rArr; chirpSetProc &rArr; updateTable &rArr;  updateTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpSetProc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocTable
</UL>

<P><STRONG><a name="[28]"></a>getFrame</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, frame_m0.o(i.getFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getFrame &rArr; grabM1R2 &rArr; lineM1R2Merge &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM0R0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame_m0.o(i.frame_init)
</UL>
<P><STRONG><a name="[29]"></a>getRLSFrame</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, rls_m0.o(i.getRLSFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getRLSFrame &rArr; lineProcessedRL1A &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineProcessedRL1A
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineProcessedRL0A
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLines
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qq_free
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qq_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rls_m0.o(i.rls_init)
</UL>
<P><STRONG><a name="[55]"></a>grabM0R0</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, frame_m0.o(i.grabM0R0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = grabM0R0 &rArr; lineM0 &rArr; callSyncM0
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLines
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM0
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFrame
</UL>

<P><STRONG><a name="[56]"></a>grabM1R1</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, frame_m0.o(i.grabM1R1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = grabM1R1 &rArr; lineM1R1 &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLines
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R1
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFrame
</UL>

<P><STRONG><a name="[57]"></a>grabM1R2</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, frame_m0.o(i.grabM1R2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grabM1R2 &rArr; lineM1R2Merge &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLines
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R2Merge
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineM1R2
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFrame
</UL>

<P><STRONG><a name="[48]"></a>linkBlockSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chirp.o(i.linkBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpOpen
</UL>

<P><STRONG><a name="[47]"></a>linkGetFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smlink.o(i.linkGetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpOpen
</UL>

<P><STRONG><a name="[67]"></a>linkReceive</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, smlink.o(i.linkReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFull
</UL>

<P><STRONG><a name="[6a]"></a>linkSend</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, smlink.o(i.linkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = linkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFull
</UL>

<P><STRONG><a name="[53]"></a>loop0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exec_m0.o(i.loop0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = loop0 &rArr; getRLSFrame &rArr; lineProcessedRL1A &rArr; callSyncM1
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main_m0.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; exec_loop &rArr; chirpService &rArr; handleChirp &rArr; handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[49]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocTable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpOpen
</UL>

<P><STRONG><a name="[5a]"></a>qq_enqueue</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, qqueue.o(i.qq_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qq_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qq_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
</UL>

<P><STRONG><a name="[59]"></a>qq_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qqueue.o(i.qq_free))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qq_enqueue
</UL>

<P><STRONG><a name="[62]"></a>rls_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rls_m0.o(i.rls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rls_init &rArr; chirpSetProc &rArr; updateTable &rArr;  updateTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpSetProc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>setup0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exec_m0.o(i.setup0))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loop
</UL>

<P><STRONG><a name="[6b]"></a>skipLine</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, frame_m0.o(i.skipLine))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLines
</UL>

<P><STRONG><a name="[58]"></a>skipLines</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, frame_m0.o(i.skipLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = skipLines
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLine
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM1R1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grabM0R0
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRLSFrame
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f]"></a>assembleHelper</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, chirp.o(i.assembleHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpAssemble
</UL>

<P><STRONG><a name="[4c]"></a>handleChirp</STRONG> (Thumb, 436 bytes, Stack size 72 bytes, chirp.o(i.handleChirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = handleChirp &rArr; handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChirpRetry
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleEnumerate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpService
</UL>

<P><STRONG><a name="[5b]"></a>handleEnumerate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chirp.o(i.handleEnumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handleEnumerate &rArr; lookupTable &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleChirp
</UL>

<P><STRONG><a name="[5c]"></a>handleInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, chirp.o(i.handleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handleInit &rArr; chirpAssemble &rArr; assembleHelper &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpAssemble
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleChirp
</UL>

<P><STRONG><a name="[5e]"></a>lookupTable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chirp.o(i.lookupTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lookupTable &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleEnumerate
</UL>

<P><STRONG><a name="[63]"></a>reallocTable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, chirp.o(i.reallocTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reallocTable &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTable
</UL>

<P><STRONG><a name="[41]"></a>reallocate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chirp.o(i.reallocate))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assembleHelper
</UL>

<P><STRONG><a name="[4d]"></a>recvChirp</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, chirp.o(i.recvChirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = recvChirp &rArr; recvFull &rArr; linkReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFull
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpService
</UL>

<P><STRONG><a name="[66]"></a>recvFull</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, chirp.o(i.recvFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = recvFull &rArr; linkReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChirp
</UL>

<P><STRONG><a name="[68]"></a>sendChirp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chirp.o(i.sendChirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sendChirp &rArr; sendFull &rArr; linkSend
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFull
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChirpRetry
</UL>

<P><STRONG><a name="[5d]"></a>sendChirpRetry</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, chirp.o(i.sendChirpRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sendChirpRetry &rArr; sendChirp &rArr; sendFull &rArr; linkSend
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChirp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleChirp
</UL>

<P><STRONG><a name="[69]"></a>sendFull</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chirp.o(i.sendFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sendFull &rArr; linkSend
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChirp
</UL>

<P><STRONG><a name="[4f]"></a>updateTable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, chirp.o(i.updateTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = updateTable &rArr;  updateTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocTable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chirpSetProc
</UL>

<P><STRONG><a name="[3e]"></a>_printf_core</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
