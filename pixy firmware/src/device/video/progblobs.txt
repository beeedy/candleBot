; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progblobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progblobs.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progblobs.crf progblobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10blobsSetupv PROC ; blobsSetup()
;;;37     
;;;38     int blobsSetup()
000000  b51c              PUSH     {r2-r4,lr}
;;;39     {
;;;40     	uint8_t c;
;;;41     
;;;42     	// setup camera mode
;;;43     	cam_setMode(CAM_MODE1);
000002  2001              MOVS     r0,#1
000004  9001              STR      r0,[sp,#4]
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
;;;44      	
;;;45     #ifdef DA
;;;46     	// load lut if we've grabbed any frames lately
;;;47     	if (g_rawFrame.m_pixels)
;;;48     		cc_loadLut();
;;;49     #endif
;;;50     
;;;51     	// if there have been any parameter changes, we should regenerate the LUT (do it regardless)
;;;52     	g_blobs->m_clut.generateLUT();	
00000c  4882              LDR      r0,|L1.536|
00000e  6800              LDR      r0,[r0,#0]  ; g_blobs
000010  f7fffffe          BL       _ZN8ColorLUT11generateLUTEv ; ColorLUT::generateLUT()
;;;53     			
;;;54     	// setup qqueue and M0
;;;55     	g_qqueue->flush();
000014  4881              LDR      r0,|L1.540|
000016  6800              LDR      r0,[r0,#0]  ; g_qqueue
000018  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;56     	exec_runM0(0);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
;;;57     
;;;58     	// flush serial receive queue
;;;59     	while(ser_getSerial()->receive(&c, 1));
000022  bf00              NOP      
                  |L1.36|
000024  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000028  4604              MOV      r4,r0
00002a  6800              LDR      r0,[r0,#0]
00002c  2201              MOVS     r2,#1
00002e  4669              MOV      r1,sp
000030  6883              LDR      r3,[r0,#8]
000032  4620              MOV      r0,r4
000034  4798              BLX      r3
000036  2800              CMP      r0,#0
000038  d1f4              BNE      |L1.36|
;;;60     
;;;61     	g_state = 0; // reset recv state machine
00003a  4979              LDR      r1,|L1.544|
00003c  7008              STRB     r0,[r1,#0]
;;;62     	return 0;
;;;63     }
00003e  bd1c              POP      {r2-r4,pc}
;;;64     
                          ENDP

                  _Z10handleRecvv PROC ; handleRecv()
;;;65     void handleRecv()
000040  b530              PUSH     {r4,r5,lr}
;;;66     {
000042  b087              SUB      sp,sp,#0x1c
;;;67     	uint8_t i, a;
;;;68     	static uint16_t w=0xffff;
;;;69     	static uint8_t lastByte;
;;;70     	uint16_t s0, s1;
;;;71     	Iserial *serial = ser_getSerial();
000044  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000048  4604              MOV      r4,r0
;;;72     
;;;73     	for (i=0; i<10; i++)
00004a  2500              MOVS     r5,#0
00004c  e097              B        |L1.382|
                  |L1.78|
;;;74     	{
;;;75     		switch(g_state)
00004e  4874              LDR      r0,|L1.544|
000050  7800              LDRB     r0,[r0,#0]  ; g_state
000052  b120              CBZ      r0,|L1.94|
000054  2801              CMP      r0,#1
000056  d009              BEQ      |L1.108|
000058  2802              CMP      r0,#2
00005a  d17d              BNE      |L1.344|
00005c  e021              B        |L1.162|
                  |L1.94|
;;;76     		{	
;;;77     		case 0: // reset 
;;;78     			lastByte = 0xff;  // This is not part of any of the sync word most significant bytes
00005e  20ff              MOVS     r0,#0xff
000060  4970              LDR      r1,|L1.548|
000062  7008              STRB     r0,[r1,#0]
;;;79     			g_state = 1;
000064  2001              MOVS     r0,#1
000066  496e              LDR      r1,|L1.544|
000068  7008              STRB     r0,[r1,#0]
;;;80     		 	break;
00006a  e085              B        |L1.376|
                  |L1.108|
;;;81     
;;;82     		case 1:	// sync word
;;;83     			if(serial->receive(&a, 1))
00006c  6820              LDR      r0,[r4,#0]
00006e  2201              MOVS     r2,#1
000070  a906              ADD      r1,sp,#0x18
000072  6883              LDR      r3,[r0,#8]
000074  4620              MOV      r0,r4
000076  4798              BLX      r3
000078  b190              CBZ      r0,|L1.160|
;;;84     			{
;;;85     				w = lastByte << 8;
00007a  486a              LDR      r0,|L1.548|
00007c  7800              LDRB     r0,[r0,#0]  ; lastByte
00007e  0200              LSLS     r0,r0,#8
000080  4969              LDR      r1,|L1.552|
000082  8008              STRH     r0,[r1,#0]
;;;86     				w |= a;
000084  4608              MOV      r0,r1
000086  8800              LDRH     r0,[r0,#0]  ; w
000088  f89d1018          LDRB     r1,[sp,#0x18]
00008c  4308              ORRS     r0,r0,r1
00008e  4966              LDR      r1,|L1.552|
000090  8008              STRH     r0,[r1,#0]
;;;87     				lastByte = a;
000092  f89d0018          LDRB     r0,[sp,#0x18]
000096  4963              LDR      r1,|L1.548|
000098  7008              STRB     r0,[r1,#0]
;;;88     				g_state = 2;	// compare
00009a  2002              MOVS     r0,#2
00009c  4960              LDR      r1,|L1.544|
00009e  7008              STRB     r0,[r1,#0]
                  |L1.160|
;;;89     			}
;;;90     			break;
0000a0  e06a              B        |L1.376|
                  |L1.162|
;;;91     
;;;92     		case 2:	 // receive data byte(s)
;;;93     			if (w==SYNC_SERVO)
0000a2  4861              LDR      r0,|L1.552|
0000a4  8800              LDRH     r0,[r0,#0]  ; w
0000a6  28ff              CMP      r0,#0xff
0000a8  d121              BNE      |L1.238|
;;;94     			{	// read rest of data
;;;95     				if (serial->receiveLen()>=4)
0000aa  6820              LDR      r0,[r4,#0]
0000ac  68c1              LDR      r1,[r0,#0xc]
0000ae  4620              MOV      r0,r4
0000b0  4788              BLX      r1
0000b2  2804              CMP      r0,#4
0000b4  db5b              BLT      |L1.366|
;;;96     				{
;;;97     					serial->receive((uint8_t *)&s0, 2);
0000b6  6820              LDR      r0,[r4,#0]
0000b8  2202              MOVS     r2,#2
0000ba  a905              ADD      r1,sp,#0x14
0000bc  6883              LDR      r3,[r0,#8]
0000be  4620              MOV      r0,r4
0000c0  4798              BLX      r3
;;;98     					serial->receive((uint8_t *)&s1, 2);
0000c2  6820              LDR      r0,[r4,#0]
0000c4  2202              MOVS     r2,#2
0000c6  a904              ADD      r1,sp,#0x10
0000c8  6883              LDR      r3,[r0,#8]
0000ca  4620              MOV      r0,r4
0000cc  4798              BLX      r3
;;;99     
;;;100    					//cprintf("servo %d %d\n", s0, s1);
;;;101    					rcs_setPos(0, s0);
0000ce  2000              MOVS     r0,#0
0000d0  a905              ADD      r1,sp,#0x14
0000d2  9003              STR      r0,[sp,#0xc]
0000d4  a803              ADD      r0,sp,#0xc
0000d6  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;102    					rcs_setPos(1, s1);
0000da  2001              MOVS     r0,#1
0000dc  a904              ADD      r1,sp,#0x10
0000de  9003              STR      r0,[sp,#0xc]
0000e0  a803              ADD      r0,sp,#0xc
0000e2  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;103    
;;;104    					g_state = 0;
0000e6  2000              MOVS     r0,#0
0000e8  494d              LDR      r1,|L1.544|
0000ea  7008              STRB     r0,[r1,#0]
;;;105    				}
0000ec  e03f              B        |L1.366|
                  |L1.238|
;;;106    			}
;;;107    			else if (w==SYNC_CAM_BRIGHTNESS)
0000ee  484e              LDR      r0,|L1.552|
0000f0  8800              LDRH     r0,[r0,#0]  ; w
0000f2  28fe              CMP      r0,#0xfe
0000f4  d10d              BNE      |L1.274|
;;;108    			{
;;;109    				if(serial->receive(&a, 1))
0000f6  6820              LDR      r0,[r4,#0]
0000f8  2201              MOVS     r2,#1
0000fa  a906              ADD      r1,sp,#0x18
0000fc  6883              LDR      r3,[r0,#8]
0000fe  4620              MOV      r0,r4
000100  4798              BLX      r3
000102  b350              CBZ      r0,|L1.346|
;;;110    				{
;;;111    					cam_setBrightness(a);
000104  a806              ADD      r0,sp,#0x18
000106  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;112    					g_state = 0;
00010a  2000              MOVS     r0,#0
00010c  4944              LDR      r1,|L1.544|
00010e  7008              STRB     r0,[r1,#0]
000110  e02d              B        |L1.366|
                  |L1.274|
;;;113    				}
;;;114    			}
;;;115    			else if (w==SYNC_SET_LED)
000112  4845              LDR      r0,|L1.552|
000114  8800              LDRH     r0,[r0,#0]  ; w
000116  28fd              CMP      r0,#0xfd
000118  d126              BNE      |L1.360|
;;;116    			{
;;;117    				if (serial->receiveLen()>=3)
00011a  6820              LDR      r0,[r4,#0]
00011c  68c1              LDR      r1,[r0,#0xc]
00011e  4620              MOV      r0,r4
000120  4788              BLX      r1
000122  2803              CMP      r0,#3
000124  db23              BLT      |L1.366|
;;;118    				{
;;;119    					uint8_t r, g, b;
;;;120    					serial->receive(&r, 1);
000126  6820              LDR      r0,[r4,#0]
000128  2201              MOVS     r2,#1
00012a  a903              ADD      r1,sp,#0xc
00012c  6883              LDR      r3,[r0,#8]
00012e  4620              MOV      r0,r4
000130  4798              BLX      r3
;;;121    					serial->receive(&g, 1);
000132  6820              LDR      r0,[r4,#0]
000134  2201              MOVS     r2,#1
000136  a902              ADD      r1,sp,#8
000138  6883              LDR      r3,[r0,#8]
00013a  4620              MOV      r0,r4
00013c  4798              BLX      r3
;;;122    					serial->receive(&b, 1);
00013e  6820              LDR      r0,[r4,#0]
000140  2201              MOVS     r2,#1
000142  a901              ADD      r1,sp,#4
000144  6883              LDR      r3,[r0,#8]
000146  4620              MOV      r0,r4
000148  4798              BLX      r3
;;;123    
;;;124    					led_setRGB(r, g, b);
00014a  aa01              ADD      r2,sp,#4
00014c  a902              ADD      r1,sp,#8
00014e  a803              ADD      r0,sp,#0xc
000150  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;125    					//cprintf("%x %x %x\n", r, g ,b);
;;;126    
;;;127    					g_ledSet = true; // it will stay true until the next power cycle
000154  2001              MOVS     r0,#1
000156  e001              B        |L1.348|
                  |L1.344|
000158  e00a              B        |L1.368|
                  |L1.346|
00015a  e008              B        |L1.366|
                  |L1.348|
00015c  4933              LDR      r1,|L1.556|
00015e  7008              STRB     r0,[r1,#0]
;;;128    					g_state = 0;
000160  2000              MOVS     r0,#0
000162  492f              LDR      r1,|L1.544|
000164  7008              STRB     r0,[r1,#0]
;;;129    				}
000166  e002              B        |L1.366|
                  |L1.360|
;;;130    			}
;;;131    			else 
;;;132    				g_state = 1; // try another word, but read only a byte
000168  2001              MOVS     r0,#1
00016a  492d              LDR      r1,|L1.544|
00016c  7008              STRB     r0,[r1,#0]
                  |L1.366|
;;;133    			break;
00016e  e003              B        |L1.376|
                  |L1.368|
;;;134    
;;;135    		default:
;;;136    			g_state = 0; // try another whole word
000170  2000              MOVS     r0,#0
000172  492b              LDR      r1,|L1.544|
000174  7008              STRB     r0,[r1,#0]
;;;137    			break;
000176  bf00              NOP      
                  |L1.376|
000178  bf00              NOP                            ;80
00017a  1c68              ADDS     r0,r5,#1              ;73
00017c  b2c5              UXTB     r5,r0                 ;73
                  |L1.382|
00017e  2d0a              CMP      r5,#0xa               ;73
000180  f6ffaf65          BLT      |L1.78|
;;;138    		}
;;;139    	}
;;;140    }
000184  b007              ADD      sp,sp,#0x1c
000186  bd30              POP      {r4,r5,pc}
;;;141    
                          ENDP

                  _Z9blobsLoopv PROC ; blobsLoop()
;;;142    
;;;143    int blobsLoop()
000188  b510              PUSH     {r4,lr}
;;;144    {
00018a  b086              SUB      sp,sp,#0x18
;;;145    #if 1
;;;146    	BlobA *blobs;
;;;147    	BlobB *ccBlobs;
;;;148    	uint32_t numBlobs, numCCBlobs;
;;;149    	static uint32_t drop = 0;
;;;150    
;;;151    	// create blobs
;;;152    	if (g_blobs->blobify()<0)
00018c  4822              LDR      r0,|L1.536|
00018e  6800              LDR      r0,[r0,#0]  ; g_blobs
000190  f7fffffe          BL       _ZN5Blobs7blobifyEv ; Blobs::blobify()
000194  2800              CMP      r0,#0
000196  da0e              BGE      |L1.438|
;;;153    	{
;;;154    		DBG("drop %d\n", drop++);
000198  4825              LDR      r0,|L1.560|
00019a  7800              LDRB     r0,[r0,#0]  ; g_debug
00019c  b140              CBZ      r0,|L1.432|
00019e  4825              LDR      r0,|L1.564|
0001a0  6801              LDR      r1,[r0,#0]  ; drop
0001a2  6800              LDR      r0,[r0,#0]  ; drop
0001a4  1c40              ADDS     r0,r0,#1
0001a6  4b23              LDR      r3,|L1.564|
0001a8  6018              STR      r0,[r3,#0]  ; drop
0001aa  a023              ADR      r0,|L1.568|
0001ac  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
                  |L1.432|
;;;155    		return 0;
0001b0  2000              MOVS     r0,#0
                  |L1.434|
;;;156    	}
;;;157    	// handle received data immediately
;;;158    	handleRecv();
;;;159    
;;;160    	// send blobs
;;;161    	g_blobs->getBlobs(&blobs, &numBlobs, &ccBlobs, &numCCBlobs);
;;;162    	cc_sendBlobs(g_chirpUsb, blobs, numBlobs, ccBlobs, numCCBlobs);
;;;163    
;;;164    	ser_getSerial()->update();
;;;165    
;;;166    	// if user isn't controlling LED, set it here, according to biggest detected object
;;;167    	if (!g_ledSet)
;;;168    		cc_setLED();
;;;169    	
;;;170    	// deal with any latent received data until the next frame comes in
;;;171    	while(!g_qqueue->queued())
;;;172    		handleRecv();
;;;173    
;;;174    #endif
;;;175    #if 0
;;;176    	Qval qval;
;;;177    	static int i = 0;
;;;178    	while(1)
;;;179    	{
;;;180    		if (g_qqueue->dequeue(&qval) && qval.m_col==0xffff)
;;;181    		{
;;;182    			cprintf("%d\n", i++);
;;;183    			break;
;;;184    		}	
;;;185    	}
;;;186    #endif
;;;187    #if 0
;;;188    	BlobA *blobs;
;;;189    	BlobB *ccBlobs;
;;;190    	uint32_t numBlobs, numCCBlobs;
;;;191    	static uint32_t drop = 0;
;;;192    
;;;193    	// create blobs
;;;194    	if (g_blobs->blobify()<0)
;;;195    	{
;;;196    		DBG("drop %d\n", drop++);
;;;197    		return 0;
;;;198    	}
;;;199    	g_blobs->getBlobs(&blobs, &numBlobs, &ccBlobs, &numCCBlobs);
;;;200    	cc_sendBlobs(g_chirpUsb, blobs, numBlobs, ccBlobs, numCCBlobs);
;;;201    
;;;202    #endif
;;;203    
;;;204    	return 0;
;;;205    }
0001b2  b006              ADD      sp,sp,#0x18
0001b4  bd10              POP      {r4,pc}
                  |L1.438|
0001b6  f7fffffe          BL       _Z10handleRecvv ; handleRecv()
0001ba  a802              ADD      r0,sp,#8              ;161
0001bc  ab04              ADD      r3,sp,#0x10           ;161
0001be  aa03              ADD      r2,sp,#0xc            ;161
0001c0  a905              ADD      r1,sp,#0x14           ;161
0001c2  9000              STR      r0,[sp,#0]            ;161
0001c4  4814              LDR      r0,|L1.536|
0001c6  6800              LDR      r0,[r0,#0]            ;161  ; g_blobs
0001c8  f7fffffe          BL       _ZN5Blobs8getBlobsEPP5BlobAPjPP5BlobBS3_ ; Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
0001cc  2001              MOVS     r0,#1                 ;162
0001ce  9902              LDR      r1,[sp,#8]            ;162
0001d0  e9cd1000          STRD     r1,r0,[sp,#0]         ;162
0001d4  481b              LDR      r0,|L1.580|
0001d6  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;162
0001da  9905              LDR      r1,[sp,#0x14]         ;162
0001dc  6800              LDR      r0,[r0,#0]            ;162  ; g_chirpUsb
0001de  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpPK5BlobAjPK5BlobBjh ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
0001e2  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
0001e6  4604              MOV      r4,r0                 ;164
0001e8  6800              LDR      r0,[r0,#0]            ;164
0001ea  6901              LDR      r1,[r0,#0x10]         ;164
0001ec  4620              MOV      r0,r4                 ;164
0001ee  4788              BLX      r1                    ;164
0001f0  480e              LDR      r0,|L1.556|
0001f2  7800              LDRB     r0,[r0,#0]            ;167  ; g_ledSet
0001f4  b908              CBNZ     r0,|L1.506|
0001f6  f7fffffe          BL       _Z9cc_setLEDv ; cc_setLED()
                  |L1.506|
0001fa  e001              B        |L1.512|
                  |L1.508|
0001fc  f7fffffe          BL       _Z10handleRecvv ; handleRecv()
                  |L1.512|
000200  4906              LDR      r1,|L1.540|
000202  6808              LDR      r0,[r1,#0]            ;171  ; g_qqueue
000204  6801              LDR      r1,[r0,#0]            ;171
000206  8889              LDRH     r1,[r1,#4]            ;171
000208  6802              LDR      r2,[r0,#0]            ;171
00020a  88d2              LDRH     r2,[r2,#6]            ;171
00020c  1a89              SUBS     r1,r1,r2              ;171
00020e  2900              CMP      r1,#0                 ;171
000210  d0f4              BEQ      |L1.508|
000212  2000              MOVS     r0,#0                 ;204
000214  e7cd              B        |L1.434|
                          ENDP

000216  0000              DCW      0x0000
                  |L1.536|
                          DCD      g_blobs
                  |L1.540|
                          DCD      g_qqueue
                  |L1.544|
                          DCD      g_state
                  |L1.548|
                          DCD      lastByte
                  |L1.552|
                          DCD      w
                  |L1.556|
                          DCD      g_ledSet
                  |L1.560|
                          DCD      g_debug
                  |L1.564|
                          DCD      drop
                  |L1.568|
000238  64726f70          DCB      "drop %d\n",0
00023c  2025640a
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L1.580|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  626c6f62          DCB      "blobs",0
000004  7300    
000006  00                DCB      0
000007  00                DCB      0
000008  70657266          DCB      "perform color blob analysis",0
00000c  6f726d20
000010  636f6c6f
000014  7220626c
000018  6f622061
00001c  6e616c79
000020  73697300

                          AREA ||.data||, DATA, ALIGN=2

                  g_ledSet
000000  00                DCB      0x00
                  g_state
000001  000000            DCB      0x00,0x00,0x00
                  g_progBlobs
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z10blobsSetupv ; blobsSetup()
                          DCD      _Z9blobsLoopv ; blobsLoop()
                  w
000014  ffff              DCW      0xffff
                  lastByte
000016  0000              DCB      0x00,0x00
                  drop
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "progblobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_g_ledSet___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___13_progblobs_cpp_g_ledSet___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_g_ledSet___Z7__REVSHi|
#line 144
|__asm___13_progblobs_cpp_g_ledSet___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
