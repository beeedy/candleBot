; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\blobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\blobs.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\blobs.crf ..\..\common\blobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN5BlobsC2EP6QqueuePh                  ; Alternate entry point ; Blobs::Blobs__sub_object(Qqueue*, unsigned char*)
                  _ZN5BlobsC1EP6QqueuePh PROC ; Blobs::Blobs(Qqueue*, unsigned char*)
;;;25     
;;;26     Blobs::Blobs(Qqueue *qq, uint8_t *lut) : m_clut(lut)
;;;27     {
;;;28         int i;
;;;29     
;;;30         m_mutex = false;
;;;31         m_minArea = MIN_AREA;
;;;32         m_maxBlobs = MAX_BLOBS;
;;;33         m_maxBlobsPerModel = MAX_BLOBS_PER_MODEL;
;;;34         m_mergeDist = MAX_MERGE_DIST;
;;;35         m_maxBlob = NULL;
;;;36     
;;;37     	m_qq = qq;
;;;38     #ifdef PIXY
;;;39         m_maxCodedDist = MAX_CODED_DIST;
;;;40     #else
;;;41         m_maxCodedDist = MAX_CODED_DIST/2;
;;;42         m_qvals = new uint32_t[0x8000];
;;;43     #endif
;;;44         m_ccMode = DISABLED;
;;;45     
;;;46         m_blobs = new uint16_t[MAX_BLOBS*5];
;;;47         m_numBlobs = 0;
;;;48         m_blobReadIndex = 0;
;;;49         m_ccBlobReadIndex = 0;
;;;50     
;;;51         // reset blob assemblers
;;;52         for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;53             m_assembler[i].Reset();
;;;54     }
;;;55     
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4639              MOV      r1,r7
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN8ColorLUTC1EPh ; ColorLUT::ColorLUT(unsigned char*)
000012  4604              MOV      r4,r0
000014  2307              MOVS     r3,#7
000016  221c              MOVS     r2,#0x1c
000018  49fe              LDR      r1,|L1.1044|
00001a  f50470d2          ADD      r0,r4,#0x1a4
00001e  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000022  f5a074d2          SUB      r4,r0,#0x1a4
000026  2000              MOVS     r0,#0
000028  f5047416          ADD      r4,r4,#0x258
00002c  77a0              STRB     r0,[r4,#0x1e]
00002e  2014              MOVS     r0,#0x14
000030  62a0              STR      r0,[r4,#0x28]
000032  2064              MOVS     r0,#0x64
000034  8420              STRH     r0,[r4,#0x20]
000036  2014              MOVS     r0,#0x14
000038  8460              STRH     r0,[r4,#0x22]
00003a  2005              MOVS     r0,#5
00003c  85a0              STRH     r0,[r4,#0x2c]
00003e  2000              MOVS     r0,#0
000040  6360              STR      r0,[r4,#0x34]
000042  f8446cb8          STR      r6,[r4,#-0xb8]
000046  2006              MOVS     r0,#6
000048  85e0              STRH     r0,[r4,#0x2e]
00004a  2000              MOVS     r0,#0
00004c  f8840030          STRB     r0,[r4,#0x30]
000050  f44f707a          MOV      r0,#0x3e8
000054  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
000058  6120              STR      r0,[r4,#0x10]
00005a  2000              MOVS     r0,#0
00005c  82a0              STRH     r0,[r4,#0x14]
00005e  84a0              STRH     r0,[r4,#0x24]
000060  84e0              STRH     r0,[r4,#0x26]
000062  f5a47416          SUB      r4,r4,#0x258
000066  2500              MOVS     r5,#0
000068  e008              B        |L1.124|
                  |L1.106|
00006a  ebc502c5          RSB      r2,r5,r5,LSL #3
00006e  f50471d2          ADD      r1,r4,#0x1a4
000072  eb010082          ADD      r0,r1,r2,LSL #2
000076  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
00007a  1c6d              ADDS     r5,r5,#1
                  |L1.124|
00007c  2d07              CMP      r5,#7
00007e  dbf4              BLT      |L1.106|
000080  4620              MOV      r0,r4
000082  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _ZN5BlobsD2Ev                  ; Alternate entry point ; Blobs::~Blobs__sub_object()
                  _ZN5BlobsD1Ev PROC ; Blobs::~Blobs()
;;;69     
;;;70     Blobs::~Blobs()
;;;71     {
;;;72         delete [] m_blobs;
;;;73     #ifndef PIXY
;;;74         delete [] m_qvals;
;;;75     #endif
;;;76     }
;;;77     
000086  b510              PUSH     {r4,lr}
000088  4604              MOV      r4,r0
00008a  f8d40268          LDR      r0,[r4,#0x268]
00008e  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000092  2307              MOVS     r3,#7
000094  221c              MOVS     r2,#0x1c
000096  49e0              LDR      r1,|L1.1048|
000098  f50470d2          ADD      r0,r4,#0x1a4
00009c  f7fffffe          BL       __aeabi_vec_dtor
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       _ZN8ColorLUTD1Ev ; ColorLUT::~ColorLUT()
0000a6  4604              MOV      r4,r0
0000a8  4620              MOV      r0,r4
0000aa  bd10              POP      {r4,pc}
                          ENDP

                  _ZN5Blobs8compressEPtt PROC ; Blobs::compress(unsigned short*, unsigned short)
;;;483    
;;;484    uint16_t Blobs::compress(uint16_t *blobs, uint16_t numBlobs)
0000ac  b5f0              PUSH     {r4-r7,lr}
;;;485    {
0000ae  4606              MOV      r6,r0
0000b0  460b              MOV      r3,r1
0000b2  4614              MOV      r4,r2
;;;486        uint16_t i, ii;
;;;487        uint16_t *destination, invalid;
;;;488    
;;;489        // compress list
;;;490        for (i=0, ii=0, destination=NULL, invalid=0; i<numBlobs; i++, ii+=5)
0000b4  2500              MOVS     r5,#0
0000b6  2100              MOVS     r1,#0
0000b8  2200              MOVS     r2,#0
0000ba  2000              MOVS     r0,#0
0000bc  e022              B        |L1.260|
                  |L1.190|
;;;491        {
;;;492            if (blobs[ii+0]==0)
0000be  f8337011          LDRH     r7,[r3,r1,LSL #1]
0000c2  b92f              CBNZ     r7,|L1.208|
;;;493            {
;;;494                if (destination==NULL)
0000c4  b90a              CBNZ     r2,|L1.202|
;;;495                    destination = blobs+ii;
0000c6  eb030241          ADD      r2,r3,r1,LSL #1
                  |L1.202|
;;;496                invalid++;
0000ca  1c47              ADDS     r7,r0,#1
0000cc  b2b8              UXTH     r0,r7
;;;497                continue;
0000ce  e015              B        |L1.252|
                  |L1.208|
;;;498            }
;;;499            if (destination)
0000d0  b19a              CBZ      r2,|L1.250|
;;;500            {
;;;501                destination[0] = blobs[ii+0];
0000d2  f8337011          LDRH     r7,[r3,r1,LSL #1]
0000d6  8017              STRH     r7,[r2,#0]
;;;502                destination[1] = blobs[ii+1];
0000d8  1c4f              ADDS     r7,r1,#1
0000da  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000de  8057              STRH     r7,[r2,#2]
;;;503                destination[2] = blobs[ii+2];
0000e0  1c8f              ADDS     r7,r1,#2
0000e2  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000e6  8097              STRH     r7,[r2,#4]
;;;504                destination[3] = blobs[ii+3];
0000e8  1ccf              ADDS     r7,r1,#3
0000ea  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000ee  80d7              STRH     r7,[r2,#6]
;;;505                destination[4] = blobs[ii+4];
0000f0  1d0f              ADDS     r7,r1,#4
0000f2  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000f6  8117              STRH     r7,[r2,#8]
;;;506                destination += 5;
0000f8  320a              ADDS     r2,r2,#0xa
                  |L1.250|
0000fa  bf00              NOP                            ;497
                  |L1.252|
0000fc  1c6f              ADDS     r7,r5,#1              ;490
0000fe  b2bd              UXTH     r5,r7                 ;490
000100  1d4f              ADDS     r7,r1,#5              ;490
000102  b2b9              UXTH     r1,r7                 ;490
                  |L1.260|
000104  42a5              CMP      r5,r4                 ;490
000106  dbda              BLT      |L1.190|
;;;507            }
;;;508        }
;;;509        return invalid;
;;;510    }
000108  bdf0              POP      {r4-r7,pc}
;;;511    
                          ENDP

                  _ZN5Blobs5angleEP5BlobAS1_ PROC ; Blobs::angle(BlobA*, BlobA*)
;;;698    
;;;699    int16_t Blobs::angle(BlobA *blob0, BlobA *blob1)
00010a  e92d4ffe          PUSH     {r1-r11,lr}
;;;700    {
00010e  460c              MOV      r4,r1
000110  4615              MOV      r5,r2
;;;701        int acx, acy, bcx, bcy;
;;;702        float res;
;;;703    
;;;704        acx = (blob0->m_right + blob0->m_left)/2;
000112  88a1              LDRH     r1,[r4,#4]
000114  8862              LDRH     r2,[r4,#2]
000116  1888              ADDS     r0,r1,r2
000118  eb0071d0          ADD      r1,r0,r0,LSR #31
00011c  104e              ASRS     r6,r1,#1
;;;705        acy = (blob0->m_bottom + blob0->m_top)/2;
00011e  8921              LDRH     r1,[r4,#8]
000120  88e2              LDRH     r2,[r4,#6]
000122  1888              ADDS     r0,r1,r2
000124  eb0071d0          ADD      r1,r0,r0,LSR #31
000128  104f              ASRS     r7,r1,#1
;;;706        bcx = (blob1->m_right + blob1->m_left)/2;
00012a  88a9              LDRH     r1,[r5,#4]
00012c  886a              LDRH     r2,[r5,#2]
00012e  1888              ADDS     r0,r1,r2
000130  eb0071d0          ADD      r1,r0,r0,LSR #31
000134  ea4f0861          ASR      r8,r1,#1
;;;707        bcy = (blob1->m_bottom + blob1->m_top)/2;
000138  8929              LDRH     r1,[r5,#8]
00013a  88ea              LDRH     r2,[r5,#6]
00013c  1888              ADDS     r0,r1,r2
00013e  eb0071d0          ADD      r1,r0,r0,LSR #31
000142  ea4f0961          ASR      r9,r1,#1
;;;708    
;;;709        res = atan2((float)(acy-bcy), (float)(bcx-acx))*180/3.1415f;
000146  eba70009          SUB      r0,r7,r9
00014a  f7fffffe          BL       __aeabi_i2f
00014e  9000              STR      r0,[sp,#0]
000150  eba80006          SUB      r0,r8,r6
000154  f7fffffe          BL       __aeabi_i2f
000158  9001              STR      r0,[sp,#4]
00015a  e9dd0100          LDRD     r0,r1,[sp,#0]
00015e  f7fffffe          BL       atan2f
000162  4683              MOV      r11,r0
000164  49ad              LDR      r1,|L1.1052|
000166  f7fffffe          BL       __aeabi_fmul
00016a  49ad              LDR      r1,|L1.1056|
00016c  9002              STR      r0,[sp,#8]
00016e  f7fffffe          BL       __aeabi_fdiv
000172  4682              MOV      r10,r0
;;;710    
;;;711        return (int16_t)res;
000174  4650              MOV      r0,r10
000176  f7fffffe          BL       __aeabi_f2iz
00017a  b200              SXTH     r0,r0
;;;712    }
00017c  e8bd8ffe          POP      {r1-r11,pc}
;;;713    
                          ENDP

                  _ZN5Blobs8cleanup2EPP5BlobAPs PROC ; Blobs::cleanup2(BlobA**, short*)
;;;841    // eliminate duplicate and adjacent signatures
;;;842    void Blobs::cleanup2(BlobA *blobs[], int16_t *numBlobs)
000180  e92d41f0          PUSH     {r4-r8,lr}
;;;843    {
000184  b08a              SUB      sp,sp,#0x28
000186  4606              MOV      r6,r0
;;;844        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;845        int i, j;
;;;846        uint16_t numNewBlobs;
;;;847        bool set;
;;;848    
;;;849        for (i=0, numNewBlobs=0, set=false; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i=j)
000188  2000              MOVS     r0,#0
00018a  2400              MOVS     r4,#0
00018c  2500              MOVS     r5,#0
00018e  e021              B        |L1.468|
                  |L1.400|
;;;850        {
;;;851            newBlobs[numNewBlobs++] = blobs[i];
000190  f8518020          LDR      r8,[r1,r0,LSL #2]
000194  4627              MOV      r7,r4
000196  f1040c01          ADD      r12,r4,#1
00019a  fa1ff48c          UXTH     r4,r12
00019e  f84d8027          STR      r8,[sp,r7,LSL #2]
;;;852            for (j=i+1; j<*numBlobs; j++)
0001a2  1c43              ADDS     r3,r0,#1
0001a4  e010              B        |L1.456|
                  |L1.422|
;;;853            {
;;;854                if ((blobs[j]->m_model&0x07)==(blobs[i]->m_model&0x07))
0001a6  f8517023          LDR      r7,[r1,r3,LSL #2]
0001aa  783f              LDRB     r7,[r7,#0]
0001ac  f0070707          AND      r7,r7,#7
0001b0  f851c020          LDR      r12,[r1,r0,LSL #2]
0001b4  f89cc000          LDRB     r12,[r12,#0]
0001b8  f00c0c07          AND      r12,r12,#7
0001bc  4567              CMP      r7,r12
0001be  d101              BNE      |L1.452|
;;;855                    set = true;
0001c0  2501              MOVS     r5,#1
0001c2  e000              B        |L1.454|
                  |L1.452|
;;;856                else
;;;857                    break;
0001c4  e004              B        |L1.464|
                  |L1.454|
0001c6  1c5b              ADDS     r3,r3,#1              ;852
                  |L1.456|
0001c8  f9b27000          LDRSH    r7,[r2,#0]            ;852
0001cc  429f              CMP      r7,r3                 ;852
0001ce  dcea              BGT      |L1.422|
                  |L1.464|
0001d0  bf00              NOP      
0001d2  4618              MOV      r0,r3                 ;849
                  |L1.468|
0001d4  f9b27000          LDRSH    r7,[r2,#0]            ;849
0001d8  4287              CMP      r7,r0                 ;849
0001da  dd01              BLE      |L1.480|
0001dc  2c0a              CMP      r4,#0xa               ;849
0001de  dbd7              BLT      |L1.400|
                  |L1.480|
;;;858            }
;;;859        }
;;;860        if (set)
0001e0  b155              CBZ      r5,|L1.504|
;;;861        {
;;;862            // copy new blobs over
;;;863            for (i=0; i<numNewBlobs; i++)
0001e2  2000              MOVS     r0,#0
0001e4  e004              B        |L1.496|
                  |L1.486|
;;;864                blobs[i] = newBlobs[i];
0001e6  f85d7020          LDR      r7,[sp,r0,LSL #2]
0001ea  f8417020          STR      r7,[r1,r0,LSL #2]
0001ee  1c40              ADDS     r0,r0,#1              ;863
                  |L1.496|
0001f0  42a0              CMP      r0,r4                 ;863
0001f2  dbf8              BLT      |L1.486|
;;;865            *numBlobs = numNewBlobs;
0001f4  b227              SXTH     r7,r4
0001f6  8017              STRH     r7,[r2,#0]
                  |L1.504|
;;;866        }
;;;867    }
0001f8  b00a              ADD      sp,sp,#0x28
0001fa  e8bd81f0          POP      {r4-r8,pc}
;;;868    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_b PROC ; Blobs::distance(BlobA*, BlobA*, bool)
;;;683    
;;;684    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1, bool horiz)
0001fe  e92d41f0          PUSH     {r4-r8,lr}
;;;685    {
000202  4606              MOV      r6,r0
000204  461c              MOV      r4,r3
;;;686        int16_t dist;
;;;687    
;;;688        if (horiz)
000206  b19c              CBZ      r4,|L1.560|
;;;689            dist = (blob0->m_right+blob0->m_left)/2 - (blob1->m_right+blob1->m_left)/2;
000208  888f              LDRH     r7,[r1,#4]
00020a  f8b1c002          LDRH     r12,[r1,#2]
00020e  eb07050c          ADD      r5,r7,r12
000212  eb0577d5          ADD      r7,r5,r5,LSR #31
000216  107f              ASRS     r7,r7,#1
000218  f8b2c004          LDRH     r12,[r2,#4]
00021c  f8b28002          LDRH     r8,[r2,#2]
000220  eb0c0008          ADD      r0,r12,r8
000224  eb007cd0          ADD      r12,r0,r0,LSR #31
000228  eba7076c          SUB      r7,r7,r12,ASR #1
00022c  b23b              SXTH     r3,r7
00022e  e012              B        |L1.598|
                  |L1.560|
;;;690        else
;;;691            dist = (blob0->m_bottom+blob0->m_top)/2 - (blob1->m_bottom+blob1->m_top)/2;
000230  890f              LDRH     r7,[r1,#8]
000232  f8b1c006          LDRH     r12,[r1,#6]
000236  eb07050c          ADD      r5,r7,r12
00023a  eb0577d5          ADD      r7,r5,r5,LSR #31
00023e  107f              ASRS     r7,r7,#1
000240  f8b2c008          LDRH     r12,[r2,#8]
000244  f8b28006          LDRH     r8,[r2,#6]
000248  eb0c0008          ADD      r0,r12,r8
00024c  eb007cd0          ADD      r12,r0,r0,LSR #31
000250  eba7076c          SUB      r7,r7,r12,ASR #1
000254  b23b              SXTH     r3,r7
                  |L1.598|
;;;692    
;;;693        if (dist<0)
000256  2b00              CMP      r3,#0
000258  da03              BGE      |L1.610|
;;;694            return -dist;
00025a  4258              RSBS     r0,r3,#0
00025c  b200              SXTH     r0,r0
                  |L1.606|
;;;695        else
;;;696            return dist;
;;;697    }
00025e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.610|
000262  4618              MOV      r0,r3                 ;696
000264  e7fb              B        |L1.606|
;;;698    
                          ENDP

                  _ZN5Blobs4sortEPP5BlobAtS1_b PROC ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
;;;713    
;;;714    void Blobs::sort(BlobA *blobs[], uint16_t len, BlobA *firstBlob, bool horiz)
000266  e92d4ff0          PUSH     {r4-r11,lr}
;;;715    {
00026a  b085              SUB      sp,sp,#0x14
00026c  4682              MOV      r10,r0
00026e  460d              MOV      r5,r1
000270  4616              MOV      r6,r2
000272  461f              MOV      r7,r3
;;;716        uint16_t i, td, distances[MAX_COLOR_CODE_MODELS*2];
;;;717        bool done;
;;;718        BlobA *tb;
;;;719    
;;;720        // create list of distances
;;;721        for (i=0; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
000274  2400              MOVS     r4,#0
000276  e00b              B        |L1.656|
                  |L1.632|
;;;722            distances[i] = distance(firstBlob, blobs[i], horiz);
000278  f8552024          LDR      r2,[r5,r4,LSL #2]
00027c  4639              MOV      r1,r7
00027e  4650              MOV      r0,r10
000280  9b0e              LDR      r3,[sp,#0x38]
000282  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_b ; Blobs::distance(BlobA*, BlobA*, bool)
000286  b280              UXTH     r0,r0
000288  f82d0014          STRH     r0,[sp,r4,LSL #1]
00028c  1c60              ADDS     r0,r4,#1              ;721
00028e  b284              UXTH     r4,r0                 ;721
                  |L1.656|
000290  42b4              CMP      r4,r6                 ;721
000292  da01              BGE      |L1.664|
000294  2c0a              CMP      r4,#0xa               ;721
000296  dbef              BLT      |L1.632|
                  |L1.664|
;;;723    
;;;724        // sort -- note, we only have 5 maximum to sort, so no worries about efficiency
;;;725        while(1)
000298  e028              B        |L1.748|
                  |L1.666|
;;;726        {
;;;727            for (i=1, done=true; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
00029a  2401              MOVS     r4,#1
00029c  46a3              MOV      r11,r4
00029e  e01d              B        |L1.732|
                  |L1.672|
;;;728            {
;;;729                if (distances[i-1]>distances[i])
0002a0  1e60              SUBS     r0,r4,#1
0002a2  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0002a6  f83d1014          LDRH     r1,[sp,r4,LSL #1]
0002aa  4288              CMP      r0,r1
0002ac  dd14              BLE      |L1.728|
;;;730                {
;;;731                    // swap distances
;;;732                    td = distances[i];
0002ae  f83d8014          LDRH     r8,[sp,r4,LSL #1]
;;;733                    distances[i] = distances[i-1];
0002b2  1e60              SUBS     r0,r4,#1
0002b4  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0002b8  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;734                    distances[i-1] = td;
0002bc  1e60              SUBS     r0,r4,#1
0002be  f82d8010          STRH     r8,[sp,r0,LSL #1]
;;;735                    // swap blobs
;;;736                    tb = blobs[i];
0002c2  f8559024          LDR      r9,[r5,r4,LSL #2]
;;;737                    blobs[i] = blobs[i-1];
0002c6  f8550020          LDR      r0,[r5,r0,LSL #2]
0002ca  f8450024          STR      r0,[r5,r4,LSL #2]
;;;738                    blobs[i-1] = tb;
0002ce  1e60              SUBS     r0,r4,#1
0002d0  f8459020          STR      r9,[r5,r0,LSL #2]
;;;739    
;;;740                    done = false;
0002d4  f04f0b00          MOV      r11,#0
                  |L1.728|
0002d8  1c60              ADDS     r0,r4,#1              ;727
0002da  b284              UXTH     r4,r0                 ;727
                  |L1.732|
0002dc  42b4              CMP      r4,r6                 ;727
0002de  da01              BGE      |L1.740|
0002e0  2c0a              CMP      r4,#0xa               ;727
0002e2  dbdd              BLT      |L1.672|
                  |L1.740|
;;;741                }
;;;742            }
;;;743            if (done)
0002e4  f1bb0f00          CMP      r11,#0
0002e8  d000              BEQ      |L1.748|
;;;744                break;
0002ea  e000              B        |L1.750|
                  |L1.748|
0002ec  e7d5              B        |L1.666|
                  |L1.750|
0002ee  bf00              NOP      
;;;745        }
;;;746    }
0002f0  b005              ADD      sp,sp,#0x14
0002f2  e8bd8ff0          POP      {r4-r11,pc}
;;;747    
                          ENDP

                  _ZN5Blobs7cleanupEPP5BlobAPs PROC ; Blobs::cleanup(BlobA**, short*)
;;;787    // impose weak size constraint
;;;788    void Blobs::cleanup(BlobA *blobs[], int16_t *numBlobs)
0002f6  e92d4ff0          PUSH     {r4-r11,lr}
;;;789    {
0002fa  b08c              SUB      sp,sp,#0x30
0002fc  4614              MOV      r4,r2
;;;790        int i, j;
;;;791        bool set;
;;;792        uint16_t maxEqual, numEqual, numNewBlobs;
;;;793        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;794        uint32_t area0, area1, lowerArea, upperArea, maxEqualArea;
;;;795    
;;;796        for (i=0, maxEqual=0, set=false; i<*numBlobs; i++)
0002fe  2000              MOVS     r0,#0
000300  4682              MOV      r10,r0
000302  f8cda028          STR      r10,[sp,#0x28]
000306  f8cda02c          STR      r10,[sp,#0x2c]
00030a  e05c              B        |L1.966|
                  |L1.780|
;;;797        {
;;;798            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
00030c  f851a020          LDR      r10,[r1,r0,LSL #2]
000310  f8baa004          LDRH     r10,[r10,#4]
000314  f851b020          LDR      r11,[r1,r0,LSL #2]
000318  f8bbb002          LDRH     r11,[r11,#2]
00031c  ebaa0a0b          SUB      r10,r10,r11
000320  f851b020          LDR      r11,[r1,r0,LSL #2]
000324  f8bbb008          LDRH     r11,[r11,#8]
000328  f851e020          LDR      lr,[r1,r0,LSL #2]
00032c  f8bee006          LDRH     lr,[lr,#6]
000330  ebab0b0e          SUB      r11,r11,lr
000334  fb0af20b          MUL      r2,r10,r11
;;;799            lowerArea = (area0*100)/(100+TOL);
000338  f04f0a64          MOV      r10,#0x64
00033c  fb02fa0a          MUL      r10,r2,r10
000340  f44f7bfa          MOV      r11,#0x1f4
000344  fbbaf7fb          UDIV     r7,r10,r11
;;;800            upperArea = area0 + (area0*TOL)/100;
000348  f44f7ac8          MOV      r10,#0x190
00034c  fb02fa0a          MUL      r10,r2,r10
000350  f04f0b64          MOV      r11,#0x64
000354  fbbafafb          UDIV     r10,r10,r11
000358  eb0a0c02          ADD      r12,r10,r2
;;;801    
;;;802            for (j=0, numEqual=0; j<*numBlobs; j++)
00035c  2300              MOVS     r3,#0
00035e  2600              MOVS     r6,#0
000360  e022              B        |L1.936|
                  |L1.866|
;;;803            {
;;;804                if (i==j)
000362  4298              CMP      r0,r3
000364  d100              BNE      |L1.872|
;;;805                    continue;
000366  e01e              B        |L1.934|
                  |L1.872|
;;;806                area1 = (blobs[j]->m_right-blobs[j]->m_left) * (blobs[j]->m_bottom-blobs[j]->m_top);
000368  f851a023          LDR      r10,[r1,r3,LSL #2]
00036c  f8baa004          LDRH     r10,[r10,#4]
000370  f851b023          LDR      r11,[r1,r3,LSL #2]
000374  f8bbb002          LDRH     r11,[r11,#2]
000378  ebaa0a0b          SUB      r10,r10,r11
00037c  f851b023          LDR      r11,[r1,r3,LSL #2]
000380  f8bbb008          LDRH     r11,[r11,#8]
000384  f851e023          LDR      lr,[r1,r3,LSL #2]
000388  f8bee006          LDRH     lr,[lr,#6]
00038c  ebab0b0e          SUB      r11,r11,lr
000390  fb0af80b          MUL      r8,r10,r11
;;;807                if (lowerArea<=area1 && area1<=upperArea)
000394  4547              CMP      r7,r8
000396  d805              BHI      |L1.932|
000398  45e0              CMP      r8,r12
00039a  d803              BHI      |L1.932|
;;;808                    numEqual++;
00039c  f1060a01          ADD      r10,r6,#1
0003a0  fa1ff68a          UXTH     r6,r10
                  |L1.932|
0003a4  bf00              NOP                            ;805
                  |L1.934|
0003a6  1c5b              ADDS     r3,r3,#1              ;802
                  |L1.936|
0003a8  f9b4a000          LDRSH    r10,[r4,#0]           ;802
0003ac  459a              CMP      r10,r3                ;802
0003ae  dcd8              BGT      |L1.866|
;;;809            }
;;;810            if (numEqual>maxEqual)
0003b0  f8dda028          LDR      r10,[sp,#0x28]
0003b4  4556              CMP      r6,r10
0003b6  dd05              BLE      |L1.964|
;;;811            {
;;;812                maxEqual = numEqual;
0003b8  960a              STR      r6,[sp,#0x28]
;;;813                maxEqualArea = area0;
0003ba  4691              MOV      r9,r2
;;;814                set = true;
0003bc  f04f0a01          MOV      r10,#1
0003c0  f8cda02c          STR      r10,[sp,#0x2c]
                  |L1.964|
0003c4  1c40              ADDS     r0,r0,#1              ;796
                  |L1.966|
0003c6  f9b4a000          LDRSH    r10,[r4,#0]           ;796
0003ca  4582              CMP      r10,r0                ;796
0003cc  dc9e              BGT      |L1.780|
;;;815            }
;;;816        }
;;;817    
;;;818        if (!set)
0003ce  f8dda02c          LDR      r10,[sp,#0x2c]
0003d2  f1ba0f00          CMP      r10,#0
0003d6  d103              BNE      |L1.992|
;;;819            *numBlobs = 0;
0003d8  f04f0a00          MOV      r10,#0
0003dc  f8a4a000          STRH     r10,[r4,#0]
                  |L1.992|
;;;820    
;;;821        for (i=0, numNewBlobs=0; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i++)
0003e0  2000              MOVS     r0,#0
0003e2  2500              MOVS     r5,#0
0003e4  e03e              B        |L1.1124|
                  |L1.998|
;;;822        {
;;;823            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
0003e6  f851a020          LDR      r10,[r1,r0,LSL #2]
0003ea  f8baa004          LDRH     r10,[r10,#4]
0003ee  f851b020          LDR      r11,[r1,r0,LSL #2]
0003f2  f8bbb002          LDRH     r11,[r11,#2]
0003f6  ebaa0a0b          SUB      r10,r10,r11
0003fa  f851b020          LDR      r11,[r1,r0,LSL #2]
0003fe  f8bbb008          LDRH     r11,[r11,#8]
000402  f851e020          LDR      lr,[r1,r0,LSL #2]
000406  f8bee006          LDRH     lr,[lr,#6]
00040a  ebab0b0e          SUB      r11,r11,lr
00040e  fb0af20b          MUL      r2,r10,r11
;;;824            lowerArea = (area0*100)/(100+TOL);
000412  e007              B        |L1.1060|
                  |L1.1044|
                          DCD      _ZN14CBlobAssemblerC1Ev ; CBlobAssembler::CBlobAssembler()
                  |L1.1048|
                          DCD      _ZN14CBlobAssemblerD1Ev ; CBlobAssembler::~CBlobAssembler()
                  |L1.1052|
                          DCD      0x43340000
                  |L1.1056|
                          DCD      0x40490e56
                  |L1.1060|
000424  f04f0a64          MOV      r10,#0x64
000428  fb02fa0a          MUL      r10,r2,r10
00042c  f44f7bfa          MOV      r11,#0x1f4
000430  fbbaf7fb          UDIV     r7,r10,r11
;;;825            upperArea = area0 + (area0*TOL)/100;
000434  f44f7ac8          MOV      r10,#0x190
000438  fb02fa0a          MUL      r10,r2,r10
00043c  f04f0b64          MOV      r11,#0x64
000440  fbbafafb          UDIV     r10,r10,r11
000444  eb0a0c02          ADD      r12,r10,r2
;;;826            if (lowerArea<=maxEqualArea && maxEqualArea<=upperArea)
000448  454f              CMP      r7,r9
00044a  d80a              BHI      |L1.1122|
00044c  45e1              CMP      r9,r12
00044e  d808              BHI      |L1.1122|
;;;827                newBlobs[numNewBlobs++] = blobs[i];
000450  f851b020          LDR      r11,[r1,r0,LSL #2]
000454  46aa              MOV      r10,r5
000456  f1050e01          ADD      lr,r5,#1
00045a  fa1ff58e          UXTH     r5,lr
00045e  f84db02a          STR      r11,[sp,r10,LSL #2]
                  |L1.1122|
000462  1c40              ADDS     r0,r0,#1              ;821
                  |L1.1124|
000464  f9b4a000          LDRSH    r10,[r4,#0]           ;821
000468  4582              CMP      r10,r0                ;821
00046a  dd01              BLE      |L1.1136|
00046c  2d0a              CMP      r5,#0xa               ;821
00046e  dbba              BLT      |L1.998|
                  |L1.1136|
;;;828    #ifndef PIXY
;;;829            else if (*numBlobs>=5 && (blobs[i]->m_model&0x07)==2)
;;;830                DBG("eliminated!");
;;;831    #endif
;;;832        }
;;;833    
;;;834        // copy new blobs over
;;;835        for (i=0; i<numNewBlobs; i++)
000470  2000              MOVS     r0,#0
000472  e004              B        |L1.1150|
                  |L1.1140|
;;;836            blobs[i] = newBlobs[i];
000474  f85da020          LDR      r10,[sp,r0,LSL #2]
000478  f841a020          STR      r10,[r1,r0,LSL #2]
00047c  1c40              ADDS     r0,r0,#1              ;835
                  |L1.1150|
00047e  42a8              CMP      r0,r5                 ;835
000480  dbf8              BLT      |L1.1140|
;;;837        *numBlobs = numNewBlobs;
000482  fa0ffa85          SXTH     r10,r5
000486  f8a4a000          STRH     r10,[r4,#0]
;;;838    }
00048a  b00c              ADD      sp,sp,#0x30
00048c  e8bd8ff0          POP      {r4-r11,pc}
;;;839    
                          ENDP

                  _ZN5Blobs11mergeClumpsEtt PROC ; Blobs::mergeClumps(unsigned short, unsigned short)
;;;879    
;;;880    void Blobs::mergeClumps(uint16_t scount0, uint16_t scount1)
000490  b570              PUSH     {r4-r6,lr}
;;;881    {
000492  4603              MOV      r3,r0
000494  460c              MOV      r4,r1
;;;882        int i;
;;;883        BlobA *blobs = (BlobA *)m_blobs;
000496  f8d31268          LDR      r1,[r3,#0x268]
;;;884        for (i=0; i<m_numBlobs; i++)
00049a  2000              MOVS     r0,#0
00049c  e013              B        |L1.1222|
                  |L1.1182|
;;;885        {
;;;886            if ((blobs[i].m_model&~0x07)==scount1)
00049e  eb000580          ADD      r5,r0,r0,LSL #2
0004a2  f8315015          LDRH     r5,[r1,r5,LSL #1]
0004a6  f0250507          BIC      r5,r5,#7
0004aa  4295              CMP      r5,r2
0004ac  d10a              BNE      |L1.1220|
;;;887                blobs[i].m_model = (blobs[i].m_model&0x07) | scount0;
0004ae  eb000580          ADD      r5,r0,r0,LSL #2
0004b2  f8115015          LDRB     r5,[r1,r5,LSL #1]
0004b6  f0050507          AND      r5,r5,#7
0004ba  4325              ORRS     r5,r5,r4
0004bc  eb000680          ADD      r6,r0,r0,LSL #2
0004c0  f8215016          STRH     r5,[r1,r6,LSL #1]
                  |L1.1220|
0004c4  1c40              ADDS     r0,r0,#1              ;884
                  |L1.1222|
0004c6  f8b3526c          LDRH     r5,[r3,#0x26c]        ;884
0004ca  4285              CMP      r5,r0                 ;884
0004cc  dce7              BGT      |L1.1182|
;;;888        }
;;;889    }
0004ce  bd70              POP      {r4-r6,pc}
;;;890    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_ PROC ; Blobs::distance(BlobA*, BlobA*)
;;;641    
;;;642    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1)
0004d0  e92d47f0          PUSH     {r4-r10,lr}
;;;643    {
0004d4  4682              MOV      r10,r0
0004d6  460d              MOV      r5,r1
0004d8  4616              MOV      r6,r2
;;;644        int16_t left0, right0, top0, bottom0;
;;;645        int16_t left1, right1, top1, bottom1;
;;;646    
;;;647        left0 = blob0->m_left;
0004da  8868              LDRH     r0,[r5,#2]
0004dc  b201              SXTH     r1,r0
;;;648        right0 = blob0->m_right;
0004de  88a8              LDRH     r0,[r5,#4]
0004e0  b207              SXTH     r7,r0
;;;649        top0 = blob0->m_top;
0004e2  88e8              LDRH     r0,[r5,#6]
0004e4  b202              SXTH     r2,r0
;;;650        bottom0 = blob0->m_bottom;
0004e6  8928              LDRH     r0,[r5,#8]
0004e8  fa0ffc80          SXTH     r12,r0
;;;651        left1 = blob1->m_left;
0004ec  8870              LDRH     r0,[r6,#2]
0004ee  b203              SXTH     r3,r0
;;;652        right1 = blob1->m_right;
0004f0  88b0              LDRH     r0,[r6,#4]
0004f2  fa0ff880          SXTH     r8,r0
;;;653        top1 = blob1->m_top;
0004f6  88f0              LDRH     r0,[r6,#6]
0004f8  b204              SXTH     r4,r0
;;;654        bottom1 = blob1->m_bottom;
0004fa  8930              LDRH     r0,[r6,#8]
0004fc  fa0ff980          SXTH     r9,r0
;;;655    
;;;656        if (left0>=left1 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
000500  4299              CMP      r1,r3
000502  db0e              BLT      |L1.1314|
000504  42a2              CMP      r2,r4
000506  dc01              BGT      |L1.1292|
000508  4564              CMP      r4,r12
00050a  dd05              BLE      |L1.1304|
                  |L1.1292|
00050c  454a              CMP      r2,r9
00050e  dc08              BGT      |L1.1314|
000510  45e1              CMP      r9,r12
000512  dd01              BLE      |L1.1304|
000514  4294              CMP      r4,r2
000516  dc04              BGT      |L1.1314|
                  |L1.1304|
;;;657            return left0-right1;
000518  eba10008          SUB      r0,r1,r8
00051c  b200              SXTH     r0,r0
                  |L1.1310|
;;;658    
;;;659        if (left1>=left0 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
;;;660            return left1-right0;
;;;661    
;;;662        if (top0>=top1 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;663            return top0-bottom1;
;;;664    
;;;665        if (top1>=top0 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;666            return top1-bottom0;
;;;667    
;;;668        return 0x7fff; // return a large number
;;;669    }
00051e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1314|
000522  428b              CMP      r3,r1                 ;659
000524  db0c              BLT      |L1.1344|
000526  42a2              CMP      r2,r4                 ;659
000528  dc01              BGT      |L1.1326|
00052a  4564              CMP      r4,r12                ;659
00052c  dd05              BLE      |L1.1338|
                  |L1.1326|
00052e  454a              CMP      r2,r9                 ;659
000530  dc06              BGT      |L1.1344|
000532  45e1              CMP      r9,r12                ;659
000534  dd01              BLE      |L1.1338|
000536  4294              CMP      r4,r2                 ;659
000538  dc02              BGT      |L1.1344|
                  |L1.1338|
00053a  1bd8              SUBS     r0,r3,r7              ;660
00053c  b200              SXTH     r0,r0                 ;660
00053e  e7ee              B        |L1.1310|
                  |L1.1344|
000540  42a2              CMP      r2,r4                 ;662
000542  db0d              BLT      |L1.1376|
000544  4299              CMP      r1,r3                 ;662
000546  dc01              BGT      |L1.1356|
000548  42bb              CMP      r3,r7                 ;662
00054a  dd05              BLE      |L1.1368|
                  |L1.1356|
00054c  4541              CMP      r1,r8                 ;662
00054e  dc07              BGT      |L1.1376|
000550  45b8              CMP      r8,r7                 ;662
000552  dd01              BLE      |L1.1368|
000554  428b              CMP      r3,r1                 ;662
000556  dc03              BGT      |L1.1376|
                  |L1.1368|
000558  eba20009          SUB      r0,r2,r9              ;663
00055c  b200              SXTH     r0,r0                 ;663
00055e  e7de              B        |L1.1310|
                  |L1.1376|
000560  4294              CMP      r4,r2                 ;665
000562  db0d              BLT      |L1.1408|
000564  4299              CMP      r1,r3                 ;665
000566  dc01              BGT      |L1.1388|
000568  42bb              CMP      r3,r7                 ;665
00056a  dd05              BLE      |L1.1400|
                  |L1.1388|
00056c  4541              CMP      r1,r8                 ;665
00056e  dc07              BGT      |L1.1408|
000570  45b8              CMP      r8,r7                 ;665
000572  dd01              BLE      |L1.1400|
000574  428b              CMP      r3,r1                 ;665
000576  dc03              BGT      |L1.1408|
                  |L1.1400|
000578  eba4000c          SUB      r0,r4,r12             ;666
00057c  b200              SXTH     r0,r0                 ;666
00057e  e7ce              B        |L1.1310|
                  |L1.1408|
000580  f64770ff          MOV      r0,#0x7fff            ;668
000584  e7cb              B        |L1.1310|
;;;670    
                          ENDP

                  _ZN5Blobs7closebyEP5BlobAS1_ PROC ; Blobs::closeby(BlobA*, BlobA*)
;;;671    bool Blobs::closeby(BlobA *blob0, BlobA *blob1)
000586  b570              PUSH     {r4-r6,lr}
;;;672    {
000588  4604              MOV      r4,r0
00058a  460d              MOV      r5,r1
00058c  4616              MOV      r6,r2
;;;673        // check to see if blobs are invalid or equal
;;;674        if (blob0->m_model==0 || blob1->m_model==0 || blob0->m_model==blob1->m_model)
00058e  8828              LDRH     r0,[r5,#0]
000590  b128              CBZ      r0,|L1.1438|
000592  8830              LDRH     r0,[r6,#0]
000594  b118              CBZ      r0,|L1.1438|
000596  8828              LDRH     r0,[r5,#0]
000598  8831              LDRH     r1,[r6,#0]
00059a  4288              CMP      r0,r1
00059c  d101              BNE      |L1.1442|
                  |L1.1438|
;;;675            return false;
00059e  2000              MOVS     r0,#0
                  |L1.1440|
;;;676        // check to see that the blobs are from color code models.  If they aren't both
;;;677        // color code blobs, we return false
;;;678        if (!CC_SIGNATURE(blob0->m_model&0x07) || !CC_SIGNATURE(blob1->m_model&0x07))
;;;679            return false;
;;;680    
;;;681        return distance(blob0, blob1)<=m_maxCodedDist;
;;;682    }
0005a0  bd70              POP      {r4-r6,pc}
                  |L1.1442|
0005a2  f8940288          LDRB     r0,[r4,#0x288]        ;678
0005a6  2802              CMP      r0,#2                 ;678
0005a8  d007              BEQ      |L1.1466|
0005aa  7828              LDRB     r0,[r5,#0]            ;678
0005ac  f0000107          AND      r1,r0,#7              ;678
0005b0  4620              MOV      r0,r4                 ;678
0005b2  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
0005b6  2801              CMP      r0,#1                 ;678
0005b8  d10b              BNE      |L1.1490|
                  |L1.1466|
0005ba  f8940288          LDRB     r0,[r4,#0x288]        ;678
0005be  2802              CMP      r0,#2                 ;678
0005c0  d009              BEQ      |L1.1494|
0005c2  7830              LDRB     r0,[r6,#0]            ;678
0005c4  f0000107          AND      r1,r0,#7              ;678
0005c8  4620              MOV      r0,r4                 ;678
0005ca  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
0005ce  2801              CMP      r0,#1                 ;678
0005d0  d001              BEQ      |L1.1494|
                  |L1.1490|
0005d2  2000              MOVS     r0,#0                 ;679
0005d4  e7e4              B        |L1.1440|
                  |L1.1494|
0005d6  4632              MOV      r2,r6                 ;681
0005d8  4629              MOV      r1,r5                 ;681
0005da  4620              MOV      r0,r4                 ;681
0005dc  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
0005e0  f8b41286          LDRH     r1,[r4,#0x286]        ;681
0005e4  4288              CMP      r0,r1                 ;681
0005e6  dc01              BGT      |L1.1516|
0005e8  2001              MOVS     r0,#1                 ;681
0005ea  e7d9              B        |L1.1440|
                  |L1.1516|
0005ec  2000              MOVS     r0,#0                 ;681
0005ee  e7d7              B        |L1.1440|
;;;683    
                          ENDP

                  _ZN5Blobs9processCCEv PROC ; Blobs::processCC()
;;;890    
;;;891    void Blobs::processCC()
0005f0  e92d4ff0          PUSH     {r4-r11,lr}
;;;892    {
0005f4  b099              SUB      sp,sp,#0x64
0005f6  4607              MOV      r7,r0
;;;893        int16_t i, j, k;
;;;894        uint16_t scount, scount1, count = 0;
0005f8  2000              MOVS     r0,#0
0005fa  9016              STR      r0,[sp,#0x58]
;;;895        int16_t left, right, top, bottom;
;;;896        uint16_t codedModel0, codedModel;
;;;897        int32_t width, height, avgWidth, avgHeight;
;;;898        BlobB *codedBlob, *endBlobB;
;;;899        BlobA *blob0, *blob1, *endBlob;
;;;900        BlobA *blobs[MAX_COLOR_CODE_MODELS*2];
;;;901    
;;;902    #if 0
;;;903        BlobA b0(1, 1, 20, 40, 50);
;;;904        BlobA b1(1, 1, 20, 52, 60);
;;;905        BlobA b2(1, 1, 20, 62, 70);
;;;906        BlobA b3(2, 22, 30, 40, 50);
;;;907        BlobA b4(2, 22, 30, 52, 60);
;;;908        BlobA b5(3, 32, 40, 40, 50);
;;;909        BlobA b6(4, 42, 50, 40, 50);
;;;910        BlobA b7(4, 42, 50, 52, 60);
;;;911        BlobA b8(6, 22, 30, 52, 60);
;;;912        BlobA b9(6, 22, 30, 52, 60);
;;;913        BlobA b10(7, 22, 30, 52, 60);
;;;914    
;;;915        BlobA *testBlobs[] =
;;;916        {
;;;917            &b0, &b1, &b2, &b3, &b4, &b5, &b6, &b7 //, &b8, &b9, &b10
;;;918        };
;;;919        int16_t ntb = 8;
;;;920        cleanup(testBlobs, &ntb);
;;;921    #endif
;;;922    
;;;923        endBlob = (BlobA *)m_blobs + m_numBlobs;
0005fc  f8b7126c          LDRH     r1,[r7,#0x26c]
000600  eb010181          ADD      r1,r1,r1,LSL #2
000604  f8d70268          LDR      r0,[r7,#0x268]
000608  eb000a41          ADD      r10,r0,r1,LSL #1
;;;924    
;;;925        // 1st pass: mark all closeby blobs
;;;926        for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
00060c  f8d74268          LDR      r4,[r7,#0x268]
000610  e03f              B        |L1.1682|
                  |L1.1554|
;;;927        {
;;;928            for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
000612  f104060a          ADD      r6,r4,#0xa
000616  e039              B        |L1.1676|
                  |L1.1560|
;;;929            {
;;;930                if (closeby(blob0, blob1))
000618  4632              MOV      r2,r6
00061a  4621              MOV      r1,r4
00061c  4638              MOV      r0,r7
00061e  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
000622  b320              CBZ      r0,|L1.1646|
;;;931                {
;;;932                    if (blob0->m_model<=CL_NUM_SIGNATURES && blob1->m_model<=CL_NUM_SIGNATURES)
000624  8820              LDRH     r0,[r4,#0]
000626  2807              CMP      r0,#7
000628  dc14              BGT      |L1.1620|
00062a  8830              LDRH     r0,[r6,#0]
00062c  2807              CMP      r0,#7
00062e  dc11              BGT      |L1.1620|
;;;933                    {
;;;934                        count++;
000630  9816              LDR      r0,[sp,#0x58]
000632  1c40              ADDS     r0,r0,#1
000634  b280              UXTH     r0,r0
000636  9016              STR      r0,[sp,#0x58]
;;;935                        scount = count<<3;
000638  f64f71ff          MOV      r1,#0xffff
00063c  9816              LDR      r0,[sp,#0x58]
00063e  ea0109c0          AND      r9,r1,r0,LSL #3
;;;936                        blob0->m_model |= scount;
000642  8820              LDRH     r0,[r4,#0]
000644  ea400009          ORR      r0,r0,r9
000648  8020              STRH     r0,[r4,#0]
;;;937                        blob1->m_model |= scount;
00064a  8830              LDRH     r0,[r6,#0]
00064c  ea400009          ORR      r0,r0,r9
000650  8030              STRH     r0,[r6,#0]
000652  e01a              B        |L1.1674|
                  |L1.1620|
;;;938                    }
;;;939                    else if (blob0->m_model>CL_NUM_SIGNATURES && blob1->m_model<=CL_NUM_SIGNATURES)
000654  8820              LDRH     r0,[r4,#0]
000656  2807              CMP      r0,#7
000658  dd0a              BLE      |L1.1648|
00065a  8830              LDRH     r0,[r6,#0]
00065c  2807              CMP      r0,#7
00065e  dc07              BGT      |L1.1648|
;;;940                    {
;;;941                        scount = blob0->m_model & ~0x07;
000660  8820              LDRH     r0,[r4,#0]
000662  f0200907          BIC      r9,r0,#7
;;;942                        blob1->m_model |= scount;
000666  8830              LDRH     r0,[r6,#0]
000668  ea400009          ORR      r0,r0,r9
00066c  8030              STRH     r0,[r6,#0]
                  |L1.1646|
00066e  e00c              B        |L1.1674|
                  |L1.1648|
;;;943                    }
;;;944                    else if (blob1->m_model>CL_NUM_SIGNATURES && blob0->m_model<=CL_NUM_SIGNATURES)
000670  8830              LDRH     r0,[r6,#0]
000672  2807              CMP      r0,#7
000674  dd09              BLE      |L1.1674|
000676  8820              LDRH     r0,[r4,#0]
000678  2807              CMP      r0,#7
00067a  dc06              BGT      |L1.1674|
;;;945                    {
;;;946                        scount = blob1->m_model & ~0x07;
00067c  8830              LDRH     r0,[r6,#0]
00067e  f0200907          BIC      r9,r0,#7
;;;947                        blob0->m_model |= scount;
000682  8820              LDRH     r0,[r4,#0]
000684  ea400009          ORR      r0,r0,r9
000688  8020              STRH     r0,[r4,#0]
                  |L1.1674|
00068a  360a              ADDS     r6,r6,#0xa            ;928
                  |L1.1676|
00068c  4556              CMP      r6,r10                ;928
00068e  d3c3              BCC      |L1.1560|
000690  340a              ADDS     r4,r4,#0xa            ;926
                  |L1.1682|
000692  4554              CMP      r4,r10                ;926
000694  d3bd              BCC      |L1.1554|
;;;948                    }
;;;949                }
;;;950            }
;;;951        }
;;;952    
;;;953    #if 1
;;;954        // 2nd pass: merge blob clumps
;;;955        for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
000696  f8d74268          LDR      r4,[r7,#0x268]
00069a  e025              B        |L1.1768|
                  |L1.1692|
;;;956        {
;;;957            if (blob0->m_model<=CL_NUM_SIGNATURES) // skip normal blobs
00069c  8820              LDRH     r0,[r4,#0]
00069e  2807              CMP      r0,#7
0006a0  dc00              BGT      |L1.1700|
;;;958                continue;
0006a2  e020              B        |L1.1766|
                  |L1.1700|
;;;959            scount = blob0->m_model&~0x07;
0006a4  8820              LDRH     r0,[r4,#0]
0006a6  f0200907          BIC      r9,r0,#7
;;;960            for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
0006aa  f104060a          ADD      r6,r4,#0xa
0006ae  e017              B        |L1.1760|
                  |L1.1712|
;;;961            {
;;;962                if (blob1->m_model<=CL_NUM_SIGNATURES)
0006b0  8830              LDRH     r0,[r6,#0]
0006b2  2807              CMP      r0,#7
0006b4  dc00              BGT      |L1.1720|
;;;963                    continue;
0006b6  e012              B        |L1.1758|
                  |L1.1720|
;;;964    
;;;965                scount1 = blob1->m_model&~0x07;
0006b8  8830              LDRH     r0,[r6,#0]
0006ba  f0200007          BIC      r0,r0,#7
0006be  9017              STR      r0,[sp,#0x5c]
;;;966                if (scount!=scount1 && closeby(blob0, blob1))
0006c0  9817              LDR      r0,[sp,#0x5c]
0006c2  4581              CMP      r9,r0
0006c4  d00a              BEQ      |L1.1756|
0006c6  4632              MOV      r2,r6
0006c8  4621              MOV      r1,r4
0006ca  4638              MOV      r0,r7
0006cc  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
0006d0  b120              CBZ      r0,|L1.1756|
;;;967                    mergeClumps(scount, scount1);
0006d2  4649              MOV      r1,r9
0006d4  4638              MOV      r0,r7
0006d6  9a17              LDR      r2,[sp,#0x5c]
0006d8  f7fffffe          BL       _ZN5Blobs11mergeClumpsEtt ; Blobs::mergeClumps(unsigned short, unsigned short)
                  |L1.1756|
0006dc  bf00              NOP                            ;963
                  |L1.1758|
0006de  360a              ADDS     r6,r6,#0xa            ;960
                  |L1.1760|
0006e0  4556              CMP      r6,r10                ;960
0006e2  d3e5              BCC      |L1.1712|
0006e4  bf00              NOP                            ;958
                  |L1.1766|
0006e6  340a              ADDS     r4,r4,#0xa            ;955
                  |L1.1768|
0006e8  4554              CMP      r4,r10                ;955
0006ea  d3d7              BCC      |L1.1692|
;;;968            }
;;;969        }
;;;970    #endif
;;;971    
;;;972        // 3rd and final pass, find each blob clean it up and add it to the table
;;;973        endBlobB = (BlobB *)((BlobA *)m_blobs + MAX_BLOBS)-1;
0006ec  f8d70268          LDR      r0,[r7,#0x268]
0006f0  f5007077          ADD      r0,r0,#0x3dc
0006f4  900b              STR      r0,[sp,#0x2c]
;;;974        for (i=1, codedBlob = m_ccBlobs, m_numCCBlobs=0; i<=count && codedBlob<endBlobB; i++)
0006f6  f04f0b01          MOV      r11,#1
0006fa  f8d78270          LDR      r8,[r7,#0x270]
0006fe  2000              MOVS     r0,#0
000700  f8a70274          STRH     r0,[r7,#0x274]
000704  e157              B        |L1.2486|
                  |L1.1798|
;;;975        {
;;;976            scount = i<<3;
000706  f64f70ff          MOV      r0,#0xffff
00070a  ea0009cb          AND      r9,r0,r11,LSL #3
;;;977            // find all blobs with index i
;;;978            for (j=0, blob0=(BlobA *)m_blobs; blob0<endBlob && j<MAX_COLOR_CODE_MODELS*2; blob0++)
00070e  2000              MOVS     r0,#0
000710  9018              STR      r0,[sp,#0x60]
000712  f8d74268          LDR      r4,[r7,#0x268]
000716  e00e              B        |L1.1846|
                  |L1.1816|
;;;979            {
;;;980                if ((blob0->m_model&~0x07)==scount)
000718  8820              LDRH     r0,[r4,#0]
00071a  f0200007          BIC      r0,r0,#7
00071e  4548              CMP      r0,r9
000720  d108              BNE      |L1.1844|
;;;981                    blobs[j++] = blob0;
000722  f9bd1060          LDRSH    r1,[sp,#0x60]
000726  b288              UXTH     r0,r1
000728  1c40              ADDS     r0,r0,#1
00072a  b200              SXTH     r0,r0
00072c  9018              STR      r0,[sp,#0x60]
00072e  a801              ADD      r0,sp,#4
000730  f8404021          STR      r4,[r0,r1,LSL #2]
                  |L1.1844|
000734  340a              ADDS     r4,r4,#0xa            ;978
                  |L1.1846|
000736  4554              CMP      r4,r10                ;978
000738  d203              BCS      |L1.1858|
00073a  f9bd0060          LDRSH    r0,[sp,#0x60]         ;978
00073e  280a              CMP      r0,#0xa               ;978
000740  dbea              BLT      |L1.1816|
                  |L1.1858|
;;;982            }
;;;983    
;;;984    #if 1
;;;985            // cleanup blobs, deal with cases where there are more blobs than models
;;;986            cleanup(blobs, &j);
000742  aa18              ADD      r2,sp,#0x60
000744  a901              ADD      r1,sp,#4
000746  4638              MOV      r0,r7
000748  f7fffffe          BL       _ZN5Blobs7cleanupEPP5BlobAPs ; Blobs::cleanup(BlobA**, short*)
;;;987    #endif
;;;988    
;;;989            if (j<2)
00074c  f9bd0060          LDRSH    r0,[sp,#0x60]
000750  2802              CMP      r0,#2
000752  da00              BGE      |L1.1878|
;;;990                continue;
000754  e12b              B        |L1.2478|
                  |L1.1878|
;;;991    
;;;992            // find left, right, top, bottom of color coded block
;;;993            for (k=0, left=right=top=bottom=avgWidth=avgHeight=0; k<j; k++)
000756  2500              MOVS     r5,#0
000758  2000              MOVS     r0,#0
00075a  900c              STR      r0,[sp,#0x30]
00075c  900d              STR      r0,[sp,#0x34]
00075e  9012              STR      r0,[sp,#0x48]
000760  9013              STR      r0,[sp,#0x4c]
000762  9014              STR      r0,[sp,#0x50]
000764  9015              STR      r0,[sp,#0x54]
000766  e045              B        |L1.2036|
                  |L1.1896|
;;;994            {
;;;995                //DBG("* cc %x %d i %d: %d %d %d %d %d", blobs[k], m_numCCBlobs, k, blobs[k]->m_model, blobs[k]->m_left, blobs[k]->m_right, blobs[k]->m_top, blobs[k]->m_bottom);
;;;996                if (blobs[left]->m_left > blobs[k]->m_left)
000768  a901              ADD      r1,sp,#4
00076a  9815              LDR      r0,[sp,#0x54]
00076c  f8510020          LDR      r0,[r1,r0,LSL #2]
000770  8840              LDRH     r0,[r0,#2]
000772  f8511025          LDR      r1,[r1,r5,LSL #2]
000776  8849              LDRH     r1,[r1,#2]
000778  4288              CMP      r0,r1
00077a  dd00              BLE      |L1.1918|
;;;997                    left = k;
00077c  9515              STR      r5,[sp,#0x54]
                  |L1.1918|
;;;998                if (blobs[top]->m_top > blobs[k]->m_top)
00077e  a901              ADD      r1,sp,#4
000780  9813              LDR      r0,[sp,#0x4c]
000782  f8510020          LDR      r0,[r1,r0,LSL #2]
000786  88c0              LDRH     r0,[r0,#6]
000788  f8511025          LDR      r1,[r1,r5,LSL #2]
00078c  88c9              LDRH     r1,[r1,#6]
00078e  4288              CMP      r0,r1
000790  dd00              BLE      |L1.1940|
;;;999                    top = k;
000792  9513              STR      r5,[sp,#0x4c]
                  |L1.1940|
;;;1000               if (blobs[right]->m_right < blobs[k]->m_right)
000794  a901              ADD      r1,sp,#4
000796  9814              LDR      r0,[sp,#0x50]
000798  f8510020          LDR      r0,[r1,r0,LSL #2]
00079c  8880              LDRH     r0,[r0,#4]
00079e  f8511025          LDR      r1,[r1,r5,LSL #2]
0007a2  8889              LDRH     r1,[r1,#4]
0007a4  4288              CMP      r0,r1
0007a6  da00              BGE      |L1.1962|
;;;1001                   right = k;
0007a8  9514              STR      r5,[sp,#0x50]
                  |L1.1962|
;;;1002               if (blobs[bottom]->m_bottom < blobs[k]->m_bottom)
0007aa  a901              ADD      r1,sp,#4
0007ac  9812              LDR      r0,[sp,#0x48]
0007ae  f8510020          LDR      r0,[r1,r0,LSL #2]
0007b2  8900              LDRH     r0,[r0,#8]
0007b4  f8511025          LDR      r1,[r1,r5,LSL #2]
0007b8  8909              LDRH     r1,[r1,#8]
0007ba  4288              CMP      r0,r1
0007bc  da00              BGE      |L1.1984|
;;;1003                   bottom = k;
0007be  9512              STR      r5,[sp,#0x48]
                  |L1.1984|
;;;1004               avgWidth += blobs[k]->m_right - blobs[k]->m_left;
0007c0  a801              ADD      r0,sp,#4
0007c2  f8500025          LDR      r0,[r0,r5,LSL #2]
0007c6  8880              LDRH     r0,[r0,#4]
0007c8  a901              ADD      r1,sp,#4
0007ca  f8511025          LDR      r1,[r1,r5,LSL #2]
0007ce  8849              LDRH     r1,[r1,#2]
0007d0  1a41              SUBS     r1,r0,r1
0007d2  980d              LDR      r0,[sp,#0x34]
0007d4  4408              ADD      r0,r0,r1
0007d6  900d              STR      r0,[sp,#0x34]
;;;1005               avgHeight += blobs[k]->m_bottom - blobs[k]->m_top;
0007d8  a801              ADD      r0,sp,#4
0007da  f8500025          LDR      r0,[r0,r5,LSL #2]
0007de  8900              LDRH     r0,[r0,#8]
0007e0  a901              ADD      r1,sp,#4
0007e2  f8511025          LDR      r1,[r1,r5,LSL #2]
0007e6  88c9              LDRH     r1,[r1,#6]
0007e8  1a41              SUBS     r1,r0,r1
0007ea  980c              LDR      r0,[sp,#0x30]
0007ec  4408              ADD      r0,r0,r1
0007ee  900c              STR      r0,[sp,#0x30]
0007f0  1c68              ADDS     r0,r5,#1              ;993
0007f2  b205              SXTH     r5,r0                 ;993
                  |L1.2036|
0007f4  f9bd0060          LDRSH    r0,[sp,#0x60]         ;993
0007f8  4285              CMP      r5,r0                 ;993
0007fa  dbb5              BLT      |L1.1896|
;;;1006           }
;;;1007           avgWidth /= j;
0007fc  f9bd1060          LDRSH    r1,[sp,#0x60]
000800  980d              LDR      r0,[sp,#0x34]
000802  fb90f0f1          SDIV     r0,r0,r1
000806  900d              STR      r0,[sp,#0x34]
;;;1008           avgHeight /= j;
000808  f9bd1060          LDRSH    r1,[sp,#0x60]
00080c  980c              LDR      r0,[sp,#0x30]
00080e  fb90f0f1          SDIV     r0,r0,r1
000812  900c              STR      r0,[sp,#0x30]
;;;1009           codedBlob->m_left = blobs[left]->m_left;
000814  a901              ADD      r1,sp,#4
000816  9815              LDR      r0,[sp,#0x54]
000818  f8510020          LDR      r0,[r1,r0,LSL #2]
00081c  8840              LDRH     r0,[r0,#2]
00081e  f8a80002          STRH     r0,[r8,#2]
;;;1010           codedBlob->m_right = blobs[right]->m_right;
000822  9814              LDR      r0,[sp,#0x50]
000824  f8510020          LDR      r0,[r1,r0,LSL #2]
000828  8880              LDRH     r0,[r0,#4]
00082a  f8a80004          STRH     r0,[r8,#4]
;;;1011           codedBlob->m_top = blobs[top]->m_top;
00082e  9813              LDR      r0,[sp,#0x4c]
000830  f8510020          LDR      r0,[r1,r0,LSL #2]
000834  88c0              LDRH     r0,[r0,#6]
000836  f8a80006          STRH     r0,[r8,#6]
;;;1012           codedBlob->m_bottom = blobs[bottom]->m_bottom;
00083a  9812              LDR      r0,[sp,#0x48]
00083c  f8510020          LDR      r0,[r1,r0,LSL #2]
000840  8900              LDRH     r0,[r0,#8]
000842  f8a80008          STRH     r0,[r8,#8]
;;;1013   
;;;1014   #if 1
;;;1015           // is it more horizontal than vertical?
;;;1016           width = (blobs[right]->m_right - blobs[left]->m_left)*100;
000846  9814              LDR      r0,[sp,#0x50]
000848  f8510020          LDR      r0,[r1,r0,LSL #2]
00084c  8881              LDRH     r1,[r0,#4]
00084e  aa01              ADD      r2,sp,#4
000850  9815              LDR      r0,[sp,#0x54]
000852  f8520020          LDR      r0,[r2,r0,LSL #2]
000856  8840              LDRH     r0,[r0,#2]
000858  1a08              SUBS     r0,r1,r0
00085a  2164              MOVS     r1,#0x64
00085c  4348              MULS     r0,r1,r0
00085e  900f              STR      r0,[sp,#0x3c]
;;;1017           width /= avgWidth; // scale by average width because our swatches might not be square
000860  990d              LDR      r1,[sp,#0x34]
000862  980f              LDR      r0,[sp,#0x3c]
000864  fb90f0f1          SDIV     r0,r0,r1
000868  900f              STR      r0,[sp,#0x3c]
;;;1018           height = (blobs[bottom]->m_bottom - blobs[top]->m_top)*100;
00086a  a901              ADD      r1,sp,#4
00086c  9812              LDR      r0,[sp,#0x48]
00086e  f8510020          LDR      r0,[r1,r0,LSL #2]
000872  8901              LDRH     r1,[r0,#8]
000874  9813              LDR      r0,[sp,#0x4c]
000876  f8520020          LDR      r0,[r2,r0,LSL #2]
00087a  88c0              LDRH     r0,[r0,#6]
00087c  1a08              SUBS     r0,r1,r0
00087e  2164              MOVS     r1,#0x64
000880  4348              MULS     r0,r1,r0
000882  900e              STR      r0,[sp,#0x38]
;;;1019           height /= avgHeight; // scale by average height because our swatches might not be square
000884  990c              LDR      r1,[sp,#0x30]
000886  980e              LDR      r0,[sp,#0x38]
000888  fb90f0f1          SDIV     r0,r0,r1
00088c  900e              STR      r0,[sp,#0x38]
;;;1020   
;;;1021           if (width > height)
00088e  e9dd100e          LDRD     r1,r0,[sp,#0x38]
000892  4288              CMP      r0,r1
000894  dd0c              BLE      |L1.2224|
;;;1022               sort(blobs, j, blobs[left], true);
000896  2001              MOVS     r0,#1
000898  a901              ADD      r1,sp,#4
00089a  9000              STR      r0,[sp,#0]
00089c  9815              LDR      r0,[sp,#0x54]
00089e  f8513020          LDR      r3,[r1,r0,LSL #2]
0008a2  f8bd0060          LDRH     r0,[sp,#0x60]
0008a6  b282              UXTH     r2,r0
0008a8  4638              MOV      r0,r7
0008aa  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
0008ae  e00b              B        |L1.2248|
                  |L1.2224|
;;;1023           else
;;;1024               sort(blobs, j, blobs[top], false);
0008b0  2000              MOVS     r0,#0
0008b2  a901              ADD      r1,sp,#4
0008b4  9000              STR      r0,[sp,#0]
0008b6  9813              LDR      r0,[sp,#0x4c]
0008b8  f8513020          LDR      r3,[r1,r0,LSL #2]
0008bc  f8bd0060          LDRH     r0,[sp,#0x60]
0008c0  b282              UXTH     r2,r0
0008c2  4638              MOV      r0,r7
0008c4  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
                  |L1.2248|
;;;1025   
;;;1026   #if 1
;;;1027           cleanup2(blobs, &j);
0008c8  aa18              ADD      r2,sp,#0x60
0008ca  a901              ADD      r1,sp,#4
0008cc  4638              MOV      r0,r7
0008ce  f7fffffe          BL       _ZN5Blobs8cleanup2EPP5BlobAPs ; Blobs::cleanup2(BlobA**, short*)
;;;1028           if (j<2)
0008d2  f9bd0060          LDRSH    r0,[sp,#0x60]
0008d6  2802              CMP      r0,#2
0008d8  da00              BGE      |L1.2268|
;;;1029               continue;
0008da  e068              B        |L1.2478|
                  |L1.2268|
;;;1030           else if (j>5)
0008dc  f9bd0060          LDRSH    r0,[sp,#0x60]
0008e0  2805              CMP      r0,#5
0008e2  dd01              BLE      |L1.2280|
;;;1031               j = 5;
0008e4  2005              MOVS     r0,#5
0008e6  9018              STR      r0,[sp,#0x60]
                  |L1.2280|
;;;1032   #endif
;;;1033           // create new blob, compare the coded models, pick the smaller one
;;;1034           for (k=0, codedModel0=0; k<j; k++)
0008e8  2500              MOVS     r5,#0
0008ea  2000              MOVS     r0,#0
0008ec  9011              STR      r0,[sp,#0x44]
0008ee  e010              B        |L1.2322|
                  |L1.2288|
;;;1035           {
;;;1036               codedModel0 <<= 3;
0008f0  f64f71ff          MOV      r1,#0xffff
0008f4  9811              LDR      r0,[sp,#0x44]
0008f6  ea0100c0          AND      r0,r1,r0,LSL #3
0008fa  9011              STR      r0,[sp,#0x44]
;;;1037               codedModel0 |= blobs[k]->m_model&0x07;
0008fc  a801              ADD      r0,sp,#4
0008fe  f8500025          LDR      r0,[r0,r5,LSL #2]
000902  7800              LDRB     r0,[r0,#0]
000904  f0000007          AND      r0,r0,#7
000908  9911              LDR      r1,[sp,#0x44]
00090a  4308              ORRS     r0,r0,r1
00090c  9011              STR      r0,[sp,#0x44]
00090e  1c68              ADDS     r0,r5,#1              ;1034
000910  b205              SXTH     r5,r0                 ;1034
                  |L1.2322|
000912  f9bd0060          LDRSH    r0,[sp,#0x60]         ;1034
000916  4285              CMP      r5,r0                 ;1034
000918  dbea              BLT      |L1.2288|
;;;1038           }
;;;1039           for (k=j-1, codedModel=0; k>=0; k--)
00091a  f8bd0060          LDRH     r0,[sp,#0x60]
00091e  1e40              SUBS     r0,r0,#1
000920  b205              SXTH     r5,r0
000922  2000              MOVS     r0,#0
000924  9010              STR      r0,[sp,#0x40]
000926  e015              B        |L1.2388|
                  |L1.2344|
;;;1040           {
;;;1041               codedModel <<= 3;
000928  f64f71ff          MOV      r1,#0xffff
00092c  9810              LDR      r0,[sp,#0x40]
00092e  ea0100c0          AND      r0,r1,r0,LSL #3
000932  9010              STR      r0,[sp,#0x40]
;;;1042               codedModel |= blobs[k]->m_model&0x07;
000934  a801              ADD      r0,sp,#4
000936  f8500025          LDR      r0,[r0,r5,LSL #2]
00093a  7800              LDRB     r0,[r0,#0]
00093c  f0000007          AND      r0,r0,#7
000940  9910              LDR      r1,[sp,#0x40]
000942  4308              ORRS     r0,r0,r1
000944  9010              STR      r0,[sp,#0x40]
;;;1043               blobs[k]->m_model = 0; // invalidate
000946  2000              MOVS     r0,#0
000948  a901              ADD      r1,sp,#4
00094a  f8511025          LDR      r1,[r1,r5,LSL #2]
00094e  8008              STRH     r0,[r1,#0]
000950  1e68              SUBS     r0,r5,#1              ;1039
000952  b205              SXTH     r5,r0                 ;1039
                  |L1.2388|
000954  2d00              CMP      r5,#0                 ;1039
000956  dae7              BGE      |L1.2344|
;;;1044           }
;;;1045   
;;;1046           if (codedModel0<codedModel)
000958  e9dd1010          LDRD     r1,r0,[sp,#0x40]
00095c  4288              CMP      r0,r1
00095e  da0f              BGE      |L1.2432|
;;;1047           {
;;;1048               codedBlob->m_model = codedModel0;
000960  9811              LDR      r0,[sp,#0x44]
000962  f8a80000          STRH     r0,[r8,#0]
;;;1049               codedBlob->m_angle = angle(blobs[0], blobs[j-1]);
000966  f9bd0060          LDRSH    r0,[sp,#0x60]
00096a  1e40              SUBS     r0,r0,#1
00096c  ab01              ADD      r3,sp,#4
00096e  f8532020          LDR      r2,[r3,r0,LSL #2]
000972  4638              MOV      r0,r7
000974  9901              LDR      r1,[sp,#4]
000976  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
00097a  f8a8000a          STRH     r0,[r8,#0xa]
00097e  e00e              B        |L1.2462|
                  |L1.2432|
;;;1050           }
;;;1051           else
;;;1052           {
;;;1053               codedBlob->m_model = codedModel;
000980  9810              LDR      r0,[sp,#0x40]
000982  f8a80000          STRH     r0,[r8,#0]
;;;1054               codedBlob->m_angle = angle(blobs[j-1], blobs[0]);
000986  f9bd0060          LDRSH    r0,[sp,#0x60]
00098a  1e40              SUBS     r0,r0,#1
00098c  ab01              ADD      r3,sp,#4
00098e  f8531020          LDR      r1,[r3,r0,LSL #2]
000992  4638              MOV      r0,r7
000994  9a01              LDR      r2,[sp,#4]
000996  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
00099a  f8a8000a          STRH     r0,[r8,#0xa]
                  |L1.2462|
;;;1055           }
;;;1056   #endif
;;;1057           //DBG("cc %d %d %d %d %d", m_numCCBlobs, codedBlob->m_left, codedBlob->m_right, codedBlob->m_top, codedBlob->m_bottom);
;;;1058           codedBlob++;
00099e  f108080c          ADD      r8,r8,#0xc
;;;1059           m_numCCBlobs++;
0009a2  f8b70274          LDRH     r0,[r7,#0x274]
0009a6  1c40              ADDS     r0,r0,#1
0009a8  f8a70274          STRH     r0,[r7,#0x274]
0009ac  bf00              NOP                            ;990
                  |L1.2478|
0009ae  f10b0001          ADD      r0,r11,#1             ;974
0009b2  fa0ffb80          SXTH     r11,r0                ;974
                  |L1.2486|
0009b6  9816              LDR      r0,[sp,#0x58]         ;974
0009b8  4583              CMP      r11,r0                ;974
0009ba  dc03              BGT      |L1.2500|
0009bc  980b              LDR      r0,[sp,#0x2c]         ;974
0009be  4580              CMP      r8,r0                 ;974
0009c0  f4ffaea1          BCC      |L1.1798|
                  |L1.2500|
;;;1060       }
;;;1061   
;;;1062       // 3rd pass, invalidate blobs
;;;1063       for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
0009c4  f8d74268          LDR      r4,[r7,#0x268]
0009c8  e019              B        |L1.2558|
                  |L1.2506|
;;;1064       {
;;;1065           if (m_ccMode==MIXED)
0009ca  f8970288          LDRB     r0,[r7,#0x288]
0009ce  2803              CMP      r0,#3
0009d0  d105              BNE      |L1.2526|
;;;1066           {
;;;1067               if (blob0->m_model>CL_NUM_SIGNATURES)
0009d2  8820              LDRH     r0,[r4,#0]
0009d4  2807              CMP      r0,#7
0009d6  dd11              BLE      |L1.2556|
;;;1068                   blob0->m_model = 0;
0009d8  2000              MOVS     r0,#0
0009da  8020              STRH     r0,[r4,#0]
0009dc  e00e              B        |L1.2556|
                  |L1.2526|
;;;1069           }
;;;1070           else if (blob0->m_model>CL_NUM_SIGNATURES || CC_SIGNATURE(blob0->m_model))
0009de  8820              LDRH     r0,[r4,#0]
0009e0  2807              CMP      r0,#7
0009e2  dc09              BGT      |L1.2552|
0009e4  f8970288          LDRB     r0,[r7,#0x288]
0009e8  2802              CMP      r0,#2
0009ea  d005              BEQ      |L1.2552|
0009ec  7821              LDRB     r1,[r4,#0]
0009ee  4638              MOV      r0,r7
0009f0  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
0009f4  2801              CMP      r0,#1
0009f6  d101              BNE      |L1.2556|
                  |L1.2552|
;;;1071               blob0->m_model = 0; // invalidate-- not part of a color code
0009f8  2000              MOVS     r0,#0
0009fa  8020              STRH     r0,[r4,#0]
                  |L1.2556|
0009fc  340a              ADDS     r4,r4,#0xa            ;1063
                  |L1.2558|
0009fe  4554              CMP      r4,r10                ;1063
000a00  d3e3              BCC      |L1.2506|
;;;1072       }
;;;1073   }
000a02  b019              ADD      sp,sp,#0x64
000a04  e8bd8ff0          POP      {r4-r11,pc}
;;;1074   
                          ENDP

                  _ZN5Blobs7combineEPtt PROC ; Blobs::combine(unsigned short*, unsigned short)
;;;511    
;;;512    uint16_t Blobs::combine(uint16_t *blobs, uint16_t numBlobs)
000a08  e92d4ffc          PUSH     {r2-r11,lr}
;;;513    {
000a0c  4696              MOV      lr,r2
;;;514        uint16_t i, j, ii, jj, left0, right0, top0, bottom0;
;;;515        uint16_t left, right, top, bottom;
;;;516        uint16_t invalid;
;;;517    
;;;518        // delete blobs that are fully enclosed by larger blobs
;;;519        for (i=0, ii=0, invalid=0; i<numBlobs; i++, ii+=5)
000a0e  2400              MOVS     r4,#0
000a10  2200              MOVS     r2,#0
000a12  2000              MOVS     r0,#0
000a14  9000              STR      r0,[sp,#0]
000a16  e053              B        |L1.2752|
                  |L1.2584|
;;;520        {
;;;521            if (blobs[ii+0]==0)
000a18  f8310012          LDRH     r0,[r1,r2,LSL #1]
000a1c  b900              CBNZ     r0,|L1.2592|
;;;522                continue;
000a1e  e04b              B        |L1.2744|
                  |L1.2592|
;;;523            left0 = blobs[ii+1];
000a20  1c50              ADDS     r0,r2,#1
000a22  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;524            right0 = blobs[ii+2];
000a26  1c90              ADDS     r0,r2,#2
000a28  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;525            top0 = blobs[ii+3];
000a2c  1cd0              ADDS     r0,r2,#3
000a2e  f8317010          LDRH     r7,[r1,r0,LSL #1]
;;;526            bottom0 = blobs[ii+4];
000a32  1d10              ADDS     r0,r2,#4
000a34  f831c010          LDRH     r12,[r1,r0,LSL #1]
;;;527    
;;;528            for (j=i+1, jj=ii+5; j<numBlobs; j++, jj+=5)
000a38  1c60              ADDS     r0,r4,#1
000a3a  b280              UXTH     r0,r0
000a3c  9001              STR      r0,[sp,#4]
000a3e  1d50              ADDS     r0,r2,#5
000a40  b283              UXTH     r3,r0
000a42  e035              B        |L1.2736|
                  |L1.2628|
;;;529            {
;;;530                if (blobs[jj+0]==0)
000a44  f8310013          LDRH     r0,[r1,r3,LSL #1]
000a48  b900              CBNZ     r0,|L1.2636|
;;;531                    continue;
000a4a  e02b              B        |L1.2724|
                  |L1.2636|
;;;532                left = blobs[jj+1];
000a4c  1c58              ADDS     r0,r3,#1
000a4e  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;533                right = blobs[jj+2];
000a52  1c98              ADDS     r0,r3,#2
000a54  f8319010          LDRH     r9,[r1,r0,LSL #1]
;;;534                top = blobs[jj+3];
000a58  1cd8              ADDS     r0,r3,#3
000a5a  f831a010          LDRH     r10,[r1,r0,LSL #1]
;;;535                bottom = blobs[jj+4];
000a5e  1d18              ADDS     r0,r3,#4
000a60  f831b010          LDRH     r11,[r1,r0,LSL #1]
;;;536    
;;;537                if (left0<=left && right0>=right && top0<=top && bottom0>=bottom)
000a64  4545              CMP      r5,r8
000a66  dc0d              BGT      |L1.2692|
000a68  454e              CMP      r6,r9
000a6a  db0b              BLT      |L1.2692|
000a6c  4557              CMP      r7,r10
000a6e  dc09              BGT      |L1.2692|
000a70  45dc              CMP      r12,r11
000a72  db07              BLT      |L1.2692|
;;;538                {
;;;539                    blobs[jj+0] = 0; // invalidate
000a74  2000              MOVS     r0,#0
000a76  f8210013          STRH     r0,[r1,r3,LSL #1]
;;;540                    invalid++;
000a7a  9800              LDR      r0,[sp,#0]
000a7c  1c40              ADDS     r0,r0,#1
000a7e  b280              UXTH     r0,r0
000a80  9000              STR      r0,[sp,#0]
000a82  e00e              B        |L1.2722|
                  |L1.2692|
;;;541                }
;;;542                else if (left<=left0 && right>=right0 && top<=top0 && bottom>=bottom0)
000a84  45a8              CMP      r8,r5
000a86  dc0c              BGT      |L1.2722|
000a88  45b1              CMP      r9,r6
000a8a  db0a              BLT      |L1.2722|
000a8c  45ba              CMP      r10,r7
000a8e  dc08              BGT      |L1.2722|
000a90  45e3              CMP      r11,r12
000a92  db06              BLT      |L1.2722|
;;;543                {
;;;544                    blobs[ii+0] = 0; // invalidate
000a94  2000              MOVS     r0,#0
000a96  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;545                    invalid++;
000a9a  9800              LDR      r0,[sp,#0]
000a9c  1c40              ADDS     r0,r0,#1
000a9e  b280              UXTH     r0,r0
000aa0  9000              STR      r0,[sp,#0]
                  |L1.2722|
000aa2  bf00              NOP                            ;531
                  |L1.2724|
000aa4  9801              LDR      r0,[sp,#4]            ;528
000aa6  1c40              ADDS     r0,r0,#1              ;528
000aa8  b280              UXTH     r0,r0                 ;528
000aaa  9001              STR      r0,[sp,#4]            ;528
000aac  1d58              ADDS     r0,r3,#5              ;528
000aae  b283              UXTH     r3,r0                 ;528
                  |L1.2736|
000ab0  9801              LDR      r0,[sp,#4]            ;528
000ab2  4570              CMP      r0,lr                 ;528
000ab4  dbc6              BLT      |L1.2628|
000ab6  bf00              NOP                            ;522
                  |L1.2744|
000ab8  1c60              ADDS     r0,r4,#1              ;519
000aba  b284              UXTH     r4,r0                 ;519
000abc  1d50              ADDS     r0,r2,#5              ;519
000abe  b282              UXTH     r2,r0                 ;519
                  |L1.2752|
000ac0  4574              CMP      r4,lr                 ;519
000ac2  dba9              BLT      |L1.2584|
;;;546                }
;;;547            }
;;;548        }
;;;549    
;;;550        return invalid;
000ac4  9800              LDR      r0,[sp,#0]
;;;551    }
000ac6  e8bd8ffc          POP      {r2-r11,pc}
;;;552    
                          ENDP

                  _ZN5Blobs8combine2EPtt PROC ; Blobs::combine2(unsigned short*, unsigned short)
;;;553    uint16_t Blobs::combine2(uint16_t *blobs, uint16_t numBlobs)
000aca  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;554    {
000ace  b083              SUB      sp,sp,#0xc
000ad0  4682              MOV      r10,r0
;;;555        uint16_t i, j, ii, jj, left0, right0, top0, bottom0;
;;;556        uint16_t left, right, top, bottom;
;;;557        uint16_t invalid;
;;;558    
;;;559        for (i=0, ii=0, invalid=0; i<numBlobs; i++, ii+=5)
000ad2  2000              MOVS     r0,#0
000ad4  9002              STR      r0,[sp,#8]
000ad6  2300              MOVS     r3,#0
000ad8  9000              STR      r0,[sp,#0]
000ada  e0a5              B        |L1.3112|
                  |L1.2780|
;;;560        {
;;;561            if (blobs[ii+0]==0)
000adc  f8310013          LDRH     r0,[r1,r3,LSL #1]
000ae0  b900              CBNZ     r0,|L1.2788|
;;;562                continue;
000ae2  e09b              B        |L1.3100|
                  |L1.2788|
;;;563            left0 = blobs[ii+1];
000ae4  1c58              ADDS     r0,r3,#1
000ae6  f831c010          LDRH     r12,[r1,r0,LSL #1]
;;;564            right0 = blobs[ii+2];
000aea  1c98              ADDS     r0,r3,#2
000aec  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;565            top0 = blobs[ii+3];
000af0  1cd8              ADDS     r0,r3,#3
000af2  f8319010          LDRH     r9,[r1,r0,LSL #1]
;;;566            bottom0 = blobs[ii+4];
000af6  1d18              ADDS     r0,r3,#4
000af8  f831b010          LDRH     r11,[r1,r0,LSL #1]
;;;567    
;;;568            for (j=i+1, jj=ii+5; j<numBlobs; j++, jj+=5)
000afc  9802              LDR      r0,[sp,#8]
000afe  1c40              ADDS     r0,r0,#1
000b00  b280              UXTH     r0,r0
000b02  9001              STR      r0,[sp,#4]
000b04  1d58              ADDS     r0,r3,#5
000b06  b282              UXTH     r2,r0
000b08  e081              B        |L1.3086|
                  |L1.2826|
;;;569            {
;;;570                if (blobs[jj+0]==0)
000b0a  f8310012          LDRH     r0,[r1,r2,LSL #1]
000b0e  b900              CBNZ     r0,|L1.2834|
;;;571                    continue;
000b10  e077              B        |L1.3074|
                  |L1.2834|
;;;572                left = blobs[jj+1];
000b12  1c50              ADDS     r0,r2,#1
000b14  f8314010          LDRH     r4,[r1,r0,LSL #1]
;;;573                right = blobs[jj+2];
000b18  1c90              ADDS     r0,r2,#2
000b1a  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;574                top = blobs[jj+3];
000b1e  1cd0              ADDS     r0,r2,#3
000b20  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;575                bottom = blobs[jj+4];
000b24  1d10              ADDS     r0,r2,#4
000b26  f8317010          LDRH     r7,[r1,r0,LSL #1]
;;;576    
;;;577    #if 1 // if corners touch....
;;;578                if (left<=left0 && left0-right<=m_mergeDist &&
000b2a  4564              CMP      r4,r12
000b2c  dc18              BGT      |L1.2912|
000b2e  ebac0005          SUB      r0,r12,r5
000b32  f8bae284          LDRH     lr,[r10,#0x284]
000b36  4570              CMP      r0,lr
000b38  dc12              BGT      |L1.2912|
;;;579                        ((top0<=top && top<=bottom0) || (top0<=bottom && bottom<=bottom0)))
000b3a  45b1              CMP      r9,r6
000b3c  dc01              BGT      |L1.2882|
000b3e  455e              CMP      r6,r11
000b40  dd03              BLE      |L1.2890|
                  |L1.2882|
000b42  45b9              CMP      r9,r7
000b44  dc0c              BGT      |L1.2912|
000b46  455f              CMP      r7,r11
000b48  dc0a              BGT      |L1.2912|
                  |L1.2890|
;;;580                {
;;;581                    blobs[ii+1] = left;
000b4a  1c58              ADDS     r0,r3,#1
000b4c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;582                    blobs[jj+0] = 0; // invalidate
000b50  2000              MOVS     r0,#0
000b52  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;583                    invalid++;
000b56  9800              LDR      r0,[sp,#0]
000b58  1c40              ADDS     r0,r0,#1
000b5a  b280              UXTH     r0,r0
000b5c  9000              STR      r0,[sp,#0]
000b5e  e04f              B        |L1.3072|
                  |L1.2912|
;;;584                }
;;;585                else if (right>=right0 && left-right0<=m_mergeDist &&
000b60  4545              CMP      r5,r8
000b62  db18              BLT      |L1.2966|
000b64  eba40008          SUB      r0,r4,r8
000b68  f8bae284          LDRH     lr,[r10,#0x284]
000b6c  4570              CMP      r0,lr
000b6e  dc12              BGT      |L1.2966|
;;;586                         ((top0<=top && top<=bottom0) || (top0<=bottom && bottom<=bottom0)))
000b70  45b1              CMP      r9,r6
000b72  dc01              BGT      |L1.2936|
000b74  455e              CMP      r6,r11
000b76  dd03              BLE      |L1.2944|
                  |L1.2936|
000b78  45b9              CMP      r9,r7
000b7a  dc0c              BGT      |L1.2966|
000b7c  455f              CMP      r7,r11
000b7e  dc0a              BGT      |L1.2966|
                  |L1.2944|
;;;587                {
;;;588                    blobs[ii+2] = right;
000b80  1c98              ADDS     r0,r3,#2
000b82  f8215010          STRH     r5,[r1,r0,LSL #1]
;;;589                    blobs[jj+0] = 0; // invalidate
000b86  2000              MOVS     r0,#0
000b88  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;590                    invalid++;
000b8c  9800              LDR      r0,[sp,#0]
000b8e  1c40              ADDS     r0,r0,#1
000b90  b280              UXTH     r0,r0
000b92  9000              STR      r0,[sp,#0]
000b94  e034              B        |L1.3072|
                  |L1.2966|
;;;591                }
;;;592                else if (top<=top0 && top0-bottom<=m_mergeDist &&
000b96  454e              CMP      r6,r9
000b98  dc18              BGT      |L1.3020|
000b9a  eba90007          SUB      r0,r9,r7
000b9e  f8bae284          LDRH     lr,[r10,#0x284]
000ba2  4570              CMP      r0,lr
000ba4  dc12              BGT      |L1.3020|
;;;593                         ((left0<=left && left<=right0) || (left0<=right && right<=right0)))
000ba6  45a4              CMP      r12,r4
000ba8  dc01              BGT      |L1.2990|
000baa  4544              CMP      r4,r8
000bac  dd03              BLE      |L1.2998|
                  |L1.2990|
000bae  45ac              CMP      r12,r5
000bb0  dc0c              BGT      |L1.3020|
000bb2  4545              CMP      r5,r8
000bb4  dc0a              BGT      |L1.3020|
                  |L1.2998|
;;;594                {
;;;595                    blobs[ii+3] = top;
000bb6  1cd8              ADDS     r0,r3,#3
000bb8  f8216010          STRH     r6,[r1,r0,LSL #1]
;;;596                    blobs[jj+0] = 0; // invalidate
000bbc  2000              MOVS     r0,#0
000bbe  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;597                    invalid++;
000bc2  9800              LDR      r0,[sp,#0]
000bc4  1c40              ADDS     r0,r0,#1
000bc6  b280              UXTH     r0,r0
000bc8  9000              STR      r0,[sp,#0]
000bca  e019              B        |L1.3072|
                  |L1.3020|
;;;598                }
;;;599                else if (bottom>=bottom0 && top-bottom0<=m_mergeDist &&
000bcc  455f              CMP      r7,r11
000bce  db17              BLT      |L1.3072|
000bd0  eba6000b          SUB      r0,r6,r11
000bd4  f8bae284          LDRH     lr,[r10,#0x284]
000bd8  4570              CMP      r0,lr
000bda  dc11              BGT      |L1.3072|
;;;600                         ((left0<=left && left<=right0) || (left0<=right && right<=right0)))
000bdc  45a4              CMP      r12,r4
000bde  dc01              BGT      |L1.3044|
000be0  4544              CMP      r4,r8
000be2  dd03              BLE      |L1.3052|
                  |L1.3044|
000be4  45ac              CMP      r12,r5
000be6  dc0b              BGT      |L1.3072|
000be8  4545              CMP      r5,r8
000bea  dc09              BGT      |L1.3072|
                  |L1.3052|
;;;601                {
;;;602                    blobs[ii+4] = bottom;
000bec  1d18              ADDS     r0,r3,#4
000bee  f8217010          STRH     r7,[r1,r0,LSL #1]
;;;603                    blobs[jj+0] = 0; // invalidate
000bf2  2000              MOVS     r0,#0
000bf4  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;604                    invalid++;
000bf8  9800              LDR      r0,[sp,#0]
000bfa  1c40              ADDS     r0,r0,#1
000bfc  b280              UXTH     r0,r0
000bfe  9000              STR      r0,[sp,#0]
                  |L1.3072|
000c00  bf00              NOP                            ;571
                  |L1.3074|
000c02  9801              LDR      r0,[sp,#4]            ;568
000c04  1c40              ADDS     r0,r0,#1              ;568
000c06  b280              UXTH     r0,r0                 ;568
000c08  9001              STR      r0,[sp,#4]            ;568
000c0a  1d50              ADDS     r0,r2,#5              ;568
000c0c  b282              UXTH     r2,r0                 ;568
                  |L1.3086|
000c0e  f8dde014          LDR      lr,[sp,#0x14]         ;568
000c12  9801              LDR      r0,[sp,#4]            ;568
000c14  4570              CMP      r0,lr                 ;568
000c16  f6ffaf78          BLT      |L1.2826|
000c1a  bf00              NOP                            ;562
                  |L1.3100|
000c1c  9802              LDR      r0,[sp,#8]            ;559
000c1e  1c40              ADDS     r0,r0,#1              ;559
000c20  b280              UXTH     r0,r0                 ;559
000c22  9002              STR      r0,[sp,#8]            ;559
000c24  1d58              ADDS     r0,r3,#5              ;559
000c26  b283              UXTH     r3,r0                 ;559
                  |L1.3112|
000c28  f8dde014          LDR      lr,[sp,#0x14]         ;559
000c2c  9802              LDR      r0,[sp,#8]            ;559
000c2e  4570              CMP      r0,lr                 ;559
000c30  f6ffaf54          BLT      |L1.2780|
;;;605                }
;;;606    #else // at least half of a side (the smaller adjacent side) has to overlap
;;;607                if (left<=left0 && left0-right<=m_mergeDist &&
;;;608                        ((top<=top0 && top0<=top+height) || (top+height<=bottom0 && bottom0<=bottom)))
;;;609                {
;;;610                    blobs[ii+1] = left;
;;;611                    blobs[jj+0] = 0; // invalidate
;;;612                    invalid++;
;;;613                }
;;;614                else if (right>=right0 && left-right0<=m_mergeDist &&
;;;615                         ((top<=top0 && top0<=top+height) || (top+height<=bottom0 && bottom0<=bottom)))
;;;616                {
;;;617                    blobs[ii+2] = right;
;;;618                    blobs[jj+0] = 0; // invalidate
;;;619                    invalid++;
;;;620                }
;;;621                else if (top<=top0 && top0-bottom<=m_mergeDist &&
;;;622                         ((left<=left0 && left0<=left+width) || (left+width<=right0 && right0<=right)))
;;;623                {
;;;624                    blobs[ii+3] = top;
;;;625                    blobs[jj+0] = 0; // invalidate
;;;626                    invalid++;
;;;627                }
;;;628                else if (bottom>=bottom0 && top-bottom0<=m_mergeDist &&
;;;629                         ((left<=left0 && left0<=left+width) || (left+width<=right0 && right0<=right)))
;;;630                {
;;;631                    blobs[ii+4] = bottom;
;;;632                    blobs[jj+0] = 0; // invalidate
;;;633                    invalid++;
;;;634                }
;;;635    #endif
;;;636            }
;;;637        }
;;;638    
;;;639        return invalid;
000c34  9800              LDR      r0,[sp,#0]
;;;640    }
000c36  b006              ADD      sp,sp,#0x18
000c38  e8bd8ff0          POP      {r4-r11,pc}
;;;641    
                          ENDP

                  _ZN5Blobs8endFrameEv PROC ; Blobs::endFrame()
;;;1074   
;;;1075   void Blobs::endFrame()
000c3c  b570              PUSH     {r4-r6,lr}
;;;1076   {
000c3e  4605              MOV      r5,r0
;;;1077       int i;
;;;1078       for (i=0; i<CL_NUM_SIGNATURES; i++)
000c40  2400              MOVS     r4,#0
000c42  e010              B        |L1.3174|
                  |L1.3140|
;;;1079       {
;;;1080           m_assembler[i].EndFrame();
000c44  ebc402c4          RSB      r2,r4,r4,LSL #3
000c48  f50571d2          ADD      r1,r5,#0x1a4
000c4c  eb010082          ADD      r0,r1,r2,LSL #2
000c50  f7fffffe          BL       _ZN14CBlobAssembler8EndFrameEv ; CBlobAssembler::EndFrame()
;;;1081           m_assembler[i].SortFinished();
000c54  ebc402c4          RSB      r2,r4,r4,LSL #3
000c58  f50571d2          ADD      r1,r5,#0x1a4
000c5c  eb010082          ADD      r0,r1,r2,LSL #2
000c60  f7fffffe          BL       _ZN14CBlobAssembler12SortFinishedEv ; CBlobAssembler::SortFinished()
000c64  1c64              ADDS     r4,r4,#1              ;1078
                  |L1.3174|
000c66  2c07              CMP      r4,#7                 ;1078
000c68  dbec              BLT      |L1.3140|
;;;1082       }
;;;1083   }
000c6a  bd70              POP      {r4-r6,pc}
;;;1084   
                          ENDP

                  _ZN5Blobs13handleSegmentEhttt PROC ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
;;;77     
;;;78     int Blobs::handleSegment(uint8_t signature, uint16_t row, uint16_t startCol, uint16_t length)
000c6c  e92d41fc          PUSH     {r2-r8,lr}
;;;79     {
000c70  4606              MOV      r6,r0
000c72  460c              MOV      r4,r1
000c74  4617              MOV      r7,r2
000c76  461d              MOV      r5,r3
000c78  f8dd8020          LDR      r8,[sp,#0x20]
;;;80     	SSegment s;
;;;81     
;;;82         s.model = signature;
000c7c  f89d0000          LDRB     r0,[sp,#0]
000c80  f3640002          BFI      r0,r4,#0,#3
000c84  f88d0000          STRB     r0,[sp,#0]
;;;83         s.row = row;
000c88  f8bd0000          LDRH     r0,[sp,#0]
000c8c  f36700cb          BFI      r0,r7,#3,#9
000c90  f8ad0000          STRH     r0,[sp,#0]
;;;84         s.startCol = startCol;
000c94  b2a8              UXTH     r0,r5
000c96  f8ad0002          STRH     r0,[sp,#2]
;;;85         s.endCol = startCol+length;
000c9a  eb050008          ADD      r0,r5,r8
000c9e  b280              UXTH     r0,r0
000ca0  f8ad0004          STRH     r0,[sp,#4]
;;;86     
;;;87     #ifndef PIXY
;;;88         uint32_t qval;
;;;89     
;;;90         qval = signature;
;;;91         qval |= startCol<<3;
;;;92         qval |= length<<12;
;;;93     
;;;94         m_qvals[m_numQvals++] = qval;
;;;95     #endif
;;;96     
;;;97         return m_assembler[signature-1].Add(s);
000ca4  1e61              SUBS     r1,r4,#1
000ca6  ebc102c1          RSB      r2,r1,r1,LSL #3
000caa  f50671d2          ADD      r1,r6,#0x1a4
000cae  eb010082          ADD      r0,r1,r2,LSL #2
000cb2  4669              MOV      r1,sp
000cb4  f7fffffe          BL       _ZN14CBlobAssembler3AddERK8SSegment ; CBlobAssembler::Add(const SSegment&)
;;;98     }
000cb8  e8bd81fc          POP      {r2-r8,pc}
;;;99     
                          ENDP

                  _ZN5Blobs17runlengthAnalysisEv PROC ; Blobs::runlengthAnalysis()
;;;105    // 4: bottom Y edge
;;;106    int Blobs::runlengthAnalysis()
000cbc  e92d4ff0          PUSH     {r4-r11,lr}
;;;107    {
000cc0  b08b              SUB      sp,sp,#0x2c
000cc2  4606              MOV      r6,r0
;;;108        int32_t row=-1, icount=0;
000cc4  f04f38ff          MOV      r8,#0xffffffff
000cc8  2000              MOVS     r0,#0
000cca  900a              STR      r0,[sp,#0x28]
;;;109        uint32_t startCol, sig, prevSig, prevStartCol, segmentStartCol, segmentEndCol, segmentSig=0;
000ccc  2500              MOVS     r5,#0
;;;110        bool merge;
;;;111        Qval qval;
000cce  a806              ADD      r0,sp,#0x18
000cd0  2100              MOVS     r1,#0
000cd2  8001              STRH     r1,[r0,#0]
000cd4  80c1              STRH     r1,[r0,#6]
000cd6  8041              STRH     r1,[r0,#2]
000cd8  8081              STRH     r1,[r0,#4]
000cda  bf00              NOP      
;;;112        int32_t res=0;
000cdc  2000              MOVS     r0,#0
000cde  9005              STR      r0,[sp,#0x14]
;;;113    	register int32_t u, v, c;
;;;114    
;;;115    #ifndef PIXY
;;;116        m_numQvals = 0;
;;;117    #endif
;;;118    
;;;119        while(1)
000ce0  e0e5              B        |L1.3758|
                  |L1.3298|
;;;120        {
;;;121            while (m_qq->dequeue(&qval)==0);
000ce2  bf00              NOP      
                  |L1.3300|
000ce4  a906              ADD      r1,sp,#0x18
000ce6  f8d601a0          LDR      r0,[r6,#0x1a0]
000cea  f7fffffe          BL       _ZN6Qqueue7dequeueEP4Qval ; Qqueue::dequeue(Qval*)
000cee  2800              CMP      r0,#0
000cf0  d0f8              BEQ      |L1.3300|
;;;122            if (qval.m_col>=0xfffe)
000cf2  f8bd0018          LDRH     r0,[sp,#0x18]
000cf6  f64f71fe          MOV      r1,#0xfffe
000cfa  4288              CMP      r0,r1
000cfc  db00              BLT      |L1.3328|
;;;123                break;
000cfe  e0d7              B        |L1.3760|
                  |L1.3328|
;;;124    		if (res<0)
000d00  9805              LDR      r0,[sp,#0x14]
000d02  2800              CMP      r0,#0
000d04  da00              BGE      |L1.3336|
;;;125    			continue;
000d06  e0d2              B        |L1.3758|
                  |L1.3336|
;;;126            if (qval.m_col==0)
000d08  f8bd0018          LDRH     r0,[sp,#0x18]
000d0c  bb18              CBNZ     r0,|L1.3414|
;;;127            {
;;;128                prevStartCol = 0xffff;
000d0e  f64f70ff          MOV      r0,#0xffff
000d12  9008              STR      r0,[sp,#0x20]
;;;129                prevSig = 0;
000d14  2000              MOVS     r0,#0
000d16  9009              STR      r0,[sp,#0x24]
;;;130                if (segmentSig)
000d18  b175              CBZ      r5,|L1.3384|
;;;131                {
;;;132                    res = handleSegment(segmentSig, row, segmentStartCol-1, segmentEndCol - segmentStartCol+1);
000d1a  ebaa0007          SUB      r0,r10,r7
000d1e  1c40              ADDS     r0,r0,#1
000d20  b280              UXTH     r0,r0
000d22  9000              STR      r0,[sp,#0]
000d24  1e78              SUBS     r0,r7,#1
000d26  b283              UXTH     r3,r0
000d28  fa1ff288          UXTH     r2,r8
000d2c  b2e9              UXTB     r1,r5
000d2e  4630              MOV      r0,r6
000d30  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
000d34  9005              STR      r0,[sp,#0x14]
;;;133                    segmentSig = 0;
000d36  2500              MOVS     r5,#0
                  |L1.3384|
;;;134                }
;;;135                row++;
000d38  f1080801          ADD      r8,r8,#1
;;;136    #ifndef PIXY
;;;137                m_qvals[m_numQvals++] = 0;
;;;138    #else
;;;139    			if (icount++==5) // an interleave of every 5 lines or about every 175us seems good
000d3c  980a              LDR      r0,[sp,#0x28]
000d3e  1c41              ADDS     r1,r0,#1
000d40  910a              STR      r1,[sp,#0x28]
000d42  2805              CMP      r0,#5
000d44  d106              BNE      |L1.3412|
;;;140    			{
;;;141    				g_chirpUsb->service();
000d46  2101              MOVS     r1,#1
000d48  48fe              LDR      r0,|L1.4420|
000d4a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000d4c  f7fffffe          BL       _ZN5Chirp7serviceEb ; Chirp::service(bool)
;;;142    				icount = 0;
000d50  2000              MOVS     r0,#0
000d52  900a              STR      r0,[sp,#0x28]
                  |L1.3412|
;;;143    			}
;;;144    #endif
;;;145                continue;
000d54  e0ab              B        |L1.3758|
                  |L1.3414|
;;;146            }
;;;147    
;;;148            sig = qval.m_col&0x07;
000d56  f8bd0018          LDRH     r0,[sp,#0x18]
000d5a  f0000407          AND      r4,r0,#7
;;;149    
;;;150            u = qval.m_u;
000d5e  f9bd001c          LDRSH    r0,[sp,#0x1c]
000d62  9004              STR      r0,[sp,#0x10]
;;;151            v = qval.m_v;
000d64  f9bd001a          LDRSH    r0,[sp,#0x1a]
000d68  9003              STR      r0,[sp,#0xc]
;;;152    
;;;153            u <<= CL_LUT_ENTRY_SCALE;
000d6a  9804              LDR      r0,[sp,#0x10]
000d6c  03c0              LSLS     r0,r0,#15
000d6e  9004              STR      r0,[sp,#0x10]
;;;154            v <<= CL_LUT_ENTRY_SCALE;
000d70  9803              LDR      r0,[sp,#0xc]
000d72  03c0              LSLS     r0,r0,#15
000d74  9003              STR      r0,[sp,#0xc]
;;;155            c = qval.m_y;
000d76  f8bd001e          LDRH     r0,[sp,#0x1e]
000d7a  9002              STR      r0,[sp,#8]
;;;156            if (c==0)
000d7c  9802              LDR      r0,[sp,#8]
000d7e  b908              CBNZ     r0,|L1.3460|
;;;157                c = 1;
000d80  2001              MOVS     r0,#1
000d82  9002              STR      r0,[sp,#8]
                  |L1.3460|
;;;158            u /= c;
000d84  9902              LDR      r1,[sp,#8]
000d86  9804              LDR      r0,[sp,#0x10]
000d88  fb90f0f1          SDIV     r0,r0,r1
000d8c  9004              STR      r0,[sp,#0x10]
;;;159            v /= c;
000d8e  e9dd1002          LDRD     r1,r0,[sp,#8]
000d92  fb90f0f1          SDIV     r0,r0,r1
000d96  9003              STR      r0,[sp,#0xc]
;;;160    
;;;161            if (m_clut.m_runtimeSigs[sig-1].m_uMin<u && u<m_clut.m_runtimeSigs[sig-1].m_uMax &&
000d98  1e60              SUBS     r0,r4,#1
000d9a  eb000180          ADD      r1,r0,r0,LSL #2
000d9e  f10600e0          ADD      r0,r6,#0xe0
000da2  f8501021          LDR      r1,[r0,r1,LSL #2]
000da6  9804              LDR      r0,[sp,#0x10]
000da8  4281              CMP      r1,r0
000daa  da6f              BGE      |L1.3724|
000dac  1e60              SUBS     r0,r4,#1
000dae  eb000180          ADD      r1,r0,r0,LSL #2
000db2  f10600e0          ADD      r0,r6,#0xe0
000db6  eb000081          ADD      r0,r0,r1,LSL #2
000dba  6841              LDR      r1,[r0,#4]
000dbc  9804              LDR      r0,[sp,#0x10]
000dbe  4281              CMP      r1,r0
000dc0  dd64              BLE      |L1.3724|
;;;162                    m_clut.m_runtimeSigs[sig-1].m_vMin<v && v<m_clut.m_runtimeSigs[sig-1].m_vMax && c>=(int32_t)m_clut.m_miny)
000dc2  1e60              SUBS     r0,r4,#1
000dc4  eb000180          ADD      r1,r0,r0,LSL #2
000dc8  f10600e0          ADD      r0,r6,#0xe0
000dcc  eb000081          ADD      r0,r0,r1,LSL #2
000dd0  6881              LDR      r1,[r0,#8]
000dd2  9803              LDR      r0,[sp,#0xc]
000dd4  4281              CMP      r1,r0
000dd6  da59              BGE      |L1.3724|
000dd8  1e60              SUBS     r0,r4,#1
000dda  eb000180          ADD      r1,r0,r0,LSL #2
000dde  f10600e0          ADD      r0,r6,#0xe0
000de2  eb000081          ADD      r0,r0,r1,LSL #2
000de6  68c1              LDR      r1,[r0,#0xc]
000de8  9803              LDR      r0,[sp,#0xc]
000dea  4281              CMP      r1,r0
000dec  dd4e              BLE      |L1.3724|
000dee  f8d6116c          LDR      r1,[r6,#0x16c]
000df2  9802              LDR      r0,[sp,#8]
000df4  4281              CMP      r1,r0
000df6  dc49              BGT      |L1.3724|
;;;163            {
;;;164             	qval.m_col >>= 3;
000df8  f8bd0018          LDRH     r0,[sp,#0x18]
000dfc  10c0              ASRS     r0,r0,#3
000dfe  f8ad0018          STRH     r0,[sp,#0x18]
;;;165            	startCol = qval.m_col;
000e02  f8bd9018          LDRH     r9,[sp,#0x18]
;;;166               	merge = startCol-prevStartCol<=5 && prevSig==sig;
000e06  9808              LDR      r0,[sp,#0x20]
000e08  eba90000          SUB      r0,r9,r0
000e0c  2805              CMP      r0,#5
000e0e  d804              BHI      |L1.3610|
000e10  9809              LDR      r0,[sp,#0x24]
000e12  42a0              CMP      r0,r4
000e14  d101              BNE      |L1.3610|
000e16  2001              MOVS     r0,#1
000e18  e000              B        |L1.3612|
                  |L1.3610|
000e1a  2000              MOVS     r0,#0
                  |L1.3612|
000e1c  4683              MOV      r11,r0
;;;167                if (segmentSig==0 && merge)
000e1e  b92d              CBNZ     r5,|L1.3628|
000e20  f1bb0f00          CMP      r11,#0
000e24  d002              BEQ      |L1.3628|
;;;168                {
;;;169                    segmentSig = sig;
000e26  4625              MOV      r5,r4
;;;170                    segmentStartCol = prevStartCol;
000e28  9f08              LDR      r7,[sp,#0x20]
000e2a  e014              B        |L1.3670|
                  |L1.3628|
;;;171                }
;;;172                else if (segmentSig!=0 && (segmentSig!=sig || !merge))
000e2c  b19d              CBZ      r5,|L1.3670|
000e2e  42a5              CMP      r5,r4
000e30  d102              BNE      |L1.3640|
000e32  f1bb0f00          CMP      r11,#0
000e36  d10e              BNE      |L1.3670|
                  |L1.3640|
;;;173                {
;;;174                    res = handleSegment(segmentSig, row, segmentStartCol-1, segmentEndCol - segmentStartCol+1);
000e38  ebaa0007          SUB      r0,r10,r7
000e3c  1c40              ADDS     r0,r0,#1
000e3e  b280              UXTH     r0,r0
000e40  9000              STR      r0,[sp,#0]
000e42  1e78              SUBS     r0,r7,#1
000e44  b283              UXTH     r3,r0
000e46  fa1ff288          UXTH     r2,r8
000e4a  b2e9              UXTB     r1,r5
000e4c  4630              MOV      r0,r6
000e4e  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
000e52  9005              STR      r0,[sp,#0x14]
;;;175                    segmentSig = 0;
000e54  2500              MOVS     r5,#0
                  |L1.3670|
;;;176                }
;;;177    
;;;178                if (segmentSig!=0 && merge)
000e56  b125              CBZ      r5,|L1.3682|
000e58  f1bb0f00          CMP      r11,#0
000e5c  d001              BEQ      |L1.3682|
;;;179                    segmentEndCol = startCol;
000e5e  46ca              MOV      r10,r9
000e60  e00f              B        |L1.3714|
                  |L1.3682|
;;;180                else if (segmentSig==0 && !merge)
000e62  b975              CBNZ     r5,|L1.3714|
000e64  f1bb0f00          CMP      r11,#0
000e68  d10b              BNE      |L1.3714|
;;;181                    res = handleSegment(sig, row, startCol-1, 2);
000e6a  2002              MOVS     r0,#2
000e6c  9000              STR      r0,[sp,#0]
000e6e  f1a90001          SUB      r0,r9,#1
000e72  b283              UXTH     r3,r0
000e74  fa1ff288          UXTH     r2,r8
000e78  b2e1              UXTB     r1,r4
000e7a  4630              MOV      r0,r6
000e7c  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
000e80  9005              STR      r0,[sp,#0x14]
                  |L1.3714|
;;;182                prevSig = sig;
000e82  9409              STR      r4,[sp,#0x24]
;;;183                prevStartCol = startCol;
000e84  f8cd9020          STR      r9,[sp,#0x20]
000e88  e010              B        |L1.3756|
000e8a  e7ff              B        |L1.3724|
                  |L1.3724|
;;;184            }
;;;185            else if (segmentSig!=0)
000e8c  b175              CBZ      r5,|L1.3756|
;;;186            {
;;;187                res = handleSegment(segmentSig, row, segmentStartCol-1, segmentEndCol - segmentStartCol+1);
000e8e  ebaa0007          SUB      r0,r10,r7
000e92  1c40              ADDS     r0,r0,#1
000e94  b280              UXTH     r0,r0
000e96  9000              STR      r0,[sp,#0]
000e98  1e78              SUBS     r0,r7,#1
000e9a  b283              UXTH     r3,r0
000e9c  fa1ff288          UXTH     r2,r8
000ea0  b2e9              UXTB     r1,r5
000ea2  4630              MOV      r0,r6
000ea4  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
000ea8  9005              STR      r0,[sp,#0x14]
;;;188                segmentSig = 0;
000eaa  2500              MOVS     r5,#0
                  |L1.3756|
000eac  bf00              NOP                            ;125
                  |L1.3758|
000eae  e718              B        |L1.3298|
                  |L1.3760|
000eb0  bf00              NOP                            ;123
;;;189            }
;;;190        }
;;;191    	endFrame();
000eb2  4630              MOV      r0,r6
000eb4  f7fffffe          BL       _ZN5Blobs8endFrameEv ; Blobs::endFrame()
;;;192    
;;;193        if (qval.m_col==0xfffe) // error code, queue overrun
000eb8  f8bd0018          LDRH     r0,[sp,#0x18]
000ebc  f64f71fe          MOV      r1,#0xfffe
000ec0  4288              CMP      r0,r1
000ec2  d104              BNE      |L1.3790|
;;;194    		return -1;
000ec4  f04f30ff          MOV      r0,#0xffffffff
                  |L1.3784|
;;;195    	return 0;
;;;196    }
000ec8  b00b              ADD      sp,sp,#0x2c
000eca  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3790|
000ece  2000              MOVS     r0,#0                 ;195
000ed0  e7fa              B        |L1.3784|
;;;197    
                          ENDP

                  _ZN5Blobs7blobifyEv PROC ; Blobs::blobify()
;;;198    int Blobs::blobify()
000ed2  e92d4ff0          PUSH     {r4-r11,lr}
;;;199    {
000ed6  b087              SUB      sp,sp,#0x1c
000ed8  4604              MOV      r4,r0
;;;200        uint32_t i, j, k;
;;;201        bool colorCode;
;;;202        CBlob *blob;
;;;203        uint16_t *blobsStart;
;;;204        uint16_t numBlobsStart, invalid, invalid2;
;;;205        uint16_t left, top, right, bottom;
;;;206        //uint32_t timer, timer2=0;
;;;207    
;;;208    	if (runlengthAnalysis()<0)
000eda  4620              MOV      r0,r4
000edc  f7fffffe          BL       _ZN5Blobs17runlengthAnalysisEv ; Blobs::runlengthAnalysis()
000ee0  2800              CMP      r0,#0
000ee2  da15              BGE      |L1.3856|
;;;209    	{
;;;210       	 	for (i=0; i<CL_NUM_SIGNATURES; i++)
000ee4  2500              MOVS     r5,#0
000ee6  e008              B        |L1.3834|
                  |L1.3816|
;;;211            	m_assembler[i].Reset();
000ee8  ebc502c5          RSB      r2,r5,r5,LSL #3
000eec  f50471d2          ADD      r1,r4,#0x1a4
000ef0  eb010082          ADD      r0,r1,r2,LSL #2
000ef4  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
000ef8  1c6d              ADDS     r5,r5,#1              ;210
                  |L1.3834|
000efa  2d07              CMP      r5,#7                 ;210
000efc  d3f4              BCC      |L1.3816|
;;;212        	m_numBlobs = 0;
000efe  2000              MOVS     r0,#0
000f00  f8a4026c          STRH     r0,[r4,#0x26c]
;;;213    		m_numCCBlobs = 0;
000f04  f8a40274          STRH     r0,[r4,#0x274]
;;;214    		return -1;
000f08  1e40              SUBS     r0,r0,#1
                  |L1.3850|
;;;215    	}
;;;216    
;;;217        // copy blobs into memory
;;;218        invalid = 0;
;;;219        // mutex keeps interrupt routine from stepping on us
;;;220        m_mutex = true;
;;;221    
;;;222        m_maxBlob = NULL;
;;;223    
;;;224        for (i=0, m_numBlobs=0, m_numCCBlobs=0; i<CL_NUM_SIGNATURES; i++)
;;;225        {
;;;226            colorCode = CC_SIGNATURE(i+1);
;;;227    
;;;228            for (j=m_numBlobs*5, k=0, blobsStart=m_blobs+j, numBlobsStart=m_numBlobs, blob=m_assembler[i].finishedBlobs;
;;;229                 blob && m_numBlobs<m_maxBlobs && k<m_maxBlobsPerModel; blob=blob->next, k++)
;;;230            {
;;;231                if ((colorCode && blob->GetArea()<MIN_COLOR_CODE_AREA) ||
;;;232                    (!colorCode && blob->GetArea()<(int)m_minArea))
;;;233                    continue;
;;;234                blob->getBBox((short &)left, (short &)top, (short &)right, (short &)bottom);
;;;235                if (bottom-top<=1) // blobs that are 1 line tall
;;;236                    continue;
;;;237                m_blobs[j + 0] = i+1;
;;;238                m_blobs[j + 1] = left;
;;;239                m_blobs[j + 2] = right;
;;;240                m_blobs[j + 3] = top;
;;;241                m_blobs[j + 4] = bottom;
;;;242                m_numBlobs++;
;;;243                j += 5;
;;;244    
;;;245            }
;;;246            //setTimer(&timer);
;;;247            if (!colorCode) // do not combine color code models
;;;248            {
;;;249                while(1)
;;;250                {
;;;251                    invalid2 = combine2(blobsStart, m_numBlobs-numBlobsStart);
;;;252                    if (invalid2==0)
;;;253                        break;
;;;254                    invalid += invalid2;
;;;255                }
;;;256            }
;;;257            //timer2 += getTimer(timer);
;;;258        }
;;;259        //setTimer(&timer);
;;;260        invalid += combine(m_blobs, m_numBlobs);
;;;261        if (m_ccMode!=DISABLED)
;;;262        {
;;;263            m_ccBlobs = (BlobB *)(m_blobs + m_numBlobs*5);
;;;264            // calculate number of codedblobs left
;;;265            processCC();
;;;266        }
;;;267        if (invalid || m_ccMode!=DISABLED)
;;;268        {
;;;269            invalid2 = compress(m_blobs, m_numBlobs);
;;;270            m_numBlobs -= invalid2;
;;;271        }
;;;272        //timer2 += getTimer(timer);
;;;273        //cprintf("time=%d\n", timer2); // never seen this greater than 200us.  or 1% of frame period
;;;274    
;;;275        // reset read indexes-- new frame
;;;276        m_blobReadIndex = 0;
;;;277        m_ccBlobReadIndex = 0;
;;;278        m_mutex = false;
;;;279    
;;;280        // free memory
;;;281        for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;282            m_assembler[i].Reset();
;;;283    
;;;284    #if 0
;;;285        static int frame = 0;
;;;286        if (m_numBlobs>0)
;;;287            cprintf("%d: blobs %d %d %d %d %d\n", frame, m_numBlobs, m_blobs[1], m_blobs[2], m_blobs[3], m_blobs[4]);
;;;288        else
;;;289            cprintf("%d: blobs 0\n", frame);
;;;290        frame++;
;;;291    #endif
;;;292    	return 0;
;;;293    }
000f0a  b007              ADD      sp,sp,#0x1c
000f0c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3856|
000f10  f04f0900          MOV      r9,#0                 ;218
000f14  2001              MOVS     r0,#1                 ;220
000f16  f8840276          STRB     r0,[r4,#0x276]        ;220
000f1a  2000              MOVS     r0,#0                 ;222
000f1c  f8c4028c          STR      r0,[r4,#0x28c]        ;222
000f20  2500              MOVS     r5,#0                 ;224
000f22  f8a4026c          STRH     r0,[r4,#0x26c]        ;224
000f26  f8a40274          STRH     r0,[r4,#0x274]        ;224
000f2a  e095              B        |L1.4184|
                  |L1.3884|
000f2c  f8940288          LDRB     r0,[r4,#0x288]        ;226
000f30  2802              CMP      r0,#2                 ;226
000f32  d006              BEQ      |L1.3906|
000f34  1c68              ADDS     r0,r5,#1              ;226
000f36  b2c1              UXTB     r1,r0                 ;226
000f38  4620              MOV      r0,r4                 ;226
000f3a  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
000f3e  2801              CMP      r0,#1                 ;226
000f40  d101              BNE      |L1.3910|
                  |L1.3906|
000f42  2001              MOVS     r0,#1                 ;226
000f44  e000              B        |L1.3912|
                  |L1.3910|
000f46  2000              MOVS     r0,#0                 ;226
                  |L1.3912|
000f48  4682              MOV      r10,r0                ;226
000f4a  f8b4026c          LDRH     r0,[r4,#0x26c]        ;228
000f4e  eb000680          ADD      r6,r0,r0,LSL #2       ;228
000f52  f04f0b00          MOV      r11,#0                ;228
000f56  f8d40268          LDR      r0,[r4,#0x268]        ;228
000f5a  eb000046          ADD      r0,r0,r6,LSL #1       ;228
000f5e  9006              STR      r0,[sp,#0x18]         ;228
000f60  f8b4026c          LDRH     r0,[r4,#0x26c]        ;228
000f64  9005              STR      r0,[sp,#0x14]         ;228
000f66  ebc501c5          RSB      r1,r5,r5,LSL #3       ;228
000f6a  f50470d2          ADD      r0,r4,#0x1a4          ;228
000f6e  eb000081          ADD      r0,r0,r1,LSL #2       ;228
000f72  6907              LDR      r7,[r0,#0x10]         ;228
000f74  e04c              B        |L1.4112|
                  |L1.3958|
000f76  f1ba0f00          CMP      r10,#0                ;231
000f7a  d003              BEQ      |L1.3972|
000f7c  bf00              NOP                            ;231
000f7e  6a38              LDR      r0,[r7,#0x20]         ;231
000f80  280a              CMP      r0,#0xa               ;231
000f82  db08              BLT      |L1.3990|
                  |L1.3972|
000f84  f1ba0f00          CMP      r10,#0                ;232
000f88  d106              BNE      |L1.3992|
000f8a  bf00              NOP                            ;232
000f8c  6a38              LDR      r0,[r7,#0x20]         ;232
000f8e  f8d41280          LDR      r1,[r4,#0x280]        ;232
000f92  4288              CMP      r0,r1                 ;232
000f94  da00              BGE      |L1.3992|
                  |L1.3990|
000f96  e038              B        |L1.4106|
                  |L1.3992|
000f98  a801              ADD      r0,sp,#4              ;234
000f9a  8a39              LDRH     r1,[r7,#0x10]         ;234
000f9c  9104              STR      r1,[sp,#0x10]         ;234
000f9e  8a79              LDRH     r1,[r7,#0x12]         ;234
000fa0  9103              STR      r1,[sp,#0xc]          ;234
000fa2  8ab9              LDRH     r1,[r7,#0x14]         ;234
000fa4  9102              STR      r1,[sp,#8]            ;234
000fa6  88b9              LDRH     r1,[r7,#4]            ;234
000fa8  f3c101c8          UBFX     r1,r1,#3,#9           ;234
000fac  8001              STRH     r1,[r0,#0]            ;234
000fae  bf00              NOP                            ;234
000fb0  f8bd0004          LDRH     r0,[sp,#4]            ;235
000fb4  f8bd100c          LDRH     r1,[sp,#0xc]          ;235
000fb8  1a40              SUBS     r0,r0,r1              ;235
000fba  2801              CMP      r0,#1                 ;235
000fbc  dc00              BGT      |L1.4032|
000fbe  e024              B        |L1.4106|
                  |L1.4032|
000fc0  1c68              ADDS     r0,r5,#1              ;237
000fc2  f504741a          ADD      r4,r4,#0x268          ;237
000fc6  6821              LDR      r1,[r4,#0]            ;237
000fc8  f8210016          STRH     r0,[r1,r6,LSL #1]     ;237
000fcc  f8bd1010          LDRH     r1,[sp,#0x10]         ;238
000fd0  1c70              ADDS     r0,r6,#1              ;238
000fd2  6822              LDR      r2,[r4,#0]            ;238
000fd4  f8221010          STRH     r1,[r2,r0,LSL #1]     ;238
000fd8  f8bd1008          LDRH     r1,[sp,#8]            ;239
000fdc  1cb0              ADDS     r0,r6,#2              ;239
000fde  6822              LDR      r2,[r4,#0]            ;239
000fe0  f8221010          STRH     r1,[r2,r0,LSL #1]     ;239
000fe4  f8bd100c          LDRH     r1,[sp,#0xc]          ;240
000fe8  1cf0              ADDS     r0,r6,#3              ;240
000fea  6822              LDR      r2,[r4,#0]            ;240
000fec  f8221010          STRH     r1,[r2,r0,LSL #1]     ;240
000ff0  f8bd1004          LDRH     r1,[sp,#4]            ;241
000ff4  1d30              ADDS     r0,r6,#4              ;241
000ff6  6822              LDR      r2,[r4,#0]            ;241
000ff8  f8221010          STRH     r1,[r2,r0,LSL #1]     ;241
000ffc  88a0              LDRH     r0,[r4,#4]            ;242
000ffe  1c40              ADDS     r0,r0,#1              ;242
001000  80a0              STRH     r0,[r4,#4]            ;242
001002  f5a4741a          SUB      r4,r4,#0x268          ;242
001006  1d76              ADDS     r6,r6,#5              ;243
001008  bf00              NOP                            ;233
                  |L1.4106|
00100a  683f              LDR      r7,[r7,#0]            ;229
00100c  f10b0b01          ADD      r11,r11,#1            ;229
                  |L1.4112|
001010  b14f              CBZ      r7,|L1.4134|
001012  f8b4026c          LDRH     r0,[r4,#0x26c]        ;229
001016  f8b41278          LDRH     r1,[r4,#0x278]        ;229
00101a  4288              CMP      r0,r1                 ;229
00101c  da03              BGE      |L1.4134|
00101e  f8b4027a          LDRH     r0,[r4,#0x27a]        ;229
001022  4558              CMP      r0,r11                ;229
001024  d8a7              BHI      |L1.3958|
                  |L1.4134|
001026  f1ba0f00          CMP      r10,#0                ;247
00102a  d114              BNE      |L1.4182|
00102c  e011              B        |L1.4178|
                  |L1.4142|
00102e  f8b4126c          LDRH     r1,[r4,#0x26c]        ;251
001032  9805              LDR      r0,[sp,#0x14]         ;251
001034  1a08              SUBS     r0,r1,r0              ;251
001036  b282              UXTH     r2,r0                 ;251
001038  4620              MOV      r0,r4                 ;251
00103a  9906              LDR      r1,[sp,#0x18]         ;251
00103c  f7fffffe          BL       _ZN5Blobs8combine2EPtt ; Blobs::combine2(unsigned short*, unsigned short)
001040  4680              MOV      r8,r0                 ;251
001042  f1b80f00          CMP      r8,#0                 ;252
001046  d100              BNE      |L1.4170|
001048  e004              B        |L1.4180|
                  |L1.4170|
00104a  eb090008          ADD      r0,r9,r8              ;254
00104e  fa1ff980          UXTH     r9,r0                 ;254
                  |L1.4178|
001052  e7ec              B        |L1.4142|
                  |L1.4180|
001054  bf00              NOP                            ;253
                  |L1.4182|
001056  1c6d              ADDS     r5,r5,#1              ;224
                  |L1.4184|
001058  2d07              CMP      r5,#7                 ;224
00105a  f4ffaf67          BCC      |L1.3884|
00105e  f8b4226c          LDRH     r2,[r4,#0x26c]        ;260
001062  4620              MOV      r0,r4                 ;260
001064  f8d41268          LDR      r1,[r4,#0x268]        ;260
001068  f7fffffe          BL       _ZN5Blobs7combineEPtt ; Blobs::combine(unsigned short*, unsigned short)
00106c  4448              ADD      r0,r0,r9              ;260
00106e  fa1ff980          UXTH     r9,r0                 ;260
001072  f8940288          LDRB     r0,[r4,#0x288]        ;261
001076  b160              CBZ      r0,|L1.4242|
001078  f8b4126c          LDRH     r1,[r4,#0x26c]        ;263
00107c  eb010181          ADD      r1,r1,r1,LSL #2       ;263
001080  f8d40268          LDR      r0,[r4,#0x268]        ;263
001084  eb000041          ADD      r0,r0,r1,LSL #1       ;263
001088  f8c40270          STR      r0,[r4,#0x270]        ;263
00108c  4620              MOV      r0,r4                 ;265
00108e  f7fffffe          BL       _ZN5Blobs9processCCEv ; Blobs::processCC()
                  |L1.4242|
001092  f1b90f00          CMP      r9,#0                 ;267
001096  d102              BNE      |L1.4254|
001098  f8940288          LDRB     r0,[r4,#0x288]        ;267
00109c  b168              CBZ      r0,|L1.4282|
                  |L1.4254|
00109e  f8b4226c          LDRH     r2,[r4,#0x26c]        ;269
0010a2  4620              MOV      r0,r4                 ;269
0010a4  f8d41268          LDR      r1,[r4,#0x268]        ;269
0010a8  f7fffffe          BL       _ZN5Blobs8compressEPtt ; Blobs::compress(unsigned short*, unsigned short)
0010ac  4680              MOV      r8,r0                 ;269
0010ae  f8b4026c          LDRH     r0,[r4,#0x26c]        ;270
0010b2  eba00008          SUB      r0,r0,r8              ;270
0010b6  f8a4026c          STRH     r0,[r4,#0x26c]        ;270
                  |L1.4282|
0010ba  2000              MOVS     r0,#0                 ;276
0010bc  f8a4027c          STRH     r0,[r4,#0x27c]        ;276
0010c0  f8a4027e          STRH     r0,[r4,#0x27e]        ;277
0010c4  f8840276          STRB     r0,[r4,#0x276]        ;278
0010c8  2500              MOVS     r5,#0                 ;281
0010ca  e008              B        |L1.4318|
                  |L1.4300|
0010cc  ebc502c5          RSB      r2,r5,r5,LSL #3       ;282
0010d0  f50471d2          ADD      r1,r4,#0x1a4          ;282
0010d4  eb010082          ADD      r0,r1,r2,LSL #2       ;282
0010d8  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
0010dc  1c6d              ADDS     r5,r5,#1              ;281
                  |L1.4318|
0010de  2d07              CMP      r5,#7                 ;281
0010e0  d3f4              BCC      |L1.4300|
0010e2  2000              MOVS     r0,#0                 ;292
0010e4  e711              B        |L1.3850|
;;;294    
                          ENDP

                  _ZN5Blobs10getCCBlockEPhj PROC ; Blobs::getCCBlock(unsigned char*, unsigned)
;;;302    
;;;303    uint16_t Blobs::getCCBlock(uint8_t *buf, uint32_t buflen)
0010e6  e92d47f0          PUSH     {r4-r10,lr}
;;;304    {
0010ea  4603              MOV      r3,r0
0010ec  468c              MOV      r12,r1
0010ee  4690              MOV      r8,r2
;;;305        uint16_t *buf16 = (uint16_t *)buf;
0010f0  4661              MOV      r1,r12
;;;306        uint16_t temp, width, height;
;;;307        uint16_t checksum;
;;;308        uint16_t len = 8;  // default
0010f2  2708              MOVS     r7,#8
;;;309    
;;;310        if (buflen<9*sizeof(uint16_t))
0010f4  f1b80f12          CMP      r8,#0x12
0010f8  d202              BCS      |L1.4352|
;;;311            return 0;
0010fa  2000              MOVS     r0,#0
                  |L1.4348|
;;;312    
;;;313        if (m_mutex || m_ccBlobReadIndex>=m_numCCBlobs) // we're copying, so no CC blocks for now....
;;;314    		return 0;
;;;315    
;;;316        if (m_blobReadIndex==0 && m_ccBlobReadIndex==0)	// beginning of frame, mark it with empty block
;;;317        {
;;;318            buf16[0] = BL_BEGIN_MARKER;
;;;319            len++;
;;;320            buf16++;
;;;321        }
;;;322    
;;;323        // beginning of block
;;;324        buf16[0] = BL_BEGIN_MARKER_CC;
;;;325    
;;;326        // model
;;;327        temp = m_ccBlobs[m_ccBlobReadIndex].m_model;
;;;328        checksum = temp;
;;;329        buf16[2] = temp;
;;;330    
;;;331        // width
;;;332        width = m_ccBlobs[m_ccBlobReadIndex].m_right - m_ccBlobs[m_ccBlobReadIndex].m_left;
;;;333        checksum += width;
;;;334        buf16[5] = width;
;;;335    
;;;336        // height
;;;337        height = m_ccBlobs[m_ccBlobReadIndex].m_bottom - m_ccBlobs[m_ccBlobReadIndex].m_top;
;;;338        checksum += height;
;;;339        buf16[6] = height;
;;;340    
;;;341        // x center
;;;342        temp = m_ccBlobs[m_ccBlobReadIndex].m_left + width/2;
;;;343        checksum += temp;
;;;344        buf16[3] = temp;
;;;345    
;;;346        // y center
;;;347        temp = m_ccBlobs[m_ccBlobReadIndex].m_top + height/2;
;;;348        checksum += temp;
;;;349        buf16[4] = temp;
;;;350    
;;;351        temp = m_ccBlobs[m_ccBlobReadIndex].m_angle;
;;;352        checksum += temp;
;;;353        buf16[7] = temp;
;;;354    
;;;355        buf16[1] = checksum;
;;;356    
;;;357        // next blob
;;;358        m_ccBlobReadIndex++;
;;;359    
;;;360        return len*sizeof(uint16_t);
;;;361    }
0010fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4352|
001100  f8930276          LDRB     r0,[r3,#0x276]        ;313
001104  b928              CBNZ     r0,|L1.4370|
001106  f8b3027e          LDRH     r0,[r3,#0x27e]        ;313
00110a  f8b39274          LDRH     r9,[r3,#0x274]        ;313
00110e  4548              CMP      r0,r9                 ;313
001110  db01              BLT      |L1.4374|
                  |L1.4370|
001112  2000              MOVS     r0,#0                 ;314
001114  e7f2              B        |L1.4348|
                  |L1.4374|
001116  f8b3027c          LDRH     r0,[r3,#0x27c]        ;316
00111a  b940              CBNZ     r0,|L1.4398|
00111c  f8b3027e          LDRH     r0,[r3,#0x27e]        ;316
001120  b928              CBNZ     r0,|L1.4398|
001122  f64a2055          MOV      r0,#0xaa55            ;318
001126  8008              STRH     r0,[r1,#0]            ;318
001128  1c78              ADDS     r0,r7,#1              ;319
00112a  b287              UXTH     r7,r0                 ;319
00112c  1c89              ADDS     r1,r1,#2              ;320
                  |L1.4398|
00112e  f64a2056          MOV      r0,#0xaa56            ;324
001132  8008              STRH     r0,[r1,#0]            ;324
001134  f503731c          ADD      r3,r3,#0x270          ;327
001138  f8b3900e          LDRH     r9,[r3,#0xe]          ;327
00113c  eb090949          ADD      r9,r9,r9,LSL #1       ;327
001140  6818              LDR      r0,[r3,#0]            ;327
001142  e001              B        |L1.4424|
                  |L1.4420|
                          DCD      g_chirpUsb
                  |L1.4424|
001148  f8302029          LDRH     r2,[r0,r9,LSL #2]     ;327
00114c  4614              MOV      r4,r2                 ;328
00114e  808a              STRH     r2,[r1,#4]            ;329
001150  f8b3900e          LDRH     r9,[r3,#0xe]          ;332
001154  eb090949          ADD      r9,r9,r9,LSL #1       ;332
001158  6818              LDR      r0,[r3,#0]            ;332
00115a  eb000089          ADD      r0,r0,r9,LSL #2       ;332
00115e  8880              LDRH     r0,[r0,#4]            ;332
001160  f8b3a00e          LDRH     r10,[r3,#0xe]         ;332
001164  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;332
001168  f8d39000          LDR      r9,[r3,#0]            ;332
00116c  eb09098a          ADD      r9,r9,r10,LSL #2      ;332
001170  f8b99002          LDRH     r9,[r9,#2]            ;332
001174  eba00009          SUB      r0,r0,r9              ;332
001178  b285              UXTH     r5,r0                 ;332
00117a  1960              ADDS     r0,r4,r5              ;333
00117c  b284              UXTH     r4,r0                 ;333
00117e  814d              STRH     r5,[r1,#0xa]          ;334
001180  f8b3900e          LDRH     r9,[r3,#0xe]          ;337
001184  eb090949          ADD      r9,r9,r9,LSL #1       ;337
001188  6818              LDR      r0,[r3,#0]            ;337
00118a  eb000089          ADD      r0,r0,r9,LSL #2       ;337
00118e  8900              LDRH     r0,[r0,#8]            ;337
001190  f8b3a00e          LDRH     r10,[r3,#0xe]         ;337
001194  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;337
001198  f8d39000          LDR      r9,[r3,#0]            ;337
00119c  eb09098a          ADD      r9,r9,r10,LSL #2      ;337
0011a0  f8b99006          LDRH     r9,[r9,#6]            ;337
0011a4  eba00009          SUB      r0,r0,r9              ;337
0011a8  b286              UXTH     r6,r0                 ;337
0011aa  19a0              ADDS     r0,r4,r6              ;338
0011ac  b284              UXTH     r4,r0                 ;338
0011ae  818e              STRH     r6,[r1,#0xc]          ;339
0011b0  f8b3a00e          LDRH     r10,[r3,#0xe]         ;342
0011b4  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;342
0011b8  f8d39000          LDR      r9,[r3,#0]            ;342
0011bc  eb09098a          ADD      r9,r9,r10,LSL #2      ;342
0011c0  f8b99002          LDRH     r9,[r9,#2]            ;342
0011c4  4628              MOV      r0,r5                 ;342
0011c6  eb057ad0          ADD      r10,r5,r0,LSR #31     ;342
0011ca  eb09096a          ADD      r9,r9,r10,ASR #1      ;342
0011ce  fa1ff289          UXTH     r2,r9                 ;342
0011d2  18a0              ADDS     r0,r4,r2              ;343
0011d4  b284              UXTH     r4,r0                 ;343
0011d6  80ca              STRH     r2,[r1,#6]            ;344
0011d8  f8b3a00e          LDRH     r10,[r3,#0xe]         ;347
0011dc  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;347
0011e0  f8d39000          LDR      r9,[r3,#0]            ;347
0011e4  eb09098a          ADD      r9,r9,r10,LSL #2      ;347
0011e8  f8b99006          LDRH     r9,[r9,#6]            ;347
0011ec  4630              MOV      r0,r6                 ;347
0011ee  eb067ad0          ADD      r10,r6,r0,LSR #31     ;347
0011f2  eb09096a          ADD      r9,r9,r10,ASR #1      ;347
0011f6  fa1ff289          UXTH     r2,r9                 ;347
0011fa  18a0              ADDS     r0,r4,r2              ;348
0011fc  b284              UXTH     r4,r0                 ;348
0011fe  810a              STRH     r2,[r1,#8]            ;349
001200  f8b3900e          LDRH     r9,[r3,#0xe]          ;351
001204  eb090949          ADD      r9,r9,r9,LSL #1       ;351
001208  6818              LDR      r0,[r3,#0]            ;351
00120a  eb000089          ADD      r0,r0,r9,LSL #2       ;351
00120e  8940              LDRH     r0,[r0,#0xa]          ;351
001210  b282              UXTH     r2,r0                 ;351
001212  18a0              ADDS     r0,r4,r2              ;352
001214  b284              UXTH     r4,r0                 ;352
001216  81ca              STRH     r2,[r1,#0xe]          ;353
001218  804c              STRH     r4,[r1,#2]            ;355
00121a  89d8              LDRH     r0,[r3,#0xe]          ;358
00121c  1c40              ADDS     r0,r0,#1              ;358
00121e  81d8              STRH     r0,[r3,#0xe]          ;358
001220  f5a3731c          SUB      r3,r3,#0x270          ;358
001224  f64f70ff          MOV      r0,#0xffff            ;360
001228  ea000047          AND      r0,r0,r7,LSL #1       ;360
00122c  e766              B        |L1.4348|
;;;362    
                          ENDP

                  _ZN5Blobs8getBlockEPhj PROC ; Blobs::getBlock(unsigned char*, unsigned)
;;;363    
;;;364    uint16_t Blobs::getBlock(uint8_t *buf, uint32_t buflen)
00122e  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;365    {
001232  4604              MOV      r4,r0
;;;366        uint16_t *buf16 = (uint16_t *)buf;
001234  9d01              LDR      r5,[sp,#4]
;;;367        uint16_t temp, width, height;
;;;368        uint16_t checksum;
;;;369        uint16_t len = 7;  // default
001236  f04f0b07          MOV      r11,#7
;;;370        int i = m_blobReadIndex*5;
00123a  f8b4027c          LDRH     r0,[r4,#0x27c]
00123e  eb000780          ADD      r7,r0,r0,LSL #2
;;;371    
;;;372        if (buflen<8*sizeof(uint16_t))
001242  9802              LDR      r0,[sp,#8]
001244  2810              CMP      r0,#0x10
001246  d202              BCS      |L1.4686|
;;;373            return 0;
001248  2000              MOVS     r0,#0
                  |L1.4682|
;;;374    
;;;375        if (m_blobReadIndex>=m_numBlobs && m_ccMode!=DISABLED)
;;;376            return getCCBlock(buf, buflen);
;;;377    
;;;378        if (m_mutex || m_blobReadIndex>=m_numBlobs) // we're copying, so no blocks for now....
;;;379    		return 0;
;;;380    
;;;381        if (m_blobReadIndex==0)	// beginning of frame, mark it with empty block
;;;382        {
;;;383            buf16[0] = BL_BEGIN_MARKER;
;;;384            len++;
;;;385            buf16++;
;;;386        }
;;;387    
;;;388        // beginning of block
;;;389        buf16[0] = BL_BEGIN_MARKER;
;;;390    
;;;391        // model
;;;392        temp = m_blobs[i];
;;;393        checksum = temp;
;;;394        buf16[2] = temp;
;;;395    
;;;396        // width
;;;397        width = m_blobs[i+2] - m_blobs[i+1];
;;;398        checksum += width;
;;;399        buf16[5] = width;
;;;400    
;;;401        // height
;;;402        height = m_blobs[i+4] - m_blobs[i+3];
;;;403        checksum += height;
;;;404        buf16[6] = height;
;;;405    
;;;406        // x center
;;;407        temp = m_blobs[i+1] + width/2;
;;;408        checksum += temp;
;;;409        buf16[3] = temp;
;;;410    
;;;411        // y center
;;;412        temp = m_blobs[i+3] + height/2;
;;;413        checksum += temp;
;;;414        buf16[4] = temp;
;;;415    
;;;416        buf16[1] = checksum;
;;;417    
;;;418        // next blob
;;;419        m_blobReadIndex++;
;;;420    
;;;421        return len*sizeof(uint16_t);
;;;422    }
00124a  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.4686|
00124e  f8b4027c          LDRH     r0,[r4,#0x27c]        ;375
001252  f8b4126c          LDRH     r1,[r4,#0x26c]        ;375
001256  4288              CMP      r0,r1                 ;375
001258  db08              BLT      |L1.4716|
00125a  f8940288          LDRB     r0,[r4,#0x288]        ;375
00125e  b128              CBZ      r0,|L1.4716|
001260  4620              MOV      r0,r4                 ;376
001262  e9dd1201          LDRD     r1,r2,[sp,#4]         ;376
001266  f7fffffe          BL       _ZN5Blobs10getCCBlockEPhj ; Blobs::getCCBlock(unsigned char*, unsigned)
00126a  e7ee              B        |L1.4682|
                  |L1.4716|
00126c  f8940276          LDRB     r0,[r4,#0x276]        ;378
001270  b928              CBNZ     r0,|L1.4734|
001272  f8b4027c          LDRH     r0,[r4,#0x27c]        ;378
001276  f8b4126c          LDRH     r1,[r4,#0x26c]        ;378
00127a  4288              CMP      r0,r1                 ;378
00127c  db01              BLT      |L1.4738|
                  |L1.4734|
00127e  2000              MOVS     r0,#0                 ;379
001280  e7e3              B        |L1.4682|
                  |L1.4738|
001282  f8b4027c          LDRH     r0,[r4,#0x27c]        ;381
001286  b938              CBNZ     r0,|L1.4760|
001288  f64a2055          MOV      r0,#0xaa55            ;383
00128c  8028              STRH     r0,[r5,#0]            ;383
00128e  f10b0001          ADD      r0,r11,#1             ;384
001292  fa1ffb80          UXTH     r11,r0                ;384
001296  1cad              ADDS     r5,r5,#2              ;385
                  |L1.4760|
001298  f64a2055          MOV      r0,#0xaa55            ;389
00129c  8028              STRH     r0,[r5,#0]            ;389
00129e  f504741a          ADD      r4,r4,#0x268          ;392
0012a2  6820              LDR      r0,[r4,#0]            ;392
0012a4  f8306017          LDRH     r6,[r0,r7,LSL #1]     ;392
0012a8  46b0              MOV      r8,r6                 ;393
0012aa  80ae              STRH     r6,[r5,#4]            ;394
0012ac  1cb8              ADDS     r0,r7,#2              ;397
0012ae  6821              LDR      r1,[r4,#0]            ;397
0012b0  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;397
0012b4  1c78              ADDS     r0,r7,#1              ;397
0012b6  6822              LDR      r2,[r4,#0]            ;397
0012b8  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;397
0012bc  1a08              SUBS     r0,r1,r0              ;397
0012be  fa1ff980          UXTH     r9,r0                 ;397
0012c2  eb080009          ADD      r0,r8,r9              ;398
0012c6  fa1ff880          UXTH     r8,r0                 ;398
0012ca  f8a5900a          STRH     r9,[r5,#0xa]          ;399
0012ce  1d38              ADDS     r0,r7,#4              ;402
0012d0  6821              LDR      r1,[r4,#0]            ;402
0012d2  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;402
0012d6  1cf8              ADDS     r0,r7,#3              ;402
0012d8  6822              LDR      r2,[r4,#0]            ;402
0012da  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;402
0012de  1a08              SUBS     r0,r1,r0              ;402
0012e0  fa1ffa80          UXTH     r10,r0                ;402
0012e4  eb08000a          ADD      r0,r8,r10             ;403
0012e8  fa1ff880          UXTH     r8,r0                 ;403
0012ec  f8a5a00c          STRH     r10,[r5,#0xc]         ;404
0012f0  1c79              ADDS     r1,r7,#1              ;407
0012f2  6822              LDR      r2,[r4,#0]            ;407
0012f4  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;407
0012f8  4648              MOV      r0,r9                 ;407
0012fa  eb0972d0          ADD      r2,r9,r0,LSR #31      ;407
0012fe  eb010162          ADD      r1,r1,r2,ASR #1       ;407
001302  b28e              UXTH     r6,r1                 ;407
001304  eb080006          ADD      r0,r8,r6              ;408
001308  fa1ff880          UXTH     r8,r0                 ;408
00130c  80ee              STRH     r6,[r5,#6]            ;409
00130e  1cf9              ADDS     r1,r7,#3              ;412
001310  6822              LDR      r2,[r4,#0]            ;412
001312  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;412
001316  4650              MOV      r0,r10                ;412
001318  eb0a72d0          ADD      r2,r10,r0,LSR #31     ;412
00131c  eb010162          ADD      r1,r1,r2,ASR #1       ;412
001320  b28e              UXTH     r6,r1                 ;412
001322  eb080006          ADD      r0,r8,r6              ;413
001326  fa1ff880          UXTH     r8,r0                 ;413
00132a  812e              STRH     r6,[r5,#8]            ;414
00132c  f8a58002          STRH     r8,[r5,#2]            ;416
001330  8aa0              LDRH     r0,[r4,#0x14]         ;419
001332  1c40              ADDS     r0,r0,#1              ;419
001334  82a0              STRH     r0,[r4,#0x14]         ;419
001336  f5a4741a          SUB      r4,r4,#0x268          ;419
00133a  f64f70ff          MOV      r0,#0xffff            ;421
00133e  ea00004b          AND      r0,r0,r11,LSL #1      ;421
001342  e782              B        |L1.4682|
;;;423    
                          ENDP

                  _ZN5Blobs10getMaxBlobEt PROC ; Blobs::getMaxBlob(unsigned short)
;;;424    
;;;425    BlobA *Blobs::getMaxBlob(uint16_t signature)
001344  e92d43f0          PUSH     {r4-r9,lr}
;;;426    {
001348  4602              MOV      r2,r0
00134a  460f              MOV      r7,r1
;;;427        int i, j;
;;;428        uint32_t area, maxArea;
;;;429        BlobA *blob;
;;;430    	BlobB *ccBlob;
;;;431    
;;;432        if (signature==0) // 0 means return the biggest regardless of signature number
00134c  2f00              CMP      r7,#0
00134e  d148              BNE      |L1.5090|
;;;433        {
;;;434            // if we've already found it, return it
;;;435            if (m_maxBlob)
001350  f8d2028c          LDR      r0,[r2,#0x28c]
001354  b118              CBZ      r0,|L1.4958|
;;;436                return m_maxBlob;
001356  f8d2028c          LDR      r0,[r2,#0x28c]
                  |L1.4954|
;;;437    
;;;438            // look through all blobs looking for the blob with the biggest area
;;;439            for (i=0, maxArea=0; i<m_numBlobs; i++)
;;;440            {
;;;441                blob = (BlobA *)m_blobs + i;
;;;442                area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
;;;443                if (area>maxArea)
;;;444                {
;;;445                    maxArea = area;
;;;446                    m_maxBlob = blob;
;;;447                }
;;;448            }
;;;449            for (i=0; i<m_numCCBlobs; i++)
;;;450            {
;;;451                ccBlob = (BlobB *)m_ccBlobs + i;
;;;452                area = (ccBlob->m_right - ccBlob->m_left)*(ccBlob->m_bottom - ccBlob->m_top);
;;;453                if (area>maxArea)
;;;454                {
;;;455                    maxArea = area;
;;;456                    m_maxBlob = (BlobA *)ccBlob;
;;;457                }
;;;458            }
;;;459    		return m_maxBlob;
;;;460        }
;;;461        else
;;;462        {
;;;463            for (i=0, j=0; i<m_numBlobs; i++, j+=5)
;;;464            {
;;;465                if (m_blobs[j+0]==signature)
;;;466                    return (BlobA *)(m_blobs+j);
;;;467            }
;;;468        }
;;;469    
;;;470        return NULL; // no blobs...
;;;471    }
00135a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.4958|
00135e  2100              MOVS     r1,#0                 ;439
001360  468c              MOV      r12,r1                ;439
001362  e018              B        |L1.5014|
                  |L1.4964|
001364  eb010881          ADD      r8,r1,r1,LSL #2       ;441
001368  f8d20268          LDR      r0,[r2,#0x268]        ;441
00136c  eb000348          ADD      r3,r0,r8,LSL #1       ;441
001370  8898              LDRH     r0,[r3,#4]            ;442
001372  f8b38002          LDRH     r8,[r3,#2]            ;442
001376  eba00008          SUB      r0,r0,r8              ;442
00137a  f8b38008          LDRH     r8,[r3,#8]            ;442
00137e  f8b39006          LDRH     r9,[r3,#6]            ;442
001382  eba80809          SUB      r8,r8,r9              ;442
001386  fb00f608          MUL      r6,r0,r8              ;442
00138a  4566              CMP      r6,r12                ;443
00138c  d902              BLS      |L1.5012|
00138e  46b4              MOV      r12,r6                ;445
001390  f8c2328c          STR      r3,[r2,#0x28c]        ;446
                  |L1.5012|
001394  1c49              ADDS     r1,r1,#1              ;439
                  |L1.5014|
001396  f8b2026c          LDRH     r0,[r2,#0x26c]        ;439
00139a  4288              CMP      r0,r1                 ;439
00139c  dce2              BGT      |L1.4964|
00139e  2100              MOVS     r1,#0                 ;449
0013a0  e018              B        |L1.5076|
                  |L1.5026|
0013a2  eb010841          ADD      r8,r1,r1,LSL #1       ;451
0013a6  f8d20270          LDR      r0,[r2,#0x270]        ;451
0013aa  eb000488          ADD      r4,r0,r8,LSL #2       ;451
0013ae  88a0              LDRH     r0,[r4,#4]            ;452
0013b0  f8b48002          LDRH     r8,[r4,#2]            ;452
0013b4  eba00008          SUB      r0,r0,r8              ;452
0013b8  f8b48008          LDRH     r8,[r4,#8]            ;452
0013bc  f8b49006          LDRH     r9,[r4,#6]            ;452
0013c0  eba80809          SUB      r8,r8,r9              ;452
0013c4  fb00f608          MUL      r6,r0,r8              ;452
0013c8  4566              CMP      r6,r12                ;453
0013ca  d902              BLS      |L1.5074|
0013cc  46b4              MOV      r12,r6                ;455
0013ce  f8c2428c          STR      r4,[r2,#0x28c]        ;456
                  |L1.5074|
0013d2  1c49              ADDS     r1,r1,#1              ;449
                  |L1.5076|
0013d4  f8b20274          LDRH     r0,[r2,#0x274]        ;449
0013d8  4288              CMP      r0,r1                 ;449
0013da  dce2              BGT      |L1.5026|
0013dc  f8d2028c          LDR      r0,[r2,#0x28c]        ;459
0013e0  e7bb              B        |L1.4954|
                  |L1.5090|
0013e2  2100              MOVS     r1,#0                 ;463
0013e4  2500              MOVS     r5,#0                 ;463
0013e6  e00c              B        |L1.5122|
                  |L1.5096|
0013e8  f8d20268          LDR      r0,[r2,#0x268]        ;465
0013ec  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;465
0013f0  42b8              CMP      r0,r7                 ;465
0013f2  d104              BNE      |L1.5118|
0013f4  f8d20268          LDR      r0,[r2,#0x268]        ;466
0013f8  eb000045          ADD      r0,r0,r5,LSL #1       ;466
0013fc  e7ad              B        |L1.4954|
                  |L1.5118|
0013fe  1c49              ADDS     r1,r1,#1              ;463
001400  1d6d              ADDS     r5,r5,#5              ;463
                  |L1.5122|
001402  f8b2026c          LDRH     r0,[r2,#0x26c]        ;463
001406  4288              CMP      r0,r1                 ;463
001408  dcee              BGT      |L1.5096|
00140a  2000              MOVS     r0,#0                 ;470
00140c  e7a5              B        |L1.4954|
;;;472    
                          ENDP

                  _ZN5Blobs8getBlobsEPP5BlobAPjPP5BlobBS3_ PROC ; Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
;;;473    void Blobs::getBlobs(BlobA **blobs, uint32_t *len, BlobB **ccBlobs, uint32_t *ccLen)
00140e  b530              PUSH     {r4,r5,lr}
;;;474    {
001410  9c03              LDR      r4,[sp,#0xc]
;;;475        *blobs = (BlobA *)m_blobs;
001412  f8d05268          LDR      r5,[r0,#0x268]
001416  600d              STR      r5,[r1,#0]
;;;476        *len = m_numBlobs;
001418  f8b0526c          LDRH     r5,[r0,#0x26c]
00141c  6015              STR      r5,[r2,#0]
;;;477    
;;;478        *ccBlobs = m_ccBlobs;
00141e  f8d05270          LDR      r5,[r0,#0x270]
001422  601d              STR      r5,[r3,#0]
;;;479        *ccLen = m_numCCBlobs;
001424  f8b05274          LDRH     r5,[r0,#0x274]
001428  6025              STR      r5,[r4,#0]
;;;480    }
00142a  bd30              POP      {r4,r5,pc}
;;;481    
                          ENDP

                  _ZN5Blobs9setParamsEttj13ColorCodeMode PROC ; Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
;;;55     
;;;56     int Blobs::setParams(uint16_t maxBlobs, uint16_t maxBlobsPerModel, uint32_t minArea, ColorCodeMode ccMode)
00142c  b530              PUSH     {r4,r5,lr}
;;;57     {
00142e  4604              MOV      r4,r0
001430  9d03              LDR      r5,[sp,#0xc]
;;;58         if (maxBlobs<=MAX_BLOBS)
001432  2964              CMP      r1,#0x64
001434  dc02              BGT      |L1.5180|
;;;59             m_maxBlobs = maxBlobs;
001436  f8a41278          STRH     r1,[r4,#0x278]
00143a  e002              B        |L1.5186|
                  |L1.5180|
;;;60         else
;;;61             m_maxBlobs = MAX_BLOBS;
00143c  2064              MOVS     r0,#0x64
00143e  f8a40278          STRH     r0,[r4,#0x278]
                  |L1.5186|
;;;62     
;;;63         m_maxBlobsPerModel = maxBlobsPerModel;
001442  f8a4227a          STRH     r2,[r4,#0x27a]
;;;64         m_minArea = minArea;
001446  f8c43280          STR      r3,[r4,#0x280]
;;;65         m_ccMode = ccMode;
00144a  f8845288          STRB     r5,[r4,#0x288]
;;;66     
;;;67         return 0;
00144e  2000              MOVS     r0,#0
;;;68     }
001450  bd30              POP      {r4,r5,pc}
;;;69     
                          ENDP

                  _ZN5Blobs16analyzeDistancesEPP5BlobAsS2_sS2_S2_ PROC ; Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)
;;;747    
;;;748    bool Blobs::analyzeDistances(BlobA *blobs0[], int16_t numBlobs0, BlobA *blobs[], int16_t numBlobs, BlobA **blobA, BlobA **blobB)
001452  e92d4fff          PUSH     {r0-r11,lr}
;;;749    {
001456  b083              SUB      sp,sp,#0xc
001458  460d              MOV      r5,r1
00145a  4692              MOV      r10,r2
00145c  461e              MOV      r6,r3
00145e  f8ddb040          LDR      r11,[sp,#0x40]
;;;750        bool skip;
;;;751        bool result = false;
001462  2000              MOVS     r0,#0
001464  9001              STR      r0,[sp,#4]
;;;752        int16_t dist, minDist, i, j, k;
;;;753    
;;;754        for (i=0, minDist=0x7fff; i<numBlobs0; i++)
001466  4680              MOV      r8,r0
001468  f64770ff          MOV      r0,#0x7fff
00146c  9000              STR      r0,[sp,#0]
00146e  e044              B        |L1.5370|
                  |L1.5232|
;;;755        {
;;;756            for (j=0; j<numBlobs; j++)
001470  2400              MOVS     r4,#0
001472  e03c              B        |L1.5358|
                  |L1.5236|
;;;757            {
;;;758                for (k=0, skip=false; k<numBlobs0; k++)
001474  f04f0900          MOV      r9,#0
001478  2000              MOVS     r0,#0
00147a  9002              STR      r0,[sp,#8]
00147c  e018              B        |L1.5296|
                  |L1.5246|
;;;759                {
;;;760                    if (blobs0[k]==blobs[j] || (blobs0[k]->m_model&0x07)==(blobs[j]->m_model&0x07))
00147e  f8550029          LDR      r0,[r5,r9,LSL #2]
001482  f8561024          LDR      r1,[r6,r4,LSL #2]
001486  4288              CMP      r0,r1
001488  d00b              BEQ      |L1.5282|
00148a  f8550029          LDR      r0,[r5,r9,LSL #2]
00148e  7800              LDRB     r0,[r0,#0]
001490  f0000007          AND      r0,r0,#7
001494  f8561024          LDR      r1,[r6,r4,LSL #2]
001498  7809              LDRB     r1,[r1,#0]
00149a  f0010107          AND      r1,r1,#7
00149e  4288              CMP      r0,r1
0014a0  d102              BNE      |L1.5288|
                  |L1.5282|
;;;761                    {
;;;762                        skip = true;
0014a2  2001              MOVS     r0,#1
0014a4  9002              STR      r0,[sp,#8]
;;;763                        break;
0014a6  e005              B        |L1.5300|
                  |L1.5288|
0014a8  f1090001          ADD      r0,r9,#1              ;758
0014ac  fa0ff980          SXTH     r9,r0                 ;758
                  |L1.5296|
0014b0  45d1              CMP      r9,r10                ;758
0014b2  dbe4              BLT      |L1.5246|
                  |L1.5300|
0014b4  bf00              NOP      
;;;764                    }
;;;765                }
;;;766                if (skip)
0014b6  9802              LDR      r0,[sp,#8]
0014b8  b100              CBZ      r0,|L1.5308|
;;;767                    continue;
0014ba  e016              B        |L1.5354|
                  |L1.5308|
;;;768                dist = distance(blobs0[i], blobs[j]);
0014bc  f8562024          LDR      r2,[r6,r4,LSL #2]
0014c0  f8551028          LDR      r1,[r5,r8,LSL #2]
0014c4  9803              LDR      r0,[sp,#0xc]
0014c6  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
0014ca  4607              MOV      r7,r0
;;;769                if (dist<minDist)
0014cc  9900              LDR      r1,[sp,#0]
0014ce  428f              CMP      r7,r1
0014d0  da0a              BGE      |L1.5352|
;;;770                {
;;;771                    minDist = dist;
0014d2  9700              STR      r7,[sp,#0]
;;;772                    *blobA = blobs0[i];
0014d4  f8551028          LDR      r1,[r5,r8,LSL #2]
0014d8  9811              LDR      r0,[sp,#0x44]
0014da  6001              STR      r1,[r0,#0]
;;;773                    *blobB = blobs[j];
0014dc  f8561024          LDR      r1,[r6,r4,LSL #2]
0014e0  9812              LDR      r0,[sp,#0x48]
0014e2  6001              STR      r1,[r0,#0]
;;;774                    result = true;
0014e4  2001              MOVS     r0,#1
0014e6  9001              STR      r0,[sp,#4]
                  |L1.5352|
0014e8  bf00              NOP                            ;767
                  |L1.5354|
0014ea  1c60              ADDS     r0,r4,#1              ;756
0014ec  b204              SXTH     r4,r0                 ;756
                  |L1.5358|
0014ee  455c              CMP      r4,r11                ;756
0014f0  dbc0              BLT      |L1.5236|
0014f2  f1080001          ADD      r0,r8,#1              ;754
0014f6  fa0ff880          SXTH     r8,r0                 ;754
                  |L1.5370|
0014fa  45d0              CMP      r8,r10                ;754
0014fc  dbb8              BLT      |L1.5232|
;;;775                }
;;;776            }
;;;777        }
;;;778    #ifndef PIXY
;;;779        if (!result)
;;;780            DBG("not set!");
;;;781    #endif
;;;782        return result;
0014fe  9801              LDR      r0,[sp,#4]
;;;783    }
001500  b007              ADD      sp,sp,#0x1c
001502  e8bd8ff0          POP      {r4-r11,pc}
;;;784    
                          ENDP

                  _ZN5Blobs10printBlobsEv PROC ; Blobs::printBlobs()
;;;869    
;;;870    void Blobs::printBlobs()
001506  4770              BX       lr
;;;871    {
;;;872    #ifndef PIXY
;;;873        int i;
;;;874        BlobA *blobs = (BlobA *)m_blobs;
;;;875        for (i=0; i<m_numBlobs; i++)
;;;876            DBG("blob %d: %d %d %d %d %d", i, blobs[i].m_model, blobs[i].m_left, blobs[i].m_right, blobs[i].m_top, blobs[i].m_bottom);
;;;877    #endif
;;;878    }
;;;879    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\common\\blobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_22a6bc68___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___9_blobs_cpp_22a6bc68___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_22a6bc68___Z7__REVSHi|
#line 144
|__asm___9_blobs_cpp_22a6bc68___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
