; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progpt.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progpt.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progpt.crf progpt.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9ServoLoop5resetEv PROC ; ServoLoop::reset()
;;;69     
;;;70     void ServoLoop::reset()
000000  b538              PUSH     {r3-r5,lr}
;;;71     {
000002  4604              MOV      r4,r0
;;;72     	m_pos = RCS_CENTER_POS;
000004  f44f70fa          MOV      r0,#0x1f4
000008  6020              STR      r0,[r4,#0]
;;;73     	rcs_setPos(m_axis, m_pos);
00000a  8820              LDRH     r0,[r4,#0]
00000c  b280              UXTH     r0,r0
00000e  4669              MOV      r1,sp
000010  9000              STR      r0,[sp,#0]
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;74     }
00001a  bd38              POP      {r3-r5,pc}
;;;75     
                          ENDP

                  _ZN9ServoLoop8setGainsEii PROC ; ServoLoop::setGains(int, int)
;;;76     void ServoLoop::setGains(int32_t pgain, int32_t dgain)
00001c  60c1              STR      r1,[r0,#0xc]
;;;77     {
;;;78     	m_pgain = pgain;
;;;79     	m_dgain = dgain;	
00001e  6102              STR      r2,[r0,#0x10]
;;;80     }
000020  4770              BX       lr
;;;81     
                          ENDP

                  _Z12ptLoadParamsv PROC ; ptLoadParams()
;;;113    
;;;114    void ptLoadParams()
000022  b51f              PUSH     {r0-r4,lr}
;;;115    {
;;;116    	prm_add("Pan P gain", PRM_FLAG_SIGNED, 
000024  2000              MOVS     r0,#0
000026  f44f71af          MOV      r1,#0x15e
00002a  2304              MOVS     r3,#4
00002c  a277              ADR      r2,|L1.524|
00002e  e9cd1000          STRD     r1,r0,[sp,#0]
000032  2180              MOVS     r1,#0x80
000034  a084              ADR      r0,|L1.584|
000036  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;117    		"@c Pan/tilt_Demo Pan axis proportional gain (default 350)", INT32(350), END);
;;;118    	prm_add("Pan D gain", PRM_FLAG_SIGNED, 
00003a  2000              MOVS     r0,#0
00003c  f44f7116          MOV      r1,#0x258
000040  2304              MOVS     r3,#4
000042  a284              ADR      r2,|L1.596|
000044  e9cd1000          STRD     r1,r0,[sp,#0]
000048  2180              MOVS     r1,#0x80
00004a  a090              ADR      r0,|L1.652|
00004c  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;119    		"@c Pan/tilt_Demo Pan axis derivative gain (default 600)", INT32(600), END);
;;;120    	prm_add("Tilt P gain", PRM_FLAG_SIGNED, 
000050  2000              MOVS     r0,#0
000052  f44f71fa          MOV      r1,#0x1f4
000056  2304              MOVS     r3,#4
000058  a28f              ADR      r2,|L1.664|
00005a  e9cd1000          STRD     r1,r0,[sp,#0]
00005e  2180              MOVS     r1,#0x80
000060  a09c              ADR      r0,|L1.724|
000062  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;121    		"@c Pan/tilt_Demo Tilt axis proportional gain (default 500)", INT32(500), END);
;;;122    	prm_add("Tilt D gain", PRM_FLAG_SIGNED, 
000066  2000              MOVS     r0,#0
000068  f44f712f          MOV      r1,#0x2bc
00006c  2304              MOVS     r3,#4
00006e  a29c              ADR      r2,|L1.736|
000070  e9cd1000          STRD     r1,r0,[sp,#0]
000074  2180              MOVS     r1,#0x80
000076  a0a9              ADR      r0,|L1.796|
000078  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;123    		"@c Pan/tilt_Demo Tilt axis derivative gain (default 700)", INT32(700), END);
;;;124    
;;;125    	int32_t pgain, dgain; 
;;;126    
;;;127    	prm_get("Pan P gain", &pgain, END);
00007c  2200              MOVS     r2,#0
00007e  a903              ADD      r1,sp,#0xc
000080  a071              ADR      r0,|L1.584|
000082  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;128    	prm_get("Pan D gain", &dgain, END);
000086  2200              MOVS     r2,#0
000088  a902              ADD      r1,sp,#8
00008a  a080              ADR      r0,|L1.652|
00008c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;129    	g_panLoop.setGains(pgain, dgain);
000090  48a5              LDR      r0,|L1.808|
000092  e9dd2102          LDRD     r2,r1,[sp,#8]
000096  f7fffffe          BL       _ZN9ServoLoop8setGainsEii ; ServoLoop::setGains(int, int)
;;;130    
;;;131    	prm_get("Tilt P gain", &pgain, END);
00009a  2200              MOVS     r2,#0
00009c  a903              ADD      r1,sp,#0xc
00009e  a08d              ADR      r0,|L1.724|
0000a0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;132    	prm_get("Tilt D gain", &dgain, END);
0000a4  2200              MOVS     r2,#0
0000a6  a902              ADD      r1,sp,#8
0000a8  a09c              ADR      r0,|L1.796|
0000aa  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;133    	g_tiltLoop.setGains(pgain, dgain);
0000ae  489f              LDR      r0,|L1.812|
0000b0  e9dd2102          LDRD     r2,r1,[sp,#8]
0000b4  f7fffffe          BL       _ZN9ServoLoop8setGainsEii ; ServoLoop::setGains(int, int)
;;;134    }
0000b8  bd1f              POP      {r0-r4,pc}
;;;135    
                          ENDP

                  _Z7ptSetupv PROC ; ptSetup()
;;;82     
;;;83     int ptSetup()
0000ba  b508              PUSH     {r3,lr}
;;;84     {
;;;85     	// setup camera mode
;;;86     	cam_setMode(CAM_MODE1);
0000bc  2001              MOVS     r0,#1
0000be  9000              STR      r0,[sp,#0]
0000c0  4668              MOV      r0,sp
0000c2  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
;;;87     
;;;88     	// extend range of servos (handled in params)
;;;89     	// rcs_setLimits(0, -200, 200);	(handled in rcservo params)
;;;90     	// rcs_setLimits(1, -200, 200);	(handled in rcservo params)
;;;91     
;;;92     	// Increasing the PWM frequency makes the servos zippier. 
;;;93     	// Pixy updates at 50 Hz, so a default servo update freq of 50 Hz
;;;94     	// adds significant latency to the control loop--- increasing to 100 Hz decreases this.
;;;95     	// Increasing to more than 130 Hz or so creates buzzing, prob not good for the servo.
;;;96     	// rcs_setFreq(100); (handled in rcservo params)
;;;97      
;;;98      	ptLoadParams();
0000c6  f7fffffe          BL       _Z12ptLoadParamsv ; ptLoadParams()
;;;99     	
;;;100    	g_panLoop.reset();
0000ca  4897              LDR      r0,|L1.808|
0000cc  f7fffffe          BL       _ZN9ServoLoop5resetEv ; ServoLoop::reset()
;;;101    	g_tiltLoop.reset();
0000d0  4896              LDR      r0,|L1.812|
0000d2  f7fffffe          BL       _ZN9ServoLoop5resetEv ; ServoLoop::reset()
;;;102    
;;;103    	// load lut if we've grabbed any frames lately
;;;104    	if (g_rawFrame.m_pixels)
0000d6  4896              LDR      r0,|L1.816|
0000d8  6800              LDR      r0,[r0,#0]  ; g_rawFrame
0000da  b108              CBZ      r0,|L1.224|
;;;105    		cc_loadLut();
0000dc  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
                  |L1.224|
;;;106    
;;;107    	// setup qqueue and M0
;;;108    	g_qqueue->flush();
0000e0  4894              LDR      r0,|L1.820|
0000e2  6800              LDR      r0,[r0,#0]  ; g_qqueue
0000e4  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;109    	exec_runM0(0);
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
;;;110    
;;;111    	return 0;
0000ee  2000              MOVS     r0,#0
;;;112    }
0000f0  bd08              POP      {r3,pc}
;;;113    
                          ENDP

                  _ZN9ServoLoop6updateEi PROC ; ServoLoop::update(int)
;;;50     
;;;51     void ServoLoop::update(int32_t error)
0000f2  b5f8              PUSH     {r3-r7,lr}
;;;52     {
0000f4  4604              MOV      r4,r0
0000f6  460d              MOV      r5,r1
;;;53     	int32_t vel;
;;;54     
;;;55     	if (m_prevError!=0x80000000)
0000f8  6860              LDR      r0,[r4,#4]
0000fa  f1b04f00          CMP      r0,#0x80000000
0000fe  d022              BEQ      |L1.326|
;;;56     	{	
;;;57     		vel = (error*m_pgain + (error - m_prevError)*m_dgain)/1000;
000100  6860              LDR      r0,[r4,#4]
000102  1a28              SUBS     r0,r5,r0
000104  6921              LDR      r1,[r4,#0x10]
000106  4348              MULS     r0,r1,r0
000108  68e1              LDR      r1,[r4,#0xc]
00010a  fb050001          MLA      r0,r5,r1,r0
00010e  f44f717a          MOV      r1,#0x3e8
000112  fb90f6f1          SDIV     r6,r0,r1
;;;58     		m_pos += vel;
000116  6820              LDR      r0,[r4,#0]
000118  4430              ADD      r0,r0,r6
00011a  6020              STR      r0,[r4,#0]
;;;59     		if (m_pos>RCS_MAX_POS) 
00011c  6820              LDR      r0,[r4,#0]
00011e  f5b07f7a          CMP      r0,#0x3e8
000122  dd02              BLE      |L1.298|
;;;60     			m_pos = RCS_MAX_POS; 
000124  4608              MOV      r0,r1
000126  6020              STR      r0,[r4,#0]
000128  e004              B        |L1.308|
                  |L1.298|
;;;61     		else if (m_pos<RCS_MIN_POS) 
00012a  6820              LDR      r0,[r4,#0]
00012c  2800              CMP      r0,#0
00012e  da01              BGE      |L1.308|
;;;62     			m_pos = RCS_MIN_POS;
000130  2000              MOVS     r0,#0
000132  6020              STR      r0,[r4,#0]
                  |L1.308|
;;;63     
;;;64     		rcs_setPos(m_axis, m_pos);
000134  8820              LDRH     r0,[r4,#0]
000136  b280              UXTH     r0,r0
000138  4669              MOV      r1,sp
00013a  9000              STR      r0,[sp,#0]
00013c  f1040008          ADD      r0,r4,#8
000140  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;65     		//cprintf("%d %d %d\n", m_axis, m_pos, vel);
;;;66     	}
000144  bf00              NOP      
                  |L1.326|
;;;67     	m_prevError = error;
000146  6065              STR      r5,[r4,#4]
;;;68     }
000148  bdf8              POP      {r3-r7,pc}
;;;69     
                          ENDP

                  _Z6ptLoopv PROC ; ptLoop()
;;;136    
;;;137    int ptLoop()
00014a  e92d41f0          PUSH     {r4-r8,lr}
;;;138    {
00014e  b086              SUB      sp,sp,#0x18
;;;139    	int32_t panError, tiltError;
;;;140    	uint16_t x, y;
;;;141    	BlobA *blob, *blobs;
;;;142    	BlobB *ccBlobs;
;;;143    	uint32_t numBlobs, numCCBlobs;
;;;144    
;;;145    	// create blobs
;;;146    	g_blobs->blobify();
000150  4879              LDR      r0,|L1.824|
000152  6800              LDR      r0,[r0,#0]  ; g_blobs
000154  f7fffffe          BL       _ZN5Blobs7blobifyEv ; Blobs::blobify()
;;;147    
;;;148    	blob = g_blobs->getMaxBlob();
000158  2100              MOVS     r1,#0
00015a  4877              LDR      r0,|L1.824|
00015c  6800              LDR      r0,[r0,#0]  ; g_blobs
00015e  f7fffffe          BL       _ZN5Blobs10getMaxBlobEt ; Blobs::getMaxBlob(unsigned short)
000162  4604              MOV      r4,r0
;;;149    	if (blob)
000164  b1e4              CBZ      r4,|L1.416|
;;;150    	{
;;;151    		x = blob->m_left + (blob->m_right - blob->m_left)/2;
000166  88a1              LDRH     r1,[r4,#4]
000168  8862              LDRH     r2,[r4,#2]
00016a  1a88              SUBS     r0,r1,r2
00016c  eb0071d0          ADD      r1,r0,r0,LSR #31
000170  eb020161          ADD      r1,r2,r1,ASR #1
000174  b28f              UXTH     r7,r1
;;;152    		y = blob->m_top + (blob->m_bottom - blob->m_top)/2;
000176  8921              LDRH     r1,[r4,#8]
000178  88e2              LDRH     r2,[r4,#6]
00017a  1a88              SUBS     r0,r1,r2
00017c  eb0071d0          ADD      r1,r0,r0,LSR #31
000180  eb020161          ADD      r1,r2,r1,ASR #1
000184  fa1ff881          UXTH     r8,r1
;;;153    
;;;154    		panError = X_CENTER-x;
000188  f1c705a0          RSB      r5,r7,#0xa0
;;;155    		tiltError = y-Y_CENTER;
00018c  f1a80664          SUB      r6,r8,#0x64
;;;156    
;;;157    		g_panLoop.update(panError);
000190  4629              MOV      r1,r5
000192  4865              LDR      r0,|L1.808|
000194  f7fffffe          BL       _ZN9ServoLoop6updateEi ; ServoLoop::update(int)
;;;158    		g_tiltLoop.update(tiltError);
000198  4631              MOV      r1,r6
00019a  4864              LDR      r0,|L1.812|
00019c  f7fffffe          BL       _ZN9ServoLoop6updateEi ; ServoLoop::update(int)
                  |L1.416|
;;;159    	}
;;;160    
;;;161    	// send blobs
;;;162    	g_blobs->getBlobs(&blobs, &numBlobs, &ccBlobs, &numCCBlobs);
0001a0  a802              ADD      r0,sp,#8
0001a2  ab04              ADD      r3,sp,#0x10
0001a4  aa03              ADD      r2,sp,#0xc
0001a6  a905              ADD      r1,sp,#0x14
0001a8  9000              STR      r0,[sp,#0]
0001aa  4863              LDR      r0,|L1.824|
0001ac  6800              LDR      r0,[r0,#0]  ; g_blobs
0001ae  f7fffffe          BL       _ZN5Blobs8getBlobsEPP5BlobAPjPP5BlobBS3_ ; Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
;;;163    	cc_sendBlobs(g_chirpUsb, blobs, numBlobs, ccBlobs, numCCBlobs);
0001b2  2001              MOVS     r0,#1
0001b4  9902              LDR      r1,[sp,#8]
0001b6  e9cd1000          STRD     r1,r0,[sp,#0]
0001ba  4860              LDR      r0,|L1.828|
0001bc  e9dd2303          LDRD     r2,r3,[sp,#0xc]
0001c0  9905              LDR      r1,[sp,#0x14]
0001c2  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0001c4  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpPK5BlobAjPK5BlobBjh ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
;;;164    
;;;165    	cc_setLED();
0001c8  f7fffffe          BL       _Z9cc_setLEDv ; cc_setLED()
;;;166    	
;;;167    	return 0;
0001cc  2000              MOVS     r0,#0
;;;168    }
0001ce  b006              ADD      sp,sp,#0x18
0001d0  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _ZN9ServoLoopC2Ehjj                  ; Alternate entry point ; ServoLoop::ServoLoop__sub_object(unsigned char, unsigned, unsigned)
                  _ZN9ServoLoopC1Ehjj PROC ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
;;;41     
;;;42     ServoLoop::ServoLoop(uint8_t axis, uint32_t pgain, uint32_t dgain)
;;;43     {
;;;44     	m_pos = RCS_CENTER_POS;
;;;45     	m_axis = axis;
;;;46     	m_pgain = pgain;
;;;47     	m_dgain = dgain;
;;;48     	m_prevError = 0x80000000;
;;;49     }
;;;50     
0001d4  b510              PUSH     {r4,lr}
0001d6  f44f74fa          MOV      r4,#0x1f4
0001da  6004              STR      r4,[r0,#0]
0001dc  7201              STRB     r1,[r0,#8]
0001de  60c2              STR      r2,[r0,#0xc]
0001e0  6103              STR      r3,[r0,#0x10]
0001e2  0764              LSLS     r4,r4,#29
0001e4  6044              STR      r4,[r0,#4]
0001e6  bd10              POP      {r4,pc}
                          ENDP

                  __sti___10_progpt_cpp_g_progPt PROC
0001e8  b500              PUSH     {lr}                  ;0
0001ea  f44f7348          MOV      r3,#0x320             ;0
0001ee  f44f72fa          MOV      r2,#0x1f4             ;0
0001f2  2100              MOVS     r1,#0                 ;0
0001f4  484c              LDR      r0,|L1.808|
0001f6  f7fffffe          BL       _ZN9ServoLoopC1Ehjj ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
0001fa  f44f7361          MOV      r3,#0x384             ;0
0001fe  f44f722f          MOV      r2,#0x2bc             ;0
000202  2101              MOVS     r1,#1                 ;0
000204  4849              LDR      r0,|L1.812|
000206  f7fffffe          BL       _ZN9ServoLoopC1Ehjj ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
00020a  bd00              POP      {pc}                  ;0
                          ENDP

                  |L1.524|
00020c  40632050          DCB      "@c Pan/tilt_Demo Pan axis proportional gain (default 35"
000210  616e2f74
000214  696c745f
000218  44656d6f
00021c  2050616e
000220  20617869
000224  73207072
000228  6f706f72
00022c  74696f6e
000230  616c2067
000234  61696e20
000238  28646566
00023c  61756c74
000240  203335  
000243  302900            DCB      "0)",0
000246  00                DCB      0
000247  00                DCB      0
                  |L1.584|
000248  50616e20          DCB      "Pan P gain",0
00024c  50206761
000250  696e00  
000253  00                DCB      0
                  |L1.596|
000254  40632050          DCB      "@c Pan/tilt_Demo Pan axis derivative gain (default 600)"
000258  616e2f74
00025c  696c745f
000260  44656d6f
000264  2050616e
000268  20617869
00026c  73206465
000270  72697661
000274  74697665
000278  20676169
00027c  6e202864
000280  65666175
000284  6c742036
000288  303029  
00028b  00                DCB      0
                  |L1.652|
00028c  50616e20          DCB      "Pan D gain",0
000290  44206761
000294  696e00  
000297  00                DCB      0
                  |L1.664|
000298  40632050          DCB      "@c Pan/tilt_Demo Tilt axis proportional gain (default 5"
00029c  616e2f74
0002a0  696c745f
0002a4  44656d6f
0002a8  2054696c
0002ac  74206178
0002b0  69732070
0002b4  726f706f
0002b8  7274696f
0002bc  6e616c20
0002c0  6761696e
0002c4  20286465
0002c8  6661756c
0002cc  742035  
0002cf  30302900          DCB      "00)",0
0002d3  00                DCB      0
                  |L1.724|
0002d4  54696c74          DCB      "Tilt P gain",0
0002d8  20502067
0002dc  61696e00
                  |L1.736|
0002e0  40632050          DCB      "@c Pan/tilt_Demo Tilt axis derivative gain (default 700"
0002e4  616e2f74
0002e8  696c745f
0002ec  44656d6f
0002f0  2054696c
0002f4  74206178
0002f8  69732064
0002fc  65726976
000300  61746976
000304  65206761
000308  696e2028
00030c  64656661
000310  756c7420
000314  373030  
000317  2900              DCB      ")",0
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L1.796|
00031c  54696c74          DCB      "Tilt D gain",0
000320  20442067
000324  61696e00
                  |L1.808|
                          DCD      g_panLoop
                  |L1.812|
                          DCD      g_tiltLoop
                  |L1.816|
                          DCD      g_rawFrame
                  |L1.820|
                          DCD      g_qqueue
                  |L1.824|
                          DCD      g_blobs
                  |L1.828|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_panLoop
                          %        20
                  g_tiltLoop
                          %        20

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  70616e74          DCB      "pantilt",0
000004  696c7400
000008  70657266          DCB      "perform pan/tilt tracking",0
00000c  6f726d20
000010  70616e2f
000014  74696c74
000018  20747261
00001c  636b696e
000020  6700    

                          AREA ||.data||, DATA, ALIGN=2

                  g_progPt
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z7ptSetupv ; ptSetup()
                          DCD      _Z6ptLoopv ; ptLoop()

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___10_progpt_cpp_g_progPt

;*** Start embedded assembler ***

#line 1 "progpt.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_progpt_cpp_g_progPt___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___10_progpt_cpp_g_progPt___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_progpt_cpp_g_progPt___Z7__REVSHi|
#line 144
|__asm___10_progpt_cpp_g_progPt___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
