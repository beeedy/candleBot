; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\exec.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\exec.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\exec.crf exec.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10loadParamsv PROC ; loadParams()
;;;397    
;;;398    static void loadParams()
000000  b51c              PUSH     {r2-r4,lr}
;;;399    {
;;;400    	// exec's params added here
;;;401    	prm_add("Default program", 0, 
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  2301              MOVS     r3,#1
000008  4ae9              LDR      r2,|L1.944|
00000a  4601              MOV      r1,r0
00000c  9001              STR      r0,[sp,#4]
00000e  a0e9              ADR      r0,|L1.948|
000010  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;402    		"@c Expert Selects the program number that's run by default upon power-up. (default 0)", UINT8(0), END);
;;;403    	prm_add("Debug", 0, 
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
000018  2301              MOVS     r3,#1
00001a  a2ea              ADR      r2,|L1.964|
00001c  4601              MOV      r1,r0
00001e  9001              STR      r0,[sp,#4]
000020  a0f8              ADR      r0,|L1.1028|
000022  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;404    		"@c Expert Sets the debug level for the firmware. (default 0)", UINT8(0), END);
;;;405    	
;;;406    	prm_get("Debug", &g_debug, END);
000026  2200              MOVS     r2,#0
000028  49f8              LDR      r1,|L1.1036|
00002a  a0f6              ADR      r0,|L1.1028|
00002c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;407    }
000030  bd1c              POP      {r2-r4,pc}
;;;408    
                          ENDP

                  _Z9exec_initP5Chirp PROC ; exec_init(Chirp*)
;;;221    
;;;222    int exec_init(Chirp *chirp)
000032  b570              PUSH     {r4-r6,lr}
;;;223    {
000034  4604              MOV      r4,r0
;;;224    	g_bMachine = new ButtonMachine;
000036  200c              MOVS     r0,#0xc
000038  f7fffffe          BL       _Znwj ; operator new(unsigned)
00003c  0005              MOVS     r5,r0
00003e  d004              BEQ      |L1.74|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       _ZN13ButtonMachineC1Ev ; ButtonMachine::ButtonMachine()
000046  4605              MOV      r5,r0
000048  e000              B        |L1.76|
                  |L1.74|
00004a  2000              MOVS     r0,#0
                  |L1.76|
00004c  49f0              LDR      r1,|L1.1040|
00004e  6008              STR      r0,[r1,#0]  ; g_bMachine
;;;225    
;;;226    	chirp->registerModule(g_module);
000050  49f0              LDR      r1,|L1.1044|
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;227    
;;;228    	g_runM0 = g_chirpM0->getProc("run", NULL);
000058  2200              MOVS     r2,#0
00005a  a1ef              ADR      r1,|L1.1048|
00005c  48ef              LDR      r0,|L1.1052|
00005e  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000060  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000064  49ee              LDR      r1,|L1.1056|
000066  8008              STRH     r0,[r1,#0]
;;;229    	g_runningM0 = g_chirpM0->getProc("running", NULL);
000068  2200              MOVS     r2,#0
00006a  a1ee              ADR      r1,|L1.1060|
00006c  48eb              LDR      r0,|L1.1052|
00006e  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000070  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000074  49ed              LDR      r1,|L1.1068|
000076  8008              STRH     r0,[r1,#0]
;;;230    	g_stopM0 = g_chirpM0->getProc("stop", NULL);	
000078  2200              MOVS     r2,#0
00007a  a1ed              ADR      r1,|L1.1072|
00007c  48e7              LDR      r0,|L1.1052|
00007e  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000080  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000084  49ec              LDR      r1,|L1.1080|
000086  8008              STRH     r0,[r1,#0]
;;;231    
;;;232    	loadParams();		
000088  f7fffffe          BL       _Z10loadParamsv ; loadParams()
;;;233    
;;;234    	return 0;	
00008c  2000              MOVS     r0,#0
;;;235    }
00008e  bd70              POP      {r4-r6,pc}
;;;236    
                          ENDP

                  _Z12exec_addProgP7Programb PROC ; exec_addProg(Program*, bool)
;;;237    
;;;238    int exec_addProg(Program *prog, bool video)
000090  4602              MOV      r2,r0
;;;239    {
000092  460b              MOV      r3,r1
;;;240    	int i;
;;;241    
;;;242    	if (video)
000094  b113              CBZ      r3,|L1.156|
;;;243    		g_progTable[EXEC_VIDEO_PROG-1] = prog;
000096  48e9              LDR      r0,|L1.1084|
000098  61c2              STR      r2,[r0,#0x1c]  ; g_progTable
00009a  e00f              B        |L1.188|
                  |L1.156|
;;;244    	else
;;;245    	{
;;;246    		for (i=0; g_progTable[i]; i++)
00009c  2100              MOVS     r1,#0
00009e  e005              B        |L1.172|
                  |L1.160|
;;;247    
;;;248    		if (i>=EXEC_MAX_PROGS)
0000a0  2908              CMP      r1,#8
0000a2  db02              BLT      |L1.170|
;;;249    			return -1;
0000a4  f04f30ff          MOV      r0,#0xffffffff
                  |L1.168|
;;;250    
;;;251       		g_progTable[i] = prog;
;;;252    	}
;;;253    	return 0;
;;;254    }
0000a8  4770              BX       lr
                  |L1.170|
0000aa  1c49              ADDS     r1,r1,#1              ;246
                  |L1.172|
0000ac  48e3              LDR      r0,|L1.1084|
0000ae  f8500021          LDR      r0,[r0,r1,LSL #2]     ;246
0000b2  2800              CMP      r0,#0                 ;246
0000b4  d1f4              BNE      |L1.160|
0000b6  48e1              LDR      r0,|L1.1084|
0000b8  f8402021          STR      r2,[r0,r1,LSL #2]     ;251
                  |L1.188|
0000bc  2000              MOVS     r0,#0                 ;253
0000be  e7f3              B        |L1.168|
;;;255    
                          ENDP

                  _Z12exec_runningv PROC ; exec_running()
;;;256    
;;;257    uint32_t exec_running()
0000c0  48df              LDR      r0,|L1.1088|
;;;258    {
;;;259     	if (g_running)
0000c2  7800              LDRB     r0,[r0,#0]  ; g_running
0000c4  b110              CBZ      r0,|L1.204|
;;;260    		return g_running;
0000c6  48de              LDR      r0,|L1.1088|
0000c8  7800              LDRB     r0,[r0,#0]  ; g_running
                  |L1.202|
;;;261    	if (g_override)
;;;262    		return 2; // we're not running and we're pressing the button
;;;263    	return 0;
;;;264    }
0000ca  4770              BX       lr
                  |L1.204|
0000cc  48dd              LDR      r0,|L1.1092|
0000ce  7800              LDRB     r0,[r0,#0]            ;261  ; g_override
0000d0  b108              CBZ      r0,|L1.214|
0000d2  2002              MOVS     r0,#2                 ;262
0000d4  e7f9              B        |L1.202|
                  |L1.214|
0000d6  2000              MOVS     r0,#0                 ;263
0000d8  e7f7              B        |L1.202|
;;;265    
                          ENDP

                  _Z9exec_stopv PROC ; exec_stop()
;;;266    int32_t exec_stop()
0000da  2000              MOVS     r0,#0
;;;267    {
;;;268    	g_run = 0;
0000dc  49da              LDR      r1,|L1.1096|
0000de  7008              STRB     r0,[r1,#0]
;;;269    	return 0;
;;;270    }
0000e0  4770              BX       lr
;;;271    
                          ENDP

                  _Z8exec_runv PROC ; exec_run()
;;;272    int32_t exec_run()
0000e2  2001              MOVS     r0,#1
;;;273    {
;;;274    	g_run = true;
0000e4  49d8              LDR      r1,|L1.1096|
0000e6  7008              STRB     r0,[r1,#0]
;;;275    	g_running = true;		
0000e8  49d5              LDR      r1,|L1.1088|
0000ea  7008              STRB     r0,[r1,#0]
;;;276    	return 0;
0000ec  2000              MOVS     r0,#0
;;;277    }
0000ee  4770              BX       lr
;;;278    
                          ENDP

                  _Z12exec_runprogRKh PROC ; exec_runprog(const unsigned char&)
;;;279    
;;;280    int32_t exec_runprog(const uint8_t &progNum)
0000f0  b538              PUSH     {r3-r5,lr}
;;;281    {			   
0000f2  4604              MOV      r4,r0
;;;282    	if (progNum!=0 && (progNum>EXEC_MAX_PROGS || g_progTable[progNum-1]==NULL))
0000f4  7820              LDRB     r0,[r4,#0]
0000f6  b158              CBZ      r0,|L1.272|
0000f8  7820              LDRB     r0,[r4,#0]
0000fa  2808              CMP      r0,#8
0000fc  dc05              BGT      |L1.266|
0000fe  7820              LDRB     r0,[r4,#0]
000100  1e40              SUBS     r0,r0,#1
000102  49ce              LDR      r1,|L1.1084|
000104  f8510020          LDR      r0,[r1,r0,LSL #2]
000108  b910              CBNZ     r0,|L1.272|
                  |L1.266|
;;;283    		return -1;
00010a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.270|
;;;284    
;;;285    	g_execArg = 0;
;;;286    
;;;287    	if (progNum==0) // default program!
;;;288    	{
;;;289    		uint8_t program;
;;;290    		prm_get("Default program", &program, END);
;;;291    		if (program==0 || program>EXEC_MAX_PROGS)
;;;292    			g_program = 0;
;;;293    		if (g_progTable[program-1]!=NULL)
;;;294    			g_program = program-1;
;;;295    	}
;;;296      	else
;;;297    		g_program = progNum-1;
;;;298    	return exec_run();
;;;299    }
00010e  bd38              POP      {r3-r5,pc}
                  |L1.272|
000110  2000              MOVS     r0,#0                 ;285
000112  49ce              LDR      r1,|L1.1100|
000114  6008              STR      r0,[r1,#0]            ;285  ; g_execArg
000116  7820              LDRB     r0,[r4,#0]            ;287
000118  b9d8              CBNZ     r0,|L1.338|
00011a  2200              MOVS     r2,#0                 ;290
00011c  4669              MOV      r1,sp                 ;290
00011e  a0a5              ADR      r0,|L1.948|
000120  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
000124  f89d0000          LDRB     r0,[sp,#0]            ;291
000128  b118              CBZ      r0,|L1.306|
00012a  f89d0000          LDRB     r0,[sp,#0]            ;291
00012e  2808              CMP      r0,#8                 ;291
000130  dd02              BLE      |L1.312|
                  |L1.306|
000132  2000              MOVS     r0,#0                 ;292
000134  49c6              LDR      r1,|L1.1104|
000136  7008              STRB     r0,[r1,#0]            ;292
                  |L1.312|
000138  f89d0000          LDRB     r0,[sp,#0]            ;293
00013c  1e40              SUBS     r0,r0,#1              ;293
00013e  49bf              LDR      r1,|L1.1084|
000140  f8510020          LDR      r0,[r1,r0,LSL #2]     ;293
000144  b120              CBZ      r0,|L1.336|
000146  f89d0000          LDRB     r0,[sp,#0]            ;294
00014a  1e40              SUBS     r0,r0,#1              ;294
00014c  49c0              LDR      r1,|L1.1104|
00014e  7008              STRB     r0,[r1,#0]            ;294
                  |L1.336|
000150  e003              B        |L1.346|
                  |L1.338|
000152  7820              LDRB     r0,[r4,#0]            ;297
000154  1e40              SUBS     r0,r0,#1              ;297
000156  49be              LDR      r1,|L1.1104|
000158  7008              STRB     r0,[r1,#0]            ;297
                  |L1.346|
00015a  f7fffffe          BL       _Z8exec_runv ; exec_run()
00015e  e7d6              B        |L1.270|
;;;300    
                          ENDP

                  _Z15exec_runprogArgRKhRKi PROC ; exec_runprogArg(const unsigned char&, const int&)
;;;301    int32_t exec_runprogArg(const uint8_t &progNum, const int32_t &arg)
000160  b570              PUSH     {r4-r6,lr}
;;;302    {
000162  4606              MOV      r6,r0
000164  460c              MOV      r4,r1
;;;303    	int32_t res = exec_runprog(progNum);
000166  4630              MOV      r0,r6
000168  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
00016c  4605              MOV      r5,r0
;;;304    	if (res<0)
00016e  2d00              CMP      r5,#0
000170  da01              BGE      |L1.374|
;;;305    		return res;
000172  4628              MOV      r0,r5
                  |L1.372|
;;;306    
;;;307    	g_execArg = arg;
;;;308    	return 0;
;;;309    }
000174  bd70              POP      {r4-r6,pc}
                  |L1.374|
000176  49b5              LDR      r1,|L1.1100|
000178  6820              LDR      r0,[r4,#0]            ;307
00017a  6008              STR      r0,[r1,#0]            ;307  ; g_execArg
00017c  2000              MOVS     r0,#0                 ;308
00017e  e7f9              B        |L1.372|
;;;310    
                          ENDP

                  _Z9exec_listv PROC ; exec_list()
;;;311    int32_t exec_list()
000180  b510              PUSH     {r4,lr}
;;;312    {
;;;313    	int i;
;;;314    	for (i=0; g_progTable[i]; i++)
000182  2400              MOVS     r4,#0
000184  e00c              B        |L1.416|
                  |L1.390|
;;;315    		cprintf("%d: %s, %s\n", i+1, g_progTable[i]->progName, g_progTable[i]->desc);
000186  48ad              LDR      r0,|L1.1084|
000188  f8500024          LDR      r0,[r0,r4,LSL #2]
00018c  6843              LDR      r3,[r0,#4]
00018e  48ab              LDR      r0,|L1.1084|
000190  f8500024          LDR      r0,[r0,r4,LSL #2]
000194  1c61              ADDS     r1,r4,#1
000196  6802              LDR      r2,[r0,#0]
000198  a0ae              ADR      r0,|L1.1108|
00019a  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
00019e  1c64              ADDS     r4,r4,#1              ;314
                  |L1.416|
0001a0  48a6              LDR      r0,|L1.1084|
0001a2  f8500024          LDR      r0,[r0,r4,LSL #2]     ;314
0001a6  2800              CMP      r0,#0                 ;314
0001a8  d1ed              BNE      |L1.390|
;;;316    
;;;317     	return 0;
;;;318    }
0001aa  bd10              POP      {r4,pc}
;;;319    
                          ENDP

                  _Z12exec_versionP5Chirp PROC ; exec_version(Chirp*)
;;;320    int32_t exec_version(Chirp *chirp)
0001ac  b510              PUSH     {r4,lr}
;;;321    {
0001ae  b086              SUB      sp,sp,#0x18
0001b0  4604              MOV      r4,r0
;;;322    	uint16_t ver[] = {FW_MAJOR_VER, FW_MINOR_VER, FW_BUILD_VER};
0001b2  49ab              LDR      r1,|L1.1120|
0001b4  c903              LDM      r1,{r0,r1}
0001b6  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;323    
;;;324    	//cprintf("Pixy firmware version %d.%d.%d\n", ver[0], ver[1], ver[2]);
;;;325    	if (chirp)
0001ba  b154              CBZ      r4,|L1.466|
;;;326    		CRP_RETURN(chirp, UINTS16(sizeof(ver), ver), END);
0001bc  2000              MOVS     r0,#0
0001be  aa04              ADD      r2,sp,#0x10
0001c0  e9cd2000          STRD     r2,r0,[sp,#0]
0001c4  2306              MOVS     r3,#6
0001c6  2282              MOVS     r2,#0x82
0001c8  4601              MOV      r1,r0
0001ca  9002              STR      r0,[sp,#8]
0001cc  4620              MOV      r0,r4
0001ce  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.466|
;;;327    
;;;328    	return 0;
0001d2  2000              MOVS     r0,#0
;;;329    }
0001d4  b006              ADD      sp,sp,#0x18
0001d6  bd10              POP      {r4,pc}
;;;330    
                          ENDP

                  _Z14exec_getActionRKtP5Chirp PROC ; exec_getAction(const unsigned short&, Chirp*)
;;;331    int32_t exec_getAction(const uint16_t &index, Chirp *chirp)
0001d8  b57f              PUSH     {r0-r6,lr}
;;;332    {
0001da  4604              MOV      r4,r0
0001dc  460d              MOV      r5,r1
;;;333    	int n = sizeof(actions)/sizeof(ActionScriptlet);
0001de  2612              MOVS     r6,#0x12
;;;334    
;;;335    	if (index>=n)
0001e0  8820              LDRH     r0,[r4,#0]
0001e2  42b0              CMP      r0,r6
0001e4  db03              BLT      |L1.494|
;;;336    		return -1;
0001e6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.490|
;;;337    
;;;338    	if (chirp)
;;;339    		CRP_RETURN(chirp, STRING(actions[index].action), STRING(actions[index].scriptlet), END);
;;;340    
;;;341    	return 0;		
;;;342    }
0001ea  b004              ADD      sp,sp,#0x10
0001ec  bd70              POP      {r4-r6,pc}
                  |L1.494|
0001ee  b19d              CBZ      r5,|L1.536|
0001f0  2100              MOVS     r1,#0                 ;339
0001f2  8820              LDRH     r0,[r4,#0]            ;339
0001f4  4b9b              LDR      r3,|L1.1124|
0001f6  eb0300c0          ADD      r0,r3,r0,LSL #3       ;339
0001fa  6840              LDR      r0,[r0,#4]            ;339
0001fc  23a1              MOVS     r3,#0xa1              ;339
0001fe  e9cd0101          STRD     r0,r1,[sp,#4]         ;339
000202  9300              STR      r3,[sp,#0]            ;339
000204  9103              STR      r1,[sp,#0xc]          ;339
000206  8820              LDRH     r0,[r4,#0]            ;339
000208  4996              LDR      r1,|L1.1124|
00020a  f8513030          LDR      r3,[r1,r0,LSL #3]     ;339
00020e  22a1              MOVS     r2,#0xa1              ;339
000210  2100              MOVS     r1,#0                 ;339
000212  4628              MOV      r0,r5                 ;339
000214  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.536|
000218  2000              MOVS     r0,#0                 ;341
00021a  e7e6              B        |L1.490|
;;;343    
                          ENDP

                  _Z10exec_runM0h PROC ; exec_runM0(unsigned char)
;;;344    int exec_runM0(uint8_t prog)
00021c  b510              PUSH     {r4,lr}
;;;345    {
00021e  b086              SUB      sp,sp,#0x18
000220  4604              MOV      r4,r0
;;;346    	int responseInt;
;;;347    
;;;348    	g_chirpM0->callSync(g_runM0, UINT8(prog), END_OUT_ARGS,
000222  2000              MOVS     r0,#0
000224  aa05              ADD      r2,sp,#0x14
000226  e9cd0201          STRD     r0,r2,[sp,#4]
00022a  9003              STR      r0,[sp,#0xc]
00022c  2301              MOVS     r3,#1
00022e  9400              STR      r4,[sp,#0]
000230  9004              STR      r0,[sp,#0x10]
000232  487b              LDR      r0,|L1.1056|
000234  f9b02000          LDRSH    r2,[r0,#0]  ; g_runM0
000238  2100              MOVS     r1,#0
00023a  4878              LDR      r0,|L1.1052|
00023c  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00023e  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;349    		&responseInt, END_IN_ARGS);
;;;350    
;;;351    	g_progM0 = prog;
000242  4889              LDR      r0,|L1.1128|
000244  7004              STRB     r4,[r0,#0]
;;;352    
;;;353    	return responseInt;
000246  9805              LDR      r0,[sp,#0x14]
;;;354    }
000248  b006              ADD      sp,sp,#0x18
00024a  bd10              POP      {r4,pc}
;;;355    
                          ENDP

                  _Z11exec_stopM0v PROC ; exec_stopM0()
;;;356    int exec_stopM0()
00024c  b51f              PUSH     {r0-r4,lr}
;;;357    {
;;;358    	int responseInt;
;;;359    
;;;360    	g_chirpM0->callSync(g_stopM0, END_OUT_ARGS,
00024e  2000              MOVS     r0,#0
000250  aa03              ADD      r2,sp,#0xc
000252  e9cd2000          STRD     r2,r0,[sp,#0]
000256  4603              MOV      r3,r0
000258  9002              STR      r0,[sp,#8]
00025a  4877              LDR      r0,|L1.1080|
00025c  f9b02000          LDRSH    r2,[r0,#0]  ; g_stopM0
000260  2100              MOVS     r1,#0
000262  486e              LDR      r0,|L1.1052|
000264  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000266  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;361    		&responseInt, END_IN_ARGS);
;;;362    
;;;363    	return responseInt;
00026a  9803              LDR      r0,[sp,#0xc]
;;;364    }
00026c  b004              ADD      sp,sp,#0x10
00026e  bd10              POP      {r4,pc}
;;;365    
                          ENDP

                  _Z14exec_runningM0v PROC ; exec_runningM0()
;;;366    uint8_t exec_runningM0()
000270  b51f              PUSH     {r0-r4,lr}
;;;367    {
;;;368    	uint32_t responseInt;
;;;369    
;;;370    	g_chirpM0->callSync(g_runningM0, END_OUT_ARGS,
000272  2000              MOVS     r0,#0
000274  aa03              ADD      r2,sp,#0xc
000276  e9cd2000          STRD     r2,r0,[sp,#0]
00027a  4603              MOV      r3,r0
00027c  9002              STR      r0,[sp,#8]
00027e  486b              LDR      r0,|L1.1068|
000280  f9b02000          LDRSH    r2,[r0,#0]  ; g_runningM0
000284  2100              MOVS     r1,#0
000286  4865              LDR      r0,|L1.1052|
000288  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00028a  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;371    		&responseInt, END_IN_ARGS);
;;;372    
;;;373    	return responseInt;
00028e  9803              LDR      r0,[sp,#0xc]
000290  b2c0              UXTB     r0,r0
;;;374    }
000292  b004              ADD      sp,sp,#0x10
000294  bd10              POP      {r4,pc}
;;;375    
                          ENDP

                  _Z15exec_loadParamsv PROC ; exec_loadParams()
;;;408    
;;;409    void exec_loadParams()
000296  b510              PUSH     {r4,lr}
;;;410    {
;;;411     	cc_loadParams();
000298  f7fffffe          BL       _Z13cc_loadParamsv ; cc_loadParams()
;;;412    	ser_loadParams();
00029c  f7fffffe          BL       _Z14ser_loadParamsv ; ser_loadParams()
;;;413    	cam_loadParams();
0002a0  f7fffffe          BL       _Z14cam_loadParamsv ; cam_loadParams()
;;;414    	rcs_loadParams();
0002a4  f7fffffe          BL       _Z14rcs_loadParamsv ; rcs_loadParams()
;;;415    
;;;416    	ptLoadParams();
0002a8  f7fffffe          BL       _Z12ptLoadParamsv ; ptLoadParams()
;;;417    	//chaseLoadParams();
;;;418    
;;;419    	loadParams(); // local
0002ac  f7fffffe          BL       _Z10loadParamsv ; loadParams()
;;;420    }
0002b0  bd10              POP      {r4,pc}
;;;421    
                          ENDP

                  _Z13exec_periodicv PROC ; exec_periodic()
;;;375    
;;;376    void exec_periodic()
0002b2  b510              PUSH     {r4,lr}
;;;377    {
;;;378    	periodic();
0002b4  f7fffffe          BL       _Z8periodicv ; periodic()
;;;379    	g_override = g_bMachine->handleSignature();
0002b8  4855              LDR      r0,|L1.1040|
0002ba  6800              LDR      r0,[r0,#0]  ; g_bMachine
0002bc  f7fffffe          BL       _ZN13ButtonMachine15handleSignatureEv ; ButtonMachine::handleSignature()
0002c0  4960              LDR      r1,|L1.1092|
0002c2  7008              STRB     r0,[r1,#0]
;;;380    	if (prm_dirty())
0002c4  f7fffffe          BL       _Z9prm_dirtyv ; prm_dirty()
0002c8  b108              CBZ      r0,|L1.718|
;;;381    		exec_loadParams();
0002ca  f7fffffe          BL       _Z15exec_loadParamsv ; exec_loadParams()
                  |L1.718|
;;;382    }
0002ce  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  _Z11exec_selectv PROC ; exec_select()
;;;384    void exec_select()
0002d0  b538              PUSH     {r3-r5,lr}
;;;385    {
;;;386    	uint8_t prog, progs;
;;;387    
;;;388    	// count number of progs
;;;389    	for (progs=0; g_progTable[progs]; progs++);
0002d2  2400              MOVS     r4,#0
0002d4  e001              B        |L1.730|
                  |L1.726|
0002d6  1c60              ADDS     r0,r4,#1
0002d8  b2c4              UXTB     r4,r0
                  |L1.730|
0002da  4858              LDR      r0,|L1.1084|
0002dc  f8500024          LDR      r0,[r0,r4,LSL #2]
0002e0  2800              CMP      r0,#0
0002e2  d1f8              BNE      |L1.726|
;;;390    
;;;391    	// select using button state machine
;;;392    	prog = g_bMachine->selectProgram(progs);
0002e4  4621              MOV      r1,r4
0002e6  484a              LDR      r0,|L1.1040|
0002e8  6800              LDR      r0,[r0,#0]  ; g_bMachine
0002ea  f7fffffe          BL       _ZN13ButtonMachine13selectProgramEi ; ButtonMachine::selectProgram(int)
0002ee  b2c0              UXTB     r0,r0
0002f0  9000              STR      r0,[sp,#0]
;;;393    
;;;394    	// set it up to run
;;;395    	exec_runprog(prog);
0002f2  4668              MOV      r0,sp
0002f4  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;396    }
0002f8  bd38              POP      {r3-r5,pc}
;;;397    
                          ENDP

                  _Z9exec_loopv PROC ; exec_loop()
;;;422    
;;;423    void exec_loop()
0002fa  b508              PUSH     {r3,lr}
;;;424    {
;;;425    	uint8_t state = 0;
0002fc  2500              MOVS     r5,#0
;;;426    	bool prevConnected = false;
0002fe  2600              MOVS     r6,#0
;;;427    	bool connected;
;;;428    
;;;429    	exec_select();
000300  f7fffffe          BL       _Z11exec_selectv ; exec_select()
;;;430    
;;;431    	while(1)
000304  e0cd              B        |L1.1186|
                  |L1.774|
;;;432    	{
;;;433    		connected = g_chirpUsb->connected();
000306  4859              LDR      r0,|L1.1132|
000308  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00030a  f7fffffe          BL       _ZN5Chirp9connectedEv ; Chirp::connected()
00030e  4604              MOV      r4,r0
;;;434    
;;;435    		exec_periodic();
000310  f7fffffe          BL       _Z13exec_periodicv ; exec_periodic()
;;;436    
;;;437    		switch (state)
000314  2d05              CMP      r5,#5
000316  d249              BCS      |L1.940|
000318  e8dff005          TBB      [pc,r5]
00031c  03193a3f          DCB      0x03,0x19,0x3a,0x3f
000320  ac00              DCB      0xac,0x00
;;;438    		{
;;;439    		case 0:	// setup state
;;;440    			if (!g_ledSet)
000322  4853              LDR      r0,|L1.1136|
000324  7800              LDRB     r0,[r0,#0]  ; g_ledSet
000326  b928              CBNZ     r0,|L1.820|
;;;441    				led_set(0);  // turn off any stray led (but only if we set it, not if someone else has)
000328  2000              MOVS     r0,#0
00032a  9000              STR      r0,[sp,#0]
00032c  4668              MOV      r0,sp
00032e  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;442    			if ((*g_progTable[g_program]->setup)()<0)
000332  bf00              NOP      
                  |L1.820|
000334  4941              LDR      r1,|L1.1084|
000336  4a46              LDR      r2,|L1.1104|
000338  7812              LDRB     r2,[r2,#0]  ; g_program
00033a  f8511022          LDR      r1,[r1,r2,LSL #2]
00033e  6888              LDR      r0,[r1,#8]
000340  4780              BLX      r0
000342  2800              CMP      r0,#0
000344  da01              BGE      |L1.842|
;;;443    				state = 3; // stop state
000346  2503              MOVS     r5,#3
000348  e000              B        |L1.844|
                  |L1.842|
;;;444    			else 
;;;445    				state = 1; // loop state
00034a  2501              MOVS     r5,#1
                  |L1.844|
;;;446    			break;
00034c  e0a7              B        |L1.1182|
;;;447    
;;;448    		case 1:	 // loop state
;;;449    			if (g_override)
00034e  483d              LDR      r0,|L1.1092|
000350  7800              LDRB     r0,[r0,#0]  ; g_override
000352  b118              CBZ      r0,|L1.860|
;;;450    			{
;;;451    				// need to stop M0 because it's using the same memory and can possibly interfere.
;;;452    				// For example if we try to grab a raw frame while M0 is running (gathering RLS values)
;;;453    				// M0 could overwrite the frame memory with RLS scratch data.
;;;454    				exec_stopM0(); 
000354  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
;;;455    				state = 2; // override state
000358  2502              MOVS     r5,#2
00035a  e018              B        |L1.910|
                  |L1.860|
;;;456    			}
;;;457    			else if (!g_run  || (*g_progTable[g_program]->loop)()<0)
00035c  483a              LDR      r0,|L1.1096|
00035e  7800              LDRB     r0,[r0,#0]  ; g_run
000360  b140              CBZ      r0,|L1.884|
000362  4936              LDR      r1,|L1.1084|
000364  4a3a              LDR      r2,|L1.1104|
000366  7812              LDRB     r2,[r2,#0]  ; g_program
000368  f8511022          LDR      r1,[r1,r2,LSL #2]
00036c  68c8              LDR      r0,[r1,#0xc]
00036e  4780              BLX      r0
000370  2800              CMP      r0,#0
000372  da01              BGE      |L1.888|
                  |L1.884|
;;;458    				state = 3; // stop state
000374  2503              MOVS     r5,#3
000376  e00a              B        |L1.910|
                  |L1.888|
;;;459    			else if (prevConnected && !connected) // if we disconnect from pixymon, revert back to default program
000378  b14e              CBZ      r6,|L1.910|
00037a  b944              CBNZ     r4,|L1.910|
;;;460    			{
;;;461    				prm_resetShadows(); // shadows are no longer valid now that the host is disconnected.
00037c  f7fffffe          BL       _Z16prm_resetShadowsv ; prm_resetShadows()
;;;462    				exec_runprog(0); // run default program
000380  2000              MOVS     r0,#0
000382  9000              STR      r0,[sp,#0]
000384  4668              MOV      r0,sp
000386  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;463    				state = 0; // setup state
00038a  2500              MOVS     r5,#0
;;;464    			}
00038c  bf00              NOP      
                  |L1.910|
;;;465    			break;
00038e  e086              B        |L1.1182|
;;;466    
;;;467    		case 2:	// override state
;;;468    			if (!g_override) 
000390  482c              LDR      r0,|L1.1092|
000392  7800              LDRB     r0,[r0,#0]  ; g_override
000394  b900              CBNZ     r0,|L1.920|
;;;469    				state = 0; // back to setup state
000396  2500              MOVS     r5,#0
                  |L1.920|
;;;470    			break;
000398  e081              B        |L1.1182|
;;;471    
;;;472    		case 3:	// stop state
;;;473    			// set variable to indicate we've stopped
;;;474    			g_run = false;
00039a  2000              MOVS     r0,#0
00039c  492a              LDR      r1,|L1.1096|
00039e  7008              STRB     r0,[r1,#0]
;;;475    			g_running = false;
0003a0  4927              LDR      r1,|L1.1088|
0003a2  7008              STRB     r0,[r1,#0]
;;;476    			// stop M0
;;;477    			exec_stopM0();
0003a4  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
;;;478    			state = 4; // wait for run state
0003a8  2504              MOVS     r5,#4
;;;479    			break;
0003aa  e078              B        |L1.1182|
                  |L1.940|
0003ac  e075              B        |L1.1178|
0003ae  0000              DCW      0x0000
                  |L1.944|
                          DCD      ||.conststring||+0x8b8
                  |L1.948|
0003b4  44656661          DCB      "Default program",0
0003b8  756c7420
0003bc  70726f67
0003c0  72616d00
                  |L1.964|
0003c4  40632045          DCB      "@c Expert Sets the debug level for the firmware. (defau"
0003c8  78706572
0003cc  74205365
0003d0  74732074
0003d4  68652064
0003d8  65627567
0003dc  206c6576
0003e0  656c2066
0003e4  6f722074
0003e8  68652066
0003ec  69726d77
0003f0  6172652e
0003f4  20286465
0003f8  666175  
0003fb  6c742030          DCB      "lt 0)",0
0003ff  2900    
000401  00                DCB      0
000402  00                DCB      0
000403  00                DCB      0
                  |L1.1028|
000404  44656275          DCB      "Debug",0
000408  6700    
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
                          DCD      g_debug
                  |L1.1040|
                          DCD      g_bMachine
                  |L1.1044|
                          DCD      g_module
                  |L1.1048|
000418  72756e00          DCB      "run",0
                  |L1.1052|
                          DCD      g_chirpM0
                  |L1.1056|
                          DCD      g_runM0
                  |L1.1060|
000424  72756e6e          DCB      "running",0
000428  696e6700
                  |L1.1068|
                          DCD      g_runningM0
                  |L1.1072|
000430  73746f70          DCB      "stop",0
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
                          DCD      g_stopM0
                  |L1.1084|
                          DCD      g_progTable
                  |L1.1088|
                          DCD      g_running
                  |L1.1092|
                          DCD      g_override
                  |L1.1096|
                          DCD      g_run
                  |L1.1100|
                          DCD      g_execArg
                  |L1.1104|
                          DCD      g_program
                  |L1.1108|
000454  25643a20          DCB      "%d: %s, %s\n",0
000458  25732c20
00045c  25730a00
                  |L1.1120|
                          DCD      ||.constdata||+0x168
                  |L1.1124|
                          DCD      actions
                  |L1.1128|
                          DCD      g_progM0
                  |L1.1132|
                          DCD      g_chirpUsb
                  |L1.1136|
                          DCD      g_ledSet
;;;480    
;;;481    		case 4:	// wait for run state
;;;482    			if (g_run) 
000474  481d              LDR      r0,|L1.1260|
000476  7800              LDRB     r0,[r0,#0]  ; g_run
000478  b118              CBZ      r0,|L1.1154|
;;;483    			{
;;;484    				exec_run();
00047a  f7fffffe          BL       _Z8exec_runv ; exec_run()
;;;485    				state = 0; // back to setup state
00047e  2500              MOVS     r5,#0
000480  e00a              B        |L1.1176|
                  |L1.1154|
;;;486    			}
;;;487    			else if (!connected || !USB_Configuration) // if we disconnect from pixy or unplug cable, revert back to default program
000482  b114              CBZ      r4,|L1.1162|
000484  481a              LDR      r0,|L1.1264|
000486  7800              LDRB     r0,[r0,#0]  ; USB_Configuration
000488  b930              CBNZ     r0,|L1.1176|
                  |L1.1162|
;;;488    			{
;;;489    				exec_runprog(0); // run default program
00048a  2000              MOVS     r0,#0
00048c  9000              STR      r0,[sp,#0]
00048e  4668              MOV      r0,sp
000490  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;490    				state = 0;	// back to setup state
000494  2500              MOVS     r5,#0
;;;491    			}
000496  bf00              NOP      
                  |L1.1176|
;;;492    			break;
000498  e001              B        |L1.1182|
                  |L1.1178|
;;;493    
;;;494    		default:
;;;495    			state = 3; // stop state				
00049a  2503              MOVS     r5,#3
00049c  bf00              NOP                            ;437
                  |L1.1182|
00049e  bf00              NOP                            ;446
;;;496    		}
;;;497    
;;;498    		prevConnected = connected;
0004a0  4626              MOV      r6,r4
                  |L1.1186|
0004a2  e730              B        |L1.774|
;;;499    	}
;;;500    }
;;;501    
                          ENDP

                  _Z10exec_pausev PROC ; exec_pause()
;;;502    uint8_t exec_pause()
0004a4  b510              PUSH     {r4,lr}
;;;503    {
;;;504    	uint8_t running;
;;;505      	running = exec_runningM0();
0004a6  f7fffffe          BL       _Z14exec_runningM0v ; exec_runningM0()
0004aa  4604              MOV      r4,r0
;;;506    	if (running)
0004ac  b10c              CBZ      r4,|L1.1202|
;;;507    		exec_stopM0();
0004ae  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
                  |L1.1202|
;;;508    	return running;
0004b2  4620              MOV      r0,r4
;;;509    }
0004b4  bd10              POP      {r4,pc}
;;;510    
                          ENDP

                  _Z11exec_resumev PROC ; exec_resume()
;;;511    void exec_resume()
0004b6  b510              PUSH     {r4,lr}
;;;512    {
;;;513    	g_qqueue->flush();
0004b8  480e              LDR      r0,|L1.1268|
0004ba  6800              LDR      r0,[r0,#0]  ; g_qqueue
0004bc  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;514    	exec_runM0(g_progM0);
0004c0  480d              LDR      r0,|L1.1272|
0004c2  7800              LDRB     r0,[r0,#0]  ; g_progM0
0004c4  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
;;;515    }
0004c8  bd10              POP      {r4,pc}
;;;516    
                          ENDP

                  _Z14exec_sendEventP5Chirpj PROC ; exec_sendEvent(Chirp*, unsigned)
;;;517    void exec_sendEvent(Chirp *chirp, uint32_t event)
0004ca  b53e              PUSH     {r1-r5,lr}
;;;518    {
0004cc  4604              MOV      r4,r0
0004ce  460d              MOV      r5,r1
;;;519    	if (chirp)
0004d0  b154              CBZ      r4,|L1.1256|
;;;520    		CRP_SEND_XDATA(chirp, HTYPE(FOURCC('E','V','T','1')), INT32(event));
0004d2  2000              MOVS     r0,#0
0004d4  2104              MOVS     r1,#4
0004d6  4b09              LDR      r3,|L1.1276|
0004d8  2264              MOVS     r2,#0x64
0004da  e9cd1500          STRD     r1,r5,[sp,#0]
0004de  9002              STR      r0,[sp,#8]
0004e0  2118              MOVS     r1,#0x18
0004e2  4620              MOV      r0,r4
0004e4  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.1256|
;;;521    }
0004e8  bd3e              POP      {r1-r5,pc}
;;;522    
                          ENDP

0004ea  0000              DCW      0x0000
                  |L1.1260|
                          DCD      g_run
                  |L1.1264|
                          DCD      USB_Configuration
                  |L1.1268|
                          DCD      g_qqueue
                  |L1.1272|
                          DCD      g_progM0
                  |L1.1276|
                          DCD      0x31545645

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_progTable
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z12exec_runningv ; exec_running()
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x64
                          DCD      _Z9exec_stopv ; exec_stop()
000020  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0xa8
                          DCD      _Z8exec_runv ; exec_run()
000038  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0xec
                          DCD      _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
000050  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xf4
                          DCD      ||.conststring||+0x148
                          DCD      _Z15exec_runprogArgRKhRKi ; exec_runprogArg(const unsigned char&, const int&)
000068  01040000          DCB      0x01,0x04,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x154
                          DCD      ||.conststring||+0x1dc
                          DCD      _Z9exec_listv ; exec_list()
000080  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1e4
                          DCD      ||.conststring||+0x210
                          DCD      _Z12exec_versionP5Chirp ; exec_version(Chirp*)
000098  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x218
                          DCD      ||.conststring||+0x284
                          DCD      _Z14exec_getActionRKtP5Chirp ; exec_getAction(const unsigned short&, Chirp*)
0000b0  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x290
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  actions
                          DCD      ||.conststring||+0x320
                          DCD      ||.conststring||+0x334
                          DCD      ||.conststring||+0x340
                          DCD      ||.conststring||+0x354
                          DCD      ||.conststring||+0x398
                          DCD      ||.conststring||+0x3ac
                          DCD      ||.conststring||+0x3f0
                          DCD      ||.conststring||+0x404
                          DCD      ||.conststring||+0x448
                          DCD      ||.conststring||+0x45c
                          DCD      ||.conststring||+0x4a0
                          DCD      ||.conststring||+0x4b4
                          DCD      ||.conststring||+0x4f8
                          DCD      ||.conststring||+0x50c
                          DCD      ||.conststring||+0x550
                          DCD      ||.conststring||+0x564
                          DCD      ||.conststring||+0x5a8
                          DCD      ||.conststring||+0x5c0
                          DCD      ||.conststring||+0x604
                          DCD      ||.conststring||+0x61c
                          DCD      ||.conststring||+0x660
                          DCD      ||.conststring||+0x678
                          DCD      ||.conststring||+0x6bc
                          DCD      ||.conststring||+0x6d4
                          DCD      ||.conststring||+0x718
                          DCD      ||.conststring||+0x730
                          DCD      ||.conststring||+0x774
                          DCD      ||.conststring||+0x78c
                          DCD      ||.conststring||+0x7d0
                          DCD      ||.conststring||+0x7e8
                          DCD      ||.conststring||+0x82c
                          DCD      ||.conststring||+0x840
                          DCD      ||.conststring||+0x854
                          DCD      ||.conststring||+0x86c
                          DCD      ||.conststring||+0x880
                          DCD      ||.conststring||+0x8a4
000168  00020000          DCW      0x0002,0x0000
00016c  0009              DCW      0x0009

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  72756e6e          DCB      "running",0
000004  696e6700
000008  49732061          DCB      "Is a program running?@r 1 if a program is running, 2 if"
00000c  2070726f
000010  6772616d
000014  2072756e
000018  6e696e67
00001c  3f407220
000020  31206966
000024  20612070
000028  726f6772
00002c  616d2069
000030  73207275
000034  6e6e696e
000038  672c2032
00003c  206966  
00003f  2072756e          DCB      " running in ""forced"" state, 0 if not",0
000043  6e696e67
000047  20696e20
00004b  22666f72
00004f  63656422
000053  20737461
000057  74652c20
00005b  30206966
00005f  206e6f74
000063  00      
000064  73746f70          DCB      "stop",0
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
00006c  53746f70          DCB      "Stop execution of the current program@r always returns "
000070  20657865
000074  63757469
000078  6f6e206f
00007c  66207468
000080  65206375
000084  7272656e
000088  74207072
00008c  6f677261
000090  6d407220
000094  616c7761
000098  79732072
00009c  65747572
0000a0  6e7320  
0000a3  3000              DCB      "0",0
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
0000a8  72756e00          DCB      "run",0
0000ac  52756e20          DCB      "Run the current program@r returns 0 if successful, -1 o"
0000b0  74686520
0000b4  63757272
0000b8  656e7420
0000bc  70726f67
0000c0  72616d40
0000c4  72207265
0000c8  7475726e
0000cc  73203020
0000d0  69662073
0000d4  75636365
0000d8  73736675
0000dc  6c2c202d
0000e0  31206f  
0000e3  74686572          DCB      "therwise",0
0000e7  77697365
0000eb  00      
0000ec  72756e70          DCB      "runprog",0
0000f0  726f6700
0000f4  52756e20          DCB      "Run the specified program@p program number@r returns 0 "
0000f8  74686520
0000fc  73706563
000100  69666965
000104  64207072
000108  6f677261
00010c  6d407020
000110  70726f67
000114  72616d20
000118  6e756d62
00011c  65724072
000120  20726574
000124  75726e73
000128  203020  
00012b  69662073          DCB      "if successful, -1 otherwise",0
00012f  75636365
000133  73736675
000137  6c2c202d
00013b  31206f74
00013f  68657277
000143  69736500
000147  00                DCB      0
000148  72756e70          DCB      "runprogArg",0
00014c  726f6741
000150  726700  
000153  00                DCB      0
000154  52756e20          DCB      "Run the specified program with an argument@p program nu"
000158  74686520
00015c  73706563
000160  69666965
000164  64207072
000168  6f677261
00016c  6d207769
000170  74682061
000174  6e206172
000178  67756d65
00017c  6e744070
000180  2070726f
000184  6772616d
000188  206e75  
00018b  6d626572          DCB      "mber@p argument to be passed to program@r returns 0 if "
00018f  40702061
000193  7267756d
000197  656e7420
00019b  746f2062
00019f  65207061
0001a3  73736564
0001a7  20746f20
0001ab  70726f67
0001af  72616d40
0001b3  72207265
0001b7  7475726e
0001bb  73203020
0001bf  696620  
0001c2  73756363          DCB      "successful, -1 otherwise",0
0001c6  65737366
0001ca  756c2c20
0001ce  2d31206f
0001d2  74686572
0001d6  77697365
0001da  00      
0001db  00                DCB      0
0001dc  70726f67          DCB      "progs",0
0001e0  7300    
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  4c697374          DCB      "List available programs@r always returns 0",0
0001e8  20617661
0001ec  696c6162
0001f0  6c652070
0001f4  726f6772
0001f8  616d7340
0001fc  7220616c
000200  77617973
000204  20726574
000208  75726e73
00020c  203000  
00020f  00                DCB      0
000210  76657273          DCB      "version",0
000214  696f6e00
000218  47657420          DCB      "Get firmware version@r always returns 0 and an array of"
00021c  6669726d
000220  77617265
000224  20766572
000228  73696f6e
00022c  40722061
000230  6c776179
000234  73207265
000238  7475726e
00023c  73203020
000240  616e6420
000244  616e2061
000248  72726179
00024c  206f66  
00024f  20332075          DCB      " 3 uint16 values: major, minor, and build versions.",0
000253  696e7431
000257  36207661
00025b  6c756573
00025f  3a206d61
000263  6a6f722c
000267  206d696e
00026b  6f722c20
00026f  616e6420
000273  6275696c
000277  64207665
00027b  7273696f
00027f  6e732e00
000283  00                DCB      0
000284  67657441          DCB      "getAction",0
000288  6374696f
00028c  6e00    
00028e  00                DCB      0
00028f  00                DCB      0
000290  47657420          DCB      "Get the action scriptlet assocated with the index argum"
000294  74686520
000298  61637469
00029c  6f6e2073
0002a0  63726970
0002a4  746c6574
0002a8  20617373
0002ac  6f636174
0002b0  65642077
0002b4  69746820
0002b8  74686520
0002bc  696e6465
0002c0  78206172
0002c4  67756d  
0002c7  656e7440          DCB      "ent@p action index@r returns 0 if successful, -1 otherw"
0002cb  70206163
0002cf  74696f6e
0002d3  20696e64
0002d7  65784072
0002db  20726574
0002df  75726e73
0002e3  20302069
0002e7  66207375
0002eb  63636573
0002ef  7366756c
0002f3  2c202d31
0002f7  206f7468
0002fb  657277  
0002fe  6973652c          DCB      "ise, or if index is out of range",0
000302  206f7220
000306  69662069
00030a  6e646578
00030e  20697320
000312  6f757420
000316  6f662072
00031a  616e6765
00031e  00      
00031f  00                DCB      0
000320  52756e20          DCB      "Run pan/tilt demo",0
000324  70616e2f
000328  74696c74
00032c  2064656d
000330  6f00    
000332  00                DCB      0
000333  00                DCB      0
000334  72756e70          DCB      "runprog 2\n",0
000338  726f6720
00033c  320a00  
00033f  00                DCB      0
000340  53657420          DCB      "Set signature 1...",0
000344  7369676e
000348  61747572
00034c  6520312e
000350  2e2e00  
000353  00                DCB      0
000354  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 1\nrun"
000358  67657446
00035c  72616d65
000360  20307832
000364  31203020
000368  30203332
00036c  30203230
000370  300a6363
000374  5f736574
000378  53696752
00037c  6567696f
000380  6e203020
000384  310a7275
000388  6e      
000389  70726f67          DCB      "progArg 8 1\n",0
00038d  41726720
000391  3820310a
000395  00      
000396  00                DCB      0
000397  00                DCB      0
000398  53657420          DCB      "Set signature 2...",0
00039c  7369676e
0003a0  61747572
0003a4  6520322e
0003a8  2e2e00  
0003ab  00                DCB      0
0003ac  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 2\nrun"
0003b0  67657446
0003b4  72616d65
0003b8  20307832
0003bc  31203020
0003c0  30203332
0003c4  30203230
0003c8  300a6363
0003cc  5f736574
0003d0  53696752
0003d4  6567696f
0003d8  6e203020
0003dc  320a7275
0003e0  6e      
0003e1  70726f67          DCB      "progArg 8 1\n",0
0003e5  41726720
0003e9  3820310a
0003ed  00      
0003ee  00                DCB      0
0003ef  00                DCB      0
0003f0  53657420          DCB      "Set signature 3...",0
0003f4  7369676e
0003f8  61747572
0003fc  6520332e
000400  2e2e00  
000403  00                DCB      0
000404  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 3\nrun"
000408  67657446
00040c  72616d65
000410  20307832
000414  31203020
000418  30203332
00041c  30203230
000420  300a6363
000424  5f736574
000428  53696752
00042c  6567696f
000430  6e203020
000434  330a7275
000438  6e      
000439  70726f67          DCB      "progArg 8 1\n",0
00043d  41726720
000441  3820310a
000445  00      
000446  00                DCB      0
000447  00                DCB      0
000448  53657420          DCB      "Set signature 4...",0
00044c  7369676e
000450  61747572
000454  6520342e
000458  2e2e00  
00045b  00                DCB      0
00045c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 4\nrun"
000460  67657446
000464  72616d65
000468  20307832
00046c  31203020
000470  30203332
000474  30203230
000478  300a6363
00047c  5f736574
000480  53696752
000484  6567696f
000488  6e203020
00048c  340a7275
000490  6e      
000491  70726f67          DCB      "progArg 8 1\n",0
000495  41726720
000499  3820310a
00049d  00      
00049e  00                DCB      0
00049f  00                DCB      0
0004a0  53657420          DCB      "Set signature 5...",0
0004a4  7369676e
0004a8  61747572
0004ac  6520352e
0004b0  2e2e00  
0004b3  00                DCB      0
0004b4  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 5\nrun"
0004b8  67657446
0004bc  72616d65
0004c0  20307832
0004c4  31203020
0004c8  30203332
0004cc  30203230
0004d0  300a6363
0004d4  5f736574
0004d8  53696752
0004dc  6567696f
0004e0  6e203020
0004e4  350a7275
0004e8  6e      
0004e9  70726f67          DCB      "progArg 8 1\n",0
0004ed  41726720
0004f1  3820310a
0004f5  00      
0004f6  00                DCB      0
0004f7  00                DCB      0
0004f8  53657420          DCB      "Set signature 6...",0
0004fc  7369676e
000500  61747572
000504  6520362e
000508  2e2e00  
00050b  00                DCB      0
00050c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 6\nrun"
000510  67657446
000514  72616d65
000518  20307832
00051c  31203020
000520  30203332
000524  30203230
000528  300a6363
00052c  5f736574
000530  53696752
000534  6567696f
000538  6e203020
00053c  360a7275
000540  6e      
000541  70726f67          DCB      "progArg 8 1\n",0
000545  41726720
000549  3820310a
00054d  00      
00054e  00                DCB      0
00054f  00                DCB      0
000550  53657420          DCB      "Set signature 7...",0
000554  7369676e
000558  61747572
00055c  6520372e
000560  2e2e00  
000563  00                DCB      0
000564  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 7\nrun"
000568  67657446
00056c  72616d65
000570  20307832
000574  31203020
000578  30203332
00057c  30203230
000580  300a6363
000584  5f736574
000588  53696752
00058c  6567696f
000590  6e203020
000594  370a7275
000598  6e      
000599  70726f67          DCB      "progArg 8 1\n",0
00059d  41726720
0005a1  3820310a
0005a5  00      
0005a6  00                DCB      0
0005a7  00                DCB      0
0005a8  53657420          DCB      "Set CC signature 1...",0
0005ac  43432073
0005b0  69676e61
0005b4  74757265
0005b8  20312e2e
0005bc  2e00    
0005be  00                DCB      0
0005bf  00                DCB      0
0005c0  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 1\nrun"
0005c4  67657446
0005c8  72616d65
0005cc  20307832
0005d0  31203020
0005d4  30203332
0005d8  30203230
0005dc  300a6363
0005e0  5f736574
0005e4  53696752
0005e8  6567696f
0005ec  6e203120
0005f0  310a7275
0005f4  6e      
0005f5  70726f67          DCB      "progArg 8 1\n",0
0005f9  41726720
0005fd  3820310a
000601  00      
000602  00                DCB      0
000603  00                DCB      0
000604  53657420          DCB      "Set CC signature 2...",0
000608  43432073
00060c  69676e61
000610  74757265
000614  20322e2e
000618  2e00    
00061a  00                DCB      0
00061b  00                DCB      0
00061c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 2\nrun"
000620  67657446
000624  72616d65
000628  20307832
00062c  31203020
000630  30203332
000634  30203230
000638  300a6363
00063c  5f736574
000640  53696752
000644  6567696f
000648  6e203120
00064c  320a7275
000650  6e      
000651  70726f67          DCB      "progArg 8 1\n",0
000655  41726720
000659  3820310a
00065d  00      
00065e  00                DCB      0
00065f  00                DCB      0
000660  53657420          DCB      "Set CC signature 3...",0
000664  43432073
000668  69676e61
00066c  74757265
000670  20332e2e
000674  2e00    
000676  00                DCB      0
000677  00                DCB      0
000678  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 3\nrun"
00067c  67657446
000680  72616d65
000684  20307832
000688  31203020
00068c  30203332
000690  30203230
000694  300a6363
000698  5f736574
00069c  53696752
0006a0  6567696f
0006a4  6e203120
0006a8  330a7275
0006ac  6e      
0006ad  70726f67          DCB      "progArg 8 1\n",0
0006b1  41726720
0006b5  3820310a
0006b9  00      
0006ba  00                DCB      0
0006bb  00                DCB      0
0006bc  53657420          DCB      "Set CC signature 4...",0
0006c0  43432073
0006c4  69676e61
0006c8  74757265
0006cc  20342e2e
0006d0  2e00    
0006d2  00                DCB      0
0006d3  00                DCB      0
0006d4  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 4\nrun"
0006d8  67657446
0006dc  72616d65
0006e0  20307832
0006e4  31203020
0006e8  30203332
0006ec  30203230
0006f0  300a6363
0006f4  5f736574
0006f8  53696752
0006fc  6567696f
000700  6e203120
000704  340a7275
000708  6e      
000709  70726f67          DCB      "progArg 8 1\n",0
00070d  41726720
000711  3820310a
000715  00      
000716  00                DCB      0
000717  00                DCB      0
000718  53657420          DCB      "Set CC signature 5...",0
00071c  43432073
000720  69676e61
000724  74757265
000728  20352e2e
00072c  2e00    
00072e  00                DCB      0
00072f  00                DCB      0
000730  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 5\nrun"
000734  67657446
000738  72616d65
00073c  20307832
000740  31203020
000744  30203332
000748  30203230
00074c  300a6363
000750  5f736574
000754  53696752
000758  6567696f
00075c  6e203120
000760  350a7275
000764  6e      
000765  70726f67          DCB      "progArg 8 1\n",0
000769  41726720
00076d  3820310a
000771  00      
000772  00                DCB      0
000773  00                DCB      0
000774  53657420          DCB      "Set CC signature 6...",0
000778  43432073
00077c  69676e61
000780  74757265
000784  20362e2e
000788  2e00    
00078a  00                DCB      0
00078b  00                DCB      0
00078c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 6\nrun"
000790  67657446
000794  72616d65
000798  20307832
00079c  31203020
0007a0  30203332
0007a4  30203230
0007a8  300a6363
0007ac  5f736574
0007b0  53696752
0007b4  6567696f
0007b8  6e203120
0007bc  360a7275
0007c0  6e      
0007c1  70726f67          DCB      "progArg 8 1\n",0
0007c5  41726720
0007c9  3820310a
0007cd  00      
0007ce  00                DCB      0
0007cf  00                DCB      0
0007d0  53657420          DCB      "Set CC signature 7...",0
0007d4  43432073
0007d8  69676e61
0007dc  74757265
0007e0  20372e2e
0007e4  2e00    
0007e6  00                DCB      0
0007e7  00                DCB      0
0007e8  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 7\nrun"
0007ec  67657446
0007f0  72616d65
0007f4  20307832
0007f8  31203020
0007fc  30203332
000800  30203230
000804  300a6363
000808  5f736574
00080c  53696752
000810  6567696f
000814  6e203120
000818  370a7275
00081c  6e      
00081d  70726f67          DCB      "progArg 8 1\n",0
000821  41726720
000825  3820310a
000829  00      
00082a  00                DCB      0
00082b  00                DCB      0
00082c  436c6561          DCB      "Clear signature...",0
000830  72207369
000834  676e6174
000838  7572652e
00083c  2e2e00  
00083f  00                DCB      0
000840  63635f63          DCB      "cc_clearSig\nrun\n",0
000844  6c656172
000848  5369670a
00084c  72756e0a
000850  00      
000851  00                DCB      0
000852  00                DCB      0
000853  00                DCB      0
000854  436c6561          DCB      "Clear all signatures",0
000858  7220616c
00085c  6c207369
000860  676e6174
000864  75726573
000868  00      
000869  00                DCB      0
00086a  00                DCB      0
00086b  00                DCB      0
00086c  63635f63          DCB      "cc_clearAllSig\nrun\n",0
000870  6c656172
000874  416c6c53
000878  69670a72
00087c  756e0a00
000880  52657374          DCB      "Restore default parameter values",0
000884  6f726520
000888  64656661
00088c  756c7420
000890  70617261
000894  6d657465
000898  72207661
00089c  6c756573
0008a0  00      
0008a1  00                DCB      0
0008a2  00                DCB      0
0008a3  00                DCB      0
0008a4  70726d5f          DCB      "prm_restore\nclose\n",0
0008a8  72657374
0008ac  6f72650a
0008b0  636c6f73
0008b4  650a00  
0008b7  00                DCB      0
0008b8  40632045          DCB      "@c Expert Selects the program number that's run by defa"
0008bc  78706572
0008c0  74205365
0008c4  6c656374
0008c8  73207468
0008cc  65207072
0008d0  6f677261
0008d4  6d206e75
0008d8  6d626572
0008dc  20746861
0008e0  74277320
0008e4  72756e20
0008e8  62792064
0008ec  656661  
0008ef  756c7420          DCB      "ult upon power-up. (default 0)",0
0008f3  75706f6e
0008f7  20706f77
0008fb  65722d75
0008ff  702e2028
000903  64656661
000907  756c7420
00090b  302900  

                          AREA ||.data||, DATA, ALIGN=2

                  g_running
000000  00                DCB      0x00
                  g_run
000001  00                DCB      0x00
                  g_program
000002  00                DCB      0x00
                  g_override
000003  00                DCB      0x00
                  g_execArg
                          DCD      0x00000000
                  g_debug
000008  0000              DCB      0x00,0x00
                  g_runM0
00000a  ffff              DCW      0xffff
                  g_runningM0
00000c  ffff              DCW      0xffff
                  g_stopM0
00000e  ffff              DCW      0xffff
                  g_progM0
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  g_bMachine
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "exec.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_exec_cpp_e0404fb8___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___8_exec_cpp_e0404fb8___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_exec_cpp_e0404fb8___Z7__REVSHi|
#line 144
|__asm___8_exec_cpp_e0404fb8___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
