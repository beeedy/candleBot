; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\spi.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\spi.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\spi.crf ..\libpixy\spi.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN3Spi12slaveHandlerEv PROC ; Spi::slaveHandler()
;;;82     
;;;83     void Spi::slaveHandler()
000000  b538              PUSH     {r3-r5,lr}
;;;84     {
000002  4604              MOV      r4,r0
;;;85     	uint32_t d;
;;;86     	uint16_t d16; 
;;;87     
;;;88     	if (m_autoSlaveSelect)
000004  f894003d          LDRB     r0,[r4,#0x3d]
000008  2800              CMP      r0,#0
00000a  d03c              BEQ      |L1.134|
;;;89     	{
;;;90     		// toggle SPI_SS so we can receive the next word
;;;91     		SS_NEGATE(); // negate SPI_SS
00000c  f44f4080          MOV      r0,#0x4000
000010  49eb              LDR      r1,|L1.960|
000012  6008              STR      r0,[r1,#0]
;;;92     		SS_ASSERT(); // assert SPI_SS
000014  2000              MOVS     r0,#0
000016  49eb              LDR      r1,|L1.964|
000018  f8c10214          STR      r0,[r1,#0x214]
;;;93     
;;;94     		d = LPC_SSP1->DR; // grab data
00001c  48ea              LDR      r0,|L1.968|
00001e  6885              LDR      r5,[r0,#8]
;;;95     		// clear interrupt
;;;96     		LPC_SSP1->ICR = SSP_INTCFG_RX;  
000020  2004              MOVS     r0,#4
000022  49e9              LDR      r1,|L1.968|
000024  6208              STR      r0,[r1,#0x20]
;;;97     
;;;98     		// fill fifo
;;;99     		while(LPC_SSP1->SR&SSP_SR_TNF) 
000026  e00b              B        |L1.64|
                  |L1.40|
;;;100    		{
;;;101    			if (m_tq.read(&d16)==0)
000028  4669              MOV      r1,sp
00002a  f104001c          ADD      r0,r4,#0x1c
00002e  f7fffffe          BL       _ZN9TransmitQItE4readEPt ; TransmitQ<unsigned short>::read(unsigned short*)
000032  b908              CBNZ     r0,|L1.56|
;;;102    				d16 = 0; // stuff fifo with 0s
000034  2000              MOVS     r0,#0
000036  9000              STR      r0,[sp,#0]
                  |L1.56|
;;;103    			LPC_SSP1->DR = d16;
000038  f8bd0000          LDRH     r0,[sp,#0]
00003c  49e2              LDR      r1,|L1.968|
00003e  6088              STR      r0,[r1,#8]
                  |L1.64|
000040  48e1              LDR      r0,|L1.968|
000042  68c0              LDR      r0,[r0,#0xc]          ;99
000044  f0000002          AND      r0,r0,#2              ;99
000048  2800              CMP      r0,#0                 ;99
00004a  d1ed              BNE      |L1.40|
;;;104    		}
;;;105    	
;;;106    		// receive data
;;;107    		if ((d&SPI_SYNC_MASK)==SPI_SYNC_WORD)
00004c  f405407f          AND      r0,r5,#0xff00
000050  f5b04fb4          CMP      r0,#0x5a00
000054  d103              BNE      |L1.94|
;;;108    			m_sync = true;
000056  2001              MOVS     r0,#1
000058  f8840030          STRB     r0,[r4,#0x30]
00005c  e00f              B        |L1.126|
                  |L1.94|
;;;109    		else if ((d&SPI_SYNC_MASK)==SPI_SYNC_WORD_DATA)
00005e  f405407f          AND      r0,r5,#0xff00
000062  f5b04fb6          CMP      r0,#0x5b00
000066  d107              BNE      |L1.120|
;;;110    		{
;;;111    			m_rq.write(d);
000068  b2a9              UXTH     r1,r5
00006a  1d20              ADDS     r0,r4,#4
00006c  f7fffffe          BL       _ZN8ReceiveQItE5writeEt ; ReceiveQ<unsigned short>::write(unsigned short)
;;;112    			m_sync = true;
000070  2001              MOVS     r0,#1
000072  f8840030          STRB     r0,[r4,#0x30]
000076  e002              B        |L1.126|
                  |L1.120|
;;;113    		}
;;;114    		else
;;;115    			m_sync = false;
000078  2000              MOVS     r0,#0
00007a  f8840030          STRB     r0,[r4,#0x30]
                  |L1.126|
;;;116    
;;;117    		m_recvCounter++;
00007e  6b60              LDR      r0,[r4,#0x34]
000080  1c40              ADDS     r0,r0,#1
000082  6360              STR      r0,[r4,#0x34]
000084  e023              B        |L1.206|
                  |L1.134|
;;;118    	}
;;;119    	else
;;;120    	{
;;;121    		d = LPC_SSP1->DR; // grab data
000086  48d0              LDR      r0,|L1.968|
000088  6885              LDR      r5,[r0,#8]
;;;122    		// clear interrupt
;;;123    		LPC_SSP1->ICR = SSP_INTCFG_RX;  
00008a  2004              MOVS     r0,#4
00008c  49ce              LDR      r1,|L1.968|
00008e  6208              STR      r0,[r1,#0x20]
;;;124    
;;;125    		// fill fifo
;;;126    		while(LPC_SSP1->SR&SSP_SR_TNF) 
000090  e00a              B        |L1.168|
                  |L1.146|
;;;127    		{
;;;128    			if (m_tq.read(&d16)==0)
000092  4669              MOV      r1,sp
000094  f104001c          ADD      r0,r4,#0x1c
000098  f7fffffe          BL       _ZN9TransmitQItE4readEPt ; TransmitQ<unsigned short>::read(unsigned short*)
00009c  b900              CBNZ     r0,|L1.160|
;;;129    				break;
00009e  e009              B        |L1.180|
                  |L1.160|
;;;130    			LPC_SSP1->DR = d16;
0000a0  f8bd0000          LDRH     r0,[sp,#0]
0000a4  49c8              LDR      r1,|L1.968|
0000a6  6088              STR      r0,[r1,#8]
                  |L1.168|
0000a8  48c7              LDR      r0,|L1.968|
0000aa  68c0              LDR      r0,[r0,#0xc]          ;126
0000ac  f0000002          AND      r0,r0,#2              ;126
0000b0  2800              CMP      r0,#0                 ;126
0000b2  d1ee              BNE      |L1.146|
                  |L1.180|
0000b4  bf00              NOP                            ;129
;;;131    		}
;;;132    	
;;;133    		// receive data
;;;134    		if ((d&SPI_SYNC_MASK)==SPI_SYNC_WORD_DATA)
0000b6  f405407f          AND      r0,r5,#0xff00
0000ba  f5b04fb6          CMP      r0,#0x5b00
0000be  d106              BNE      |L1.206|
;;;135    		{
;;;136    			m_rq.write(d);
0000c0  b2a9              UXTH     r1,r5
0000c2  1d20              ADDS     r0,r4,#4
0000c4  f7fffffe          BL       _ZN8ReceiveQItE5writeEt ; ReceiveQ<unsigned short>::write(unsigned short)
;;;137    			m_sync = true;
0000c8  2001              MOVS     r0,#1
0000ca  f8840030          STRB     r0,[r4,#0x30]
                  |L1.206|
;;;138    		}
;;;139    	}
;;;140    }
0000ce  bd38              POP      {r3-r5,pc}
;;;141    
                          ENDP

                  SSP1_IRQHandler PROC
;;;77     
;;;78     void SSP1_IRQHandler(void)
0000d0  b510              PUSH     {r4,lr}
;;;79     {
;;;80     	g_spi->slaveHandler();
0000d2  48be              LDR      r0,|L1.972|
0000d4  6800              LDR      r0,[r0,#0]  ; g_spi
0000d6  f7fffffe          BL       _ZN3Spi12slaveHandlerEv ; Spi::slaveHandler()
;;;81     }
0000da  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  _ZN3Spi18setAutoSlaveSelectEb PROC ; Spi::setAutoSlaveSelect(bool)
;;;222    
;;;223    void Spi::setAutoSlaveSelect(bool ass)
0000dc  f880103d          STRB     r1,[r0,#0x3d]
;;;224    {
;;;225    	m_autoSlaveSelect = ass;
;;;226    	if (m_autoSlaveSelect)
0000e0  f890203d          LDRB     r2,[r0,#0x3d]
0000e4  b12a              CBZ      r2,|L1.242|
;;;227    		LPC_SGPIO->GPIO_OENREG = 1<<14; // use this SGPIO Bit as slave select, so configure as output
0000e6  f44f4280          MOV      r2,#0x4000
0000ea  4bb5              LDR      r3,|L1.960|
0000ec  1d1b              ADDS     r3,r3,#4
0000ee  601a              STR      r2,[r3,#0]
0000f0  e003              B        |L1.250|
                  |L1.242|
;;;228    	else
;;;229    		LPC_SGPIO->GPIO_OENREG = 0; // tri-state the SGPIO bit so host can assert slave select
0000f2  2200              MOVS     r2,#0
0000f4  4bb2              LDR      r3,|L1.960|
0000f6  1d1b              ADDS     r3,r3,#4
0000f8  601a              STR      r2,[r3,#0]
                  |L1.250|
;;;230    }
0000fa  4770              BX       lr
;;;231    	
                          ENDP

                  _ZN3SpiC2EPFjPhjE                  ; Alternate entry point ; Spi::Spi__sub_object(unsigned(*)(unsigned char*, unsigned))
                  _ZN3SpiC1EPFjPhjE PROC ; Spi::Spi(unsigned(*)(unsigned char*, unsigned))
;;;232    
;;;233    Spi::Spi(SerialCallback callback) : m_rq(SPI_RECEIVEBUF_SIZE), m_tq(SPI_TRANSMITBUF_SIZE, callback)
;;;234    {
;;;235    	uint32_t i;
;;;236    	volatile uint32_t d;
;;;237    	SSP_CFG_Type configStruct;
;;;238    
;;;239    	configStruct.CPHA = SSP_CPHA_FIRST;
;;;240    	configStruct.CPOL = SSP_CPOL_HI;
;;;241    	configStruct.ClockRate = 204000000;
;;;242    	configStruct.Databit = SSP_DATABIT_16;
;;;243    	configStruct.Mode = SSP_SLAVE_MODE;
;;;244    	configStruct.FrameFormat = SSP_FRAME_SPI;
;;;245    
;;;246    	// Initialize SSP peripheral with parameter given in structure above
;;;247    	SSP_Init(LPC_SSP1, &configStruct);
;;;248    
;;;249    	// clear receive fifo
;;;250    	for (i=0; i<8; i++)
;;;251    		d = LPC_SSP1->DR;
;;;252    
;;;253    	// Enable SSP peripheral
;;;254    	SSP_Cmd(LPC_SSP1, ENABLE);
;;;255    		
;;;256    	SSP_ClearIntPending(LPC_SSP1, SSP_INTCFG_RX);
;;;257    	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, ENABLE);
;;;258    
;;;259    	NVIC_SetPriority(SSP1_IRQn, 0);	// high priority interrupt
;;;260    
;;;261    	m_sync = false;
;;;262    	m_recvCounter = 0;
;;;263    	m_lastRecvCounter = 0; 
;;;264    	m_syncCounter = 0;
;;;265    	setAutoSlaveSelect(false);
;;;266    
;;;267    }
;;;268    
0000fc  e92d41f0          PUSH     {r4-r8,lr}
000100  b088              SUB      sp,sp,#0x20
000102  4604              MOV      r4,r0
000104  460e              MOV      r6,r1
000106  49b2              LDR      r1,|L1.976|
000108  48b2              LDR      r0,|L1.980|
00010a  6020              STR      r0,[r4,#0]
00010c  1d25              ADDS     r5,r4,#4
00010e  f04f0810          MOV      r8,#0x10
000112  f8c58000          STR      r8,[r5,#0]
000116  6829              LDR      r1,[r5,#0]
000118  0048              LSLS     r0,r1,#1
00011a  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
00011e  6068              STR      r0,[r5,#4]
000120  2000              MOVS     r0,#0
000122  60a8              STR      r0,[r5,#8]
000124  60e8              STR      r0,[r5,#0xc]
000126  6128              STR      r0,[r5,#0x10]
000128  6168              STR      r0,[r5,#0x14]
00012a  bf00              NOP      
00012c  1f2c              SUBS     r4,r5,#4
00012e  f104051c          ADD      r5,r4,#0x1c
000132  f8c58000          STR      r8,[r5,#0]
000136  6829              LDR      r1,[r5,#0]
000138  0048              LSLS     r0,r1,#1
00013a  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
00013e  6068              STR      r0,[r5,#4]
000140  2000              MOVS     r0,#0
000142  60a8              STR      r0,[r5,#8]
000144  60e8              STR      r0,[r5,#0xc]
000146  612e              STR      r6,[r5,#0x10]
000148  bf00              NOP      
00014a  f1a5041c          SUB      r4,r5,#0x1c
00014e  9002              STR      r0,[sp,#8]
000150  9003              STR      r0,[sp,#0xc]
000152  48a1              LDR      r0,|L1.984|
000154  9006              STR      r0,[sp,#0x18]
000156  200f              MOVS     r0,#0xf
000158  9001              STR      r0,[sp,#4]
00015a  2004              MOVS     r0,#4
00015c  9004              STR      r0,[sp,#0x10]
00015e  2000              MOVS     r0,#0
000160  9005              STR      r0,[sp,#0x14]
000162  a901              ADD      r1,sp,#4
000164  4898              LDR      r0,|L1.968|
000166  f7fffffe          BL       SSP_Init
00016a  2700              MOVS     r7,#0
00016c  e003              B        |L1.374|
                  |L1.366|
00016e  4896              LDR      r0,|L1.968|
000170  6880              LDR      r0,[r0,#8]
000172  9007              STR      r0,[sp,#0x1c]
000174  1c7f              ADDS     r7,r7,#1
                  |L1.374|
000176  2f08              CMP      r7,#8
000178  d3f9              BCC      |L1.366|
00017a  2101              MOVS     r1,#1
00017c  4892              LDR      r0,|L1.968|
00017e  f7fffffe          BL       SSP_Cmd
000182  2104              MOVS     r1,#4
000184  4890              LDR      r0,|L1.968|
000186  f7fffffe          BL       SSP_ClearIntPending
00018a  2201              MOVS     r2,#1
00018c  2104              MOVS     r1,#4
00018e  488e              LDR      r0,|L1.968|
000190  f7fffffe          BL       SSP_IntConfig
000194  2017              MOVS     r0,#0x17
000196  2100              MOVS     r1,#0
000198  2800              CMP      r0,#0
00019a  da07              BGE      |L1.428|
00019c  070a              LSLS     r2,r1,#28
00019e  0e15              LSRS     r5,r2,#24
0001a0  4a8e              LDR      r2,|L1.988|
0001a2  f000030f          AND      r3,r0,#0xf
0001a6  1f1b              SUBS     r3,r3,#4
0001a8  54d5              STRB     r5,[r2,r3]
0001aa  e003              B        |L1.436|
                  |L1.428|
0001ac  070a              LSLS     r2,r1,#28
0001ae  0e13              LSRS     r3,r2,#24
0001b0  4a8b              LDR      r2,|L1.992|
0001b2  5413              STRB     r3,[r2,r0]
                  |L1.436|
0001b4  bf00              NOP      
0001b6  2000              MOVS     r0,#0
0001b8  f8840030          STRB     r0,[r4,#0x30]
0001bc  6360              STR      r0,[r4,#0x34]
0001be  63a0              STR      r0,[r4,#0x38]
0001c0  f884003c          STRB     r0,[r4,#0x3c]
0001c4  2100              MOVS     r1,#0
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       _ZN3Spi18setAutoSlaveSelectEb ; Spi::setAutoSlaveSelect(bool)
0001cc  4620              MOV      r0,r4
0001ce  b008              ADD      sp,sp,#0x20
0001d0  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _Z8spi_initPFjPhjE PROC ; spi_init(unsigned(*)(unsigned char*, unsigned))
;;;269    void spi_init(SerialCallback callback)
0001d4  b570              PUSH     {r4-r6,lr}
;;;270    {
0001d6  4604              MOV      r4,r0
;;;271    	g_spi = new Spi(callback);
0001d8  2040              MOVS     r0,#0x40
0001da  f7fffffe          BL       _Znwj ; operator new(unsigned)
0001de  4605              MOV      r5,r0
0001e0  4621              MOV      r1,r4
0001e2  f7fffffe          BL       _ZN3SpiC1EPFjPhjE ; Spi::Spi(unsigned(*)(unsigned char*, unsigned))
0001e6  4605              MOV      r5,r0
0001e8  4878              LDR      r0,|L1.972|
0001ea  6005              STR      r5,[r0,#0]  ; g_spi
;;;272    }
0001ec  bd70              POP      {r4-r6,pc}
;;;273    
                          ENDP

                  _ZN3Spi9checkIdleEv PROC ; Spi::checkIdle()
;;;22     
;;;23     int Spi::checkIdle()
0001ee  4602              MOV      r2,r0
;;;24     {
;;;25     	uint32_t i;
;;;26     	// 2000, 120us
;;;27     	// 1000, 60us
;;;28     	SS_NEGATE(); // negate SPI_SS
0001f0  f44f4080          MOV      r0,#0x4000
0001f4  4b72              LDR      r3,|L1.960|
0001f6  6018              STR      r0,[r3,#0]
;;;29     	for (i=0; i<150; i++) // 9us
0001f8  2100              MOVS     r1,#0
0001fa  e006              B        |L1.522|
                  |L1.508|
;;;30     	{
;;;31     		if (LPC_GPIO_PORT->PIN[5]&0x04)
0001fc  4879              LDR      r0,|L1.996|
0001fe  6940              LDR      r0,[r0,#0x14]
000200  f0000004          AND      r0,r0,#4
000204  b100              CBZ      r0,|L1.520|
;;;32     			break;
000206  e002              B        |L1.526|
                  |L1.520|
000208  1c49              ADDS     r1,r1,#1              ;29
                  |L1.522|
00020a  2996              CMP      r1,#0x96              ;29
00020c  d3f6              BCC      |L1.508|
                  |L1.526|
00020e  bf00              NOP      
;;;33     	}
;;;34     	if (i==150)
000210  2996              CMP      r1,#0x96
000212  d112              BNE      |L1.570|
;;;35     	{
;;;36     		SS_ASSERT(); // assert SPI_SS
000214  2000              MOVS     r0,#0
000216  4b6a              LDR      r3,|L1.960|
000218  6018              STR      r0,[r3,#0]
;;;37     		for (i=0; i<16; i++) // 1us
00021a  2100              MOVS     r1,#0
00021c  e006              B        |L1.556|
                  |L1.542|
;;;38     		{
;;;39     			if (LPC_GPIO_PORT->PIN[5]&0x04)
00021e  4871              LDR      r0,|L1.996|
000220  6940              LDR      r0,[r0,#0x14]
000222  f0000004          AND      r0,r0,#4
000226  b100              CBZ      r0,|L1.554|
;;;40     				break;
000228  e002              B        |L1.560|
                  |L1.554|
00022a  1c49              ADDS     r1,r1,#1              ;37
                  |L1.556|
00022c  2910              CMP      r1,#0x10              ;37
00022e  d3f6              BCC      |L1.542|
                  |L1.560|
000230  bf00              NOP      
;;;41     		}
;;;42     		if (i==16)
000232  2910              CMP      r1,#0x10
000234  d101              BNE      |L1.570|
;;;43     			return 1;
000236  2001              MOVS     r0,#1
                  |L1.568|
;;;44      	}
;;;45     	SS_ASSERT(); // assert SPI_SS
;;;46     	return 0;
;;;47     }
000238  4770              BX       lr
                  |L1.570|
00023a  2000              MOVS     r0,#0                 ;45
00023c  4b60              LDR      r3,|L1.960|
00023e  6018              STR      r0,[r3,#0]            ;45
000240  bf00              NOP                            ;46
000242  e7f9              B        |L1.568|
;;;48     
                          ENDP

                  _ZN3Spi4syncEv PROC ; Spi::sync()
;;;49     int Spi::sync()
000244  b538              PUSH     {r3-r5,lr}
;;;50     {
000246  4604              MOV      r4,r0
;;;51     	uint32_t timer;
;;;52     	int res = 0;
000248  2500              MOVS     r5,#0
;;;53     
;;;54     	if (!m_autoSlaveSelect)
00024a  f894003d          LDRB     r0,[r4,#0x3d]
00024e  b908              CBNZ     r0,|L1.596|
;;;55     		return 0;
000250  2000              MOVS     r0,#0
                  |L1.594|
;;;56     
;;;57     	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, DISABLE);
;;;58     
;;;59     	setTimer(&timer);
;;;60     	while(1)
;;;61     	{
;;;62     		if(checkIdle())
;;;63     		{
;;;64     			res = 1;
;;;65     			break;
;;;66     		}
;;;67     		if (getTimer(timer)>500000) // timeout .5 seconds
;;;68     			break;
;;;69     	}
;;;70     
;;;71     	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, ENABLE);
;;;72     	return res;	
;;;73     }
000252  bd38              POP      {r3-r5,pc}
                  |L1.596|
000254  2200              MOVS     r2,#0                 ;57
000256  2104              MOVS     r1,#4                 ;57
000258  485b              LDR      r0,|L1.968|
00025a  f7fffffe          BL       SSP_IntConfig
00025e  4668              MOV      r0,sp                 ;59
000260  f7fffffe          BL       setTimer
000264  e00c              B        |L1.640|
                  |L1.614|
000266  4620              MOV      r0,r4                 ;62
000268  f7fffffe          BL       _ZN3Spi9checkIdleEv ; Spi::checkIdle()
00026c  b108              CBZ      r0,|L1.626|
00026e  2501              MOVS     r5,#1                 ;64
000270  e007              B        |L1.642|
                  |L1.626|
000272  9800              LDR      r0,[sp,#0]            ;67
000274  f7fffffe          BL       getTimer
000278  495b              LDR      r1,|L1.1000|
00027a  4288              CMP      r0,r1                 ;67
00027c  d900              BLS      |L1.640|
00027e  e000              B        |L1.642|
                  |L1.640|
000280  e7f1              B        |L1.614|
                  |L1.642|
000282  bf00              NOP                            ;65
000284  2201              MOVS     r2,#1                 ;71
000286  2104              MOVS     r1,#4                 ;71
000288  484f              LDR      r0,|L1.968|
00028a  f7fffffe          BL       SSP_IntConfig
00028e  4628              MOV      r0,r5                 ;72
000290  e7df              B        |L1.594|
;;;74     
                          ENDP

                  _ZN3Spi4openEv PROC ; Spi::open()
;;;161    
;;;162    int Spi::open()
000292  b510              PUSH     {r4,lr}
;;;163    {
000294  4604              MOV      r4,r0
;;;164    	// configure SGPIO bit so we can toggle slave select (SS)
;;;165    	LPC_SGPIO->OUT_MUX_CFG14 = 4;
000296  2004              MOVS     r0,#4
000298  494a              LDR      r1,|L1.964|
00029a  6388              STR      r0,[r1,#0x38]
;;;166    	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); // SSP1_MISO
00029c  2305              MOVS     r3,#5
00029e  22f0              MOVS     r2,#0xf0
0002a0  2103              MOVS     r1,#3
0002a2  2001              MOVS     r0,#1
0002a4  f7fffffe          BL       scu_pinmux
;;;167    	scu_pinmux(0x1, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); // SSP1_MOSI 
0002a8  2305              MOVS     r3,#5
0002aa  22f0              MOVS     r2,#0xf0
0002ac  2104              MOVS     r1,#4
0002ae  2001              MOVS     r0,#1
0002b0  f7fffffe          BL       scu_pinmux
;;;168    	scu_pinmux(0x1, 19, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); // SSP1_SCK 
0002b4  2301              MOVS     r3,#1
0002b6  22f0              MOVS     r2,#0xf0
0002b8  2113              MOVS     r1,#0x13
0002ba  4618              MOV      r0,r3
0002bc  f7fffffe          BL       scu_pinmux
;;;169    
;;;170    	// enable interrupt
;;;171    	NVIC_EnableIRQ(SSP1_IRQn);
0002c0  2017              MOVS     r0,#0x17
0002c2  2101              MOVS     r1,#1
0002c4  4081              LSLS     r1,r1,r0
0002c6  0942              LSRS     r2,r0,#5
0002c8  0092              LSLS     r2,r2,#2
0002ca  f10222e0          ADD      r2,r2,#0xe000e000
0002ce  f8c21100          STR      r1,[r2,#0x100]
0002d2  bf00              NOP      
;;;172    
;;;173    	// sync
;;;174    	sync();					
0002d4  4620              MOV      r0,r4
0002d6  f7fffffe          BL       _ZN3Spi4syncEv ; Spi::sync()
;;;175    
;;;176    	return 0;
0002da  2000              MOVS     r0,#0
;;;177    }
0002dc  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  _ZN3Spi5closeEv PROC ; Spi::close()
;;;179    int Spi::close()
0002de  b510              PUSH     {r4,lr}
;;;180    {
0002e0  4601              MOV      r1,r0
;;;181    	// turn off driver for SS
;;;182    	LPC_SGPIO->GPIO_OENREG = 0;
0002e2  2000              MOVS     r0,#0
0002e4  4a36              LDR      r2,|L1.960|
0002e6  1d12              ADDS     r2,r2,#4
0002e8  6010              STR      r0,[r2,#0]
;;;183    
;;;184    	// disable interrupt
;;;185    	NVIC_DisableIRQ(SSP1_IRQn);
0002ea  2017              MOVS     r0,#0x17
0002ec  2201              MOVS     r2,#1
0002ee  4082              LSLS     r2,r2,r0
0002f0  4b3e              LDR      r3,|L1.1004|
0002f2  0944              LSRS     r4,r0,#5
0002f4  f8432024          STR      r2,[r3,r4,LSL #2]
0002f8  bf00              NOP      
;;;186    	return 0;
0002fa  2000              MOVS     r0,#0
;;;187    }
0002fc  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  _ZN3Spi7receiveEPhj PROC ; Spi::receive(unsigned char*, unsigned)
;;;141    
;;;142    int Spi::receive(uint8_t *buf, uint32_t len)
0002fe  e92d43f8          PUSH     {r3-r9,lr}
;;;143    {
000302  4680              MOV      r8,r0
000304  460e              MOV      r6,r1
000306  4617              MOV      r7,r2
;;;144    	uint32_t i;
;;;145    	uint16_t buf16;
;;;146    
;;;147    	for (i=0; i<len; i++)
000308  2500              MOVS     r5,#0
00030a  e01f              B        |L1.844|
                  |L1.780|
;;;148    	{
;;;149    		if (m_rq.read(&buf16)==0)
00030c  f1080404          ADD      r4,r8,#4
000310  4620              MOV      r0,r4
000312  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
000316  2800              CMP      r0,#0
000318  dc01              BGT      |L1.798|
00031a  2000              MOVS     r0,#0
00031c  e010              B        |L1.832|
                  |L1.798|
00031e  68a1              LDR      r1,[r4,#8]
000320  1c48              ADDS     r0,r1,#1
000322  60a0              STR      r0,[r4,#8]
000324  6860              LDR      r0,[r4,#4]
000326  f8300011          LDRH     r0,[r0,r1,LSL #1]
00032a  9000              STR      r0,[sp,#0]
00032c  6960              LDR      r0,[r4,#0x14]
00032e  1c40              ADDS     r0,r0,#1
000330  6160              STR      r0,[r4,#0x14]
000332  6821              LDR      r1,[r4,#0]
000334  68a0              LDR      r0,[r4,#8]
000336  4288              CMP      r0,r1
000338  d101              BNE      |L1.830|
00033a  2000              MOVS     r0,#0
00033c  60a0              STR      r0,[r4,#8]
                  |L1.830|
00033e  2001              MOVS     r0,#1
                  |L1.832|
000340  b900              CBNZ     r0,|L1.836|
;;;150    			break;
000342  e005              B        |L1.848|
                  |L1.836|
;;;151    		buf[i] = buf16&0xff;
000344  f8bd0000          LDRH     r0,[sp,#0]
000348  5570              STRB     r0,[r6,r5]
00034a  1c6d              ADDS     r5,r5,#1              ;147
                  |L1.844|
00034c  42bd              CMP      r5,r7                 ;147
00034e  d3dd              BCC      |L1.780|
                  |L1.848|
000350  bf00              NOP                            ;150
;;;152    	}
;;;153    
;;;154    	return i;
000352  4628              MOV      r0,r5
;;;155    }
000354  e8bd83f8          POP      {r3-r9,pc}
;;;156    
                          ENDP

                  _ZN3Spi10receiveLenEv PROC ; Spi::receiveLen()
;;;157    int Spi::receiveLen()
000358  b510              PUSH     {r4,lr}
;;;158    {	
00035a  4604              MOV      r4,r0
;;;159    	return m_rq.receiveLen();
00035c  1d20              ADDS     r0,r4,#4
00035e  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
;;;160    }
000362  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  _ZN3Spi6updateEv PROC ; Spi::update()
;;;188    
;;;189    int Spi::update()
000364  b510              PUSH     {r4,lr}
;;;190    {
000366  4604              MOV      r4,r0
;;;191    	if (m_autoSlaveSelect)
000368  f894003d          LDRB     r0,[r4,#0x3d]
00036c  b330              CBZ      r0,|L1.956|
;;;192    	{
;;;193    		// check to see if we've received new data (m_rq.m_produced would have increased)
;;;194    		if (m_recvCounter-m_lastRecvCounter>0)
00036e  e9d4010d          LDRD     r0,r1,[r4,#0x34]
000372  1a40              SUBS     r0,r0,r1
000374  d018              BEQ      |L1.936|
;;;195    		{
;;;196    			if (!m_sync) // if received data isn't correct, we're out of sync
000376  f8940030          LDRB     r0,[r4,#0x30]
00037a  b988              CBNZ     r0,|L1.928|
;;;197    			{
;;;198    				m_syncCounter++;
00037c  f8140f3c          LDRB     r0,[r4,#0x3c]!
000380  1c40              ADDS     r0,r0,#1
000382  7020              STRB     r0,[r4,#0]
;;;199    
;;;200    				if (m_syncCounter==SPI_MIN_SYNC_COUNT) // if we receive enough bad syncs in a row, we need to resync 
000384  f814093c          LDRB     r0,[r4],#-0x3c
000388  2805              CMP      r0,#5
00038a  d115              BNE      |L1.952|
;;;201    				{
;;;202    					sync();
00038c  4620              MOV      r0,r4
00038e  f7fffffe          BL       _ZN3Spi4syncEv ; Spi::sync()
;;;203    					cprintf("sync\n");
000392  a017              ADR      r0,|L1.1008|
000394  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;204    					m_syncCounter = 0;
000398  2000              MOVS     r0,#0
00039a  f884003c          STRB     r0,[r4,#0x3c]
00039e  e00b              B        |L1.952|
                  |L1.928|
;;;205    				}
;;;206    			}
;;;207    			else
;;;208    				m_syncCounter = 0;
0003a0  2000              MOVS     r0,#0
0003a2  f884003c          STRB     r0,[r4,#0x3c]
0003a6  e007              B        |L1.952|
                  |L1.936|
;;;209    		}	
;;;210    		else
;;;211    		{
;;;212    			// need to pump up the fifo because we only get an interrupt when fifo is half full
;;;213    			// (and we won't receive data if we don't toggle SS)
;;;214    			SS_NEGATE();
0003a8  f44f4080          MOV      r0,#0x4000
0003ac  4904              LDR      r1,|L1.960|
0003ae  6008              STR      r0,[r1,#0]
;;;215    			SS_ASSERT();
0003b0  2000              MOVS     r0,#0
0003b2  4904              LDR      r1,|L1.964|
0003b4  f8c10214          STR      r0,[r1,#0x214]
                  |L1.952|
;;;216    		}
;;;217    		m_lastRecvCounter = m_recvCounter;
0003b8  6b60              LDR      r0,[r4,#0x34]
0003ba  63a0              STR      r0,[r4,#0x38]
                  |L1.956|
;;;218    	}
;;;219    	return 0;
0003bc  2000              MOVS     r0,#0
;;;220    }
0003be  bd10              POP      {r4,pc}
;;;221    
                          ENDP

                  |L1.960|
                          DCD      0x40101214
                  |L1.964|
                          DCD      0x40101000
                  |L1.968|
                          DCD      0x400c5000
                  |L1.972|
                          DCD      g_spi
                  |L1.976|
                          DCD      _ZTV7Iserial+0x8 ; vtable for Iserial
                  |L1.980|
                          DCD      _ZTV3Spi+0x8 ; vtable for Spi
                  |L1.984|
                          DCD      0x0c28cb00
                  |L1.988|
                          DCD      0xe000ed18
                  |L1.992|
                          DCD      0xe000e400
                  |L1.996|
                          DCD      0x400f6100
                  |L1.1000|
                          DCD      0x0007a120
                  |L1.1004|
                          DCD      0xe000e180
                  |L1.1008|
0003f0  73796e63          DCB      "sync\n",0
0003f4  0a00    
0003f6  00                DCB      0
0003f7  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  g_spi
                          DCD      0x00000000

                          AREA ||.constdata__ZTV3Spi||, COMGROUP=_ZTV3Spi, DATA, READONLY, ALIGN=2

                  _ZTV3Spi ; vtable for Spi
                          DCD      0x00000000
                          DCD      _ZTI3Spi ; typeinfo for Spi
                          DCD      _ZN3Spi4openEv ; Spi::open()
                          DCD      _ZN3Spi5closeEv ; Spi::close()
                          DCD      _ZN3Spi7receiveEPhj ; Spi::receive(unsigned char*, unsigned)
                          DCD      _ZN3Spi10receiveLenEv ; Spi::receiveLen()
                          DCD      _ZN3Spi6updateEv ; Spi::update()

                          AREA ||t._ZN8ReceiveQItE5writeEt||, COMGROUP=_ZN8ReceiveQItE5writeEt, CODE, READONLY, ALIGN=1

                  _ZN8ReceiveQItE5writeEt PROC ; ReceiveQ<unsigned short>::write(unsigned short)
;;;64     
;;;65     	inline int write(BufType data)
000000  b570              PUSH     {r4-r6,lr}
;;;66     	{
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;67     		if (freeLen()<=0)
000006  bf00              NOP      
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
00000e  6821              LDR      r1,[r4,#0]
000010  1a08              SUBS     r0,r1,r0
000012  2800              CMP      r0,#0
000014  dc01              BGT      |L20.26|
;;;68     			return 0; 
000016  2000              MOVS     r0,#0
                  |L20.24|
;;;69     
;;;70     		m_buf[m_write++] = data;
;;;71     		m_produced++;
;;;72     		
;;;73     		if (m_write==m_size)
;;;74     			m_write = 0;
;;;75     
;;;76     		return 1;
;;;77     	}
000018  bd70              POP      {r4-r6,pc}
                  |L20.26|
00001a  68e1              LDR      r1,[r4,#0xc]          ;70
00001c  1c48              ADDS     r0,r1,#1              ;70
00001e  60e0              STR      r0,[r4,#0xc]          ;70
000020  6860              LDR      r0,[r4,#4]            ;70
000022  f8205011          STRH     r5,[r0,r1,LSL #1]     ;70
000026  6920              LDR      r0,[r4,#0x10]         ;71
000028  1c40              ADDS     r0,r0,#1              ;71
00002a  6120              STR      r0,[r4,#0x10]         ;71
00002c  6821              LDR      r1,[r4,#0]            ;73
00002e  68e0              LDR      r0,[r4,#0xc]          ;73
000030  4288              CMP      r0,r1                 ;73
000032  d101              BNE      |L20.56|
000034  2000              MOVS     r0,#0                 ;74
000036  60e0              STR      r0,[r4,#0xc]          ;74
                  |L20.56|
000038  2001              MOVS     r0,#1                 ;76
00003a  e7ed              B        |L20.24|
;;;78     
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN8ReceiveQItE5writeEt, LINKORDER=||t._ZN8ReceiveQItE5writeEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN8ReceiveQItE5writeEt||
                          DCD      0x00000001

                          AREA ||t._ZN9TransmitQItE4readEPt||, COMGROUP=_ZN9TransmitQItE4readEPt, CODE, READONLY, ALIGN=1

                  _ZN9TransmitQItE4readEPt PROC ; TransmitQ<unsigned short>::read(unsigned short*)
;;;105    
;;;106    	int read(BufType *data)
000000  b570              PUSH     {r4-r6,lr}
;;;107    	{
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;108    		if (m_len==0)
000006  68e0              LDR      r0,[r4,#0xc]
000008  b960              CBNZ     r0,|L27.36|
;;;109    		{
;;;110    			m_len = (*m_callback)((uint8_t *)m_buf, m_size*sizeof(BufType))/sizeof(BufType);
00000a  6823              LDR      r3,[r4,#0]
00000c  0059              LSLS     r1,r3,#1
00000e  6922              LDR      r2,[r4,#0x10]
000010  6860              LDR      r0,[r4,#4]
000012  4790              BLX      r2
000014  0840              LSRS     r0,r0,#1
000016  60e0              STR      r0,[r4,#0xc]
;;;111    			if (m_len==0)
000018  68e0              LDR      r0,[r4,#0xc]
00001a  b908              CBNZ     r0,|L27.32|
;;;112    				return 0;
00001c  2000              MOVS     r0,#0
                  |L27.30|
;;;113    		 	m_read = 0;
;;;114    		}
;;;115    		*data = m_buf[m_read++];
;;;116    		m_len--;
;;;117    
;;;118    		return 1;
;;;119    	}
00001e  bd70              POP      {r4-r6,pc}
                  |L27.32|
000020  2000              MOVS     r0,#0                 ;113
000022  60a0              STR      r0,[r4,#8]            ;113
                  |L27.36|
000024  68a1              LDR      r1,[r4,#8]            ;115
000026  1c48              ADDS     r0,r1,#1              ;115
000028  60a0              STR      r0,[r4,#8]            ;115
00002a  6860              LDR      r0,[r4,#4]            ;115
00002c  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;115
000030  8028              STRH     r0,[r5,#0]            ;115
000032  68e0              LDR      r0,[r4,#0xc]          ;116
000034  1e40              SUBS     r0,r0,#1              ;116
000036  60e0              STR      r0,[r4,#0xc]          ;116
000038  2001              MOVS     r0,#1                 ;118
00003a  e7f0              B        |L27.30|
;;;120    
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN9TransmitQItE4readEPt, LINKORDER=||t._ZN9TransmitQItE4readEPt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9TransmitQItE4readEPt||
                          DCD      0x00000001

                          AREA ||t._ZN8ReceiveQItE10receiveLenEv||, COMGROUP=_ZN8ReceiveQItE10receiveLenEv, CODE, READONLY, ALIGN=1

                  _ZN8ReceiveQItE10receiveLenEv PROC ; ReceiveQ<unsigned short>::receiveLen()
;;;41     
;;;42     	inline int32_t receiveLen()
000000  4601              MOV      r1,r0
;;;43     	{
;;;44     		return m_produced - m_consumed;
000002  e9d10204          LDRD     r0,r2,[r1,#0x10]
000006  1a80              SUBS     r0,r0,r2
;;;45     	}
000008  4770              BX       lr
;;;46     
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN8ReceiveQItE10receiveLenEv, LINKORDER=||t._ZN8ReceiveQItE10receiveLenEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN8ReceiveQItE10receiveLenEv||
                          DCD      0x00000001

                          AREA ||.constdata__ZTV7Iserial||, COMGROUP=_ZTV7Iserial, DATA, READONLY, ALIGN=2

                  _ZTV7Iserial ; vtable for Iserial
                          DCD      0x00000000
                          DCD      _ZTI7Iserial ; typeinfo for Iserial
                          DCD      _ZN7Iserial4openEv ; Iserial::open()
                          DCD      _ZN7Iserial5closeEv ; Iserial::close()
                          DCD      _ZN7Iserial7receiveEPhj ; Iserial::receive(unsigned char*, unsigned)
                          DCD      _ZN7Iserial10receiveLenEv ; Iserial::receiveLen()
                          DCD      _ZN7Iserial6updateEv ; Iserial::update()

                          AREA ||.constdata__ZTI3Spi||, COMGROUP=_ZTI3Spi, DATA, READONLY, ALIGN=2

                  _ZTI3Spi ; typeinfo for Spi
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS3Spi ; typeinfo name for Spi
                          DCD      _ZTI7Iserial ; typeinfo for Iserial

                          AREA ||.constdata__ZTI7Iserial||, COMGROUP=_ZTI7Iserial, DATA, READONLY, ALIGN=2

                  _ZTI7Iserial ; typeinfo for Iserial
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS7Iserial ; typeinfo name for Iserial

                          AREA ||.constdata__ZTS3Spi||, COMGROUP=_ZTS3Spi, DATA, READONLY, ALIGN=0

                  _ZTS3Spi ; typeinfo name for Spi
000000  33537069          DCB      0x33,0x53,0x70,0x69
000004  00                DCB      0x00

                          AREA ||.constdata__ZTS7Iserial||, COMGROUP=_ZTS7Iserial, DATA, READONLY, ALIGN=0

                  _ZTS7Iserial ; typeinfo name for Iserial
000000  37497365          DCB      0x37,0x49,0x73,0x65
000004  7269616c          DCB      0x72,0x69,0x61,0x6c
000008  00                DCB      0x00

                          AREA ||i._ZN7Iserial4openEv||, COMGROUP=_ZN7Iserial4openEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial4openEv PROC ; Iserial::open()
;;;131    public:
;;;132    	virtual int open()
000000  4601              MOV      r1,r0
;;;133    	{
;;;134    		return 0;
000002  2000              MOVS     r0,#0
;;;135    	}
000004  4770              BX       lr
;;;136    	virtual int close()
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN7Iserial4openEv, LINKORDER=||i._ZN7Iserial4openEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial4openEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial5closeEv||, COMGROUP=_ZN7Iserial5closeEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial5closeEv PROC ; Iserial::close()
;;;135    	}
;;;136    	virtual int close()
000000  4601              MOV      r1,r0
;;;137    	{
;;;138    		return 0;
000002  2000              MOVS     r0,#0
;;;139    	}
000004  4770              BX       lr
;;;140    	virtual int receive(uint8_t *buf, uint32_t len)
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN7Iserial5closeEv, LINKORDER=||i._ZN7Iserial5closeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial5closeEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial7receiveEPhj||, COMGROUP=_ZN7Iserial7receiveEPhj, CODE, READONLY, ALIGN=1

                  _ZN7Iserial7receiveEPhj PROC ; Iserial::receive(unsigned char*, unsigned)
;;;139    	}
;;;140    	virtual int receive(uint8_t *buf, uint32_t len)
000000  4603              MOV      r3,r0
;;;141    	{
;;;142    		return 0;
000002  2000              MOVS     r0,#0
;;;143    	}
000004  4770              BX       lr
;;;144    	virtual int receiveLen()
                          ENDP


                          AREA ||area_number.67||, COMGROUP=_ZN7Iserial7receiveEPhj, LINKORDER=||i._ZN7Iserial7receiveEPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial7receiveEPhj||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial10receiveLenEv||, COMGROUP=_ZN7Iserial10receiveLenEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial10receiveLenEv PROC ; Iserial::receiveLen()
;;;143    	}
;;;144    	virtual int receiveLen()
000000  4601              MOV      r1,r0
;;;145    	{
;;;146    		return 0;
000002  2000              MOVS     r0,#0
;;;147    	}
000004  4770              BX       lr
;;;148    	virtual int update()
                          ENDP


                          AREA ||area_number.74||, COMGROUP=_ZN7Iserial10receiveLenEv, LINKORDER=||i._ZN7Iserial10receiveLenEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial10receiveLenEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial6updateEv||, COMGROUP=_ZN7Iserial6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial6updateEv PROC ; Iserial::update()
;;;147    	}
;;;148    	virtual int update()
000000  4601              MOV      r1,r0
;;;149    	{
;;;150    		return 0;
000002  2000              MOVS     r0,#0
;;;151    	}
000004  4770              BX       lr
;;;152    };
                          ENDP


                          AREA ||area_number.81||, COMGROUP=_ZN7Iserial6updateEv, LINKORDER=||i._ZN7Iserial6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial6updateEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\spi.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_spi_cpp_g_spi___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___7_spi_cpp_g_spi___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_spi_cpp_g_spi___Z7__REVSHi|
#line 144
|__asm___7_spi_cpp_g_spi___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
