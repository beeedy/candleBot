; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\m0\frame_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\m0\frame_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DCORE_M0 -DIPC_SLAVE -DPIXY --omf_browse=.\m0\frame_m0.crf ..\libpixy\frame_m0.c]
                          THUMB

                          AREA ||i.callSyncM0||, CODE, READONLY, ALIGN=2

                  callSyncM0 PROC
;;;568    
;;;569    void callSyncM0(void)
000000  b510              PUSH     {r4,lr}
;;;570    {
;;;571    	syncM0((uint32_t *)&CAM_PORT, CAM_PCLK_MASK);
000002  2101              MOVS     r1,#1
000004  0349              LSLS     r1,r1,#13
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       syncM0
;;;572    }
00000c  bd10              POP      {r4,pc}
;;;573    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x400f6104

                          AREA ||i.callSyncM1||, CODE, READONLY, ALIGN=2

                  callSyncM1 PROC
;;;573    
;;;574    void callSyncM1(void)
000000  b510              PUSH     {r4,lr}
;;;575    {
;;;576    	syncM1((uint32_t *)&CAM_PORT, CAM_PCLK_MASK);
000002  2101              MOVS     r1,#1
000004  0349              LSLS     r1,r1,#13
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       syncM1
;;;577    }
00000c  bd10              POP      {r4,pc}
;;;578    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x400f6104

                          AREA ||i.frame_init||, CODE, READONLY, ALIGN=2

                  frame_init PROC
;;;597    
;;;598    int frame_init(void)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600    	chirpSetProc("getFrame", (ProcPtr)getFrame);
000002  4903              LDR      r1,|L3.16|
000004  a003              ADR      r0,|L3.20|
000006  f7fffffe          BL       chirpSetProc
;;;601    		
;;;602    	return 0;	
00000a  2000              MOVS     r0,#0
;;;603    }
00000c  bd10              POP      {r4,pc}
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      getFrame
                  |L3.20|
000014  67657446          DCB      "getFrame",0
000018  72616d65
00001c  00      
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0

                          AREA ||i.getFrame||, CODE, READONLY, ALIGN=1

                  getFrame PROC
;;;578    
;;;579    int32_t getFrame(uint8_t *type, uint32_t *memory, uint16_t *xoffset, uint16_t *yoffset, uint16_t *xwidth, uint16_t *ywidth)
000000  b5fe              PUSH     {r1-r7,lr}
;;;580    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;581    	//printf("M0: grab %d %d %d %d %d\n", *type, *xoffset, *yoffset, *xwidth, *ywidth);
;;;582    
;;;583    	if (*type==CAM_GRAB_M0R0)
00000a  7820              LDRB     r0,[r4,#0]
00000c  2800              CMP      r0,#0
00000e  d10b              BNE      |L4.40|
;;;584    		grabM0R0(*xoffset, *yoffset, *xwidth, *ywidth, (uint8_t *)*memory);
000010  6828              LDR      r0,[r5,#0]
000012  9000              STR      r0,[sp,#0]
000014  9909              LDR      r1,[sp,#0x24]
000016  880b              LDRH     r3,[r1,#0]
000018  9908              LDR      r1,[sp,#0x20]
00001a  880a              LDRH     r2,[r1,#0]
00001c  8839              LDRH     r1,[r7,#0]
00001e  9101              STR      r1,[sp,#4]
000020  8830              LDRH     r0,[r6,#0]
000022  f7fffffe          BL       grabM0R0
000026  e020              B        |L4.106|
                  |L4.40|
;;;585    	else if (*type==CAM_GRAB_M1R1)
000028  7820              LDRB     r0,[r4,#0]
00002a  2811              CMP      r0,#0x11
00002c  d10b              BNE      |L4.70|
;;;586    		grabM1R1(*xoffset, *yoffset, *xwidth, *ywidth, (uint8_t *)*memory);
00002e  6828              LDR      r0,[r5,#0]
000030  9000              STR      r0,[sp,#0]
000032  9809              LDR      r0,[sp,#0x24]
000034  8803              LDRH     r3,[r0,#0]
000036  9808              LDR      r0,[sp,#0x20]
000038  8802              LDRH     r2,[r0,#0]
00003a  8839              LDRH     r1,[r7,#0]
00003c  8830              LDRH     r0,[r6,#0]
00003e  9001              STR      r0,[sp,#4]
000040  f7fffffe          BL       grabM1R1
000044  e011              B        |L4.106|
                  |L4.70|
;;;587    	else if (*type==CAM_GRAB_M1R2)
000046  7820              LDRB     r0,[r4,#0]
000048  2821              CMP      r0,#0x21
00004a  d10b              BNE      |L4.100|
;;;588    		grabM1R2(*xoffset, *yoffset, *xwidth, *ywidth, (uint8_t *)*memory);
00004c  6828              LDR      r0,[r5,#0]
00004e  9000              STR      r0,[sp,#0]
000050  9809              LDR      r0,[sp,#0x24]
000052  8803              LDRH     r3,[r0,#0]
000054  9808              LDR      r0,[sp,#0x20]
000056  8802              LDRH     r2,[r0,#0]
000058  8839              LDRH     r1,[r7,#0]
00005a  8830              LDRH     r0,[r6,#0]
00005c  9001              STR      r0,[sp,#4]
00005e  f7fffffe          BL       grabM1R2
000062  e002              B        |L4.106|
                  |L4.100|
;;;589    	else
;;;590    		return -1;
000064  2000              MOVS     r0,#0
000066  43c0              MVNS     r0,r0
                  |L4.104|
;;;591    
;;;592    	return 0;
;;;593    }
000068  bdfe              POP      {r1-r7,pc}
                  |L4.106|
00006a  2000              MOVS     r0,#0                 ;592
00006c  e7fc              B        |L4.104|
;;;594    
                          ENDP


                          AREA ||i.grabM0R0||, CODE, READONLY, ALIGN=2

                  grabM0R0 PROC
;;;517    
;;;518    void grabM0R0(uint32_t xoffset, uint32_t yoffset, uint32_t xwidth, uint32_t ywidth, uint8_t *memory)
000000  b5f8              PUSH     {r3-r7,lr}
;;;519    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;520    	uint32_t line;
;;;521    
;;;522    	xoffset >>= 1;
00000a  0864              LSRS     r4,r4,#1
;;;523    	yoffset &= ~1;
00000c  086d              LSRS     r5,r5,#1
00000e  006d              LSLS     r5,r5,#1
;;;524    
;;;525    	skipLines(yoffset);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       skipLines
;;;526    	for (line=0; line<ywidth; line++, memory+=xwidth)
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
00001a  e00b              B        |L5.52|
                  |L5.28|
;;;527    		lineM0((uint32_t *)&CAM_PORT, memory, xoffset, xwidth); // wait, grab, wait
00001c  4633              MOV      r3,r6
00001e  4622              MOV      r2,r4
000020  4806              LDR      r0,|L5.60|
000022  9906              LDR      r1,[sp,#0x18]
000024  f7fffffe          BL       lineM0
000028  9800              LDR      r0,[sp,#0]            ;526
00002a  1c40              ADDS     r0,r0,#1              ;526
00002c  9000              STR      r0,[sp,#0]            ;526
00002e  9806              LDR      r0,[sp,#0x18]         ;526
000030  1980              ADDS     r0,r0,r6              ;526
000032  9006              STR      r0,[sp,#0x18]         ;526
                  |L5.52|
000034  9800              LDR      r0,[sp,#0]            ;526
000036  42b8              CMP      r0,r7                 ;526
000038  d3f0              BCC      |L5.28|
;;;528    }
00003a  bdf8              POP      {r3-r7,pc}
;;;529    
                          ENDP

                  |L5.60|
                          DCD      0x400f6104

                          AREA ||i.grabM1R1||, CODE, READONLY, ALIGN=2

                  grabM1R1 PROC
;;;529    
;;;530    void grabM1R1(uint32_t xoffset, uint32_t yoffset, uint32_t xwidth, uint32_t ywidth, uint8_t *memory)
000000  b5f8              PUSH     {r3-r7,lr}
;;;531    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;532    	uint32_t line;
;;;533    
;;;534    	xoffset >>= 1;
00000a  0864              LSRS     r4,r4,#1
;;;535    	yoffset &= ~1;
00000c  086d              LSRS     r5,r5,#1
00000e  006d              LSLS     r5,r5,#1
;;;536    
;;;537    	skipLines(yoffset);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       skipLines
;;;538    	for (line=0; line<ywidth; line++, memory+=xwidth)
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
00001a  e00b              B        |L6.52|
                  |L6.28|
;;;539    		lineM1R1((uint32_t *)&CAM_PORT, memory, xoffset, xwidth); // wait, grab, wait
00001c  4633              MOV      r3,r6
00001e  4622              MOV      r2,r4
000020  4806              LDR      r0,|L6.60|
000022  9906              LDR      r1,[sp,#0x18]
000024  f7fffffe          BL       lineM1R1
000028  9800              LDR      r0,[sp,#0]            ;538
00002a  1c40              ADDS     r0,r0,#1              ;538
00002c  9000              STR      r0,[sp,#0]            ;538
00002e  9806              LDR      r0,[sp,#0x18]         ;538
000030  1980              ADDS     r0,r0,r6              ;538
000032  9006              STR      r0,[sp,#0x18]         ;538
                  |L6.52|
000034  9800              LDR      r0,[sp,#0]            ;538
000036  42b8              CMP      r0,r7                 ;538
000038  d3f0              BCC      |L6.28|
;;;540    }
00003a  bdf8              POP      {r3-r7,pc}
;;;541    
                          ENDP

                  |L6.60|
                          DCD      0x400f6104

                          AREA ||i.grabM1R2||, CODE, READONLY, ALIGN=2

                  grabM1R2 PROC
;;;541    
;;;542    void grabM1R2(uint32_t xoffset, uint32_t yoffset, uint32_t xwidth, uint32_t ywidth, uint8_t *memory)
000000  b5ff              PUSH     {r0-r7,lr}
;;;543    {
000002  b081              SUB      sp,sp,#4
000004  4614              MOV      r4,r2
000006  9f0a              LDR      r7,[sp,#0x28]
;;;544    	uint32_t line;
;;;545    	uint16_t *lineStore = (uint16_t *)(memory + xwidth*ywidth + 16);
000008  9804              LDR      r0,[sp,#0x10]
00000a  4360              MULS     r0,r4,r0
00000c  19c0              ADDS     r0,r0,r7
00000e  4606              MOV      r6,r0
000010  3610              ADDS     r6,r6,#0x10
;;;546    	lineStore = (uint16_t *)ALIGN(lineStore, 2);
000012  07f0              LSLS     r0,r6,#31
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L7.34|
00001a  0870              LSRS     r0,r6,#1
00001c  0040              LSLS     r0,r0,#1
00001e  1c80              ADDS     r0,r0,#2
000020  e000              B        |L7.36|
                  |L7.34|
000022  4630              MOV      r0,r6
                  |L7.36|
000024  4606              MOV      r6,r0
;;;547    
;;;548    	// clear line storage for 1 line
;;;549    	for (line=0; line<xwidth; line++)
000026  2500              MOVS     r5,#0
000028  e003              B        |L7.50|
                  |L7.42|
;;;550    		lineStore[line] = 0;
00002a  2000              MOVS     r0,#0
00002c  0069              LSLS     r1,r5,#1
00002e  5270              STRH     r0,[r6,r1]
000030  1c6d              ADDS     r5,r5,#1              ;549
                  |L7.50|
000032  42a5              CMP      r5,r4                 ;549
000034  d3f9              BCC      |L7.42|
;;;551    
;;;552    	skipLines(yoffset*2);
000036  9902              LDR      r1,[sp,#8]
000038  0048              LSLS     r0,r1,#1
00003a  f7fffffe          BL       skipLines
;;;553    	// grab 1 line to put us out of phase with the camera's internal vertical downsample (800 to 400 lines)
;;;554    	// ie, we are going to downsample again from 400 to 200.  Because the bayer lines alternate
;;;555    	// there tends to be little difference between line pairs bg and gr lines after downsampling.
;;;556    	// Same logic applies horizontally as well, but we always skip a pixel pair in the line routine.  
;;;557    	lineM1R2Merge((uint32_t *)&CAM_PORT, lineStore, memory, xoffset, xwidth); // wait, grab, wait
00003e  9400              STR      r4,[sp,#0]
000040  463a              MOV      r2,r7
000042  4631              MOV      r1,r6
000044  4815              LDR      r0,|L7.156|
000046  9b01              LDR      r3,[sp,#4]
000048  f7fffffe          BL       lineM1R2Merge
;;;558    	memory += xwidth;
00004c  193f              ADDS     r7,r7,r4
;;;559    	for (line=0; line<ywidth; line+=2, memory+=xwidth*2)
00004e  2500              MOVS     r5,#0
000050  e01e              B        |L7.144|
                  |L7.82|
;;;560    	{
;;;561    		// CAM_HSYNC is negated here
;;;562    		lineM1R2((uint32_t *)&CAM_PORT, lineStore, xoffset, xwidth); // wait, grab, wait
000052  4623              MOV      r3,r4
000054  4631              MOV      r1,r6
000056  4811              LDR      r0,|L7.156|
000058  9a01              LDR      r2,[sp,#4]
00005a  f7fffffe          BL       lineM1R2
;;;563    		lineM1R2((uint32_t *)&CAM_PORT, lineStore+xwidth, xoffset, xwidth); // wait, grab, wait
00005e  0060              LSLS     r0,r4,#1
000060  1981              ADDS     r1,r0,r6
000062  4623              MOV      r3,r4
000064  480d              LDR      r0,|L7.156|
000066  9a01              LDR      r2,[sp,#4]
000068  f7fffffe          BL       lineM1R2
;;;564    		lineM1R2Merge((uint32_t *)&CAM_PORT, lineStore, memory, xoffset, xwidth); // wait, grab, wait
00006c  9400              STR      r4,[sp,#0]
00006e  463a              MOV      r2,r7
000070  4631              MOV      r1,r6
000072  480a              LDR      r0,|L7.156|
000074  9b01              LDR      r3,[sp,#4]
000076  f7fffffe          BL       lineM1R2Merge
;;;565    		lineM1R2Merge((uint32_t *)&CAM_PORT, lineStore+xwidth, memory+xwidth, xoffset, xwidth); // wait, grab, wait
00007a  193a              ADDS     r2,r7,r4
00007c  0060              LSLS     r0,r4,#1
00007e  1981              ADDS     r1,r0,r6
000080  9400              STR      r4,[sp,#0]
000082  4806              LDR      r0,|L7.156|
000084  9b01              LDR      r3,[sp,#4]
000086  f7fffffe          BL       lineM1R2Merge
00008a  1cad              ADDS     r5,r5,#2              ;559
00008c  0060              LSLS     r0,r4,#1              ;559
00008e  183f              ADDS     r7,r7,r0              ;559
                  |L7.144|
000090  9804              LDR      r0,[sp,#0x10]         ;559
000092  4285              CMP      r5,r0                 ;559
000094  d3dd              BCC      |L7.82|
;;;566    	}					
;;;567    }
000096  b005              ADD      sp,sp,#0x14
000098  bdf0              POP      {r4-r7,pc}
;;;568    
                          ENDP

00009a  0000              DCW      0x0000
                  |L7.156|
                          DCD      0x400f6104

                          AREA ||i.skipLine||, CODE, READONLY, ALIGN=2

                  skipLine PROC
;;;498    
;;;499    void skipLine()
000000  bf00              NOP      
                  |L8.2|
;;;500    {
;;;501    	while(!CAM_HSYNC());
000002  480b              LDR      r0,|L8.48|
000004  2121              MOVS     r1,#0x21
000006  0209              LSLS     r1,r1,#8
000008  1840              ADDS     r0,r0,r1
00000a  6840              LDR      r0,[r0,#4]
00000c  2101              MOVS     r1,#1
00000e  02c9              LSLS     r1,r1,#11
000010  4008              ANDS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  d0f5              BEQ      |L8.2|
;;;502    	while(CAM_HSYNC());
000016  bf00              NOP      
                  |L8.24|
000018  4805              LDR      r0,|L8.48|
00001a  2121              MOVS     r1,#0x21
00001c  0209              LSLS     r1,r1,#8
00001e  1840              ADDS     r0,r0,r1
000020  6840              LDR      r0,[r0,#4]
000022  2101              MOVS     r1,#1
000024  02c9              LSLS     r1,r1,#11
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d1f5              BNE      |L8.24|
;;;503    }
00002c  4770              BX       lr
;;;504    
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0x400f4000

                          AREA ||i.skipLines||, CODE, READONLY, ALIGN=2

                  skipLines PROC
;;;504    
;;;505    void skipLines(uint32_t lines)
000000  b500              PUSH     {lr}
;;;506    {
000002  4603              MOV      r3,r0
;;;507    	uint32_t line;
;;;508    
;;;509    	// wait for remainder of frame to pass
;;;510    	while(!CAM_VSYNC()); 
000004  bf00              NOP      
                  |L9.6|
000006  480e              LDR      r0,|L9.64|
000008  2121              MOVS     r1,#0x21
00000a  0209              LSLS     r1,r1,#8
00000c  1840              ADDS     r0,r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  2101              MOVS     r1,#1
000012  0309              LSLS     r1,r1,#12
000014  4008              ANDS     r0,r0,r1
000016  2800              CMP      r0,#0
000018  d0f5              BEQ      |L9.6|
;;;511    	// vsync asserted
;;;512    	while(CAM_VSYNC());
00001a  bf00              NOP      
                  |L9.28|
00001c  4808              LDR      r0,|L9.64|
00001e  2121              MOVS     r1,#0x21
000020  0209              LSLS     r1,r1,#8
000022  1840              ADDS     r0,r0,r1
000024  6840              LDR      r0,[r0,#4]
000026  2101              MOVS     r1,#1
000028  0309              LSLS     r1,r1,#12
00002a  4008              ANDS     r0,r0,r1
00002c  2800              CMP      r0,#0
00002e  d1f5              BNE      |L9.28|
;;;513    	// skip lines
;;;514    	for (line=0; line<lines; line++)
000030  2200              MOVS     r2,#0
000032  e002              B        |L9.58|
                  |L9.52|
;;;515    		skipLine();
000034  f7fffffe          BL       skipLine
000038  1c52              ADDS     r2,r2,#1              ;514
                  |L9.58|
00003a  429a              CMP      r2,r3                 ;514
00003c  d3fa              BCC      |L9.52|
;;;516    }
00003e  bd00              POP      {pc}
;;;517    
                          ENDP

                  |L9.64|
                          DCD      0x400f4000

                          AREA ||i.vsync||, CODE, READONLY, ALIGN=2

                  vsync PROC
;;;22     
;;;23     void vsync()
000000  2000              MOVS     r0,#0
;;;24     {
;;;25     	int v = 0, h = 0;
000002  2100              MOVS     r1,#0
;;;26     
;;;27     	while(1)
000004  e030              B        |L10.104|
                  |L10.6|
;;;28     	{
;;;29     		h = 0;
000006  2100              MOVS     r1,#0
;;;30     		while(CAM_VSYNC()!=0);
000008  bf00              NOP      
                  |L10.10|
00000a  4a18              LDR      r2,|L10.108|
00000c  2321              MOVS     r3,#0x21
00000e  021b              LSLS     r3,r3,#8
000010  18d2              ADDS     r2,r2,r3
000012  6852              LDR      r2,[r2,#4]
000014  2301              MOVS     r3,#1
000016  031b              LSLS     r3,r3,#12
000018  401a              ANDS     r2,r2,r3
00001a  2a00              CMP      r2,#0
00001c  d1f5              BNE      |L10.10|
;;;31     		while(1) // vsync low
00001e  e021              B        |L10.100|
                  |L10.32|
;;;32     		{
;;;33     			while(CAM_HSYNC()==0)
000020  e00a              B        |L10.56|
                  |L10.34|
;;;34     			{
;;;35     				if (CAM_VSYNC()!=0)
000022  4a12              LDR      r2,|L10.108|
000024  2321              MOVS     r3,#0x21
000026  021b              LSLS     r3,r3,#8
000028  18d2              ADDS     r2,r2,r3
00002a  6852              LDR      r2,[r2,#4]
00002c  2301              MOVS     r3,#1
00002e  031b              LSLS     r3,r3,#12
000030  401a              ANDS     r2,r2,r3
000032  2a00              CMP      r2,#0
000034  d000              BEQ      |L10.56|
;;;36     					goto end;
000036  e016              B        |L10.102|
                  |L10.56|
000038  4a0c              LDR      r2,|L10.108|
00003a  2321              MOVS     r3,#0x21              ;33
00003c  021b              LSLS     r3,r3,#8              ;33
00003e  18d2              ADDS     r2,r2,r3              ;33
000040  6852              LDR      r2,[r2,#4]            ;33
000042  2301              MOVS     r3,#1                 ;33
000044  02db              LSLS     r3,r3,#11             ;33
000046  401a              ANDS     r2,r2,r3              ;33
000048  2a00              CMP      r2,#0                 ;33
00004a  d0ea              BEQ      |L10.34|
;;;37     			}
;;;38     			while(CAM_HSYNC()!=0); //grab data
00004c  bf00              NOP      
                  |L10.78|
00004e  4a07              LDR      r2,|L10.108|
000050  2321              MOVS     r3,#0x21
000052  021b              LSLS     r3,r3,#8
000054  18d2              ADDS     r2,r2,r3
000056  6852              LDR      r2,[r2,#4]
000058  2301              MOVS     r3,#1
00005a  02db              LSLS     r3,r3,#11
00005c  401a              ANDS     r2,r2,r3
00005e  2a00              CMP      r2,#0
000060  d1f5              BNE      |L10.78|
;;;39     			h++;
000062  1c49              ADDS     r1,r1,#1
                  |L10.100|
000064  e7dc              B        |L10.32|
                  |L10.102|
;;;40     		}
;;;41     end:
;;;42     		v++;
000066  1c40              ADDS     r0,r0,#1
                  |L10.104|
000068  e7cd              B        |L10.6|
;;;43     		//if (v%25==0)
;;;44     			//printf("%d %d\n", v, h);
;;;45     	}
;;;46     }
;;;47     
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
                          DCD      0x400f4000

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\frame_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_frame_m0_c_vsync____REV16|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___10_frame_m0_c_vsync____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_frame_m0_c_vsync____REVSH|
#line 144
|__asm___10_frame_m0_c_vsync____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |syncM0|
#line 48 "..\\libpixy\\frame_m0.c"
|syncM0| PROC
#line 49

 PUSH {r4}

start
 
 
 
 
 
 
 
 
 LDR r2, [r0]  
 NOP
 LDR r3, [r0]  
 BICS r2, r3
 LDR r3, [r0]  
 ANDS r3, r2
 LDR r2, [r0]  
 LDR r4, [r0]  
 BICS r4, r2
 LDR r2, [r0]  
 BICS r4, r2 
 LDR r2, [r0]  
 ANDS r4, r2 
 LDR r2, [r0]  
 
 BICS r4, r2
 ANDS r4, r3

 TST r4, r1
 BEQ start

 


 POP {r4}
 BX lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |syncM1|
#line 89
|syncM1| PROC
#line 90

 PUSH {r4}

startSyncM1
 LDR r2, [r0]  
 NOP
 NOP
 NOP
 NOP
 LDR r3, [r0]  
 BICS r2, r3
 NOP
 NOP
 NOP
 LDR r3, [r0]  
 ANDS r3, r2
 NOP
 NOP
 NOP
 LDR r2, [r0]  
 LDR r4, [r0]  
 BICS r4, r2
 NOP
 NOP
 NOP
 LDR r2, [r0]  
 BICS r4, r2 
 NOP
 NOP
 NOP
 LDR r2, [r0]  
 ANDS r4, r2 
 NOP
 NOP
 NOP
 LDR r2, [r0]  
 
 BICS r4, r2
 ANDS r4, r3

 TST r4, r1
 NOP  
 NOP
 NOP
 BEQ startSyncM1

 


 POP {r4}
 BX lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM0|
#line 143
|lineM0| PROC
#line 144

 PRESERVE8
 IMPORT callSyncM0

 PUSH {r4-r5, lr}

 
 ADDS r3, r1
 
 MOVS r4, #0x1
 LSLS r4, #11

 PUSH {r0-r3}  
 BL.W callSyncM0  
 POP {r0-r3}  
 
 

 
 NOP
 NOP

 
dest21 LDR r5, [r0]  
 TST r5, r4  
 BEQ dest21  

 
dest22 SUBS r2, #0x1  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 BGE dest22  

 

 LDRB r2, [r0]  
 STRB r2, [r1, #0x00]
 NOP
 NOP

 LDRB r2, [r0]  
 STRB r2, [r1, #0x01]
 NOP
 NOP

loop11
 LDRB r2, [r0]  
 STRB r2, [r1, #0x2]

 ADDS r1, #0x03
 NOP

 LDRB r2, [r0]  
 STRB r2, [r1, #0x0]

 CMP r1, r3

 LDRB r2, [r0]  
 STRB r2, [r1, #0x1] 

 BLT loop11

 
dest13 LDR r5, [r0]  
 TST r5, r4  
 BNE dest13  

 POP {r4-r5, pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM1R1|
#line 220
|lineM1R1| PROC
#line 221

 PRESERVE8
 IMPORT callSyncM1

 PUSH {r4-r5, lr}

 
 ADDS r3, r1
 
 MOVS r4, #0x1
 LSLS r4, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  
 
 

 
dest1 LDR r5, [r0]  
 TST r5, r4  
 BEQ dest1  

 
dest2 SUBS r2, #0x1  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 BGE dest2  

 
 NOP
 NOP

loop1
 LDRB r2, [r0] 
 STRB r2, [r1]
 NOP
 NOP
 NOP
 ADDS r1, #0x01
 CMP r1, r3
 BLT loop1

 
dest3 LDR r5, [r0]  
 TST r5, r4  
 BNE dest3  

 POP {r4-r5, pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM1R2|
#line 290
|lineM1R2| PROC
#line 291

 PRESERVE8
 IMPORT callSyncM1

 PUSH {r4-r6, lr}

 
 LSLS r3, #1
 ADDS r3, r1
 
 MOVS r4, #0x1
 LSLS r4, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  
 
 

dest7 LDR r5, [r0]  
 TST r5, r4  
 BEQ dest7  

 
dest8 SUBS r2, #0x1  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 BGE dest8  

 
 NOP
 NOP

loop3
 LDRB r2, [r0]
 NOP
 NOP 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r5, [r0] 
 NOP
 NOP 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r6, [r0] 
 ADDS r6, r2
 STRH r6, [r1, #0x00]
 NOP
 NOP 
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r6, [r0] 
 ADDS r6, r5
 STRH r6, [r1, #0x02]
 NOP
 NOP 
 ADDS r1, #0x04
 CMP r1, r3
 BLT loop3

 
dest9 LDR r5, [r0]  
 TST r5, r4  
 BNE dest9  

 POP {r4-r6, pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM1R2Merge|
#line 395
|lineM1R2Merge| PROC
#line 396

 PRESERVE8
 IMPORT callSyncM1

 PUSH {r4-r7, lr}
 LDR r4, [sp, #0x14]

 
 ADDS r4, r2
 
 MOVS r5, #0x1
 LSLS r5, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  
 
 

 
dest4 LDR r6, [r0]  
 TST r6, r5  
 BEQ dest4  

 
dest5 SUBS r3, #0x1  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 NOP  
 BGE dest5  

 
 NOP
 NOP

loop4
 LDRB r3, [r0]  
 LDRH r6, [r1, #0x00]
 ADDS r6, r3
 NOP
 NOP 
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r3, [r0]  
 LDRH r7, [r1, #0x02]
 ADDS r7, r3
 NOP
 NOP 
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r3, [r0]  
 ADDS r6, r3
 LSRS r6, #2
 STRB r6, [r2, #0x00]
 NOP 
 NOP
 NOP 
 NOP 
 NOP
 NOP 

 LDRB r3, [r0]  
 ADDS r7, r3
 LSRS r7, #2
 STRB r7, [r2, #0x01]
 ADDS r1, #0x04
 ADDS r2, #0x02
 CMP r2, r4
 BLT loop4

 
dest6 LDR r6, [r0]  
 TST r6, r5  
 BNE dest6  

 POP {r4-r7, pc}
	ENDP

;*** End   embedded assembler ***
