; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\conncomp.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\conncomp.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\conncomp.crf conncomp.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _Z8cc_servoRKj PROC ; cc_servo(const unsigned&)
;;;37     
;;;38     int32_t cc_servo(const uint32_t &start)
000000  4601              MOV      r1,r0
;;;39     {
;;;40     	g_loop = start;
000002  4afb              LDR      r2,|L1.1008|
000004  6808              LDR      r0,[r1,#0]
000006  6010              STR      r0,[r2,#0]  ; g_loop
;;;41     	return 0;
000008  2000              MOVS     r0,#0
;;;42     }
00000a  4770              BX       lr
;;;43     
                          ENDP

                  _Z10cc_loadLutv PROC ; cc_loadLut()
;;;111    
;;;112    int cc_loadLut(void)
00000c  b530              PUSH     {r4,r5,lr}
;;;113    {
00000e  b08b              SUB      sp,sp,#0x2c
;;;114    	int i, res;
;;;115    	uint32_t len;
;;;116    	char id[32];
;;;117    	ColorSignature *psig;
;;;118    
;;;119    	for (i=1; i<=CL_NUM_SIGNATURES; i++)
000010  2401              MOVS     r4,#1
000012  e017              B        |L1.68|
                  |L1.20|
;;;120    	{
;;;121    		sprintf(id, "signature%d", i);
000014  4622              MOV      r2,r4
000016  a1f7              ADR      r1,|L1.1012|
000018  a802              ADD      r0,sp,#8
00001a  f7fffffe          BL       __2sprintf
;;;122    		// get signature and add to color lut
;;;123    		res = prm_get(id, &len, &psig, END);
00001e  2300              MOVS     r3,#0
000020  aa01              ADD      r2,sp,#4
000022  a90a              ADD      r1,sp,#0x28
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
00002a  4605              MOV      r5,r0
;;;124    		if (res<0)
00002c  2d00              CMP      r5,#0
00002e  da02              BGE      |L1.54|
;;;125    			return res;
000030  4628              MOV      r0,r5
                  |L1.50|
;;;126    		g_blobs->m_clut.setSignature(i, *psig);
;;;127    	}
;;;128    
;;;129    	g_blobs->m_clut.generateLUT();
;;;130    	// go ahead and flush since we've changed things
;;;131    	g_qqueue->flush();
;;;132    
;;;133    	return 0;
;;;134    }
000032  b00b              ADD      sp,sp,#0x2c
000034  bd30              POP      {r4,r5,pc}
                  |L1.54|
000036  b2e1              UXTB     r1,r4                 ;126
000038  48f1              LDR      r0,|L1.1024|
00003a  9a01              LDR      r2,[sp,#4]            ;126
00003c  6800              LDR      r0,[r0,#0]            ;126  ; g_blobs
00003e  f7fffffe          BL       _ZN8ColorLUT12setSignatureEhRK14ColorSignature ; ColorLUT::setSignature(unsigned char, const ColorSignature&)
000042  1c64              ADDS     r4,r4,#1              ;119
                  |L1.68|
000044  2c07              CMP      r4,#7                 ;119
000046  dde5              BLE      |L1.20|
000048  48ed              LDR      r0,|L1.1024|
00004a  6800              LDR      r0,[r0,#0]            ;129  ; g_blobs
00004c  f7fffffe          BL       _ZN8ColorLUT11generateLUTEv ; ColorLUT::generateLUT()
000050  48ec              LDR      r0,|L1.1028|
000052  6800              LDR      r0,[r0,#0]            ;131  ; g_qqueue
000054  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
000058  2000              MOVS     r0,#0                 ;133
00005a  e7ea              B        |L1.50|
;;;135    
                          ENDP

                  _Z17cc_shadowCallbackPKcRKf PROC ; cc_shadowCallback(const char*, const float&)
;;;136    void cc_shadowCallback(const char *id, const float &val)
00005c  b570              PUSH     {r4-r6,lr}
;;;137    {
00005e  4604              MOV      r4,r0
000060  460d              MOV      r5,r1
;;;138    	if (id[0]=='S') // set Signature range
000062  7820              LDRB     r0,[r4,#0]
000064  2853              CMP      r0,#0x53
000066  d109              BNE      |L1.124|
;;;139    	{
;;;140    		uint8_t signum = id[10]-'0'; // extract signature number
000068  7aa0              LDRB     r0,[r4,#0xa]
00006a  3830              SUBS     r0,r0,#0x30
00006c  b2c6              UXTB     r6,r0
;;;141    		g_blobs->m_clut.setSigRange(signum, val);
00006e  4631              MOV      r1,r6
000070  48e3              LDR      r0,|L1.1024|
000072  682a              LDR      r2,[r5,#0]
000074  6800              LDR      r0,[r0,#0]  ; g_blobs
000076  f7fffffe          BL       _ZN8ColorLUT11setSigRangeEhf ; ColorLUT::setSigRange(unsigned char, float)
;;;142    	}
00007a  e007              B        |L1.140|
                  |L1.124|
;;;143    	else if (id[0]=='M') // set minimum brightness 
00007c  7820              LDRB     r0,[r4,#0]
00007e  284d              CMP      r0,#0x4d
000080  d104              BNE      |L1.140|
;;;144    		g_blobs->m_clut.setMinBrightness(val);
000082  48df              LDR      r0,|L1.1024|
000084  6829              LDR      r1,[r5,#0]
000086  6800              LDR      r0,[r0,#0]  ; g_blobs
000088  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
                  |L1.140|
;;;145    
;;;146      	if (exec_pause()) // pause M0, but only generate LUT if we're running 
00008c  f7fffffe          BL       _Z10exec_pausev ; exec_pause()
000090  b128              CBZ      r0,|L1.158|
;;;147    	{
;;;148    		// generate lut while M0 is paused
;;;149    		g_blobs->m_clut.generateLUT();			
000092  48db              LDR      r0,|L1.1024|
000094  6800              LDR      r0,[r0,#0]  ; g_blobs
000096  f7fffffe          BL       _ZN8ColorLUT11generateLUTEv ; ColorLUT::generateLUT()
;;;150    		exec_resume();
00009a  f7fffffe          BL       _Z11exec_resumev ; exec_resume()
                  |L1.158|
;;;151    	}
;;;152    }
00009e  bd70              POP      {r4-r6,pc}
;;;153    
                          ENDP

                  _Z22cc_teachThreshCallbackPKcRKj PROC ; cc_teachThreshCallback(const char*, const unsigned&)
;;;154    void cc_teachThreshCallback(const char *id, const uint32_t &val)
0000a0  b538              PUSH     {r3-r5,lr}
;;;155    {
0000a2  4604              MOV      r4,r0
0000a4  460d              MOV      r5,r1
;;;156    	uint32_t growDist;
;;;157    
;;;158    	prm_get("Signature teach threshold", &growDist, END);
0000a6  2200              MOVS     r2,#0
0000a8  4669              MOV      r1,sp
0000aa  a0d7              ADR      r0,|L1.1032|
0000ac  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;159    	g_blobs->m_clut.setGrowDist(growDist);
0000b0  48d3              LDR      r0,|L1.1024|
0000b2  9900              LDR      r1,[sp,#0]
0000b4  6800              LDR      r0,[r0,#0]  ; g_blobs
0000b6  f7fffffe          BL       _ZN8ColorLUT11setGrowDistEj ; ColorLUT::setGrowDist(unsigned)
;;;160    }
0000ba  bd38              POP      {r3-r5,pc}
;;;161    
                          ENDP

                  _Z24cc_ledBrightnessCallbackPKcRKt PROC ; cc_ledBrightnessCallback(const char*, const unsigned short&)
;;;162    void cc_ledBrightnessCallback(const char *id, const uint16_t &val)
0000bc  b538              PUSH     {r3-r5,lr}
;;;163    {
0000be  4604              MOV      r4,r0
0000c0  460d              MOV      r5,r1
;;;164    	prm_get("LED brightness", &g_ledBrightness, END);
0000c2  2200              MOVS     r2,#0
0000c4  49d7              LDR      r1,|L1.1060|
0000c6  a0d8              ADR      r0,|L1.1064|
0000c8  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;165    	led_setMaxCurrent(g_ledBrightness);
0000cc  48d5              LDR      r0,|L1.1060|
0000ce  8800              LDRH     r0,[r0,#0]  ; g_ledBrightness
0000d0  9000              STR      r0,[sp,#0]
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;166    }
0000d8  bd38              POP      {r3-r5,pc}
;;;167    
                          ENDP

                  _Z13cc_loadParamsv PROC ; cc_loadParams()
;;;168    void cc_loadParams(void)
0000da  b510              PUSH     {r4,lr}
;;;169    {
0000dc  b0b6              SUB      sp,sp,#0xd8
;;;170    	int i;
;;;171    	ColorSignature signature;
0000de  a82d              ADD      r0,sp,#0xb4
0000e0  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;172    	char id[32], desc[100];
;;;173    	float range;
;;;174    
;;;175    	// set up signatures, and ranges, load later
;;;176    	for (i=1; i<=CL_NUM_SIGNATURES; i++)
0000e4  2401              MOVS     r4,#1
0000e6  e03c              B        |L1.354|
                  |L1.232|
;;;177    	{
;;;178    		sprintf(id, "signature%d", i);
0000e8  4622              MOV      r2,r4
0000ea  a1c2              ADR      r1,|L1.1012|
0000ec  a825              ADD      r0,sp,#0x94
0000ee  f7fffffe          BL       __2sprintf
;;;179    		sprintf(desc, "Color signature %d", i);
0000f2  4622              MOV      r2,r4
0000f4  a1d0              ADR      r1,|L1.1080|
0000f6  a80c              ADD      r0,sp,#0x30
0000f8  f7fffffe          BL       __2sprintf
;;;180    		// add if it doesn't exist yet
;;;181    		prm_add(id, PRM_FLAG_INTERNAL, desc, INTS8(sizeof(ColorSignature), &signature), END);
0000fc  2000              MOVS     r0,#0
0000fe  a92d              ADD      r1,sp,#0xb4
000100  2220              MOVS     r2,#0x20
000102  2381              MOVS     r3,#0x81
000104  e9cd2100          STRD     r2,r1,[sp,#0]
000108  9002              STR      r0,[sp,#8]
00010a  aa0c              ADD      r2,sp,#0x30
00010c  2101              MOVS     r1,#1
00010e  a825              ADD      r0,sp,#0x94
000110  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;182    
;;;183    		sprintf(id, "Signature %d range", i);
000114  4622              MOV      r2,r4
000116  a1cd              ADR      r1,|L1.1100|
000118  a825              ADD      r0,sp,#0x94
00011a  f7fffffe          BL       __2sprintf
;;;184    		sprintf(desc, "@c Signature_Tuning @m 0.0 @M 11.0 Sets filtering range of signature %d. (default 2.5)", i);
00011e  4622              MOV      r2,r4
000120  49cf              LDR      r1,|L1.1120|
000122  a80c              ADD      r0,sp,#0x30
000124  f7fffffe          BL       __2sprintf
;;;185    		prm_add(id, PRM_FLAG_SLIDER, desc, FLT32(2.5f), END);
000128  2000              MOVS     r0,#0
00012a  4601              MOV      r1,r0
00012c  9002              STR      r0,[sp,#8]
00012e  48cd              LDR      r0,|L1.1124|
000130  2314              MOVS     r3,#0x14
000132  aa0c              ADD      r2,sp,#0x30
000134  e9cd1000          STRD     r1,r0,[sp,#0]
000138  1581              ASRS     r1,r0,#22
00013a  a825              ADD      r0,sp,#0x94
00013c  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;186    
;;;187    		prm_get(id, &range, END);
000140  2200              MOVS     r2,#0
000142  a90b              ADD      r1,sp,#0x2c
000144  a825              ADD      r0,sp,#0x94
000146  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;188    		g_blobs->m_clut.setSigRange(i, range);
00014a  b2e1              UXTB     r1,r4
00014c  48ac              LDR      r0,|L1.1024|
00014e  9a0b              LDR      r2,[sp,#0x2c]
000150  6800              LDR      r0,[r0,#0]  ; g_blobs
000152  f7fffffe          BL       _ZN8ColorLUT11setSigRangeEhf ; ColorLUT::setSigRange(unsigned char, float)
;;;189    		prm_setShadowCallback(id, (ShadowCallback)cc_shadowCallback);
000156  f2af01fb          ADR      r1,_Z17cc_shadowCallbackPKcRKf + 1 ; cc_shadowCallback(const char*, const float&)
00015a  a825              ADD      r0,sp,#0x94
00015c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
000160  1c64              ADDS     r4,r4,#1              ;176
                  |L1.354|
000162  2c07              CMP      r4,#7                 ;176
000164  ddc0              BLE      |L1.232|
;;;190    	}
;;;191    
;;;192    	// others -----
;;;193    
;;;194    	// setup
;;;195    	prm_add("Min brightness", PRM_FLAG_SLIDER, 
000166  2000              MOVS     r0,#0
000168  f04f4120          MOV      r1,#0xa0000000
00016c  9002              STR      r0,[sp,#8]
00016e  48be              LDR      r0,|L1.1128|
000170  2314              MOVS     r3,#0x14
000172  4abe              LDR      r2,|L1.1132|
000174  e9cd1000          STRD     r1,r0,[sp,#0]
000178  f44f7180          MOV      r1,#0x100
00017c  a0bc              ADR      r0,|L1.1136|
00017e  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;196    		"@c Signature_Tuning @m 0.0 @M 0.5 Sets the minimum brightness of all signatures. (default 0.1)", FLT32(0.1f), END);
;;;197    	prm_setShadowCallback("Min brightness", (ShadowCallback)cc_shadowCallback);
000182  f2af1127          ADR      r1,_Z17cc_shadowCallbackPKcRKf + 1 ; cc_shadowCallback(const char*, const float&)
000186  a0ba              ADR      r0,|L1.1136|
000188  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;198    	prm_add("Color code multiplier", 0, 
00018c  2000              MOVS     r0,#0
00018e  f04f4140          MOV      r1,#0xc0000000
000192  9002              STR      r0,[sp,#8]
000194  48ba              LDR      r0,|L1.1152|
000196  2314              MOVS     r3,#0x14
000198  4aba              LDR      r2,|L1.1156|
00019a  e9cd1000          STRD     r1,r0,[sp,#0]
00019e  2100              MOVS     r1,#0
0001a0  a0b9              ADR      r0,|L1.1160|
0001a2  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;199    		"@c Expert Sets the color multiplier to be multiplied to each signature range. (default 1.8)", FLT32(1.8f), END);
;;;200    	prm_add("Color code mode", 0,
0001a6  2000              MOVS     r0,#0
0001a8  2101              MOVS     r1,#1
0001aa  460b              MOV      r3,r1
0001ac  4abc              LDR      r2,|L1.1184|
0001ae  e9cd1000          STRD     r1,r0,[sp,#0]
0001b2  4601              MOV      r1,r0
0001b4  a0bb              ADR      r0,|L1.1188|
0001b6  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;201    		"@c Expert Sets the color code mode, 0=disabled, 1=enabled, 2=color codes only, 3=mixed (default 1)", INT8(1), END);
;;;202    	prm_add("Signature teach threshold", PRM_FLAG_SLIDER, 
0001ba  2000              MOVS     r0,#0
0001bc  f44f61fa          MOV      r1,#0x7d0
0001c0  2304              MOVS     r3,#4
0001c2  4abc              LDR      r2,|L1.1204|
0001c4  e9cd1000          STRD     r1,r0,[sp,#0]
0001c8  0199              LSLS     r1,r3,#6
0001ca  a08f              ADR      r0,|L1.1032|
0001cc  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;203    		"@c Expert @m 0 @M 10000 Determines how inclusive the growing algorithm is when teaching signatures with button-push method (default 2000)", INT32(2000), END);
;;;204    	prm_setShadowCallback("Signature teach threshold", (ShadowCallback)cc_teachThreshCallback);
0001d0  f2af1133          ADR      r1,_Z22cc_teachThreshCallbackPKcRKj + 1 ; cc_teachThreshCallback(const char*, const unsigned&)
0001d4  a08c              ADR      r0,|L1.1032|
0001d6  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;205    	prm_add("LED brightness", PRM_FLAG_SLIDER, 
0001da  2000              MOVS     r0,#0
0001dc  f24021ee          MOV      r1,#0x2ee
0001e0  2302              MOVS     r3,#2
0001e2  4ab5              LDR      r2,|L1.1208|
0001e4  e9cd1000          STRD     r1,r0,[sp,#0]
0001e8  01d9              LSLS     r1,r3,#7
0001ea  a08f              ADR      r0,|L1.1064|
0001ec  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;206    		"@c Expert @m 0 @M 20000 Sets the LED brightness -- bear in mind that if the LED is too bright, it can affect teach mode by illuminating the object! (default " STRINGIFY(LED_DEFAULT_MAX_CURRENT) ")", INT16(LED_DEFAULT_MAX_CURRENT), END);
;;;207    	prm_setShadowCallback("LED brightness", (ShadowCallback)cc_ledBrightnessCallback);
0001f0  f2af1137          ADR      r1,_Z24cc_ledBrightnessCallbackPKcRKt + 1 ; cc_ledBrightnessCallback(const char*, const unsigned short&)
0001f4  a08c              ADR      r0,|L1.1064|
0001f6  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;208    
;;;209    	prm_add("Max blocks", 0, 
0001fa  2000              MOVS     r0,#0
0001fc  f44f717a          MOV      r1,#0x3e8
000200  2302              MOVS     r3,#2
000202  4aae              LDR      r2,|L1.1212|
000204  e9cd1000          STRD     r1,r0,[sp,#0]
000208  4601              MOV      r1,r0
00020a  a0ad              ADR      r0,|L1.1216|
00020c  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;210    		"@c Blocks Sets the maximum total blocks sent per frame. (default 1000)", UINT16(1000), END);
;;;211    	prm_add("Max blocks per signature", 0, 
000210  2000              MOVS     r0,#0
000212  f44f717a          MOV      r1,#0x3e8
000216  2302              MOVS     r3,#2
000218  4aac              LDR      r2,|L1.1228|
00021a  e9cd1000          STRD     r1,r0,[sp,#0]
00021e  4601              MOV      r1,r0
000220  a0ab              ADR      r0,|L1.1232|
000222  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;212    		"@c Blocks Sets the maximum blocks for each color signature sent for each frame. (default 1000)", UINT16(1000), END);
;;;213    	prm_add("Min block area", 0, 
000226  2000              MOVS     r0,#0
000228  2114              MOVS     r1,#0x14
00022a  2304              MOVS     r3,#4
00022c  4aaf              LDR      r2,|L1.1260|
00022e  e9cd1000          STRD     r1,r0,[sp,#0]
000232  4601              MOV      r1,r0
000234  a0ae              ADR      r0,|L1.1264|
000236  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;214    		"@c Blocks Sets the minimum required area in pixels for a block.  Blocks with less area won't be sent. (default 20)", UINT32(20), END);
;;;215    
;;;216    	// load
;;;217    	uint8_t ccMode;
;;;218    	uint16_t maxBlobs, maxBlobsPerModel;
;;;219    	uint32_t minArea, growDist;
;;;220    	float miny, ccGain;
;;;221    
;;;222    	prm_get("Max blocks", &maxBlobs, END);
00023a  2200              MOVS     r2,#0
00023c  a909              ADD      r1,sp,#0x24
00023e  a0a0              ADR      r0,|L1.1216|
000240  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;223    	prm_get("Max blocks per signature", &maxBlobsPerModel, END);
000244  2200              MOVS     r2,#0
000246  a908              ADD      r1,sp,#0x20
000248  a0a1              ADR      r0,|L1.1232|
00024a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;224    	prm_get("Min block area", &minArea, END);
00024e  2200              MOVS     r2,#0
000250  a907              ADD      r1,sp,#0x1c
000252  a0a7              ADR      r0,|L1.1264|
000254  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;225    	prm_get("Color code mode", &ccMode, END);
000258  2200              MOVS     r2,#0
00025a  a90a              ADD      r1,sp,#0x28
00025c  a091              ADR      r0,|L1.1188|
00025e  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;226    	prm_get("Min brightness", &miny, END);
000262  2200              MOVS     r2,#0
000264  a905              ADD      r1,sp,#0x14
000266  a082              ADR      r0,|L1.1136|
000268  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;227    	prm_get("Color code multiplier", &ccGain, END);
00026c  2200              MOVS     r2,#0
00026e  a904              ADD      r1,sp,#0x10
000270  a085              ADR      r0,|L1.1160|
000272  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;228    	prm_get("Signature teach threshold", &growDist, END);
000276  2200              MOVS     r2,#0
000278  a906              ADD      r1,sp,#0x18
00027a  a063              ADR      r0,|L1.1032|
00027c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;229    	prm_get("LED brightness", &g_ledBrightness, END);
000280  2200              MOVS     r2,#0
000282  4968              LDR      r1,|L1.1060|
000284  a068              ADR      r0,|L1.1064|
000286  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;230    	g_blobs->setParams(maxBlobs, maxBlobsPerModel, minArea, (ColorCodeMode)ccMode);
00028a  f89d0028          LDRB     r0,[sp,#0x28]
00028e  9000              STR      r0,[sp,#0]
000290  f8bd2020          LDRH     r2,[sp,#0x20]
000294  f8bd1024          LDRH     r1,[sp,#0x24]
000298  4859              LDR      r0,|L1.1024|
00029a  9b07              LDR      r3,[sp,#0x1c]
00029c  6800              LDR      r0,[r0,#0]  ; g_blobs
00029e  f7fffffe          BL       _ZN5Blobs9setParamsEttj13ColorCodeMode ; Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
;;;231    	g_blobs->m_clut.setMinBrightness(miny);
0002a2  4857              LDR      r0,|L1.1024|
0002a4  9905              LDR      r1,[sp,#0x14]
0002a6  6800              LDR      r0,[r0,#0]  ; g_blobs
0002a8  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
;;;232    	g_blobs->m_clut.setCCGain(ccGain);
0002ac  4854              LDR      r0,|L1.1024|
0002ae  9904              LDR      r1,[sp,#0x10]
0002b0  6800              LDR      r0,[r0,#0]  ; g_blobs
0002b2  f7fffffe          BL       _ZN8ColorLUT9setCCGainEf ; ColorLUT::setCCGain(float)
;;;233    	g_blobs->m_clut.setGrowDist(growDist);
0002b6  4852              LDR      r0,|L1.1024|
0002b8  9906              LDR      r1,[sp,#0x18]
0002ba  6800              LDR      r0,[r0,#0]  ; g_blobs
0002bc  f7fffffe          BL       _ZN8ColorLUT11setGrowDistEj ; ColorLUT::setGrowDist(unsigned)
;;;234    	led_setMaxCurrent(g_ledBrightness);
0002c0  4858              LDR      r0,|L1.1060|
0002c2  8800              LDRH     r0,[r0,#0]  ; g_ledBrightness
0002c4  9035              STR      r0,[sp,#0xd4]
0002c6  a835              ADD      r0,sp,#0xd4
0002c8  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;235    	
;;;236    	cc_loadLut();
0002cc  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
;;;237    }
0002d0  b036              ADD      sp,sp,#0xd8
0002d2  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  _Z7cc_initP5Chirp PROC ; cc_init(Chirp*)
;;;239    int cc_init(Chirp *chirp)
0002d4  b570              PUSH     {r4-r6,lr}
;;;240    {
0002d6  4605              MOV      r5,r0
;;;241    	g_qqueue = new Qqueue;
0002d8  2004              MOVS     r0,#4
0002da  f7fffffe          BL       _Znwj ; operator new(unsigned)
0002de  0006              MOVS     r6,r0
0002e0  d004              BEQ      |L1.748|
0002e2  4630              MOV      r0,r6
0002e4  f7fffffe          BL       _ZN6QqueueC1Ev ; Qqueue::Qqueue()
0002e8  4606              MOV      r6,r0
0002ea  e000              B        |L1.750|
                  |L1.748|
0002ec  2000              MOVS     r0,#0
                  |L1.750|
0002ee  4945              LDR      r1,|L1.1028|
0002f0  6008              STR      r0,[r1,#0]  ; g_qqueue
;;;242    	g_blobs = new Blobs(g_qqueue, LUT_MEMORY);
0002f2  f44f7024          MOV      r0,#0x290
0002f6  f7fffffe          BL       _Znwj ; operator new(unsigned)
0002fa  0004              MOVS     r4,r0
0002fc  d007              BEQ      |L1.782|
0002fe  4a80              LDR      r2,|L1.1280|
000300  4840              LDR      r0,|L1.1028|
000302  6801              LDR      r1,[r0,#0]  ; g_qqueue
000304  4620              MOV      r0,r4
000306  f7fffffe          BL       _ZN5BlobsC1EP6QqueuePh ; Blobs::Blobs(Qqueue*, unsigned char*)
00030a  4604              MOV      r4,r0
00030c  e000              B        |L1.784|
                  |L1.782|
00030e  2000              MOVS     r0,#0
                  |L1.784|
000310  493b              LDR      r1,|L1.1024|
000312  6008              STR      r0,[r1,#0]  ; g_blobs
;;;243    
;;;244    	chirp->registerModule(g_module);	
000314  497b              LDR      r1,|L1.1284|
000316  4628              MOV      r0,r5
000318  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;245    
;;;246    	g_getRLSFrameM0 = g_chirpM0->getProc("getRLSFrame", NULL);
00031c  2200              MOVS     r2,#0
00031e  a17a              ADR      r1,|L1.1288|
000320  487c              LDR      r0,|L1.1300|
000322  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000324  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000328  497b              LDR      r1,|L1.1304|
00032a  8008              STRH     r0,[r1,#0]
;;;247    
;;;248    	if (g_getRLSFrameM0<0)
00032c  4608              MOV      r0,r1
00032e  f9b00000          LDRSH    r0,[r0,#0]  ; g_getRLSFrameM0
000332  2800              CMP      r0,#0
000334  da02              BGE      |L1.828|
;;;249    		return -1;
000336  f04f30ff          MOV      r0,#0xffffffff
                  |L1.826|
;;;250    
;;;251    	cc_loadParams(); // setup default vals and load parameters
;;;252    
;;;253    	return 0;
;;;254    }
00033a  bd70              POP      {r4-r6,pc}
                  |L1.828|
00033c  f7fffffe          BL       _Z13cc_loadParamsv ; cc_loadParams()
000340  2000              MOVS     r0,#0                 ;253
000342  e7fa              B        |L1.826|
;;;255    
                          ENDP

                  _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_P5Chirp PROC ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;256    // this routine assumes it can grab valid pixels in video memory described by the box
;;;257    int32_t cc_setSigRegion(const uint32_t &type, const uint8_t &signum, const uint16_t &xoffset, const uint16_t &yoffset, const uint16_t &width, const uint16_t &height, Chirp *chirp)
000344  e92d4ff0          PUSH     {r4-r11,lr}
;;;258    {
000348  b095              SUB      sp,sp,#0x54
00034a  4606              MOV      r6,r0
00034c  460c              MOV      r4,r1
00034e  4617              MOV      r7,r2
000350  4698              MOV      r8,r3
000352  e9ddab1f          LDRD     r10,r11,[sp,#0x7c]
000356  f8dd9078          LDR      r9,[sp,#0x78]
;;;259    	char id[32];
;;;260    	ColorSignature *sig;
;;;261    	RectA region(xoffset, yoffset, width, height);
00035a  a80b              ADD      r0,sp,#0x2c
00035c  8839              LDRH     r1,[r7,#0]
00035e  f8b82000          LDRH     r2,[r8,#0]
000362  f8b93000          LDRH     r3,[r9,#0]
000366  f8bac000          LDRH     r12,[r10,#0]
00036a  8001              STRH     r1,[r0,#0]
00036c  8042              STRH     r2,[r0,#2]
00036e  8083              STRH     r3,[r0,#4]
000370  f8a0c006          STRH     r12,[r0,#6]
000374  bf00              NOP      
;;;262    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000376  7820              LDRB     r0,[r4,#0]
000378  2801              CMP      r0,#1
00037a  db02              BLT      |L1.898|
00037c  7820              LDRB     r0,[r4,#0]
00037e  2807              CMP      r0,#7
000380  dd04              BLE      |L1.908|
                  |L1.898|
;;;263    		return -1;
000382  f04f30ff          MOV      r0,#0xffffffff
                  |L1.902|
;;;264    
;;;265    	if (g_rawFrame.m_pixels==NULL)
;;;266    	{
;;;267    		cprintf("No raw frame in memory!\n");
;;;268    		return -2;
;;;269    	}
;;;270    
;;;271    	// create lut
;;;272    	g_blobs->m_clut.generateSignature(g_rawFrame, region, signum);
;;;273    	sig = g_blobs->m_clut.getSignature(signum);
;;;274    	sig->m_type = type;
;;;275    
;;;276    	// find average RGB value
;;;277    	IterPixel ip(g_rawFrame, region);
;;;278    	sig->m_rgb = ip.averageRgb();
;;;279    
;;;280    	// save to flash
;;;281    	sprintf(id, "signature%d", signum);
;;;282    	prm_set(id, INTS8(sizeof(ColorSignature), sig), END);
;;;283    	cc_loadLut();
;;;284    
;;;285    	cprintf("Signature set!\n");
;;;286    
;;;287        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;288    	return 0;
;;;289    }
000386  b015              ADD      sp,sp,#0x54
000388  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.908|
00038c  4863              LDR      r0,|L1.1308|
00038e  6800              LDR      r0,[r0,#0]            ;265  ; g_rawFrame
000390  b928              CBNZ     r0,|L1.926|
000392  a063              ADR      r0,|L1.1312|
000394  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
000398  f06f0001          MVN      r0,#1                 ;268
00039c  e7f3              B        |L1.902|
                  |L1.926|
00039e  7823              LDRB     r3,[r4,#0]            ;272
0003a0  aa0b              ADD      r2,sp,#0x2c           ;272
0003a2  495e              LDR      r1,|L1.1308|
0003a4  4816              LDR      r0,|L1.1024|
0003a6  6800              LDR      r0,[r0,#0]            ;272  ; g_blobs
0003a8  f7fffffe          BL       _ZN8ColorLUT17generateSignatureERK6Frame8RK5RectAh ; ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
0003ac  7821              LDRB     r1,[r4,#0]            ;273
0003ae  4814              LDR      r0,|L1.1024|
0003b0  6800              LDR      r0,[r0,#0]            ;273  ; g_blobs
0003b2  f7fffffe          BL       _ZN8ColorLUT12getSignatureEh ; ColorLUT::getSignature(unsigned char)
0003b6  4605              MOV      r5,r0                 ;273
0003b8  6830              LDR      r0,[r6,#0]            ;274
0003ba  61e8              STR      r0,[r5,#0x1c]         ;274
0003bc  aa0b              ADD      r2,sp,#0x2c           ;277
0003be  4957              LDR      r1,|L1.1308|
0003c0  a802              ADD      r0,sp,#8              ;277
0003c2  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
0003c6  2100              MOVS     r1,#0                 ;278
0003c8  a802              ADD      r0,sp,#8              ;278
0003ca  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
0003ce  61a8              STR      r0,[r5,#0x18]         ;278
0003d0  7822              LDRB     r2,[r4,#0]            ;281
0003d2  a108              ADR      r1,|L1.1012|
0003d4  a80d              ADD      r0,sp,#0x34           ;281
0003d6  f7fffffe          BL       __2sprintf
0003da  2000              MOVS     r0,#0                 ;282
0003dc  462b              MOV      r3,r5                 ;282
0003de  2220              MOVS     r2,#0x20              ;282
0003e0  2181              MOVS     r1,#0x81              ;282
0003e2  9000              STR      r0,[sp,#0]            ;282
0003e4  a80d              ADD      r0,sp,#0x34           ;282
0003e6  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0003ea  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0003ee  e0a5              B        |L1.1340|
                  |L1.1008|
                          DCD      g_loop
                  |L1.1012|
0003f4  7369676e          DCB      "signature%d",0
0003f8  61747572
0003fc  65256400
                  |L1.1024|
                          DCD      g_blobs
                  |L1.1028|
                          DCD      g_qqueue
                  |L1.1032|
000408  5369676e          DCB      "Signature teach threshold",0
00040c  61747572
000410  65207465
000414  61636820
000418  74687265
00041c  73686f6c
000420  6400    
000422  00                DCB      0
000423  00                DCB      0
                  |L1.1060|
                          DCD      g_ledBrightness
                  |L1.1064|
000428  4c454420          DCB      "LED brightness",0
00042c  62726967
000430  68746e65
000434  737300  
000437  00                DCB      0
                  |L1.1080|
000438  436f6c6f          DCB      "Color signature %d",0
00043c  72207369
000440  676e6174
000444  75726520
000448  256400  
00044b  00                DCB      0
                  |L1.1100|
00044c  5369676e          DCB      "Signature %d range",0
000450  61747572
000454  65202564
000458  2072616e
00045c  676500  
00045f  00                DCB      0
                  |L1.1120|
                          DCD      ||.conststring||+0x358
                  |L1.1124|
                          DCD      0x40040000
                  |L1.1128|
                          DCD      0x3fb99999
                  |L1.1132|
                          DCD      ||.conststring||+0x3b0
                  |L1.1136|
000470  4d696e20          DCB      "Min brightness",0
000474  62726967
000478  68746e65
00047c  737300  
00047f  00                DCB      0
                  |L1.1152|
                          DCD      0x3ffccccc
                  |L1.1156|
                          DCD      ||.conststring||+0x410
                  |L1.1160|
000488  436f6c6f          DCB      "Color code multiplier",0
00048c  7220636f
000490  6465206d
000494  756c7469
000498  706c6965
00049c  7200    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L1.1184|
                          DCD      ||.conststring||+0x46c
                  |L1.1188|
0004a4  436f6c6f          DCB      "Color code mode",0
0004a8  7220636f
0004ac  6465206d
0004b0  6f646500
                  |L1.1204|
                          DCD      ||.conststring||+0x4d0
                  |L1.1208|
                          DCD      ||.conststring||+0x55c
                  |L1.1212|
                          DCD      ||.conststring||+0x600
                  |L1.1216|
0004c0  4d617820          DCB      "Max blocks",0
0004c4  626c6f63
0004c8  6b7300  
0004cb  00                DCB      0
                  |L1.1228|
                          DCD      ||.conststring||+0x648
                  |L1.1232|
0004d0  4d617820          DCB      "Max blocks per signature",0
0004d4  626c6f63
0004d8  6b732070
0004dc  65722073
0004e0  69676e61
0004e4  74757265
0004e8  00      
0004e9  00                DCB      0
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
                          DCD      ||.conststring||+0x6a8
                  |L1.1264|
0004f0  4d696e20          DCB      "Min block area",0
0004f4  626c6f63
0004f8  6b206172
0004fc  656100  
0004ff  00                DCB      0
                  |L1.1280|
                          DCD      0x10091000
                  |L1.1284|
                          DCD      g_module
                  |L1.1288|
000508  67657452          DCB      "getRLSFrame",0
00050c  4c534672
000510  616d6500
                  |L1.1300|
                          DCD      g_chirpM0
                  |L1.1304|
                          DCD      g_getRLSFrameM0
                  |L1.1308|
                          DCD      g_rawFrame
                  |L1.1312|
000520  4e6f2072          DCB      "No raw frame in memory!\n",0
000524  61772066
000528  72616d65
00052c  20696e20
000530  6d656d6f
000534  7279210a
000538  00      
000539  00                DCB      0
00053a  00                DCB      0
00053b  00                DCB      0
                  |L1.1340|
00053c  a0f9              ADR      r0,|L1.2340|
00053e  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
000542  2101              MOVS     r1,#1                 ;287
000544  4658              MOV      r0,r11                ;287
000546  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
00054a  2000              MOVS     r0,#0                 ;288
00054c  e71b              B        |L1.902|
;;;290    
                          ENDP

                  _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph PROC ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
;;;504    
;;;505    void cc_sendPoints(Points &points, uint16_t width, uint16_t height, Chirp *chirp, uint8_t renderFlags)
00054e  e92d4ff0          PUSH     {r4-r11,lr}
;;;506    {
000552  b08f              SUB      sp,sp,#0x3c
000554  4604              MOV      r4,r0
000556  460f              MOV      r7,r1
000558  4690              MOV      r8,r2
00055a  461d              MOV      r5,r3
;;;507    	uint32_t len;
;;;508    	uint8_t *mem = (uint8_t *)SRAM1_LOC;
00055c  f8df93d4          LDR      r9,|L1.2356|
;;;509    
;;;510    	if (chirp==NULL)
000560  b915              CBNZ     r5,|L1.1384|
                  |L1.1378|
;;;511    		return;
;;;512    
;;;513    	len = Chirp::serialize(chirp, mem, SRAM1_SIZE,  HTYPE(0), HINT8(0), UINT16(0), UINT16(0), UINT16(0), UINT16(0), UINTS16_NO_COPY(0), END);
;;;514    
;;;515    	// copy into video memory because we don't have enough memory in the chirp buffer
;;;516    	memcpy(mem+len, points.data(), points.size()*sizeof(Point16));
;;;517    	Chirp::serialize(chirp, mem, SRAM1_SIZE, HTYPE(FOURCC('B','L','T','1')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINT16(width), UINT16(height), UINTS16_NO_COPY(points.size()*sizeof(Point16)/sizeof(uint16_t))); 
;;;518    	chirp->useBuffer((uint8_t *)mem, len+points.size()*sizeof(Point16));
;;;519    }
000562  b00f              ADD      sp,sp,#0x3c
000564  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1384|
000568  2000              MOVS     r0,#0                 ;513
00056a  22b2              MOVS     r2,#0xb2              ;513
00056c  e9cd020a          STRD     r0,r2,[sp,#0x28]      ;513
000570  900c              STR      r0,[sp,#0x30]         ;513
000572  900d              STR      r0,[sp,#0x34]         ;513
000574  2002              MOVS     r0,#2                 ;513
000576  2100              MOVS     r1,#0                 ;513
000578  e9cd1006          STRD     r1,r0,[sp,#0x18]      ;513
00057c  e9cd1008          STRD     r1,r0,[sp,#0x20]      ;513
000580  e9cd1002          STRD     r1,r0,[sp,#8]         ;513
000584  e9cd1004          STRD     r1,r0,[sp,#0x10]      ;513
000588  2041              MOVS     r0,#0x41              ;513
00058a  2364              MOVS     r3,#0x64              ;513
00058c  f44f3290          MOV      r2,#0x12000           ;513
000590  e9cd1000          STRD     r1,r0,[sp,#0]         ;513
000594  4649              MOV      r1,r9                 ;513
000596  4628              MOV      r0,r5                 ;513
000598  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00059c  4606              MOV      r6,r0                 ;513
00059e  bf00              NOP                            ;516
0005a0  6820              LDR      r0,[r4,#0]            ;516
0005a2  ea4f0a80          LSL      r10,r0,#2             ;516
0005a6  68a0              LDR      r0,[r4,#8]            ;516
0005a8  4683              MOV      r11,r0                ;516
0005aa  eb090006          ADD      r0,r9,r6              ;516
0005ae  4652              MOV      r2,r10                ;516
0005b0  4659              MOV      r1,r11                ;516
0005b2  f7fffffe          BL       __aeabi_memcpy
0005b6  bf00              NOP                            ;517
0005b8  6820              LDR      r0,[r4,#0]            ;517
0005ba  0080              LSLS     r0,r0,#2              ;517
0005bc  ea4f0a50          LSR      r10,r0,#1             ;517
0005c0  20b2              MOVS     r0,#0xb2              ;517
0005c2  2102              MOVS     r1,#2                 ;517
0005c4  e9cd0a0b          STRD     r0,r10,[sp,#0x2c]     ;517
0005c8  e9cd1809          STRD     r1,r8,[sp,#0x24]      ;517
0005cc  4608              MOV      r0,r1                 ;517
0005ce  21c8              MOVS     r1,#0xc8              ;517
0005d0  2202              MOVS     r2,#2                 ;517
0005d2  e9cd0707          STRD     r0,r7,[sp,#0x1c]      ;517
0005d6  e9cd2105          STRD     r2,r1,[sp,#0x14]      ;517
0005da  f44f71a0          MOV      r1,#0x140             ;517
0005de  2341              MOVS     r3,#0x41              ;517
0005e0  9818              LDR      r0,[sp,#0x60]         ;517
0005e2  e9cd3001          STRD     r3,r0,[sp,#4]         ;517
0005e6  e9cd2103          STRD     r2,r1,[sp,#0xc]       ;517
0005ea  48d3              LDR      r0,|L1.2360|
0005ec  2364              MOVS     r3,#0x64              ;517
0005ee  f44f3290          MOV      r2,#0x12000           ;517
0005f2  4649              MOV      r1,r9                 ;517
0005f4  9000              STR      r0,[sp,#0]            ;517
0005f6  4628              MOV      r0,r5                 ;517
0005f8  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
0005fc  bf00              NOP                            ;518
0005fe  6820              LDR      r0,[r4,#0]            ;518
000600  eb060a80          ADD      r10,r6,r0,LSL #2      ;518
000604  4652              MOV      r2,r10                ;518
000606  4649              MOV      r1,r9                 ;518
000608  4628              MOV      r0,r5                 ;518
00060a  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
00060e  bf00              NOP      
000610  e7a7              B        |L1.1378|
;;;520    
                          ENDP

                  _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp PROC ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
;;;290    
;;;291    int32_t cc_setSigPoint(const uint32_t &type, const uint8_t &signum, const uint16_t &x, const uint16_t &y, Chirp *chirp)
000612  e92d4ff0          PUSH     {r4-r11,lr}
;;;292    {
000616  b097              SUB      sp,sp,#0x5c
000618  4607              MOV      r7,r0
00061a  460c              MOV      r4,r1
00061c  4690              MOV      r8,r2
00061e  4699              MOV      r9,r3
000620  f8dda080          LDR      r10,[sp,#0x80]
;;;293    	char id[32];
;;;294    	ColorSignature *sig;
;;;295    	Points points;
000624  ad0b              ADD      r5,sp,#0x2c
000626  f04f0b00          MOV      r11,#0
00062a  2000              MOVS     r0,#0
00062c  6028              STR      r0,[r5,#0]
00062e  f10b0010          ADD      r0,r11,#0x10
000632  6068              STR      r0,[r5,#4]
000634  6868              LDR      r0,[r5,#4]
000636  4ac1              LDR      r2,|L1.2364|
000638  4601              MOV      r1,r0
00063a  9001              STR      r0,[sp,#4]
00063c  2004              MOVS     r0,#4
00063e  f7fffffe          BL       __aeabi_vec_new_nocookie
000642  60a8              STR      r0,[r5,#8]
000644  bf00              NOP      
;;;296    
;;;297    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000646  7820              LDRB     r0,[r4,#0]
000648  2801              CMP      r0,#1
00064a  db02              BLT      |L1.1618|
00064c  7820              LDRB     r0,[r4,#0]
00064e  2807              CMP      r0,#7
000650  dd07              BLE      |L1.1634|
                  |L1.1618|
;;;298    		return -1;
000652  a80b              ADD      r0,sp,#0x2c
000654  f7fffffe          BL       _ZN12SimpleVectorI7Point16ED1Ev ; SimpleVector<Point16>::~SimpleVector()
000658  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1628|
;;;299    
;;;300    	if (g_rawFrame.m_pixels==NULL)
;;;301    	{
;;;302    		cprintf("No raw frame in memory!\n");
;;;303    		return -2;
;;;304    	}
;;;305    
;;;306    	// create lut
;;;307    	g_blobs->m_clut.generateSignature(g_rawFrame, Point16(x, y), &points, signum);
;;;308    	sig = g_blobs->m_clut.getSignature(signum);
;;;309    	sig->m_type = type;
;;;310    
;;;311    	// find average RGB value
;;;312    	IterPixel ip(g_rawFrame, &points);
;;;313    	sig->m_rgb = ip.averageRgb();
;;;314    
;;;315    	cc_sendPoints(points, CL_GROW_INC, CL_GROW_INC, chirp);
;;;316    
;;;317    	// save to flash
;;;318    	sprintf(id, "signature%d", signum);
;;;319    	prm_set(id, INTS8(sizeof(ColorSignature), sig), END);
;;;320    	cc_loadLut();
;;;321    
;;;322    	cprintf("Signature set!\n");
;;;323    
;;;324        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;325    	return 0;
;;;326    }
00065c  b017              ADD      sp,sp,#0x5c
00065e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1634|
000662  48b7              LDR      r0,|L1.2368|
000664  6800              LDR      r0,[r0,#0]            ;300  ; g_rawFrame
000666  b948              CBNZ     r0,|L1.1660|
000668  f2af104c          ADR      r0,|L1.1312|
00066c  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
000670  a80b              ADD      r0,sp,#0x2c           ;303
000672  f7fffffe          BL       _ZN12SimpleVectorI7Point16ED1Ev ; SimpleVector<Point16>::~SimpleVector()
000676  f06f0001          MVN      r0,#1                 ;303
00067a  e7ef              B        |L1.1628|
                  |L1.1660|
00067c  a816              ADD      r0,sp,#0x58           ;307
00067e  f8b83000          LDRH     r3,[r8,#0]            ;307
000682  b219              SXTH     r1,r3                 ;307
000684  f8b93000          LDRH     r3,[r9,#0]            ;307
000688  b21a              SXTH     r2,r3                 ;307
00068a  8001              STRH     r1,[r0,#0]            ;307
00068c  8042              STRH     r2,[r0,#2]            ;307
00068e  bf00              NOP                            ;307
000690  4605              MOV      r5,r0                 ;307
000692  7820              LDRB     r0,[r4,#0]            ;307
000694  ab0b              ADD      r3,sp,#0x2c           ;307
000696  462a              MOV      r2,r5                 ;307
000698  49a9              LDR      r1,|L1.2368|
00069a  9000              STR      r0,[sp,#0]            ;307
00069c  48a9              LDR      r0,|L1.2372|
00069e  6800              LDR      r0,[r0,#0]            ;307  ; g_blobs
0006a0  f7fffffe          BL       _ZN8ColorLUT17generateSignatureERK6Frame8RK7Point16P12SimpleVectorIS3_Eh ; ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector<Point16>*, unsigned char)
0006a4  7821              LDRB     r1,[r4,#0]            ;308
0006a6  48a7              LDR      r0,|L1.2372|
0006a8  6800              LDR      r0,[r0,#0]            ;308  ; g_blobs
0006aa  f7fffffe          BL       _ZN8ColorLUT12getSignatureEh ; ColorLUT::getSignature(unsigned char)
0006ae  4606              MOV      r6,r0                 ;308
0006b0  6838              LDR      r0,[r7,#0]            ;309
0006b2  61f0              STR      r0,[r6,#0x1c]         ;309
0006b4  aa0b              ADD      r2,sp,#0x2c           ;312
0006b6  49a2              LDR      r1,|L1.2368|
0006b8  a802              ADD      r0,sp,#8              ;312
0006ba  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
0006be  2100              MOVS     r1,#0                 ;313
0006c0  a802              ADD      r0,sp,#8              ;313
0006c2  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
0006c6  61b0              STR      r0,[r6,#0x18]         ;313
0006c8  2003              MOVS     r0,#3                 ;315
0006ca  4653              MOV      r3,r10                ;315
0006cc  2204              MOVS     r2,#4                 ;315
0006ce  4611              MOV      r1,r2                 ;315
0006d0  9000              STR      r0,[sp,#0]            ;315
0006d2  a80b              ADD      r0,sp,#0x2c           ;315
0006d4  f7fffffe          BL       _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
0006d8  7822              LDRB     r2,[r4,#0]            ;318
0006da  f2af21e8          ADR      r1,|L1.1012|
0006de  a80e              ADD      r0,sp,#0x38           ;318
0006e0  f7fffffe          BL       __2sprintf
0006e4  2000              MOVS     r0,#0                 ;319
0006e6  4633              MOV      r3,r6                 ;319
0006e8  2220              MOVS     r2,#0x20              ;319
0006ea  2181              MOVS     r1,#0x81              ;319
0006ec  9000              STR      r0,[sp,#0]            ;319
0006ee  a80e              ADD      r0,sp,#0x38           ;319
0006f0  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0006f4  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0006f8  a08a              ADR      r0,|L1.2340|
0006fa  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
0006fe  2101              MOVS     r1,#1                 ;324
000700  4650              MOV      r0,r10                ;324
000702  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
000706  a80b              ADD      r0,sp,#0x2c           ;325
000708  f7fffffe          BL       _ZN12SimpleVectorI7Point16ED1Ev ; SimpleVector<Point16>::~SimpleVector()
00070c  2000              MOVS     r0,#0                 ;325
00070e  e7a5              B        |L1.1628|
;;;327    
                          ENDP

                  _Z11cc_clearSigRKhP5Chirp PROC ; cc_clearSig(const unsigned char&, Chirp*)
;;;328    int32_t cc_clearSig(const uint8_t &signum, Chirp *chirp)
000710  b570              PUSH     {r4-r6,lr}
;;;329    {
000712  b092              SUB      sp,sp,#0x48
000714  4604              MOV      r4,r0
000716  460d              MOV      r5,r1
;;;330    	char id[32];
;;;331    	ColorSignature sig;
000718  a802              ADD      r0,sp,#8
00071a  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;332    	int res;
;;;333    
;;;334     	if (signum<1 || signum>CL_NUM_SIGNATURES)
00071e  7820              LDRB     r0,[r4,#0]
000720  2801              CMP      r0,#1
000722  db02              BLT      |L1.1834|
000724  7820              LDRB     r0,[r4,#0]
000726  2807              CMP      r0,#7
000728  dd03              BLE      |L1.1842|
                  |L1.1834|
;;;335    		return -1;
00072a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1838|
;;;336    
;;;337    	memset(&sig, 0, sizeof(ColorSignature));
;;;338    
;;;339    	sprintf(id, "signature%d", signum);
;;;340    	res = prm_set(id, INTS8(sizeof(ColorSignature), &sig), END);
;;;341    	cc_loadLut();
;;;342    
;;;343    	// update lut
;;;344     	cc_loadLut();
;;;345    
;;;346        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;347    
;;;348    	return res;
;;;349    }
00072e  b012              ADD      sp,sp,#0x48
000730  bd70              POP      {r4-r6,pc}
                  |L1.1842|
000732  2120              MOVS     r1,#0x20              ;337
000734  a802              ADD      r0,sp,#8              ;337
000736  f7fffffe          BL       __aeabi_memclr4
00073a  7822              LDRB     r2,[r4,#0]            ;339
00073c  f2af314c          ADR      r1,|L1.1012|
000740  a80a              ADD      r0,sp,#0x28           ;339
000742  f7fffffe          BL       __2sprintf
000746  2000              MOVS     r0,#0                 ;340
000748  ab02              ADD      r3,sp,#8              ;340
00074a  2220              MOVS     r2,#0x20              ;340
00074c  2181              MOVS     r1,#0x81              ;340
00074e  9000              STR      r0,[sp,#0]            ;340
000750  a80a              ADD      r0,sp,#0x28           ;340
000752  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
000756  4606              MOV      r6,r0                 ;340
000758  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
00075c  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
000760  2101              MOVS     r1,#1                 ;346
000762  4628              MOV      r0,r5                 ;346
000764  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
000768  4630              MOV      r0,r6                 ;348
00076a  e7e0              B        |L1.1838|
;;;350    
                          ENDP

                  _Z14cc_clearAllSigP5Chirp PROC ; cc_clearAllSig(Chirp*)
;;;351    int32_t cc_clearAllSig(Chirp *chirp)
00076c  b570              PUSH     {r4-r6,lr}
;;;352    {
00076e  b092              SUB      sp,sp,#0x48
000770  4606              MOV      r6,r0
;;;353    	char id[32];
;;;354    	uint8_t signum;
;;;355    	ColorSignature sig;
000772  a802              ADD      r0,sp,#8
000774  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;356    	int res; 
;;;357    
;;;358    	memset(&sig, 0, sizeof(ColorSignature));
000778  2120              MOVS     r1,#0x20
00077a  a802              ADD      r0,sp,#8
00077c  f7fffffe          BL       __aeabi_memclr4
;;;359    
;;;360       	for (signum=1; signum<=CL_NUM_SIGNATURES; signum++)
000780  2401              MOVS     r4,#1
000782  e015              B        |L1.1968|
                  |L1.1924|
;;;361    	{
;;;362    		sprintf(id, "signature%d", signum);
000784  4622              MOV      r2,r4
000786  f2af3194          ADR      r1,|L1.1012|
00078a  a80a              ADD      r0,sp,#0x28
00078c  f7fffffe          BL       __2sprintf
;;;363    		res = prm_set(id, INTS8(sizeof(ColorSignature), &sig), END);
000790  2000              MOVS     r0,#0
000792  ab02              ADD      r3,sp,#8
000794  2220              MOVS     r2,#0x20
000796  2181              MOVS     r1,#0x81
000798  9000              STR      r0,[sp,#0]
00079a  a80a              ADD      r0,sp,#0x28
00079c  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0007a0  4605              MOV      r5,r0
;;;364    		if (res<0)
0007a2  2d00              CMP      r5,#0
0007a4  da02              BGE      |L1.1964|
;;;365    			return res;			
0007a6  4628              MOV      r0,r5
                  |L1.1960|
;;;366    	}
;;;367    
;;;368    	// reload lut
;;;369    	cc_loadLut();
;;;370    
;;;371        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;372    
;;;373    	return 0;
;;;374    }
0007a8  b012              ADD      sp,sp,#0x48
0007aa  bd70              POP      {r4-r6,pc}
                  |L1.1964|
0007ac  1c60              ADDS     r0,r4,#1              ;360
0007ae  b2c4              UXTB     r4,r0                 ;360
                  |L1.1968|
0007b0  2c07              CMP      r4,#7                 ;360
0007b2  dde7              BLE      |L1.1924|
0007b4  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0007b8  2101              MOVS     r1,#1                 ;371
0007ba  4630              MOV      r0,r6                 ;371
0007bc  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0007c0  2000              MOVS     r0,#0                 ;373
0007c2  e7f1              B        |L1.1960|
;;;375    
                          ENDP

                  _Z14cc_getRLSFramePhS_b PROC ; cc_getRLSFrame(unsigned char*, unsigned char*, bool)
;;;411    
;;;412    int32_t cc_getRLSFrame(uint8_t *memory, uint8_t *lut, bool sync)
0007c4  b5f0              PUSH     {r4-r7,lr}
;;;413    {
0007c6  b089              SUB      sp,sp,#0x24
0007c8  4604              MOV      r4,r0
0007ca  460d              MOV      r5,r1
0007cc  4616              MOV      r6,r2
;;;414    	int32_t res;
;;;415    	int32_t responseInt = -1;
0007ce  f04f30ff          MOV      r0,#0xffffffff
0007d2  9007              STR      r0,[sp,#0x1c]
;;;416    
;;;417    	// check mode, set if necessary
;;;418    	if ((res=cam_setMode(CAM_MODE1))<0)
0007d4  2001              MOVS     r0,#1
0007d6  9008              STR      r0,[sp,#0x20]
0007d8  a808              ADD      r0,sp,#0x20
0007da  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
0007de  1e07              SUBS     r7,r0,#0
0007e0  da02              BGE      |L1.2024|
;;;419    		return res;
0007e2  4638              MOV      r0,r7
                  |L1.2020|
;;;420    
;;;421    	// forward call to M0, get frame
;;;422    	if (sync)
;;;423    	{
;;;424    		g_chirpM0->callSync(g_getRLSFrameM0, 
;;;425    			UINT32((uint32_t)memory), UINT32((uint32_t)lut), END_OUT_ARGS,
;;;426    			&responseInt, END_IN_ARGS);
;;;427    		return responseInt;
;;;428    	}
;;;429    	else
;;;430    	{
;;;431    		g_chirpM0->callAsync(g_getRLSFrameM0, 
;;;432    			UINT32((uint32_t)memory), UINT32((uint32_t)lut), END_OUT_ARGS);
;;;433    		return 0;
;;;434    	}
;;;435    
;;;436    }
0007e4  b009              ADD      sp,sp,#0x24
0007e6  bdf0              POP      {r4-r7,pc}
                  |L1.2024|
0007e8  b1a6              CBZ      r6,|L1.2068|
0007ea  2000              MOVS     r0,#0                 ;424
0007ec  aa07              ADD      r2,sp,#0x1c           ;424
0007ee  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;424
0007f2  9005              STR      r0,[sp,#0x14]         ;424
0007f4  9006              STR      r0,[sp,#0x18]         ;424
0007f6  2004              MOVS     r0,#4                 ;424
0007f8  4603              MOV      r3,r0                 ;424
0007fa  e9cd0501          STRD     r0,r5,[sp,#4]         ;424
0007fe  9400              STR      r4,[sp,#0]            ;424
000800  4851              LDR      r0,|L1.2376|
000802  f9b02000          LDRSH    r2,[r0,#0]            ;424  ; g_getRLSFrameM0
000806  2100              MOVS     r1,#0                 ;424
000808  4850              LDR      r0,|L1.2380|
00080a  6800              LDR      r0,[r0,#0]            ;424  ; g_chirpM0
00080c  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
000810  9807              LDR      r0,[sp,#0x1c]         ;427
000812  e7e7              B        |L1.2020|
                  |L1.2068|
000814  2000              MOVS     r0,#0                 ;431
000816  2204              MOVS     r2,#4                 ;431
000818  e9cd5002          STRD     r5,r0,[sp,#8]         ;431
00081c  4613              MOV      r3,r2                 ;431
00081e  e9cd4200          STRD     r4,r2,[sp,#0]         ;431
000822  9004              STR      r0,[sp,#0x10]         ;431
000824  4848              LDR      r0,|L1.2376|
000826  f9b02000          LDRSH    r2,[r0,#0]            ;431  ; g_getRLSFrameM0
00082a  2101              MOVS     r1,#1                 ;431
00082c  4847              LDR      r0,|L1.2380|
00082e  6800              LDR      r0,[r0,#0]            ;431  ; g_chirpM0
000830  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
000834  2000              MOVS     r0,#0                 ;433
000836  e7d5              B        |L1.2020|
;;;437    
                          ENDP

                  _Z24cc_getRLSFrameChirpFlagsP5Chirph PROC ; cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
;;;381    
;;;382    int32_t cc_getRLSFrameChirpFlags(Chirp *chirp, uint8_t renderFlags)
000838  e92d4ff0          PUSH     {r4-r11,lr}
;;;383    {
00083c  b08b              SUB      sp,sp,#0x2c
00083e  4682              MOV      r10,r0
000840  460f              MOV      r7,r1
;;;384    
;;;385    #define MAX_NEW_QVALS_PER_LINE   ((CAM_RES2_WIDTH/3)+2)
;;;386    
;;;387    	int32_t result;
;;;388    	uint8_t *scratchMem, *lut, *mem;
;;;389    	uint32_t len, memSize, numq;
;;;390    
;;;391    
;;;392    	lut = (uint8_t *)SRAM1_LOC + SRAM1_SIZE - CL_LUT_SIZE;
000842  4843              LDR      r0,|L1.2384|
000844  900a              STR      r0,[sp,#0x28]
;;;393    	scratchMem = (uint8_t *)SRAM1_LOC + SRAM1_SIZE - CL_LUT_SIZE - 0x1000;  // 4K should be enough for scratch mem (320/3+2)*8 + 320*8 = 3424
000846  f8df810c          LDR      r8,|L1.2388|
;;;394    	mem = (uint8_t *)SRAM1_LOC;
00084a  f8df90e8          LDR      r9,|L1.2356|
;;;395    	memSize = (uint32_t)scratchMem-SRAM1_LOC;
00084e  4648              MOV      r0,r9
000850  eba80500          SUB      r5,r8,r0
;;;396    
;;;397    	len = Chirp::serialize(chirp, mem, memSize,  HTYPE(0), HINT8(0), UINT16(0), UINT16(0), UINTS8_NO_COPY(0), END);
000854  2000              MOVS     r0,#0
000856  22b1              MOVS     r2,#0xb1
000858  e9cd0206          STRD     r0,r2,[sp,#0x18]
00085c  9008              STR      r0,[sp,#0x20]
00085e  9009              STR      r0,[sp,#0x24]
000860  2002              MOVS     r0,#2
000862  2100              MOVS     r1,#0
000864  e9cd1002          STRD     r1,r0,[sp,#8]
000868  e9cd1004          STRD     r1,r0,[sp,#0x10]
00086c  2041              MOVS     r0,#0x41
00086e  2364              MOVS     r3,#0x64
000870  462a              MOV      r2,r5
000872  e9cd1000          STRD     r1,r0,[sp,#0]
000876  4649              MOV      r1,r9
000878  4650              MOV      r0,r10
00087a  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00087e  4604              MOV      r4,r0
;;;398    	g_qqueue->flush();
000880  4835              LDR      r0,|L1.2392|
000882  6800              LDR      r0,[r0,#0]  ; g_qqueue
000884  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;399    	result = cc_getRLSFrame(scratchMem, lut);
000888  2201              MOVS     r2,#1
00088a  4640              MOV      r0,r8
00088c  990a              LDR      r1,[sp,#0x28]
00088e  f7fffffe          BL       _Z14cc_getRLSFramePhS_b ; cc_getRLSFrame(unsigned char*, unsigned char*, bool)
000892  4683              MOV      r11,r0
;;;400    	memSize -= len;
000894  1b2d              SUBS     r5,r5,r4
;;;401    	memSize /= sizeof(Qval);
000896  08ed              LSRS     r5,r5,#3
;;;402    	// copy from IPC memory to RLS_MEMORY
;;;403    	numq = g_qqueue->readAll((Qval *)(mem+len), memSize);
000898  eb090104          ADD      r1,r9,r4
00089c  462a              MOV      r2,r5
00089e  482e              LDR      r0,|L1.2392|
0008a0  6800              LDR      r0,[r0,#0]  ; g_qqueue
0008a2  f7fffffe          BL       _ZN6Qqueue7readAllEP4Qvalj ; Qqueue::readAll(Qval*, unsigned)
0008a6  4606              MOV      r6,r0
;;;404    	g_chirpM0->service();
0008a8  2101              MOVS     r1,#1
0008aa  4828              LDR      r0,|L1.2380|
0008ac  6800              LDR      r0,[r0,#0]  ; g_chirpM0
0008ae  f7fffffe          BL       _ZN5Chirp7serviceEb ; Chirp::service(bool)
;;;405    	Chirp::serialize(chirp, mem, memSize,  HTYPE(FOURCC('C','C','Q','2')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(numq*sizeof(Qval)), END);
0008b2  2100              MOVS     r1,#0
0008b4  00f0              LSLS     r0,r6,#3
0008b6  22b1              MOVS     r2,#0xb1
0008b8  23c8              MOVS     r3,#0xc8
0008ba  e9cd3206          STRD     r3,r2,[sp,#0x18]
0008be  e9cd0108          STRD     r0,r1,[sp,#0x20]
0008c2  2002              MOVS     r0,#2
0008c4  f44f71a0          MOV      r1,#0x140
0008c8  e9cd7002          STRD     r7,r0,[sp,#8]
0008cc  e9cd1004          STRD     r1,r0,[sp,#0x10]
0008d0  2041              MOVS     r0,#0x41
0008d2  4922              LDR      r1,|L1.2396|
0008d4  2364              MOVS     r3,#0x64
0008d6  462a              MOV      r2,r5
0008d8  e9cd1000          STRD     r1,r0,[sp,#0]
0008dc  4649              MOV      r1,r9
0008de  4650              MOV      r0,r10
0008e0  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
;;;406    	// send frame, use in-place buffer
;;;407    	chirp->useBuffer((uint8_t *)mem, len+numq*sizeof(Qval));
0008e4  eb0402c6          ADD      r2,r4,r6,LSL #3
0008e8  4649              MOV      r1,r9
0008ea  4650              MOV      r0,r10
0008ec  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;408    
;;;409    	return result;
0008f0  4658              MOV      r0,r11
;;;410    }
0008f2  b00b              ADD      sp,sp,#0x2c
0008f4  e8bd8ff0          POP      {r4-r11,pc}
;;;411    
                          ENDP

                  _Z19cc_getRLSFrameChirpP5Chirp PROC ; cc_getRLSFrameChirp(Chirp*)
;;;376    
;;;377    int32_t cc_getRLSFrameChirp(Chirp *chirp)
0008f8  b510              PUSH     {r4,lr}
;;;378    {
0008fa  4604              MOV      r4,r0
;;;379    	return cc_getRLSFrameChirpFlags(chirp);
0008fc  2101              MOVS     r1,#1
0008fe  4620              MOV      r0,r4
000900  f7fffffe          BL       _Z24cc_getRLSFrameChirpFlagsP5Chirph ; cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
;;;380    }
000904  bd10              POP      {r4,pc}
;;;381    
                          ENDP

                  _Z12cc_setMemoryRKjS0_PKh PROC ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
;;;437    
;;;438    int32_t cc_setMemory(const uint32_t &location, const uint32_t &len, const uint8_t *data)
000906  b530              PUSH     {r4,r5,lr}
;;;439    {
000908  4604              MOV      r4,r0
00090a  460b              MOV      r3,r1
;;;440    	uint32_t i;
;;;441    	uint8_t *dest = (uint8_t *)location;
00090c  6825              LDR      r5,[r4,#0]
;;;442    	for (i=0; i<len; i++)
00090e  2100              MOVS     r1,#0
000910  e002              B        |L1.2328|
                  |L1.2322|
;;;443    		dest[i] = data[i];
000912  5c50              LDRB     r0,[r2,r1]
000914  5468              STRB     r0,[r5,r1]
000916  1c49              ADDS     r1,r1,#1              ;442
                  |L1.2328|
000918  6818              LDR      r0,[r3,#0]            ;442
00091a  4288              CMP      r0,r1                 ;442
00091c  d8f9              BHI      |L1.2322|
;;;444    
;;;445    	return len;
00091e  6818              LDR      r0,[r3,#0]
;;;446    }
000920  bd30              POP      {r4,r5,pc}
000922  0000              DCW      0x0000
                  |L1.2340|
000924  5369676e          DCB      "Signature set!\n",0
000928  61747572
00092c  65207365
000930  74210a00
                  |L1.2356|
                          DCD      0x10080000
                  |L1.2360|
                          DCD      0x31544c42
                  |L1.2364|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()
                  |L1.2368|
                          DCD      g_rawFrame
                  |L1.2372|
                          DCD      g_blobs
                  |L1.2376|
                          DCD      g_getRLSFrameM0
                  |L1.2380|
                          DCD      g_chirpM0
                  |L1.2384|
                          DCD      0x10091000
                  |L1.2388|
                          DCD      0x10090000
                  |L1.2392|
                          DCD      g_qqueue
                  |L1.2396|
                          DCD      0x32514343
                          ENDP

                  _Z12cc_sendBlobsP5ChirpPK5BlobAjh PROC ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)
;;;447    
;;;448    int cc_sendBlobs(Chirp *chirp, const BlobA *blobs, uint32_t len, uint8_t renderFlags)
000960  b5f0              PUSH     {r4-r7,lr}
;;;449    {
000962  b08b              SUB      sp,sp,#0x2c
000964  4607              MOV      r7,r0
000966  460c              MOV      r4,r1
000968  4615              MOV      r5,r2
00096a  461e              MOV      r6,r3
;;;450    	CRP_RETURN(chirp, HTYPE(FOURCC('C','C','B','1')), HINT8(renderFlags), HINT16(CAM_RES2_WIDTH), HINT16(CAM_RES2_HEIGHT), UINTS16(len*sizeof(BlobA)/sizeof(uint16_t), blobs), END);
00096c  2100              MOVS     r1,#0
00096e  eb050085          ADD      r0,r5,r5,LSL #2
000972  f0204000          BIC      r0,r0,#0x80000000
000976  e9cd4108          STRD     r4,r1,[sp,#0x20]
00097a  910a              STR      r1,[sp,#0x28]
00097c  9007              STR      r0,[sp,#0x1c]
00097e  2082              MOVS     r0,#0x82
000980  21c8              MOVS     r1,#0xc8
000982  2242              MOVS     r2,#0x42
000984  f44f73a0          MOV      r3,#0x140
000988  e9cd3203          STRD     r3,r2,[sp,#0xc]
00098c  e9cd1005          STRD     r1,r0,[sp,#0x14]
000990  2141              MOVS     r1,#0x41
000992  4b5e              LDR      r3,|L1.2828|
000994  e9cd6201          STRD     r6,r2,[sp,#4]
000998  9100              STR      r1,[sp,#0]
00099a  2264              MOVS     r2,#0x64
00099c  2100              MOVS     r1,#0
00099e  4638              MOV      r0,r7
0009a0  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;451    	return 0;
0009a4  2000              MOVS     r0,#0
;;;452    }
0009a6  b00b              ADD      sp,sp,#0x2c
0009a8  bdf0              POP      {r4-r7,pc}
;;;453    
                          ENDP

                  _Z12cc_sendBlobsP5ChirpPK5BlobAjPK5BlobBjh PROC ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
;;;454    int cc_sendBlobs(Chirp *chirp, const BlobA *blobs, uint32_t len, const BlobB *ccBlobs, uint32_t ccLen, uint8_t renderFlags)
0009aa  e92d43f0          PUSH     {r4-r9,lr}
;;;455    {
0009ae  b08f              SUB      sp,sp,#0x3c
0009b0  4607              MOV      r7,r0
0009b2  460c              MOV      r4,r1
0009b4  4615              MOV      r5,r2
0009b6  461e              MOV      r6,r3
0009b8  e9dd8916          LDRD     r8,r9,[sp,#0x58]
;;;456    	CRP_RETURN(chirp, HTYPE(FOURCC('C','C','B','2')), HINT8(renderFlags), HINT16(CAM_RES2_WIDTH), HINT16(CAM_RES2_HEIGHT), UINTS16(len*sizeof(BlobA)/sizeof(uint16_t), blobs), UINTS16(ccLen*sizeof(BlobB)/sizeof(uint16_t), ccBlobs), END);
0009bc  2100              MOVS     r1,#0
0009be  eb080048          ADD      r0,r8,r8,LSL #1
0009c2  0080              LSLS     r0,r0,#2
0009c4  0840              LSRS     r0,r0,#1
0009c6  e9cd610b          STRD     r6,r1,[sp,#0x2c]
0009ca  910d              STR      r1,[sp,#0x34]
0009cc  900a              STR      r0,[sp,#0x28]
0009ce  2182              MOVS     r1,#0x82
0009d0  eb050085          ADD      r0,r5,r5,LSL #2
0009d4  f0204000          BIC      r0,r0,#0x80000000
0009d8  e9cd1006          STRD     r1,r0,[sp,#0x18]
0009dc  20c8              MOVS     r0,#0xc8
0009de  e9cd4108          STRD     r4,r1,[sp,#0x20]
0009e2  2142              MOVS     r1,#0x42
0009e4  f44f72a0          MOV      r2,#0x140
0009e8  e9cd1202          STRD     r1,r2,[sp,#8]
0009ec  e9cd1004          STRD     r1,r0,[sp,#0x10]
0009f0  2041              MOVS     r0,#0x41
0009f2  4b47              LDR      r3,|L1.2832|
0009f4  2264              MOVS     r2,#0x64
0009f6  2100              MOVS     r1,#0
0009f8  e9cd0900          STRD     r0,r9,[sp,#0]
0009fc  4638              MOV      r0,r7
0009fe  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;457    	return 0;
000a02  2000              MOVS     r0,#0
;;;458    }
000a04  b00f              ADD      sp,sp,#0x3c
000a06  e8bd83f0          POP      {r4-r9,pc}
;;;459    
                          ENDP

                  _Z13ledBrightnessj PROC ; ledBrightness(unsigned)
;;;460    uint8_t ledBrightness(uint32_t area)
000a0a  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000a0e  4605              MOV      r5,r0
;;;462    	uint32_t brightness;
;;;463    
;;;464    	brightness = 0x100*area/20000;
000a10  0228              LSLS     r0,r5,#8
000a12  f6446120          MOV      r1,#0x4e20
000a16  fbb0f4f1          UDIV     r4,r0,r1
;;;465    	if (brightness==0) // can't take log of 0...
000a1a  b914              CBNZ     r4,|L1.2594|
;;;466    		return 1;
000a1c  2001              MOVS     r0,#1
                  |L1.2590|
;;;467    	
;;;468    	// put on log curve
;;;469    	brightness = log((float)brightness)*50;
;;;470    	// saturate
;;;471    	if (brightness>0xff)
;;;472    		brightness = 0xff;
;;;473    	else if (brightness==0) 
;;;474    		brightness = 1;
;;;475    
;;;476    	return brightness;
;;;477    }
000a1e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2594|
000a22  4620              MOV      r0,r4                 ;469
000a24  f7fffffe          BL       __aeabi_ui2f
000a28  4680              MOV      r8,r0                 ;469
000a2a  4640              MOV      r0,r8                 ;469
000a2c  f7fffffe          BL       logf
000a30  4607              MOV      r7,r0                 ;469
000a32  4938              LDR      r1,|L1.2836|
000a34  f7fffffe          BL       __aeabi_fmul
000a38  4606              MOV      r6,r0                 ;469
000a3a  f7fffffe          BL       __aeabi_f2uiz
000a3e  4604              MOV      r4,r0                 ;469
000a40  2cff              CMP      r4,#0xff              ;471
000a42  d901              BLS      |L1.2632|
000a44  24ff              MOVS     r4,#0xff              ;472
000a46  e001              B        |L1.2636|
                  |L1.2632|
000a48  b904              CBNZ     r4,|L1.2636|
000a4a  2401              MOVS     r4,#1                 ;474
                  |L1.2636|
000a4c  b2e0              UXTB     r0,r4                 ;476
000a4e  e7e6              B        |L1.2590|
;;;478    
                          ENDP

                  _Z9cc_setLEDv PROC ; cc_setLED()
;;;479    void cc_setLED()
000a50  b5f0              PUSH     {r4-r7,lr}
;;;480    {
000a52  b087              SUB      sp,sp,#0x1c
;;;481    	BlobA *blob;
;;;482    	uint32_t area, color, r, g, b;
;;;483    	uint8_t brightness;
;;;484    
;;;485    	blob = (BlobA *)g_blobs->getMaxBlob();
000a54  2100              MOVS     r1,#0
000a56  4830              LDR      r0,|L1.2840|
000a58  6800              LDR      r0,[r0,#0]  ; g_blobs
000a5a  f7fffffe          BL       _ZN5Blobs10getMaxBlobEt ; Blobs::getMaxBlob(unsigned short)
000a5e  4604              MOV      r4,r0
;;;486    	if (blob)
000a60  2c00              CMP      r4,#0
000a62  d04b              BEQ      |L1.2812|
;;;487    	{
;;;488    		if (blob->m_model<=CL_NUM_SIGNATURES)
000a64  8820              LDRH     r0,[r4,#0]
000a66  2807              CMP      r0,#7
000a68  dc0a              BGT      |L1.2688|
;;;489    			color = g_blobs->m_clut.m_runtimeSigs[blob->m_model-1].m_rgbSat;
000a6a  8820              LDRH     r0,[r4,#0]
000a6c  1e40              SUBS     r0,r0,#1
000a6e  eb000180          ADD      r1,r0,r0,LSL #2
000a72  4829              LDR      r0,|L1.2840|
000a74  6800              LDR      r0,[r0,#0]  ; g_blobs
000a76  30e0              ADDS     r0,r0,#0xe0
000a78  eb000081          ADD      r0,r0,r1,LSL #2
000a7c  6906              LDR      r6,[r0,#0x10]
000a7e  e001              B        |L1.2692|
                  |L1.2688|
;;;490    		else
;;;491    			color = g_colors[0];
000a80  4826              LDR      r0,|L1.2844|
000a82  6806              LDR      r6,[r0,#0]  ; g_colors
                  |L1.2692|
;;;492    
;;;493    		area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
000a84  88a0              LDRH     r0,[r4,#4]
000a86  8861              LDRH     r1,[r4,#2]
000a88  1a40              SUBS     r0,r0,r1
000a8a  8921              LDRH     r1,[r4,#8]
000a8c  88e2              LDRH     r2,[r4,#6]
000a8e  1a89              SUBS     r1,r1,r2
000a90  fb00f701          MUL      r7,r0,r1
;;;494    		brightness = ledBrightness(area);
000a94  4638              MOV      r0,r7
000a96  f7fffffe          BL       _Z13ledBrightnessj ; ledBrightness(unsigned)
000a9a  4605              MOV      r5,r0
;;;495    		rgbUnpack(color, &r, &g, &b);
000a9c  ab04              ADD      r3,sp,#0x10
000a9e  aa05              ADD      r2,sp,#0x14
000aa0  a906              ADD      r1,sp,#0x18
000aa2  4630              MOV      r0,r6
000aa4  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;496    		b = b ? (b*brightness>>8)+1 : 0;
000aa8  9804              LDR      r0,[sp,#0x10]
000aaa  b120              CBZ      r0,|L1.2742|
000aac  9804              LDR      r0,[sp,#0x10]
000aae  4368              MULS     r0,r5,r0
000ab0  0a00              LSRS     r0,r0,#8
000ab2  1c40              ADDS     r0,r0,#1
000ab4  e000              B        |L1.2744|
                  |L1.2742|
000ab6  2000              MOVS     r0,#0
                  |L1.2744|
000ab8  9004              STR      r0,[sp,#0x10]
;;;497    		g = g ? (g*brightness>>8)+1 : 0;
000aba  9805              LDR      r0,[sp,#0x14]
000abc  b120              CBZ      r0,|L1.2760|
000abe  9805              LDR      r0,[sp,#0x14]
000ac0  4368              MULS     r0,r5,r0
000ac2  0a00              LSRS     r0,r0,#8
000ac4  1c40              ADDS     r0,r0,#1
000ac6  e000              B        |L1.2762|
                  |L1.2760|
000ac8  2000              MOVS     r0,#0
                  |L1.2762|
000aca  9005              STR      r0,[sp,#0x14]
;;;498    		r = r ? (r*brightness>>8)+1 : 0;
000acc  9806              LDR      r0,[sp,#0x18]
000ace  b120              CBZ      r0,|L1.2778|
000ad0  9806              LDR      r0,[sp,#0x18]
000ad2  4368              MULS     r0,r5,r0
000ad4  0a00              LSRS     r0,r0,#8
000ad6  1c40              ADDS     r0,r0,#1
000ad8  e000              B        |L1.2780|
                  |L1.2778|
000ada  2000              MOVS     r0,#0
                  |L1.2780|
000adc  9006              STR      r0,[sp,#0x18]
;;;499    		led_setRGB(r, g, b);
000ade  9806              LDR      r0,[sp,#0x18]
000ae0  b2c0              UXTB     r0,r0
000ae2  9003              STR      r0,[sp,#0xc]
000ae4  9805              LDR      r0,[sp,#0x14]
000ae6  b2c0              UXTB     r0,r0
000ae8  9002              STR      r0,[sp,#8]
000aea  9804              LDR      r0,[sp,#0x10]
000aec  b2c0              UXTB     r0,r0
000aee  aa01              ADD      r2,sp,#4
000af0  a902              ADD      r1,sp,#8
000af2  9001              STR      r0,[sp,#4]
000af4  a803              ADD      r0,sp,#0xc
000af6  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;500    	}
000afa  e005              B        |L1.2824|
                  |L1.2812|
;;;501    	else
;;;502    		led_set(0);
000afc  2000              MOVS     r0,#0
000afe  9003              STR      r0,[sp,#0xc]
000b00  a803              ADD      r0,sp,#0xc
000b02  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;503    }
000b06  bf00              NOP      
                  |L1.2824|
000b08  b007              ADD      sp,sp,#0x1c
000b0a  bdf0              POP      {r4-r7,pc}
;;;504    
                          ENDP

                  |L1.2828|
                          DCD      0x31424343
                  |L1.2832|
                          DCD      0x32424343
                  |L1.2836|
                          DCD      0x42480000
                  |L1.2840|
                          DCD      g_blobs
                  |L1.2844|
                          DCD      g_colors

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z19cc_getRLSFrameChirpP5Chirp ; cc_getRLSFrameChirp(Chirp*)
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x8c
                          DCD      _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_P5Chirp ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
000020  04016452          DCB      0x04,0x01,0x64,0x52
000024  45473100          DCB      0x45,0x47,0x31,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x9c
                          DCD      ||.conststring||+0x18c
                          DCD      _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
000038  04016450          DCB      0x04,0x01,0x64,0x50
00003c  4e543100          DCB      0x4e,0x54,0x31,0x00
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x19c
                          DCD      ||.conststring||+0x28c
                          DCD      _Z11cc_clearSigRKhP5Chirp ; cc_clearSig(const unsigned char&, Chirp*)
000050  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x298
                          DCD      ||.conststring||+0x300
                          DCD      _Z14cc_clearAllSigP5Chirp ; cc_clearAllSig(Chirp*)
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x310
                          DCD      ||.conststring||+0x344
                          DCD      _Z12cc_setMemoryRKjS0_PKh ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
000080  04810000          DCB      0x04,0x81,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x354
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  g_colors
                          DCD      0x00ffffff
                          DCD      0x00ff0000
                          DCD      0x00ff8000
                          DCD      0x00ffff00
                          DCD      0x0000ff00
                          DCD      0x0000ffff
                          DCD      0x000000ff
                          DCD      0x00ff00ff

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  63635f67          DCB      "cc_getRLSFrame",0
000004  6574524c
000008  53467261
00000c  6d6500  
00000f  00                DCB      0
000010  47657420          DCB      "Get a frame of color run-length segments (RLS)@r 0 if s"
000014  61206672
000018  616d6520
00001c  6f662063
000020  6f6c6f72
000024  2072756e
000028  2d6c656e
00002c  67746820
000030  7365676d
000034  656e7473
000038  2028524c
00003c  53294072
000040  20302069
000044  662073  
000047  75636365          DCB      "uccess, negative if error@r CCQ1 formated data, includi"
00004b  73732c20
00004f  6e656761
000053  74697665
000057  20696620
00005b  6572726f
00005f  72407220
000063  43435131
000067  20666f72
00006b  6d617465
00006f  64206461
000073  74612c20
000077  696e636c
00007b  756469  
00007e  6e672038          DCB      "ng 8-palette",0
000082  2d70616c
000086  65747465
00008a  00      
00008b  00                DCB      0
00008c  63635f73          DCB      "cc_setSigRegion",0
000090  65745369
000094  67526567
000098  696f6e00
00009c  53657420          DCB      "Set signature by selecting region in image@p type 0=nor"
0000a0  7369676e
0000a4  61747572
0000a8  65206279
0000ac  2073656c
0000b0  65637469
0000b4  6e672072
0000b8  6567696f
0000bc  6e20696e
0000c0  20696d61
0000c4  67654070
0000c8  20747970
0000cc  6520303d
0000d0  6e6f72  
0000d3  6d616c20          DCB      "mal signature, 1=color code signature@p signature numer"
0000d7  7369676e
0000db  61747572
0000df  652c2031
0000e3  3d636f6c
0000e7  6f722063
0000eb  6f646520
0000ef  7369676e
0000f3  61747572
0000f7  65407020
0000fb  7369676e
0000ff  61747572
000103  65206e75
000107  6d6572  
00010a  6963616c          DCB      "ical index of signature, can be 1-7@p region user-selec"
00010e  20696e64
000112  6578206f
000116  66207369
00011a  676e6174
00011e  7572652c
000122  2063616e
000126  20626520
00012a  312d3740
00012e  70207265
000132  67696f6e
000136  20757365
00013a  722d7365
00013e  6c6563  
000141  74656420          DCB      "ted region@r 0 to 100 if success where 100=good, 0=poor"
000145  72656769
000149  6f6e4072
00014d  20302074
000151  6f203130
000155  30206966
000159  20737563
00015d  63657373
000161  20776865
000165  72652031
000169  30303d67
00016d  6f6f642c
000171  20303d70
000175  6f6f72  
000178  2c206e65          DCB      ", negative if error",0
00017c  67617469
000180  76652069
000184  66206572
000188  726f7200
00018c  63635f73          DCB      "cc_setSigPoint",0
000190  65745369
000194  67506f69
000198  6e7400  
00019b  00                DCB      0
00019c  53657420          DCB      "Set signature by selecting point in image@p type 0=norm"
0001a0  7369676e
0001a4  61747572
0001a8  65206279
0001ac  2073656c
0001b0  65637469
0001b4  6e672070
0001b8  6f696e74
0001bc  20696e20
0001c0  696d6167
0001c4  65407020
0001c8  74797065
0001cc  20303d6e
0001d0  6f726d  
0001d3  616c2073          DCB      "al signature, 1=color code signature@p signature numeri"
0001d7  69676e61
0001db  74757265
0001df  2c20313d
0001e3  636f6c6f
0001e7  7220636f
0001eb  64652073
0001ef  69676e61
0001f3  74757265
0001f7  40702073
0001fb  69676e61
0001ff  74757265
000203  206e756d
000207  657269  
00020a  63616c20          DCB      "cal index of signature, can be 1-7@p point user-selecte"
00020e  696e6465
000212  78206f66
000216  20736967
00021a  6e617475
00021e  72652c20
000222  63616e20
000226  62652031
00022a  2d374070
00022e  20706f69
000232  6e742075
000236  7365722d
00023a  73656c65
00023e  637465  
000241  6420706f          DCB      "d point@r 0 to 100 if success where 100=good, 0=poor, n"
000245  696e7440
000249  72203020
00024d  746f2031
000251  30302069
000255  66207375
000259  63636573
00025d  73207768
000261  65726520
000265  3130303d
000269  676f6f64
00026d  2c20303d
000271  706f6f72
000275  2c206e  
000278  65676174          DCB      "egative if error",0
00027c  69766520
000280  69662065
000284  72726f72
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  63635f63          DCB      "cc_clearSig",0
000290  6c656172
000294  53696700
000298  436c6561          DCB      "Clear signature@p signature numerical index of signatur"
00029c  72207369
0002a0  676e6174
0002a4  75726540
0002a8  70207369
0002ac  676e6174
0002b0  75726520
0002b4  6e756d65
0002b8  72696361
0002bc  6c20696e
0002c0  64657820
0002c4  6f662073
0002c8  69676e61
0002cc  747572  
0002cf  652c2063          DCB      "e, can be 1-7@r 0 if success, negative if error",0
0002d3  616e2062
0002d7  6520312d
0002db  37407220
0002df  30206966
0002e3  20737563
0002e7  63657373
0002eb  2c206e65
0002ef  67617469
0002f3  76652069
0002f7  66206572
0002fb  726f7200
0002ff  00                DCB      0
000300  63635f63          DCB      "cc_clearAllSig",0
000304  6c656172
000308  416c6c53
00030c  696700  
00030f  00                DCB      0
000310  436c6561          DCB      "Clear signature@r 0 if success, negative if error",0
000314  72207369
000318  676e6174
00031c  75726540
000320  72203020
000324  69662073
000328  75636365
00032c  73732c20
000330  6e656761
000334  74697665
000338  20696620
00033c  6572726f
000340  7200    
000342  00                DCB      0
000343  00                DCB      0
000344  63635f73          DCB      "cc_setMemory",0
000348  65744d65
00034c  6d6f7279
000350  00      
000351  00                DCB      0
000352  00                DCB      0
000353  00                DCB      0
000354  00                DCB      0
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
000358  40632053          DCB      "@c Signature_Tuning @m 0.0 @M 11.0 Sets filtering range"
00035c  69676e61
000360  74757265
000364  5f54756e
000368  696e6720
00036c  406d2030
000370  2e302040
000374  4d203131
000378  2e302053
00037c  65747320
000380  66696c74
000384  6572696e
000388  67207261
00038c  6e6765  
00038f  206f6620          DCB      " of signature %d. (default 2.5)",0
000393  7369676e
000397  61747572
00039b  65202564
00039f  2e202864
0003a3  65666175
0003a7  6c742032
0003ab  2e352900
0003af  00                DCB      0
0003b0  40632053          DCB      "@c Signature_Tuning @m 0.0 @M 0.5 Sets the minimum brig"
0003b4  69676e61
0003b8  74757265
0003bc  5f54756e
0003c0  696e6720
0003c4  406d2030
0003c8  2e302040
0003cc  4d20302e
0003d0  35205365
0003d4  74732074
0003d8  6865206d
0003dc  696e696d
0003e0  756d2062
0003e4  726967  
0003e7  68746e65          DCB      "htness of all signatures. (default 0.1)",0
0003eb  7373206f
0003ef  6620616c
0003f3  6c207369
0003f7  676e6174
0003fb  75726573
0003ff  2e202864
000403  65666175
000407  6c742030
00040b  2e312900
00040f  00                DCB      0
000410  40632045          DCB      "@c Expert Sets the color multiplier to be multiplied to"
000414  78706572
000418  74205365
00041c  74732074
000420  68652063
000424  6f6c6f72
000428  206d756c
00042c  7469706c
000430  69657220
000434  746f2062
000438  65206d75
00043c  6c746970
000440  6c696564
000444  20746f  
000447  20656163          DCB      " each signature range. (default 1.8)",0
00044b  68207369
00044f  676e6174
000453  75726520
000457  72616e67
00045b  652e2028
00045f  64656661
000463  756c7420
000467  312e3829
00046b  00      
00046c  40632045          DCB      "@c Expert Sets the color code mode, 0=disabled, 1=enabl"
000470  78706572
000474  74205365
000478  74732074
00047c  68652063
000480  6f6c6f72
000484  20636f64
000488  65206d6f
00048c  64652c20
000490  303d6469
000494  7361626c
000498  65642c20
00049c  313d656e
0004a0  61626c  
0004a3  65642c20          DCB      "ed, 2=color codes only, 3=mixed (default 1)",0
0004a7  323d636f
0004ab  6c6f7220
0004af  636f6465
0004b3  73206f6e
0004b7  6c792c20
0004bb  333d6d69
0004bf  78656420
0004c3  28646566
0004c7  61756c74
0004cb  20312900
0004cf  00                DCB      0
0004d0  40632045          DCB      "@c Expert @m 0 @M 10000 Determines how inclusive the gr"
0004d4  78706572
0004d8  7420406d
0004dc  20302040
0004e0  4d203130
0004e4  30303020
0004e8  44657465
0004ec  726d696e
0004f0  65732068
0004f4  6f772069
0004f8  6e636c75
0004fc  73697665
000500  20746865
000504  206772  
000507  6f77696e          DCB      "owing algorithm is when teaching signatures with button"
00050b  6720616c
00050f  676f7269
000513  74686d20
000517  69732077
00051b  68656e20
00051f  74656163
000523  68696e67
000527  20736967
00052b  6e617475
00052f  72657320
000533  77697468
000537  20627574
00053b  746f6e  
00053e  2d707573          DCB      "-push method (default 2000)",0
000542  68206d65
000546  74686f64
00054a  20286465
00054e  6661756c
000552  74203230
000556  30302900
00055a  00                DCB      0
00055b  00                DCB      0
00055c  40632045          DCB      "@c Expert @m 0 @M 20000 Sets the LED brightness -- bear"
000560  78706572
000564  7420406d
000568  20302040
00056c  4d203230
000570  30303020
000574  53657473
000578  20746865
00057c  204c4544
000580  20627269
000584  6768746e
000588  65737320
00058c  2d2d2062
000590  656172  
000593  20696e20          DCB      " in mind that if the LED is too bright, it can affect t"
000597  6d696e64
00059b  20746861
00059f  74206966
0005a3  20746865
0005a7  204c4544
0005ab  20697320
0005af  746f6f20
0005b3  62726967
0005b7  68742c20
0005bb  69742063
0005bf  616e2061
0005c3  66666563
0005c7  742074  
0005ca  65616368          DCB      "each mode by illuminating the object! (default 750)",0
0005ce  206d6f64
0005d2  65206279
0005d6  20696c6c
0005da  756d696e
0005de  6174696e
0005e2  67207468
0005e6  65206f62
0005ea  6a656374
0005ee  21202864
0005f2  65666175
0005f6  6c742037
0005fa  35302900
0005fe  00                DCB      0
0005ff  00                DCB      0
000600  40632042          DCB      "@c Blocks Sets the maximum total blocks sent per frame."
000604  6c6f636b
000608  73205365
00060c  74732074
000610  6865206d
000614  6178696d
000618  756d2074
00061c  6f74616c
000620  20626c6f
000624  636b7320
000628  73656e74
00062c  20706572
000630  20667261
000634  6d652e  
000637  20286465          DCB      " (default 1000)",0
00063b  6661756c
00063f  74203130
000643  30302900
000647  00                DCB      0
000648  40632042          DCB      "@c Blocks Sets the maximum blocks for each color signat"
00064c  6c6f636b
000650  73205365
000654  74732074
000658  6865206d
00065c  6178696d
000660  756d2062
000664  6c6f636b
000668  7320666f
00066c  72206561
000670  63682063
000674  6f6c6f72
000678  20736967
00067c  6e6174  
00067f  75726520          DCB      "ure sent for each frame. (default 1000)",0
000683  73656e74
000687  20666f72
00068b  20656163
00068f  68206672
000693  616d652e
000697  20286465
00069b  6661756c
00069f  74203130
0006a3  30302900
0006a7  00                DCB      0
0006a8  40632042          DCB      "@c Blocks Sets the minimum required area in pixels for "
0006ac  6c6f636b
0006b0  73205365
0006b4  74732074
0006b8  6865206d
0006bc  696e696d
0006c0  756d2072
0006c4  65717569
0006c8  72656420
0006cc  61726561
0006d0  20696e20
0006d4  70697865
0006d8  6c732066
0006dc  6f7220  
0006df  6120626c          DCB      "a block.  Blocks with less area won't be sent. (default"
0006e3  6f636b2e
0006e7  2020426c
0006eb  6f636b73
0006ef  20776974
0006f3  68206c65
0006f7  73732061
0006fb  72656120
0006ff  776f6e27
000703  74206265
000707  2073656e
00070b  742e2028
00070f  64656661
000713  756c74  
000716  20323029          DCB      " 20)",0
00071a  00      

                          AREA ||.data||, DATA, ALIGN=2

                  g_qqueue
                          DCD      0x00000000
                  g_blobs
                          DCD      0x00000000
                  g_ledBrightness
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  g_loop
                          DCD      0x00000000
                  g_getRLSFrameM0
000010  ffff              DCW      0xffff

                          AREA ||i._ZN14ColorSignatureC1Ev||, COMGROUP=_ZN14ColorSignatureC1Ev, CODE, READONLY, ALIGN=1

                  _ZN14ColorSignatureC2Ev                  ; Alternate entry point ; ColorSignature::ColorSignature__sub_object()
                  _ZN14ColorSignatureC1Ev PROC ; ColorSignature::ColorSignature()
;;;39     {
;;;40     	ColorSignature()
;;;41     	{
;;;42     		m_uMin = m_uMax = m_uMean = m_vMin = m_vMax = m_vMean = m_type = 0;
;;;43     	}	
;;;44     
000000  2100              MOVS     r1,#0
000002  61c1              STR      r1,[r0,#0x1c]
000004  6141              STR      r1,[r0,#0x14]
000006  6101              STR      r1,[r0,#0x10]
000008  60c1              STR      r1,[r0,#0xc]
00000a  6081              STR      r1,[r0,#8]
00000c  6041              STR      r1,[r0,#4]
00000e  6001              STR      r1,[r0,#0]
000010  4770              BX       lr
                          ENDP


                          AREA ||area_number.20||, COMGROUP=_ZN14ColorSignatureC1Ev, LINKORDER=||i._ZN14ColorSignatureC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN14ColorSignatureC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI7Point16ED1Ev||, COMGROUP=_ZN12SimpleVectorI7Point16ED1Ev, CODE, READONLY, ALIGN=1

                  _ZN12SimpleVectorI7Point16ED2Ev                  ; Alternate entry point ; SimpleVector<Point16>::~SimpleVector__sub_object()
                  _ZN12SimpleVectorI7Point16ED1Ev PROC ; SimpleVector<Point16>::~SimpleVector()
;;;30     
;;;31         ~SimpleVector()
;;;32         { delete [] m_objects; }
;;;33     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  68a0              LDR      r0,[r4,#8]
000006  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.27||, COMGROUP=_ZN12SimpleVectorI7Point16ED1Ev, LINKORDER=||t._ZN12SimpleVectorI7Point16ED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI7Point16ED1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;38     {
;;;39         Point16()
;;;40         {
;;;41             m_x = m_y = 0;
;;;42         }
;;;43     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.34||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "conncomp.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_loop___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___12_conncomp_cpp_g_loop___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_loop___Z7__REVSHi|
#line 144
|__asm___12_conncomp_cpp_g_loop___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
