; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\m0\rls_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\m0\rls_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DCORE_M0 -DIPC_SLAVE -DPIXY --omf_browse=.\m0\rls_m0.crf ..\libpixy\rls_m0.c]
                          THUMB

                          AREA ||i.createLogLut||, CODE, READONLY, ALIGN=2

                  createLogLut PROC
;;;848    
;;;849    void createLogLut(void)
000000  b500              PUSH     {lr}
;;;850    {
;;;851    	int i;
;;;852    	
;;;853    	for (i=0; i<CAM_RES2_WIDTH; i++)
000002  2200              MOVS     r2,#0
000004  e007              B        |L1.22|
                  |L1.6|
;;;854    		g_logLut[i] = intLog(i) + 3;
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       intLog
00000c  1cc0              ADDS     r0,r0,#3
00000e  4904              LDR      r1,|L1.32|
000010  6809              LDR      r1,[r1,#0]  ; g_logLut
000012  5488              STRB     r0,[r1,r2]
000014  1c52              ADDS     r2,r2,#1              ;853
                  |L1.22|
000016  20ff              MOVS     r0,#0xff              ;853
000018  3041              ADDS     r0,r0,#0x41           ;853
00001a  4282              CMP      r2,r0                 ;853
00001c  dbf3              BLT      |L1.6|
;;;855    }
00001e  bd00              POP      {pc}
;;;856    
                          ENDP

                  |L1.32|
                          DCD      g_logLut

                          AREA ||i.getRLSFrame||, CODE, READONLY, ALIGN=2

                  getRLSFrame PROC
;;;869    
;;;870    int32_t getRLSFrame(uint32_t *m0Mem, uint32_t *lut)
000000  b5f0              PUSH     {r4-r7,lr}
;;;871    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;872    #define MAX_NEW_QVALS_PER_LINE   ((CAM_RES2_WIDTH/3)+2)
;;;873    
;;;874    	uint8_t *lut2 = (uint8_t *)*lut;
000008  6830              LDR      r0,[r6,#0]
00000a  900a              STR      r0,[sp,#0x28]
;;;875    	uint32_t line;
;;;876    	Qval *qvalStore;
;;;877    	uint32_t numQvals;
;;;878    	uint8_t *lineStore;
;;;879    	Qval lineBegin, frameEnd;
;;;880    	lineBegin.m_col = lineBegin.m_u = lineBegin.m_v = lineBegin.m_y = 0;
00000c  2100              MOVS     r1,#0
00000e  4668              MOV      r0,sp
000010  83c1              STRH     r1,[r0,#0x1e]
000012  8341              STRH     r1,[r0,#0x1a]
000014  8381              STRH     r1,[r0,#0x1c]
000016  8301              STRH     r1,[r0,#0x18]
;;;881    	frameEnd.m_col = 0xffff;
000018  1e49              SUBS     r1,r1,#1
00001a  8201              STRH     r1,[r0,#0x10]
;;;882    	frameEnd.m_u = frameEnd.m_v = frameEnd.m_y = 0;
00001c  2100              MOVS     r1,#0
00001e  82c1              STRH     r1,[r0,#0x16]
000020  8241              STRH     r1,[r0,#0x12]
000022  8281              STRH     r1,[r0,#0x14]
;;;883    
;;;884       	qvalStore =	(Qval *)*m0Mem;
000024  6828              LDR      r0,[r5,#0]
000026  9009              STR      r0,[sp,#0x24]
;;;885    	lineStore = (uint8_t *)*m0Mem + MAX_NEW_QVALS_PER_LINE*sizeof(Qval);
000028  211b              MOVS     r1,#0x1b
00002a  0149              LSLS     r1,r1,#5
00002c  6828              LDR      r0,[r5,#0]
00002e  1840              ADDS     r0,r0,r1
000030  9008              STR      r0,[sp,#0x20]
;;;886    	skipLines(0);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       skipLines
;;;887    	for (line=0; line<CAM_RES2_HEIGHT; line++) 
000038  2700              MOVS     r7,#0
00003a  e047              B        |L2.204|
                  |L2.60|
;;;888    	{
;;;889    		// not enough space--- return error
;;;890    		if (qq_free()<MAX_NEW_QVALS_PER_LINE)
00003c  f7fffffe          BL       qq_free
000040  286c              CMP      r0,#0x6c
000042  da0a              BGE      |L2.90|
;;;891    		{
;;;892    			frameEnd.m_col = 0xfffe;
000044  2001              MOVS     r0,#1
000046  43c0              MVNS     r0,r0
000048  4669              MOV      r1,sp
00004a  8208              STRH     r0,[r1,#0x10]
;;;893    			qq_enqueue(&frameEnd);
00004c  a804              ADD      r0,sp,#0x10
00004e  f7fffffe          BL       qq_enqueue
;;;894    			//printf("*\n");
;;;895    			return -1;
000052  2000              MOVS     r0,#0
000054  43c0              MVNS     r0,r0
                  |L2.86|
;;;896    		} 
;;;897    		qq_enqueue(&lineBegin); 
;;;898    		lineProcessedRL0A((uint32_t *)&CAM_PORT, lineStore, CAM_RES2_WIDTH); 
;;;899    		numQvals = lineProcessedRL1A((uint32_t *)&CAM_PORT, qvalStore, lut2, lineStore, CAM_RES2_WIDTH, g_qqueue->data, g_qqueue->writeIndex, QQ_MEM_SIZE);
;;;900    		g_qqueue->writeIndex += numQvals;
;;;901    		if (g_qqueue->writeIndex>=QQ_MEM_SIZE)
;;;902    			g_qqueue->writeIndex -= QQ_MEM_SIZE;
;;;903    		g_qqueue->produced += numQvals;
;;;904    	}
;;;905    	qq_enqueue(&frameEnd);
;;;906    
;;;907    	return 0;
;;;908    }
000056  b00b              ADD      sp,sp,#0x2c
000058  bdf0              POP      {r4-r7,pc}
                  |L2.90|
00005a  a806              ADD      r0,sp,#0x18           ;897
00005c  f7fffffe          BL       qq_enqueue
000060  22ff              MOVS     r2,#0xff              ;898
000062  3241              ADDS     r2,r2,#0x41           ;898
000064  481d              LDR      r0,|L2.220|
000066  9908              LDR      r1,[sp,#0x20]         ;898
000068  f7fffffe          BL       lineProcessedRL0A
00006c  4a1c              LDR      r2,|L2.224|
00006e  481d              LDR      r0,|L2.228|
000070  6800              LDR      r0,[r0,#0]            ;899  ; g_qqueue
000072  8840              LDRH     r0,[r0,#2]            ;899
000074  491b              LDR      r1,|L2.228|
000076  6809              LDR      r1,[r1,#0]            ;899  ; g_qqueue
000078  3108              ADDS     r1,r1,#8              ;899
00007a  23ff              MOVS     r3,#0xff              ;899
00007c  3341              ADDS     r3,r3,#0x41           ;899
00007e  9300              STR      r3,[sp,#0]            ;899
000080  9203              STR      r2,[sp,#0xc]          ;899
000082  9101              STR      r1,[sp,#4]            ;899
000084  9002              STR      r0,[sp,#8]            ;899
000086  4815              LDR      r0,|L2.220|
000088  9b08              LDR      r3,[sp,#0x20]         ;899
00008a  9a0a              LDR      r2,[sp,#0x28]         ;899
00008c  9909              LDR      r1,[sp,#0x24]         ;899
00008e  f7fffffe          BL       lineProcessedRL1A
000092  4604              MOV      r4,r0                 ;899
000094  4813              LDR      r0,|L2.228|
000096  6800              LDR      r0,[r0,#0]            ;900  ; g_qqueue
000098  8840              LDRH     r0,[r0,#2]            ;900
00009a  1900              ADDS     r0,r0,r4              ;900
00009c  4911              LDR      r1,|L2.228|
00009e  6809              LDR      r1,[r1,#0]            ;900  ; g_qqueue
0000a0  8048              STRH     r0,[r1,#2]            ;900
0000a2  4810              LDR      r0,|L2.228|
0000a4  6800              LDR      r0,[r0,#0]            ;901  ; g_qqueue
0000a6  8840              LDRH     r0,[r0,#2]            ;901
0000a8  490d              LDR      r1,|L2.224|
0000aa  4288              CMP      r0,r1                 ;901
0000ac  d306              BCC      |L2.188|
0000ae  480d              LDR      r0,|L2.228|
0000b0  6800              LDR      r0,[r0,#0]            ;902  ; g_qqueue
0000b2  8840              LDRH     r0,[r0,#2]            ;902
0000b4  1a40              SUBS     r0,r0,r1              ;902
0000b6  490b              LDR      r1,|L2.228|
0000b8  6809              LDR      r1,[r1,#0]            ;902  ; g_qqueue
0000ba  8048              STRH     r0,[r1,#2]            ;902
                  |L2.188|
0000bc  4809              LDR      r0,|L2.228|
0000be  6800              LDR      r0,[r0,#0]            ;903  ; g_qqueue
0000c0  8880              LDRH     r0,[r0,#4]            ;903
0000c2  1900              ADDS     r0,r0,r4              ;903
0000c4  4907              LDR      r1,|L2.228|
0000c6  6809              LDR      r1,[r1,#0]            ;903  ; g_qqueue
0000c8  8088              STRH     r0,[r1,#4]            ;903
0000ca  1c7f              ADDS     r7,r7,#1              ;887
                  |L2.204|
0000cc  2fc8              CMP      r7,#0xc8              ;887
0000ce  d3b5              BCC      |L2.60|
0000d0  a804              ADD      r0,sp,#0x10           ;905
0000d2  f7fffffe          BL       qq_enqueue
0000d6  2000              MOVS     r0,#0                 ;907
0000d8  e7bd              B        |L2.86|
;;;909    
                          ENDP

0000da  0000              DCW      0x0000
                  |L2.220|
                          DCD      0x400f6104
                  |L2.224|
                          DCD      0x0000077f
                  |L2.228|
                          DCD      g_qqueue

                          AREA ||i.intLog||, CODE, READONLY, ALIGN=1

                  intLog PROC
;;;843    
;;;844    uint8_t intLog(int i)
000000  4601              MOV      r1,r0
;;;845    {
;;;846    	return 0;
000002  2000              MOVS     r0,#0
;;;847    }
000004  4770              BX       lr
;;;848    
                          ENDP


                          AREA ||i.rls_init||, CODE, READONLY, ALIGN=2

                  rls_init PROC
;;;909    
;;;910    int rls_init(void)
000000  b510              PUSH     {r4,lr}
;;;911    {
;;;912    	chirpSetProc("getRLSFrame", (ProcPtr)getRLSFrame);
000002  4903              LDR      r1,|L4.16|
000004  a003              ADR      r0,|L4.20|
000006  f7fffffe          BL       chirpSetProc
;;;913    	return 0;
00000a  2000              MOVS     r0,#0
;;;914    }
00000c  bd10              POP      {r4,pc}
;;;915    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      getRLSFrame
                  |L4.20|
000014  67657452          DCB      "getRLSFrame",0
000018  4c534672
00001c  616d6500

                          AREA ||.data||, DATA, ALIGN=2

                  g_logLut
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\rls_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_g_logLut____REV16|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___8_rls_m0_c_g_logLut____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_g_logLut____REVSH|
#line 144
|__asm___8_rls_m0_c_g_logLut____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL0A|
#line 258 "..\\libpixy\\rls_m0.c"
|lineProcessedRL0A| PROC
#line 259
 
 
 
 
 
 
 
 
 
 PRESERVE8
 IMPORT callSyncM1

 PUSH {r4-r7, lr}

 LSLS r2, #3  
 
 ADDS r2, r1
 
 MOVS r7, #0x1
 LSLS r7, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  
 
 

 
dest10B LDR r3, [r0]  
 TST r3, r7  
 BEQ dest10B  

 
 NOP
 NOP

loop5B
 LDRB r3, [r0]  
 
 EORS r6, r6
 EORS r7, r7
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

loop6B
 LDRB r4, [r0]  
 
 ADDS r5, r3, r4  
 ADDS r7, r5  
 STRH r7, [r1, #2]  
 
 MOV r7, r5  
 SUBS r4, r3, r4  
 ADDS r6, r4
 LSLS r6, #16
 STR r6, [r1, #4]  
 
 
 LDRB r3, [r0]  
 
 MOV r6, r4  
 LSLS r4, #23  
 LSRS r4, #26  
 STRH r4, [r1, #0]  
 
 ADDS r1, #8
 CMP r1, r2
 BLT loop6B

 
 MOVS r7, #0x1
 LSLS r7, #11
 
dest11B LDR r3, [r0]  
 TST r3, r7  
 BNE dest11B  

 POP {r4-r7, pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL1A|
#line 626
|lineProcessedRL1A| PROC
#line 628

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 MACRO  
$lx EOL_CHECK
$lx CMP r4, r9
 BGE eol
 MEND

 PRESERVE8
 IMPORT callSyncM1

 PUSH {r1-r7, lr}
 
 LDR r4, [sp, #0x20]
 LSLS r4, #3  
 MOV r9, r4  
 MOVS r5, #0x1
 LSLS r5, #11  

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  

 
 
 
dest12A LDR r6, [r0]  
 TST r6, r5  
 BEQ dest12A  

 
 MOV r12, r1  
 MOVS r4, #0  

 
 LDRB r5, [r0]  
 
 NOP
 NOP
 NOP
 SUBS r4, #8
beg0 ADDS r4, #8  
beg1 EOL_CHECK
 
 
 LDRB r6, [r0]  
 
 SUBS r5, r6, r5  
 MOV r10, r5  
 ASRS r5, #3  
 LSLS r5, #26  
 LSRS r5, #20  
 LDRH r1, [r3, r4]  
 
 ORRS r1, r5  
 LDRB r7, [r2, r1]  
 
 
 LDRB r5, [r0]  
 
 MOV r8, r6  
 NOP
 NOP
 CMP r7, #0
 BEQ beg0
 ADDS r4, #8  
 EOL_CHECK
 
 NOP
 NOP
 
 
 LDRB r6, [r0]  
 
 SUBS r5, r6, r5  
 ADD r10, r5  
 ASRS r5, #3  
 LSLS r5, #26  
 LSRS r5, #20  
 LDRB r1, [r3, r4]  
 
 ORRS r1, r5  
 LDRB r1, [r2, r1]  
 
 
 LDRB r5, [r0]  
 
 ADD r8, r6  
 NOP
 MOV r6, r10  
 CMP r1, r7
 BNE beg0 
 
 MOV r5, r12  
 STRH r6, [r5, #4]  
 
 ORRS r7, r4, r7  
 ADDS r4, #2  
 
 LDRH r1, [r3, r4]  
 
 ADD r1, r8  
 STRH r1, [r5, #6]  
 
 ADDS r4, #2  
 LDR r1, [r3, r4]  
 
 ORRS r1, r7  
 STR r1, [r5]  
 
 NOP
 
 LDRB r5, [r0]  
 
 MOVS r1, #8
 ADD r12, r1  
 ADDS r4, #12  
 NOP
 NOP


 NOP
 NOP
 NOP
 NOP
 NOP

 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 ADDS r4, #8  


 B beg1

 
eol MOVS r5, #0x1
 LSLS r5, #11
dest20A LDR r6, [r0]  
 TST r6, r5  
 BNE dest20A  

 
 
 
 
 
 LDR r1, [sp]  

 LDR r2, [sp, #0x24]  
 LDR r3, [sp, #0x28]  
 LSLS r3, #3  
 ADDS r3, r2
 LDR r4, [sp, #0x2c]  
 LSLS r4, #3  
 ADDS r4, r2

lcpy CMP r1, r12  
 BEQ ecpy  

 LDR r0, [r1, #0]  
 STR r0, [r3, #0]  
 LDR r0, [r1, #4]  
 STR r0, [r3, #4]  

 ADDS r1, #8  
 ADDS r3, #8  

 CMP r4, r3  
 BEQ wrap  
 B lcpy  

wrap 
 LDR r3, [sp, #0x24]  
 B lcpy


ecpy MOV r0, r12  
 LDR r1, [sp]  
 SUBS r0, r1  
 LSRS r0, #3  
 POP {r1-r7, pc}

	ENDP

;*** End   embedded assembler ***
