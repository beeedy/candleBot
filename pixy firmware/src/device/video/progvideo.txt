; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progvideo.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progvideo.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progvideo.crf progvideo.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10videoSetupv PROC ; videoSetup()
;;;38     
;;;39     int videoSetup()
000000  2000              MOVS     r0,#0
;;;40     {
;;;41     	return 0;
;;;42     }
000002  4770              BX       lr
;;;43     
                          ENDP

                  _Z10sendCustomh PROC ; sendCustom(unsigned char)
;;;44     void sendCustom(uint8_t renderFlags=RENDER_FLAG_FLUSH)
000004  e92d4ff0          PUSH     {r4-r11,lr}
;;;45     {
000008  b08d              SUB      sp,sp,#0x34
00000a  4606              MOV      r6,r0
;;;46     	int32_t len;
;;;47     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
00000c  4ffe              LDR      r7,|L1.1032|
;;;48     	uint32_t fcc;
;;;49     	cam_setBrightness(BRIGHTNESS);
00000e  2064              MOVS     r0,#0x64
000010  900c              STR      r0,[sp,#0x30]
000012  a80c              ADD      r0,sp,#0x30
000014  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;50     
;;;51     	if (g_execArg==1)
000018  48fc              LDR      r0,|L1.1036|
00001a  6800              LDR      r0,[r0,#0]  ; g_execArg
00001c  2801              CMP      r0,#1
00001e  d17d              BNE      |L1.284|
;;;52     	{
;;;53     		// fill buffer contents manually for return data 
;;;54     		len = Chirp::serialize(g_chirpUsb, frame, SRAM1_SIZE, HTYPE(FOURCC('C','M','V','2')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(CAM_RES2_WIDTH*CAM_RES2_HEIGHT), END);
000020  2000              MOVS     r0,#0
000022  f44f417a          MOV      r1,#0xfa00
000026  22b1              MOVS     r2,#0xb1
000028  23c8              MOVS     r3,#0xc8
00002a  e9cd3206          STRD     r3,r2,[sp,#0x18]
00002e  e9cd1008          STRD     r1,r0,[sp,#0x20]
000032  2002              MOVS     r0,#2
000034  f44f71a0          MOV      r1,#0x140
000038  e9cd6002          STRD     r6,r0,[sp,#8]
00003c  e9cd1004          STRD     r1,r0,[sp,#0x10]
000040  2041              MOVS     r0,#0x41
000042  49f3              LDR      r1,|L1.1040|
000044  2364              MOVS     r3,#0x64
000046  f44f3290          MOV      r2,#0x12000
00004a  e9cd1000          STRD     r1,r0,[sp,#0]
00004e  4639              MOV      r1,r7
000050  48f0              LDR      r0,|L1.1044|
000052  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000054  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
000058  4605              MOV      r5,r0
;;;55     		// write frame after chirp args
;;;56     		cam_getFrame(frame+len, SRAM1_SIZE-len, CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
00005a  20c8              MOVS     r0,#0xc8
00005c  f44f71a0          MOV      r1,#0x140
000060  2200              MOVS     r2,#0
000062  e9cd2100          STRD     r2,r1,[sp,#0]
000066  9002              STR      r0,[sp,#8]
000068  f5c53190          RSB      r1,r5,#0x12000
00006c  1978              ADDS     r0,r7,r5
00006e  4613              MOV      r3,r2
000070  2221              MOVS     r2,#0x21
000072  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;57     
;;;58     		uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + len);
000076  4638              MOV      r0,r7
000078  182c              ADDS     r4,r5,r0
;;;59     		
;;;60     		for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
00007a  2003              MOVS     r0,#3
00007c  e1ba              B        |L1.1012|
                  |L1.126|
;;;61     			uint16_t ypo = y + 1;
00007e  1c41              ADDS     r1,r0,#1
000080  b28a              UXTH     r2,r1
;;;62     			uint16_t ymo = y - 1;
000082  1e41              SUBS     r1,r0,#1
000084  fa1ffc81          UXTH     r12,r1
;;;63     			for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
000088  2103              MOVS     r1,#3
00008a  e1ad              B        |L1.1000|
                  |L1.140|
;;;64     				uint16_t xpo = x + 1;
00008c  f1010a01          ADD      r10,r1,#1
000090  fa1ff38a          UXTH     r3,r10
;;;65     				uint16_t xmo = x - 1;
000094  f1a10a01          SUB      r10,r1,#1
000098  fa1ff88a          UXTH     r8,r10
;;;66     				uint16_t grad = 0; 
00009c  f04f0a00          MOV      r10,#0
0000a0  f8cda028          STR      r10,[sp,#0x28]
;;;67     				
;;;68     				uint16_t intense_XPO_Y = frameloc[y*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1] + 
0000a4  eb000a80          ADD      r10,r0,r0,LSL #2
0000a8  eb031a8a          ADD      r10,r3,r10,LSL #6
0000ac  f814b00a          LDRB     r11,[r4,r10]
0000b0  eb020a82          ADD      r10,r2,r2,LSL #2
0000b4  eb031a8a          ADD      r10,r3,r10,LSL #6
0000b8  f10a0a01          ADD      r10,r10,#1
0000bc  f814a00a          LDRB     r10,[r4,r10]
0000c0  44da              ADD      r10,r10,r11
0000c2  eb020b82          ADD      r11,r2,r2,LSL #2
0000c6  eb031b8b          ADD      r11,r3,r11,LSL #6
0000ca  f814b00b          LDRB     r11,[r4,r11]
0000ce  eb000e80          ADD      lr,r0,r0,LSL #2
0000d2  eb031e8e          ADD      lr,r3,lr,LSL #6
0000d6  f10e0e01          ADD      lr,lr,#1
0000da  f814e00e          LDRB     lr,[r4,lr]
0000de  44f3              ADD      r11,r11,lr
0000e0  f8cdb000          STR      r11,[sp,#0]
0000e4  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0000e8  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0000ec  f8cda024          STR      r10,[sp,#0x24]
;;;69     						(frameloc[ypo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1])/2;
;;;70     				
;;;71     				uint16_t intense_XMO_Y = frameloc[y*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x] + 
0000f0  eb000a80          ADD      r10,r0,r0,LSL #2
0000f4  eb081a8a          ADD      r10,r8,r10,LSL #6
0000f8  f814a00a          LDRB     r10,[r4,r10]
0000fc  eb020b82          ADD      r11,r2,r2,LSL #2
000100  eb011b8b          ADD      r11,r1,r11,LSL #6
000104  f814b00b          LDRB     r11,[r4,r11]
000108  44da              ADD      r10,r10,r11
00010a  eb020b82          ADD      r11,r2,r2,LSL #2
00010e  eb081b8b          ADD      r11,r8,r11,LSL #6
000112  f814b00b          LDRB     r11,[r4,r11]
000116  eb000e80          ADD      lr,r0,r0,LSL #2
00011a  e000              B        |L1.286|
                  |L1.284|
00011c  e17f              B        |L1.1054|
                  |L1.286|
00011e  eb011e8e          ADD      lr,r1,lr,LSL #6
000122  f814e00e          LDRB     lr,[r4,lr]
000126  44f3              ADD      r11,r11,lr
000128  f8cdb000          STR      r11,[sp,#0]
00012c  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000130  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000134  f8cda020          STR      r10,[sp,#0x20]
;;;72     						(frameloc[ypo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x])/2;
;;;73     				
;;;74     				uint16_t intense_X_YPO = frameloc[ypo*RES_WIDTH + x] + frameloc[(ypo+1)*RES_WIDTH + xpo] + 
000138  eb020a82          ADD      r10,r2,r2,LSL #2
00013c  eb011a8a          ADD      r10,r1,r10,LSL #6
000140  f814b00a          LDRB     r11,[r4,r10]
000144  f1020a01          ADD      r10,r2,#1
000148  eb0a0a8a          ADD      r10,r10,r10,LSL #2
00014c  eb031a8a          ADD      r10,r3,r10,LSL #6
000150  f814a00a          LDRB     r10,[r4,r10]
000154  44da              ADD      r10,r10,r11
000156  f1020b01          ADD      r11,r2,#1
00015a  eb0b0b8b          ADD      r11,r11,r11,LSL #2
00015e  eb011b8b          ADD      r11,r1,r11,LSL #6
000162  f814b00b          LDRB     r11,[r4,r11]
000166  eb020e82          ADD      lr,r2,r2,LSL #2
00016a  eb031e8e          ADD      lr,r3,lr,LSL #6
00016e  f814e00e          LDRB     lr,[r4,lr]
000172  44f3              ADD      r11,r11,lr
000174  f8cdb000          STR      r11,[sp,#0]
000178  eb0b7bdb          ADD      r11,r11,r11,LSR #31
00017c  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000180  f8cda01c          STR      r10,[sp,#0x1c]
;;;75     						(frameloc[(ypo+1)*RES_WIDTH + x] + frameloc[ypo*RES_WIDTH + xpo])/2;
;;;76     				
;;;77     				uint16_t intense_XPO_YPO = frameloc[ypo*RES_WIDTH + xpo] + frameloc[(ypo+1)*RES_WIDTH + xpo+1] + 
000184  eb020a82          ADD      r10,r2,r2,LSL #2
000188  eb031a8a          ADD      r10,r3,r10,LSL #6
00018c  f814b00a          LDRB     r11,[r4,r10]
000190  f1020a01          ADD      r10,r2,#1
000194  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000198  eb031a8a          ADD      r10,r3,r10,LSL #6
00019c  f10a0a01          ADD      r10,r10,#1
0001a0  f814a00a          LDRB     r10,[r4,r10]
0001a4  44da              ADD      r10,r10,r11
0001a6  f1020b01          ADD      r11,r2,#1
0001aa  eb0b0b8b          ADD      r11,r11,r11,LSL #2
0001ae  eb031b8b          ADD      r11,r3,r11,LSL #6
0001b2  f814b00b          LDRB     r11,[r4,r11]
0001b6  eb020e82          ADD      lr,r2,r2,LSL #2
0001ba  eb031e8e          ADD      lr,r3,lr,LSL #6
0001be  f10e0e01          ADD      lr,lr,#1
0001c2  f814e00e          LDRB     lr,[r4,lr]
0001c6  44f3              ADD      r11,r11,lr
0001c8  f8cdb000          STR      r11,[sp,#0]
0001cc  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0001d0  eb0a096b          ADD      r9,r10,r11,ASR #1
;;;78     						(frameloc[(ypo+1)*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1])/2;
;;;79     				
;;;80     				uint16_t intense_XMO_YPO = frameloc[(ypo)*RES_WIDTH + xmo] + frameloc[(ypo+1)*RES_WIDTH + x] + 
0001d4  eb020a82          ADD      r10,r2,r2,LSL #2
0001d8  eb081a8a          ADD      r10,r8,r10,LSL #6
0001dc  f814b00a          LDRB     r11,[r4,r10]
0001e0  f1020a01          ADD      r10,r2,#1
0001e4  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0001e8  eb011a8a          ADD      r10,r1,r10,LSL #6
0001ec  f814a00a          LDRB     r10,[r4,r10]
0001f0  44da              ADD      r10,r10,r11
0001f2  f1020b01          ADD      r11,r2,#1
0001f6  eb0b0b8b          ADD      r11,r11,r11,LSL #2
0001fa  eb081b8b          ADD      r11,r8,r11,LSL #6
0001fe  f814b00b          LDRB     r11,[r4,r11]
000202  eb020e82          ADD      lr,r2,r2,LSL #2
000206  eb011e8e          ADD      lr,r1,lr,LSL #6
00020a  f814e00e          LDRB     lr,[r4,lr]
00020e  44f3              ADD      r11,r11,lr
000210  f8cdb000          STR      r11,[sp,#0]
000214  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000218  eb0a0a6b          ADD      r10,r10,r11,ASR #1
00021c  f8cda018          STR      r10,[sp,#0x18]
;;;81     						(frameloc[(ypo+1)*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x])/2;
;;;82     				
;;;83     				uint16_t intense_X_YMO = frameloc[ymo*RES_WIDTH + x] + frameloc[y*RES_WIDTH + xpo] + 
000220  eb0c0a8c          ADD      r10,r12,r12,LSL #2
000224  eb011a8a          ADD      r10,r1,r10,LSL #6
000228  f814a00a          LDRB     r10,[r4,r10]
00022c  eb000b80          ADD      r11,r0,r0,LSL #2
000230  eb031b8b          ADD      r11,r3,r11,LSL #6
000234  f814b00b          LDRB     r11,[r4,r11]
000238  44da              ADD      r10,r10,r11
00023a  eb000b80          ADD      r11,r0,r0,LSL #2
00023e  eb011b8b          ADD      r11,r1,r11,LSL #6
000242  f814b00b          LDRB     r11,[r4,r11]
000246  eb0c0e8c          ADD      lr,r12,r12,LSL #2
00024a  eb031e8e          ADD      lr,r3,lr,LSL #6
00024e  f814e00e          LDRB     lr,[r4,lr]
000252  44f3              ADD      r11,r11,lr
000254  f8cdb000          STR      r11,[sp,#0]
000258  eb0b7bdb          ADD      r11,r11,r11,LSR #31
00025c  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000260  f8cda014          STR      r10,[sp,#0x14]
;;;84     						(frameloc[y*RES_WIDTH + x] + frameloc[ymo*RES_WIDTH + xpo])/2;
;;;85     						
;;;86     				uint16_t intense_XPO_YMO = frameloc[ymo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1] + 
000264  eb0c0a8c          ADD      r10,r12,r12,LSL #2
000268  eb031a8a          ADD      r10,r3,r10,LSL #6
00026c  f814b00a          LDRB     r11,[r4,r10]
000270  eb000a80          ADD      r10,r0,r0,LSL #2
000274  eb031a8a          ADD      r10,r3,r10,LSL #6
000278  f10a0a01          ADD      r10,r10,#1
00027c  f814a00a          LDRB     r10,[r4,r10]
000280  44da              ADD      r10,r10,r11
000282  eb000b80          ADD      r11,r0,r0,LSL #2
000286  eb031b8b          ADD      r11,r3,r11,LSL #6
00028a  f814b00b          LDRB     r11,[r4,r11]
00028e  eb0c0e8c          ADD      lr,r12,r12,LSL #2
000292  eb031e8e          ADD      lr,r3,lr,LSL #6
000296  f10e0e01          ADD      lr,lr,#1
00029a  f814e00e          LDRB     lr,[r4,lr]
00029e  44f3              ADD      r11,r11,lr
0002a0  f8cdb000          STR      r11,[sp,#0]
0002a4  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0002a8  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0002ac  f8cda010          STR      r10,[sp,#0x10]
;;;87     						(frameloc[y*RES_WIDTH + xpo] + frameloc[ymo*RES_WIDTH + xpo+1])/2;
;;;88     						
;;;89     				uint16_t intense_XMO_YMO = frameloc[ymo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x] + 
0002b0  eb0c0a8c          ADD      r10,r12,r12,LSL #2
0002b4  eb081a8a          ADD      r10,r8,r10,LSL #6
0002b8  f814a00a          LDRB     r10,[r4,r10]
0002bc  eb000b80          ADD      r11,r0,r0,LSL #2
0002c0  eb011b8b          ADD      r11,r1,r11,LSL #6
0002c4  f814b00b          LDRB     r11,[r4,r11]
0002c8  44da              ADD      r10,r10,r11
0002ca  eb000b80          ADD      r11,r0,r0,LSL #2
0002ce  eb081b8b          ADD      r11,r8,r11,LSL #6
0002d2  f814b00b          LDRB     r11,[r4,r11]
0002d6  eb0c0e8c          ADD      lr,r12,r12,LSL #2
0002da  eb011e8e          ADD      lr,r1,lr,LSL #6
0002de  f814e00e          LDRB     lr,[r4,lr]
0002e2  44f3              ADD      r11,r11,lr
0002e4  f8cdb000          STR      r11,[sp,#0]
0002e8  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0002ec  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0002f0  f8cda00c          STR      r10,[sp,#0xc]
;;;90     						(frameloc[y*RES_WIDTH + xmo] + frameloc[ymo*RES_WIDTH + x])/2;
;;;91     				
;;;92     				uint16_t grad1 = abs(intense_XPO_Y - intense_XMO_Y
0002f4  e9ddeb08          LDRD     lr,r11,[sp,#0x20]
0002f8  ebab0b0e          SUB      r11,r11,lr
0002fc  eb0b0e09          ADD      lr,r11,r9
000300  f8ddb018          LDR      r11,[sp,#0x18]
000304  ebae0e0b          SUB      lr,lr,r11
000308  f8ddb010          LDR      r11,[sp,#0x10]
00030c  44de              ADD      lr,lr,r11
00030e  f8ddb00c          LDR      r11,[sp,#0xc]
000312  ebae0a0b          SUB      r10,lr,r11
000316  f1ba0f00          CMP      r10,#0
00031a  db01              BLT      |L1.800|
00031c  46d3              MOV      r11,r10
00031e  e001              B        |L1.804|
                  |L1.800|
000320  f1ca0b00          RSB      r11,r10,#0
                  |L1.804|
000324  fa1ffb8b          UXTH     r11,r11
000328  f8cdb008          STR      r11,[sp,#8]
;;;93     					+ intense_XPO_YPO - intense_XMO_YPO
;;;94     					+ intense_XPO_YMO - intense_XMO_YMO);
;;;95     					
;;;96     				uint16_t grad2 = abs(intense_X_YPO -	intense_X_YMO
00032c  f8dde014          LDR      lr,[sp,#0x14]
000330  f8ddb01c          LDR      r11,[sp,#0x1c]
000334  ebab0b0e          SUB      r11,r11,lr
000338  eb0b0e09          ADD      lr,r11,r9
00033c  f8ddb010          LDR      r11,[sp,#0x10]
000340  ebae0e0b          SUB      lr,lr,r11
000344  f8ddb018          LDR      r11,[sp,#0x18]
000348  44de              ADD      lr,lr,r11
00034a  f8ddb00c          LDR      r11,[sp,#0xc]
00034e  ebae0a0b          SUB      r10,lr,r11
000352  f1ba0f00          CMP      r10,#0
000356  db01              BLT      |L1.860|
000358  46d3              MOV      r11,r10
00035a  e001              B        |L1.864|
                  |L1.860|
00035c  f1ca0b00          RSB      r11,r10,#0
                  |L1.864|
000360  fa1ffb8b          UXTH     r11,r11
000364  f8cdb004          STR      r11,[sp,#4]
;;;97     					+ intense_XPO_YPO -	intense_XPO_YMO
;;;98     					+ intense_XMO_YPO - intense_XMO_YMO);
;;;99     				
;;;100    				grad = grad1 + grad2;
000368  e9ddba01          LDRD     r11,r10,[sp,#4]
00036c  44da              ADD      r10,r10,r11
00036e  fa1ffa8a          UXTH     r10,r10
000372  f8cda028          STR      r10,[sp,#0x28]
;;;101    								/*
;;;102    				if(grad > THREASHOLD) {
;;;103    
;;;104    					frameloc[ymo*RES_WIDTH + xmo] = 255;
;;;105    					frameloc[y*RES_WIDTH + xmo] = 255;
;;;106    					frameloc[ymo*RES_WIDTH + x] = 255;
;;;107    					frameloc[y*RES_WIDTH + x] = 255; */
;;;108    
;;;109    /*
;;;110    					frameloc[ymo*RES_WIDTH + xmo] = '1';
;;;111    					frameloc[y*RES_WIDTH + xmo] = '1';
;;;112    					frameloc[ymo*RES_WIDTH + x] = '1';
;;;113    					frameloc[y*RES_WIDTH + x] = '1'; 
;;;114    */
;;;115    /*
;;;116    				}
;;;117    				else {
;;;118    
;;;119    					frameloc[ymo*RES_WIDTH + xmo] = 0;
;;;120    					frameloc[y*RES_WIDTH + xmo] = 0;
;;;121    					frameloc[ymo*RES_WIDTH + x] = 0;
;;;122    					frameloc[y*RES_WIDTH + x] = 0;
;;;123    */
;;;124    					/*
;;;125    					frameloc[ymo*RES_WIDTH + xmo] = '0';
;;;126    					frameloc[y*RES_WIDTH + xmo] = '0';
;;;127    					frameloc[ymo*RES_WIDTH + x] = '0';
;;;128    					frameloc[y*RES_WIDTH + x] = '0'; 
;;;129    */
;;;130    			 //} 
;;;131    			 if( y == x) {
000376  4288              CMP      r0,r1
000378  d11a              BNE      |L1.944|
;;;132    						
;;;133    						frameloc[ymo*RES_WIDTH + xmo] = 255;
00037a  f04f0aff          MOV      r10,#0xff
00037e  eb0c0b8c          ADD      r11,r12,r12,LSL #2
000382  eb081b8b          ADD      r11,r8,r11,LSL #6
000386  f804a00b          STRB     r10,[r4,r11]
;;;134    						frameloc[y*RES_WIDTH + xmo] = 255;
00038a  eb000b80          ADD      r11,r0,r0,LSL #2
00038e  eb081b8b          ADD      r11,r8,r11,LSL #6
000392  f804a00b          STRB     r10,[r4,r11]
;;;135    						frameloc[ymo*RES_WIDTH + x] = 255;
000396  eb0c0b8c          ADD      r11,r12,r12,LSL #2
00039a  eb011b8b          ADD      r11,r1,r11,LSL #6
00039e  f804a00b          STRB     r10,[r4,r11]
;;;136    						frameloc[y*RES_WIDTH + x] = 255;
0003a2  eb000b80          ADD      r11,r0,r0,LSL #2
0003a6  eb011b8b          ADD      r11,r1,r11,LSL #6
0003aa  f804a00b          STRB     r10,[r4,r11]
0003ae  e019              B        |L1.996|
                  |L1.944|
;;;137    					}
;;;138    					else {
;;;139    						frameloc[ymo*RES_WIDTH + xmo] = 0;
0003b0  f04f0a00          MOV      r10,#0
0003b4  eb0c0b8c          ADD      r11,r12,r12,LSL #2
0003b8  eb081b8b          ADD      r11,r8,r11,LSL #6
0003bc  f804a00b          STRB     r10,[r4,r11]
;;;140    						frameloc[y*RES_WIDTH + xmo] = 0;
0003c0  eb000b80          ADD      r11,r0,r0,LSL #2
0003c4  eb081b8b          ADD      r11,r8,r11,LSL #6
0003c8  f804a00b          STRB     r10,[r4,r11]
;;;141    						frameloc[ymo*RES_WIDTH + x] = 0;
0003cc  eb0c0b8c          ADD      r11,r12,r12,LSL #2
0003d0  eb011b8b          ADD      r11,r1,r11,LSL #6
0003d4  f804a00b          STRB     r10,[r4,r11]
;;;142    						frameloc[y*RES_WIDTH + x] = 0;
0003d8  eb000b80          ADD      r11,r0,r0,LSL #2
0003dc  eb011b8b          ADD      r11,r1,r11,LSL #6
0003e0  f804a00b          STRB     r10,[r4,r11]
                  |L1.996|
0003e4  1c8b              ADDS     r3,r1,#2              ;63
0003e6  b299              UXTH     r1,r3                 ;63
                  |L1.1000|
0003e8  f5b17f9f          CMP      r1,#0x13e             ;63
0003ec  f6ffae4e          BLT      |L1.140|
0003f0  1c81              ADDS     r1,r0,#2              ;60
0003f2  b288              UXTH     r0,r1                 ;60
                  |L1.1012|
0003f4  28c6              CMP      r0,#0xc6              ;60
0003f6  f6ffae42          BLT      |L1.126|
;;;143    					}
;;;144    		}	
;;;145    	} /*
;;;146    		
;;;147    	for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
;;;148    			
;;;149    				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
;;;150    					uint8_t numOfPx = 0;
;;;151    					if(frameloc[y*RES_WIDTH + x+2] == 0) {
;;;152    						numOfPx++;
;;;153    					}
;;;154    					if(frameloc[y*RES_WIDTH + x-2] == 0) {
;;;155    						numOfPx++;
;;;156    					}
;;;157    					if(frameloc[(y+2)*RES_WIDTH + x] == 0) {
;;;158    						numOfPx++;
;;;159    					}
;;;160    					if(frameloc[(y-2)*RES_WIDTH + x] == 0) {
;;;161    						numOfPx++;
;;;162    					}
;;;163    					if(numOfPx > 2) {
;;;164    						frameloc[(y-1)*RES_WIDTH + x-1] = 0;
;;;165    						frameloc[y*RES_WIDTH + x-1] = 0;
;;;166    						frameloc[(y-1)*RES_WIDTH + x] = 0;
;;;167    						frameloc[y*RES_WIDTH + x] = 0;
;;;168    					}
;;;169    				}
;;;170    		}*/
;;;171    		
;;;172    		
;;;173    		// tell chirp to use this buffer
;;;174    		g_chirpUsb->useBuffer(frame, len+CAM_RES2_WIDTH*CAM_RES2_HEIGHT); 
0003fa  f505427a          ADD      r2,r5,#0xfa00
0003fe  4639              MOV      r1,r7
000400  4804              LDR      r0,|L1.1044|
000402  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000404  e008              B        |L1.1048|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      0x10080000
                  |L1.1036|
                          DCD      g_execArg
                  |L1.1040|
                          DCD      0x32564d43
                  |L1.1044|
                          DCD      g_chirpUsb
                  |L1.1048|
000418  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;175    	}
00041c  e06a              B        |L1.1268|
                  |L1.1054|
;;;176    	else if (100<=g_execArg && g_execArg<200)
00041e  4847              LDR      r0,|L1.1340|
000420  6800              LDR      r0,[r0,#0]  ; g_execArg
000422  2864              CMP      r0,#0x64
000424  db50              BLT      |L1.1224|
000426  4845              LDR      r0,|L1.1340|
000428  6800              LDR      r0,[r0,#0]  ; g_execArg
00042a  28c8              CMP      r0,#0xc8
00042c  da4c              BGE      |L1.1224|
;;;177    	{
;;;178    		fcc =  FOURCC('E','X',(g_execArg%100)/10 + '0', (g_execArg%10) + '0');
00042e  4843              LDR      r0,|L1.1340|
000430  6800              LDR      r0,[r0,#0]  ; g_execArg
000432  2164              MOVS     r1,#0x64
000434  fb90f2f1          SDIV     r2,r0,r1
000438  fb010012          MLS      r0,r1,r2,r0
00043c  210a              MOVS     r1,#0xa
00043e  fbb0f0f1          UDIV     r0,r0,r1
000442  3030              ADDS     r0,r0,#0x30
000444  f6450145          MOV      r1,#0x5845
000448  ea414100          ORR      r1,r1,r0,LSL #16
00044c  483b              LDR      r0,|L1.1340|
00044e  6800              LDR      r0,[r0,#0]  ; g_execArg
000450  220a              MOVS     r2,#0xa
000452  fb90f3f2          SDIV     r3,r0,r2
000456  fb020013          MLS      r0,r2,r3,r0
00045a  3030              ADDS     r0,r0,#0x30
00045c  ea416000          ORR      r0,r1,r0,LSL #24
000460  900b              STR      r0,[sp,#0x2c]
;;;179    		len = Chirp::serialize(g_chirpUsb, frame, SRAM1_SIZE, HTYPE(fcc), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS8_NO_COPY(CAM_RES2_WIDTH*CAM_RES2_HEIGHT), END);
000462  2000              MOVS     r0,#0
000464  f44f417a          MOV      r1,#0xfa00
000468  22b1              MOVS     r2,#0xb1
00046a  23c8              MOVS     r3,#0xc8
00046c  e9cd3206          STRD     r3,r2,[sp,#0x18]
000470  e9cd1008          STRD     r1,r0,[sp,#0x20]
000474  2002              MOVS     r0,#2
000476  f44f71a0          MOV      r1,#0x140
00047a  e9cd6002          STRD     r6,r0,[sp,#8]
00047e  e9cd1004          STRD     r1,r0,[sp,#0x10]
000482  2141              MOVS     r1,#0x41
000484  980b              LDR      r0,[sp,#0x2c]
000486  2364              MOVS     r3,#0x64
000488  f44f3290          MOV      r2,#0x12000
00048c  e9cd0100          STRD     r0,r1,[sp,#0]
000490  4639              MOV      r1,r7
000492  482b              LDR      r0,|L1.1344|
000494  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000496  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00049a  4605              MOV      r5,r0
;;;180    		// write frame after chirp args
;;;181    		cam_getFrame(frame+len, SRAM1_SIZE-len, CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
00049c  20c8              MOVS     r0,#0xc8
00049e  f44f71a0          MOV      r1,#0x140
0004a2  2200              MOVS     r2,#0
0004a4  e9cd2100          STRD     r2,r1,[sp,#0]
0004a8  9002              STR      r0,[sp,#8]
0004aa  f5c53190          RSB      r1,r5,#0x12000
0004ae  1978              ADDS     r0,r7,r5
0004b0  4613              MOV      r3,r2
0004b2  2221              MOVS     r2,#0x21
0004b4  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;182    
;;;183    		
;;;184    		
;;;185    		
;;;186    		// tell chirp to use this buffer
;;;187    		g_chirpUsb->useBuffer(frame, len+CAM_RES2_WIDTH*CAM_RES2_HEIGHT); 
0004b8  f505427a          ADD      r2,r5,#0xfa00
0004bc  4639              MOV      r1,r7
0004be  4820              LDR      r0,|L1.1344|
0004c0  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0004c2  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
0004c6  e015              B        |L1.1268|
                  |L1.1224|
;;;188    	}
;;;189    	else
;;;190    		cam_getFrameChirp(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
0004c8  2021              MOVS     r0,#0x21
0004ca  900a              STR      r0,[sp,#0x28]
0004cc  2000              MOVS     r0,#0
0004ce  9009              STR      r0,[sp,#0x24]
0004d0  9008              STR      r0,[sp,#0x20]
0004d2  f44f70a0          MOV      r0,#0x140
0004d6  9007              STR      r0,[sp,#0x1c]
0004d8  20c8              MOVS     r0,#0xc8
0004da  9006              STR      r0,[sp,#0x18]
0004dc  4818              LDR      r0,|L1.1344|
0004de  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0004e0  a906              ADD      r1,sp,#0x18
0004e2  ab07              ADD      r3,sp,#0x1c
0004e4  aa08              ADD      r2,sp,#0x20
0004e6  e9cd1000          STRD     r1,r0,[sp,#0]
0004ea  a909              ADD      r1,sp,#0x24
0004ec  a80a              ADD      r0,sp,#0x28
0004ee  f7fffffe          BL       _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;191    
;;;192    }
0004f2  bf00              NOP      
                  |L1.1268|
0004f4  b00d              ADD      sp,sp,#0x34
0004f6  e8bd8ff0          POP      {r4-r11,pc}
;;;193    
                          ENDP

                  _Z9videoLoopv PROC ; videoLoop()
;;;194    int videoLoop()
0004fa  b500              PUSH     {lr}
;;;195    {
0004fc  b087              SUB      sp,sp,#0x1c
;;;196    	if (g_execArg==0)
0004fe  480f              LDR      r0,|L1.1340|
000500  6800              LDR      r0,[r0,#0]  ; g_execArg
000502  b9a8              CBNZ     r0,|L1.1328|
;;;197    		cam_getFrameChirp(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
000504  2021              MOVS     r0,#0x21
000506  9006              STR      r0,[sp,#0x18]
000508  2000              MOVS     r0,#0
00050a  9005              STR      r0,[sp,#0x14]
00050c  9004              STR      r0,[sp,#0x10]
00050e  f44f70a0          MOV      r0,#0x140
000512  9003              STR      r0,[sp,#0xc]
000514  20c8              MOVS     r0,#0xc8
000516  9002              STR      r0,[sp,#8]
000518  4809              LDR      r0,|L1.1344|
00051a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00051c  a902              ADD      r1,sp,#8
00051e  ab03              ADD      r3,sp,#0xc
000520  aa04              ADD      r2,sp,#0x10
000522  e9cd1000          STRD     r1,r0,[sp,#0]
000526  a905              ADD      r1,sp,#0x14
000528  a806              ADD      r0,sp,#0x18
00052a  f7fffffe          BL       _Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp ; cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;198    	else 
00052e  e002              B        |L1.1334|
                  |L1.1328|
;;;199    		sendCustom();
000530  2001              MOVS     r0,#1
000532  f7fffffe          BL       _Z10sendCustomh ; sendCustom(unsigned char)
                  |L1.1334|
;;;200    	return 0;
000536  2000              MOVS     r0,#0
;;;201    }
000538  b007              ADD      sp,sp,#0x1c
00053a  bd00              POP      {pc}
;;;202    
                          ENDP

                  |L1.1340|
                          DCD      g_execArg
                  |L1.1344|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  76696465          DCB      "video",0
000004  6f00    
000006  00                DCB      0
000007  00                DCB      0
000008  636f6e74          DCB      "continuous stream of raw camera frames",0
00000c  696e756f
000010  75732073
000014  74726561
000018  6d206f66
00001c  20726177
000020  2063616d
000024  65726120
000028  6672616d
00002c  657300  

                          AREA ||.data||, DATA, ALIGN=2

                  g_progVideo
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z10videoSetupv ; videoSetup()
                          DCD      _Z9videoLoopv ; videoLoop()

;*** Start embedded assembler ***

#line 1 "progvideo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___13_progvideo_cpp_578abb71___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_578abb71___Z7__REVSHi|
#line 144
|__asm___13_progvideo_cpp_578abb71___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
