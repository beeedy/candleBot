; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\edgedetect.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\edgedetect.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\edgedetect.crf edgedetect.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z9toggleLEDv PROC ; toggleLED()
;;;242    
;;;243    void toggleLED() {
000000  b50e              PUSH     {r1-r3,lr}
;;;244    	
;;;245    			// Toggle LED to see when we're sending frames
;;;246    
;;;247    	static uint8_t toggle = 0;
;;;248    	toggle ^= 1;
000002  48fd              LDR      r0,|L1.1016|
000004  7800              LDRB     r0,[r0,#0]  ; toggle
000006  f0800001          EOR      r0,r0,#1
00000a  49fb              LDR      r1,|L1.1016|
00000c  7008              STRB     r0,[r1,#0]
;;;249    	if(toggle) {
00000e  4608              MOV      r0,r1
000010  7800              LDRB     r0,[r0,#0]  ; toggle
000012  b148              CBZ      r0,|L1.40|
;;;250    		led_setRGB(255, 255, 255);
000014  20ff              MOVS     r0,#0xff
000016  9002              STR      r0,[sp,#8]
000018  9001              STR      r0,[sp,#4]
00001a  466a              MOV      r2,sp
00001c  a901              ADD      r1,sp,#4
00001e  9000              STR      r0,[sp,#0]
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;251    	}
000026  e009              B        |L1.60|
                  |L1.40|
;;;252    	else {
;;;253    		led_setRGB(0, 0, 0);
000028  2000              MOVS     r0,#0
00002a  9002              STR      r0,[sp,#8]
00002c  9001              STR      r0,[sp,#4]
00002e  466a              MOV      r2,sp
000030  a901              ADD      r1,sp,#4
000032  9000              STR      r0,[sp,#0]
000034  a802              ADD      r0,sp,#8
000036  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;254    	}
00003a  bf00              NOP      
                  |L1.60|
;;;255    }
00003c  bd0e              POP      {r1-r3,pc}
                          ENDP

                  _Z14edgeDetect_runv PROC ; edgeDetect_run()
;;;51     
;;;52     void edgeDetect_run()
00003e  b098              SUB      sp,sp,#0x60
;;;53     {
;;;54     	cam_setBrightness(BRIGHTNESS); 				// 0 to 255
000040  2064              MOVS     r0,#0x64
000042  9016              STR      r0,[sp,#0x58]
000044  a816              ADD      r0,sp,#0x58
000046  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;55     	uint8_t *frame = (uint8_t *)SRAM1_LOC;
00004a  48ec              LDR      r0,|L1.1020|
00004c  9015              STR      r0,[sp,#0x54]
;;;56     	uint8_t *frameloc = (uint8_t *)(SRAM1_LOC + 2);
00004e  1c84              ADDS     r4,r0,#2
;;;57     	uint8_t *sendPositions = (uint8_t*)(SRAM1_LOC);
000050  4680              MOV      r8,r0
;;;58     	float theta;
;;;59     	// recieve the command to get a frame
;;;60     	while(1) {
000052  e2f2              B        |L1.1594|
                  |L1.84|
;;;61     		led_setRGB(255, 0, 0);
000054  20ff              MOVS     r0,#0xff
000056  9013              STR      r0,[sp,#0x4c]
000058  2000              MOVS     r0,#0
00005a  9012              STR      r0,[sp,#0x48]
00005c  aa11              ADD      r2,sp,#0x44
00005e  a912              ADD      r1,sp,#0x48
000060  9011              STR      r0,[sp,#0x44]
000062  a813              ADD      r0,sp,#0x4c
000064  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;62     		
;;;63     		while(1) {
000068  e00b              B        |L1.130|
                  |L1.106|
;;;64     			if(UART_DATA_AVAILABLE) {
00006a  48e5              LDR      r0,|L1.1024|
00006c  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
00006e  b140              CBZ      r0,|L1.130|
;;;65     				//rxbuf = UART_ReceiveByte(LPC_USART0);
;;;66     				theta = (float)UART_DATA_AVAILABLE;
000070  48e3              LDR      r0,|L1.1024|
000072  7800              LDRB     r0,[r0,#0]  ; UART_DATA_AVAILABLE
000074  f7fffffe          BL       __aeabi_ui2f
000078  9014              STR      r0,[sp,#0x50]
;;;67     				UART_DATA_AVAILABLE = 0;
00007a  2000              MOVS     r0,#0
00007c  49e0              LDR      r1,|L1.1024|
00007e  7008              STRB     r0,[r1,#0]
;;;68     				break;
000080  e000              B        |L1.132|
                  |L1.130|
000082  e7f2              B        |L1.106|
                  |L1.132|
000084  bf00              NOP      
;;;69     			}
;;;70     		}
;;;71     		
;;;72     		theta = (float)(theta*(3.14159/180.0));
000086  9814              LDR      r0,[sp,#0x50]
000088  f7fffffe          BL       __aeabi_f2d
00008c  4681              MOV      r9,r0
00008e  4add              LDR      r2,|L1.1028|
000090  4bdd              LDR      r3,|L1.1032|
000092  f7fffffe          BL       __aeabi_dmul
000096  4606              MOV      r6,r0
000098  f7fffffe          BL       __aeabi_d2f
00009c  9014              STR      r0,[sp,#0x50]
;;;73     		
;;;74     		led_setRGB(0, 255, 0);
00009e  2000              MOVS     r0,#0
0000a0  9011              STR      r0,[sp,#0x44]
0000a2  20ff              MOVS     r0,#0xff
0000a4  9012              STR      r0,[sp,#0x48]
0000a6  2000              MOVS     r0,#0
0000a8  aa13              ADD      r2,sp,#0x4c
0000aa  a912              ADD      r1,sp,#0x48
0000ac  9013              STR      r0,[sp,#0x4c]
0000ae  a811              ADD      r0,sp,#0x44
0000b0  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;75     		
;;;76     			cam_getFrame(frameloc, SRAM1_SIZE, CAM_GRAB_M1R2, 0, 0, RES_WIDTH, RES_HEIGHT);
0000b4  20c8              MOVS     r0,#0xc8
0000b6  f44f71a0          MOV      r1,#0x140
0000ba  2200              MOVS     r2,#0
0000bc  4613              MOV      r3,r2
0000be  e9cd2100          STRD     r2,r1,[sp,#0]
0000c2  9002              STR      r0,[sp,#8]
0000c4  2221              MOVS     r2,#0x21
0000c6  f44f3190          MOV      r1,#0x12000
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       _Z12cam_getFramePhjhtttt ; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
;;;77     			// second time through gets a frame fine
;;;78     			frameloc = frame;
0000d0  9c15              LDR      r4,[sp,#0x54]
;;;79     			for(uint16_t y = 1 + OFFSET; y < (RES_HEIGHT - OFFSET); y += 2) {
0000d2  2003              MOVS     r0,#3
0000d4  e1bc              B        |L1.1104|
                  |L1.214|
;;;80     				uint16_t ypo = y + 1;
0000d6  1c41              ADDS     r1,r0,#1
0000d8  b28a              UXTH     r2,r1
;;;81     				uint16_t ymo = y - 1;
0000da  1e41              SUBS     r1,r0,#1
0000dc  b28e              UXTH     r6,r1
;;;82     				for(uint16_t x = 1 + OFFSET; x < (RES_WIDTH - OFFSET); x += 2) {
0000de  2103              MOVS     r1,#3
0000e0  e1b0              B        |L1.1092|
                  |L1.226|
;;;83     					uint16_t xpo = x + 1;
0000e2  f1010a01          ADD      r10,r1,#1
0000e6  fa1ff38a          UXTH     r3,r10
;;;84     					uint16_t xmo = x - 1;
0000ea  f1a10a01          SUB      r10,r1,#1
0000ee  fa1ff78a          UXTH     r7,r10
;;;85     					uint16_t grad; 
;;;86     					
;;;87     					uint16_t intense_XPO_Y = frameloc[y*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1] + 
0000f2  eb000a80          ADD      r10,r0,r0,LSL #2
0000f6  eb031a8a          ADD      r10,r3,r10,LSL #6
0000fa  f814b00a          LDRB     r11,[r4,r10]
0000fe  eb020a82          ADD      r10,r2,r2,LSL #2
000102  eb031a8a          ADD      r10,r3,r10,LSL #6
000106  f10a0a01          ADD      r10,r10,#1
00010a  f814a00a          LDRB     r10,[r4,r10]
00010e  44da              ADD      r10,r10,r11
000110  eb020b82          ADD      r11,r2,r2,LSL #2
000114  eb031b8b          ADD      r11,r3,r11,LSL #6
000118  f814b00b          LDRB     r11,[r4,r11]
00011c  eb000e80          ADD      lr,r0,r0,LSL #2
000120  eb031e8e          ADD      lr,r3,lr,LSL #6
000124  f10e0e01          ADD      lr,lr,#1
000128  f814e00e          LDRB     lr,[r4,lr]
00012c  44f3              ADD      r11,r11,lr
00012e  f8cdb01c          STR      r11,[sp,#0x1c]
000132  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000136  eb0a0a6b          ADD      r10,r10,r11,ASR #1
00013a  f8cda040          STR      r10,[sp,#0x40]
;;;88     							(frameloc[ypo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1])/2;
;;;89     					
;;;90     					uint16_t intense_XMO_Y = frameloc[y*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x] + 
00013e  eb000a80          ADD      r10,r0,r0,LSL #2
000142  eb071a8a          ADD      r10,r7,r10,LSL #6
000146  f814a00a          LDRB     r10,[r4,r10]
00014a  eb020b82          ADD      r11,r2,r2,LSL #2
00014e  eb011b8b          ADD      r11,r1,r11,LSL #6
000152  f814b00b          LDRB     r11,[r4,r11]
000156  44da              ADD      r10,r10,r11
000158  eb020b82          ADD      r11,r2,r2,LSL #2
00015c  eb071b8b          ADD      r11,r7,r11,LSL #6
000160  f814b00b          LDRB     r11,[r4,r11]
000164  eb000e80          ADD      lr,r0,r0,LSL #2
000168  eb011e8e          ADD      lr,r1,lr,LSL #6
00016c  f814e00e          LDRB     lr,[r4,lr]
000170  44f3              ADD      r11,r11,lr
000172  f8cdb01c          STR      r11,[sp,#0x1c]
000176  eb0b7bdb          ADD      r11,r11,r11,LSR #31
00017a  eb0a0a6b          ADD      r10,r10,r11,ASR #1
00017e  f8cda03c          STR      r10,[sp,#0x3c]
;;;91     							(frameloc[ypo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x])/2;
;;;92     					
;;;93     					uint16_t intense_X_YPO = frameloc[ypo*RES_WIDTH + x] + frameloc[(ypo+1)*RES_WIDTH + xpo] + 
000182  eb020a82          ADD      r10,r2,r2,LSL #2
000186  eb011a8a          ADD      r10,r1,r10,LSL #6
00018a  f814b00a          LDRB     r11,[r4,r10]
00018e  f1020a01          ADD      r10,r2,#1
000192  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000196  eb031a8a          ADD      r10,r3,r10,LSL #6
00019a  f814a00a          LDRB     r10,[r4,r10]
00019e  44da              ADD      r10,r10,r11
0001a0  f1020b01          ADD      r11,r2,#1
0001a4  eb0b0b8b          ADD      r11,r11,r11,LSL #2
0001a8  eb011b8b          ADD      r11,r1,r11,LSL #6
0001ac  f814b00b          LDRB     r11,[r4,r11]
0001b0  eb020e82          ADD      lr,r2,r2,LSL #2
0001b4  eb031e8e          ADD      lr,r3,lr,LSL #6
0001b8  f814e00e          LDRB     lr,[r4,lr]
0001bc  44f3              ADD      r11,r11,lr
0001be  f8cdb01c          STR      r11,[sp,#0x1c]
0001c2  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0001c6  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0001ca  f8cda038          STR      r10,[sp,#0x38]
;;;94     							(frameloc[(ypo+1)*RES_WIDTH + x] + frameloc[ypo*RES_WIDTH + xpo])/2;
;;;95     					
;;;96     					uint16_t intense_XPO_YPO = frameloc[ypo*RES_WIDTH + xpo] + frameloc[(ypo+1)*RES_WIDTH + xpo+1] + 
0001ce  eb020a82          ADD      r10,r2,r2,LSL #2
0001d2  eb031a8a          ADD      r10,r3,r10,LSL #6
0001d6  f814b00a          LDRB     r11,[r4,r10]
0001da  f1020a01          ADD      r10,r2,#1
0001de  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0001e2  eb031a8a          ADD      r10,r3,r10,LSL #6
0001e6  f10a0a01          ADD      r10,r10,#1
0001ea  f814a00a          LDRB     r10,[r4,r10]
0001ee  44da              ADD      r10,r10,r11
0001f0  f1020b01          ADD      r11,r2,#1
0001f4  eb0b0b8b          ADD      r11,r11,r11,LSL #2
0001f8  eb031b8b          ADD      r11,r3,r11,LSL #6
0001fc  f814b00b          LDRB     r11,[r4,r11]
000200  eb020e82          ADD      lr,r2,r2,LSL #2
000204  eb031e8e          ADD      lr,r3,lr,LSL #6
000208  f10e0e01          ADD      lr,lr,#1
00020c  f814e00e          LDRB     lr,[r4,lr]
000210  44f3              ADD      r11,r11,lr
000212  f8cdb01c          STR      r11,[sp,#0x1c]
000216  eb0b7bdb          ADD      r11,r11,r11,LSR #31
00021a  eb0a096b          ADD      r9,r10,r11,ASR #1
;;;97     							(frameloc[(ypo+1)*RES_WIDTH + xpo] + frameloc[ypo*RES_WIDTH + xpo+1])/2;
;;;98     					
;;;99     					uint16_t intense_XMO_YPO = frameloc[(ypo)*RES_WIDTH + xmo] + frameloc[(ypo+1)*RES_WIDTH + x] + 
00021e  eb020a82          ADD      r10,r2,r2,LSL #2
000222  eb071a8a          ADD      r10,r7,r10,LSL #6
000226  f814b00a          LDRB     r11,[r4,r10]
00022a  f1020a01          ADD      r10,r2,#1
00022e  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000232  eb011a8a          ADD      r10,r1,r10,LSL #6
000236  f814a00a          LDRB     r10,[r4,r10]
00023a  44da              ADD      r10,r10,r11
00023c  f1020b01          ADD      r11,r2,#1
000240  eb0b0b8b          ADD      r11,r11,r11,LSL #2
000244  eb071b8b          ADD      r11,r7,r11,LSL #6
000248  f814b00b          LDRB     r11,[r4,r11]
00024c  eb020e82          ADD      lr,r2,r2,LSL #2
000250  eb011e8e          ADD      lr,r1,lr,LSL #6
000254  f814e00e          LDRB     lr,[r4,lr]
000258  44f3              ADD      r11,r11,lr
00025a  f8cdb01c          STR      r11,[sp,#0x1c]
00025e  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000262  eb0a0a6b          ADD      r10,r10,r11,ASR #1
000266  f8cda034          STR      r10,[sp,#0x34]
;;;100    							(frameloc[(ypo+1)*RES_WIDTH + xmo] + frameloc[ypo*RES_WIDTH + x])/2;
;;;101    					
;;;102    					uint16_t intense_X_YMO = frameloc[ymo*RES_WIDTH + x] + frameloc[y*RES_WIDTH + xpo] + 
00026a  eb060a86          ADD      r10,r6,r6,LSL #2
00026e  eb011a8a          ADD      r10,r1,r10,LSL #6
000272  f814a00a          LDRB     r10,[r4,r10]
000276  eb000b80          ADD      r11,r0,r0,LSL #2
00027a  eb031b8b          ADD      r11,r3,r11,LSL #6
00027e  f814b00b          LDRB     r11,[r4,r11]
000282  44da              ADD      r10,r10,r11
000284  eb000b80          ADD      r11,r0,r0,LSL #2
000288  eb011b8b          ADD      r11,r1,r11,LSL #6
00028c  f814b00b          LDRB     r11,[r4,r11]
000290  eb060e86          ADD      lr,r6,r6,LSL #2
000294  eb031e8e          ADD      lr,r3,lr,LSL #6
000298  f814e00e          LDRB     lr,[r4,lr]
00029c  44f3              ADD      r11,r11,lr
00029e  f8cdb01c          STR      r11,[sp,#0x1c]
0002a2  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0002a6  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0002aa  f8cda030          STR      r10,[sp,#0x30]
;;;103    							(frameloc[y*RES_WIDTH + x] + frameloc[ymo*RES_WIDTH + xpo])/2;
;;;104    							
;;;105    					uint16_t intense_XPO_YMO = frameloc[ymo*RES_WIDTH + xpo] + frameloc[y*RES_WIDTH + xpo+1] + 
0002ae  eb060a86          ADD      r10,r6,r6,LSL #2
0002b2  eb031a8a          ADD      r10,r3,r10,LSL #6
0002b6  f814b00a          LDRB     r11,[r4,r10]
0002ba  eb000a80          ADD      r10,r0,r0,LSL #2
0002be  eb031a8a          ADD      r10,r3,r10,LSL #6
0002c2  f10a0a01          ADD      r10,r10,#1
0002c6  f814a00a          LDRB     r10,[r4,r10]
0002ca  44da              ADD      r10,r10,r11
0002cc  eb000b80          ADD      r11,r0,r0,LSL #2
0002d0  eb031b8b          ADD      r11,r3,r11,LSL #6
0002d4  f814b00b          LDRB     r11,[r4,r11]
0002d8  eb060e86          ADD      lr,r6,r6,LSL #2
0002dc  eb031e8e          ADD      lr,r3,lr,LSL #6
0002e0  f10e0e01          ADD      lr,lr,#1
0002e4  f814e00e          LDRB     lr,[r4,lr]
0002e8  44f3              ADD      r11,r11,lr
0002ea  f8cdb01c          STR      r11,[sp,#0x1c]
0002ee  eb0b7bdb          ADD      r11,r11,r11,LSR #31
0002f2  eb0a0a6b          ADD      r10,r10,r11,ASR #1
0002f6  f8cda02c          STR      r10,[sp,#0x2c]
;;;106    							(frameloc[y*RES_WIDTH + xpo] + frameloc[ymo*RES_WIDTH + xpo+1])/2;
;;;107    							
;;;108    					uint16_t intense_XMO_YMO = frameloc[ymo*RES_WIDTH + xmo] + frameloc[y*RES_WIDTH + x] + 
0002fa  eb060a86          ADD      r10,r6,r6,LSL #2
0002fe  eb071a8a          ADD      r10,r7,r10,LSL #6
000302  f814a00a          LDRB     r10,[r4,r10]
000306  eb000b80          ADD      r11,r0,r0,LSL #2
00030a  eb011b8b          ADD      r11,r1,r11,LSL #6
00030e  f814b00b          LDRB     r11,[r4,r11]
000312  44da              ADD      r10,r10,r11
000314  eb000b80          ADD      r11,r0,r0,LSL #2
000318  eb071b8b          ADD      r11,r7,r11,LSL #6
00031c  f814b00b          LDRB     r11,[r4,r11]
000320  eb060e86          ADD      lr,r6,r6,LSL #2
000324  eb011e8e          ADD      lr,r1,lr,LSL #6
000328  f814e00e          LDRB     lr,[r4,lr]
00032c  44f3              ADD      r11,r11,lr
00032e  f8cdb01c          STR      r11,[sp,#0x1c]
000332  eb0b7bdb          ADD      r11,r11,r11,LSR #31
000336  eb0a0a6b          ADD      r10,r10,r11,ASR #1
00033a  f8cda028          STR      r10,[sp,#0x28]
;;;109    							(frameloc[y*RES_WIDTH + xmo] + frameloc[ymo*RES_WIDTH + x])/2;
;;;110    					
;;;111    					uint16_t grad1 = abs(intense_XPO_Y - intense_XMO_Y
00033e  e9ddeb0f          LDRD     lr,r11,[sp,#0x3c]
000342  ebab0b0e          SUB      r11,r11,lr
000346  eb0b0e09          ADD      lr,r11,r9
00034a  f8ddb034          LDR      r11,[sp,#0x34]
00034e  ebae0e0b          SUB      lr,lr,r11
000352  f8ddb02c          LDR      r11,[sp,#0x2c]
000356  44de              ADD      lr,lr,r11
000358  f8ddb028          LDR      r11,[sp,#0x28]
00035c  ebae0a0b          SUB      r10,lr,r11
000360  f1ba0f00          CMP      r10,#0
000364  db01              BLT      |L1.874|
000366  46d3              MOV      r11,r10
000368  e001              B        |L1.878|
                  |L1.874|
00036a  f1ca0b00          RSB      r11,r10,#0
                  |L1.878|
00036e  fa1ffb8b          UXTH     r11,r11
000372  f8cdb024          STR      r11,[sp,#0x24]
;;;112    						+ intense_XPO_YPO - intense_XMO_YPO
;;;113    						+ intense_XPO_YMO - intense_XMO_YMO);
;;;114    						
;;;115    					uint16_t grad2 = abs(intense_X_YPO -	intense_X_YMO
000376  f8dde030          LDR      lr,[sp,#0x30]
00037a  f8ddb038          LDR      r11,[sp,#0x38]
00037e  ebab0b0e          SUB      r11,r11,lr
000382  eb0b0e09          ADD      lr,r11,r9
000386  f8ddb02c          LDR      r11,[sp,#0x2c]
00038a  ebae0e0b          SUB      lr,lr,r11
00038e  f8ddb034          LDR      r11,[sp,#0x34]
000392  44de              ADD      lr,lr,r11
000394  f8ddb028          LDR      r11,[sp,#0x28]
000398  ebae0a0b          SUB      r10,lr,r11
00039c  f1ba0f00          CMP      r10,#0
0003a0  db01              BLT      |L1.934|
0003a2  46d3              MOV      r11,r10
0003a4  e001              B        |L1.938|
                  |L1.934|
0003a6  f1ca0b00          RSB      r11,r10,#0
                  |L1.938|
0003aa  fa1ffb8b          UXTH     r11,r11
0003ae  f8cdb020          STR      r11,[sp,#0x20]
;;;116    						+ intense_XPO_YPO -	intense_XPO_YMO
;;;117    						+ intense_XMO_YPO - intense_XMO_YMO);
;;;118    					
;;;119    					grad = grad1 + grad2;
0003b2  e9ddba08          LDRD     r11,r10,[sp,#0x20]
0003b6  44da              ADD      r10,r10,r11
0003b8  fa1ffc8a          UXTH     r12,r10
;;;120    					
;;;121    
;;;122    					// when it loops a second time through, it cannot make it passed the next line
;;;123    					// Deleted if statement, hopefully that'll do 'er. Really inefficient though
;;;124    
;;;125    					if(grad > THREASHOLD) {
0003bc  f1bc0f96          CMP      r12,#0x96
0003c0  dd24              BLE      |L1.1036|
;;;126    						frameloc[ymo*RES_WIDTH + xmo] = 255;
0003c2  f04f0aff          MOV      r10,#0xff
0003c6  eb060b86          ADD      r11,r6,r6,LSL #2
0003ca  eb071b8b          ADD      r11,r7,r11,LSL #6
0003ce  f804a00b          STRB     r10,[r4,r11]
;;;127    						frameloc[y*RES_WIDTH + xmo] = 255;
0003d2  eb000b80          ADD      r11,r0,r0,LSL #2
0003d6  eb071b8b          ADD      r11,r7,r11,LSL #6
0003da  f804a00b          STRB     r10,[r4,r11]
;;;128    						frameloc[ymo*RES_WIDTH + x] = 255;
0003de  eb060b86          ADD      r11,r6,r6,LSL #2
0003e2  eb011b8b          ADD      r11,r1,r11,LSL #6
0003e6  f804a00b          STRB     r10,[r4,r11]
;;;129    						frameloc[y*RES_WIDTH + x] = 255;
0003ea  eb000b80          ADD      r11,r0,r0,LSL #2
0003ee  eb011b8b          ADD      r11,r1,r11,LSL #6
0003f2  f804a00b          STRB     r10,[r4,r11]
0003f6  e023              B        |L1.1088|
                  |L1.1016|
                          DCD      toggle
                  |L1.1020|
                          DCD      0x10080000
                  |L1.1024|
                          DCD      UART_DATA_AVAILABLE
                  |L1.1028|
                          DCD      0xa50de270
                  |L1.1032|
                          DCD      0x3f91df45
                  |L1.1036|
;;;130    					}
;;;131    					else {
;;;132    						frameloc[ymo*RES_WIDTH + xmo] = 0;
00040c  f04f0a00          MOV      r10,#0
000410  eb060b86          ADD      r11,r6,r6,LSL #2
000414  eb071b8b          ADD      r11,r7,r11,LSL #6
000418  f804a00b          STRB     r10,[r4,r11]
;;;133    						frameloc[y*RES_WIDTH + xmo] = 0;
00041c  eb000b80          ADD      r11,r0,r0,LSL #2
000420  eb071b8b          ADD      r11,r7,r11,LSL #6
000424  f804a00b          STRB     r10,[r4,r11]
;;;134    						frameloc[ymo*RES_WIDTH + x] = 0;
000428  eb060b86          ADD      r11,r6,r6,LSL #2
00042c  eb011b8b          ADD      r11,r1,r11,LSL #6
000430  f804a00b          STRB     r10,[r4,r11]
;;;135    						frameloc[y*RES_WIDTH + x] = 0;
000434  eb000b80          ADD      r11,r0,r0,LSL #2
000438  eb011b8b          ADD      r11,r1,r11,LSL #6
00043c  f804a00b          STRB     r10,[r4,r11]
                  |L1.1088|
000440  1c8b              ADDS     r3,r1,#2              ;82
000442  b299              UXTH     r1,r3                 ;82
                  |L1.1092|
000444  f5b17f9f          CMP      r1,#0x13e             ;82
000448  f6ffae4b          BLT      |L1.226|
00044c  1c81              ADDS     r1,r0,#2              ;79
00044e  b288              UXTH     r0,r1                 ;79
                  |L1.1104|
000450  28c6              CMP      r0,#0xc6              ;79
000452  f6ffae40          BLT      |L1.214|
;;;136    					}
;;;137    					
;;;138    					
;;;139    					/*				TEST DIAGONAL LINE
;;;140    					if( y == x) {
;;;141    						
;;;142    						frameloc[ymo*RES_WIDTH + xmo] = 255;
;;;143    						frameloc[y*RES_WIDTH + xmo] = 255;
;;;144    						frameloc[ymo*RES_WIDTH + x] = 255;
;;;145    						frameloc[y*RES_WIDTH + x] = 255;
;;;146    					}
;;;147    					else {
;;;148    						frameloc[ymo*RES_WIDTH + xmo] = 0;
;;;149    						frameloc[y*RES_WIDTH + xmo] = 0;
;;;150    						frameloc[ymo*RES_WIDTH + x] = 0;
;;;151    						frameloc[y*RES_WIDTH + x] = 0;
;;;152    					}
;;;153    					*/
;;;154    			}
;;;155    		}
;;;156    			
;;;157    			led_setRGB(255, 0, 255);
000456  20ff              MOVS     r0,#0xff
000458  9011              STR      r0,[sp,#0x44]
00045a  2000              MOVS     r0,#0
00045c  9012              STR      r0,[sp,#0x48]
00045e  20ff              MOVS     r0,#0xff
000460  aa13              ADD      r2,sp,#0x4c
000462  a912              ADD      r1,sp,#0x48
000464  9013              STR      r0,[sp,#0x4c]
000466  a811              ADD      r0,sp,#0x44
000468  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;158    		
;;;159    			// floor detection & 
;;;160    		uint16_t count = 0;
00046c  2500              MOVS     r5,#0
;;;161    		for(float x = (POS_OFFSET); x < (RES_WIDTH - POS_OFFSET); x += 2.0) {
00046e  f04f4081          MOV      r0,#0x40800000
000472  9010              STR      r0,[sp,#0x40]
000474  e0c4              B        |L1.1536|
                  |L1.1142|
;;;162    			
;;;163    			float xPos;
;;;164    			for(float y = (RES_HEIGHT - POS_OFFSET); y > POS_OFFSET; y -= 2.0) {
000476  4871              LDR      r0,|L1.1596|
000478  900e              STR      r0,[sp,#0x38]
00047a  e0aa              B        |L1.1490|
                  |L1.1148|
;;;165    				
;;;166    				if(frameloc[((uint8_t)y)*RES_WIDTH + (uint16_t)x] != 0) {
00047c  9810              LDR      r0,[sp,#0x40]
00047e  f7fffffe          BL       __aeabi_f2uiz
000482  b286              UXTH     r6,r0
000484  980e              LDR      r0,[sp,#0x38]
000486  f7fffffe          BL       __aeabi_f2uiz
00048a  b2c0              UXTB     r0,r0
00048c  eb000080          ADD      r0,r0,r0,LSL #2
000490  eb061080          ADD      r0,r6,r0,LSL #6
000494  5c20              LDRB     r0,[r4,r0]
000496  2800              CMP      r0,#0
000498  d07e              BEQ      |L1.1432|
;;;167    					float yPos;
;;;168    					
;;;169    					double theta_ph = atan(((2.0*y-200.0)/200.0)*TAN_FOVH_DIV_2);		// This works
00049a  980e              LDR      r0,[sp,#0x38]
00049c  f7fffffe          BL       __aeabi_f2d
0004a0  4681              MOV      r9,r0
0004a2  2200              MOVS     r2,#0
0004a4  f04f4380          MOV      r3,#0x40000000
0004a8  f7fffffe          BL       __aeabi_dmul
0004ac  2200              MOVS     r2,#0
0004ae  4b64              LDR      r3,|L1.1600|
0004b0  e9cd0102          STRD     r0,r1,[sp,#8]
0004b4  f7fffffe          BL       __aeabi_dsub
0004b8  2200              MOVS     r2,#0
0004ba  4b61              LDR      r3,|L1.1600|
0004bc  e9cd0104          STRD     r0,r1,[sp,#0x10]
0004c0  f7fffffe          BL       __aeabi_ddiv
0004c4  4a5f              LDR      r2,|L1.1604|
0004c6  4b60              LDR      r3,|L1.1608|
0004c8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0004cc  f7fffffe          BL       __aeabi_dmul
0004d0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004d4  f7fffffe          BL       atan
0004d8  4606              MOV      r6,r0
0004da  460f              MOV      r7,r1
;;;170    					double cos_theta_ph = cos(theta_ph);
0004dc  4630              MOV      r0,r6
0004de  4639              MOV      r1,r7
0004e0  f7fffffe          BL       ||cos||
0004e4  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;171    					//sendPositions[count] = cos_theta_ph*128;
;;;172    					double cos_theta_minus_ph = cos(theta - theta_ph);
0004e8  9814              LDR      r0,[sp,#0x50]
0004ea  f7fffffe          BL       __aeabi_f2d
0004ee  4681              MOV      r9,r0
0004f0  4632              MOV      r2,r6
0004f2  463b              MOV      r3,r7
0004f4  f7fffffe          BL       __aeabi_dsub
0004f8  e9cd0108          STRD     r0,r1,[sp,#0x20]
0004fc  f7fffffe          BL       ||cos||
000500  e9cd010a          STRD     r0,r1,[sp,#0x28]
;;;173    					//sendPositions[count] = cos_theta_minus_ph*128;
;;;174    					//sendPositions[count] = (int8_t)(theta_ph * (180.0/3.142));				// these two lines send x,y pairs
;;;175    					//sendPositions[count] = (cos_theta_ph)/(cos_theta_minus_ph);
;;;176    					yPos = ((double)((3.9)*((cos_theta_ph))))/(cos_theta_minus_ph) + 
000504  9814              LDR      r0,[sp,#0x50]
000506  f7fffffe          BL       __aeabi_f2d
00050a  4632              MOV      r2,r6
00050c  463b              MOV      r3,r7
00050e  e9cd0100          STRD     r0,r1,[sp,#0]
000512  f7fffffe          BL       __aeabi_dsub
000516  e9cd0102          STRD     r0,r1,[sp,#8]
00051a  f7fffffe          BL       tan
00051e  4681              MOV      r9,r0
000520  4a4a              LDR      r2,|L1.1612|
000522  4b4b              LDR      r3,|L1.1616|
000524  f7fffffe          BL       __aeabi_dmul
000528  e9cd0106          STRD     r0,r1,[sp,#0x18]
00052c  f04f3033          MOV      r0,#0x33333333
000530  4948              LDR      r1,|L1.1620|
000532  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000536  f7fffffe          BL       __aeabi_dmul
00053a  4681              MOV      r9,r0
00053c  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000540  f7fffffe          BL       __aeabi_ddiv
000544  e9cd0104          STRD     r0,r1,[sp,#0x10]
000548  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00054c  f7fffffe          BL       __aeabi_dadd
000550  e9cd0108          STRD     r0,r1,[sp,#0x20]
000554  f7fffffe          BL       __aeabi_d2f
000558  4683              MOV      r11,r0
;;;177    										(2.1)*tan(theta - theta_ph);
;;;178    					
;;;179    					xPos = (yPos*(2.0*x - 320.0))/417.0;	// hopefully the x cord. won't be super inaccurate. Not crucial though.
00055a  9810              LDR      r0,[sp,#0x40]
00055c  f7fffffe          BL       __aeabi_f2d
000560  4681              MOV      r9,r0
000562  2200              MOVS     r2,#0
000564  f04f4380          MOV      r3,#0x40000000
000568  f7fffffe          BL       __aeabi_dmul
00056c  2200              MOVS     r2,#0
00056e  4b3a              LDR      r3,|L1.1624|
000570  e9cd0100          STRD     r0,r1,[sp,#0]
000574  f7fffffe          BL       __aeabi_dsub
000578  e9cd0104          STRD     r0,r1,[sp,#0x10]
00057c  4658              MOV      r0,r11
00057e  f7fffffe          BL       __aeabi_f2d
000582  e9cd0102          STRD     r0,r1,[sp,#8]
000586  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00058a  f7fffffe          BL       __aeabi_dmul
00058e  2200              MOVS     r2,#0
000590  4b32              LDR      r3,|L1.1628|
000592  e9cd0106          STRD     r0,r1,[sp,#0x18]
000596  e000              B        |L1.1434|
                  |L1.1432|
000598  e00e              B        |L1.1464|
                  |L1.1434|
00059a  f7fffffe          BL       __aeabi_ddiv
00059e  e9cd0108          STRD     r0,r1,[sp,#0x20]
0005a2  f7fffffe          BL       __aeabi_d2f
0005a6  900f              STR      r0,[sp,#0x3c]
;;;180    
;;;181    			  	
;;;182    					//sendPositions[2*count + 1] = yPos;	  //(int8_t)yPos;
;;;183    					
;;;184    					//sendPositions[2*count] = x;				// these two lines send x,y pairs
;;;185    					sendPositions[count] = yPos;	  //(int8_t)yPos;
0005a8  4658              MOV      r0,r11
0005aa  f7fffffe          BL       __aeabi_f2uiz
0005ae  f8080005          STRB     r0,[r8,r5]
;;;186    					
;;;187    					count++;
0005b2  1c68              ADDS     r0,r5,#1
0005b4  b285              UXTH     r5,r0
;;;188    					break;
0005b6  e016              B        |L1.1510|
                  |L1.1464|
0005b8  980e              LDR      r0,[sp,#0x38]         ;164
0005ba  f7fffffe          BL       __aeabi_f2d
0005be  4681              MOV      r9,r0                 ;164
0005c0  2200              MOVS     r2,#0                 ;164
0005c2  f04f4380          MOV      r3,#0x40000000        ;164
0005c6  f7fffffe          BL       __aeabi_dsub
0005ca  4606              MOV      r6,r0                 ;164
0005cc  f7fffffe          BL       __aeabi_d2f
0005d0  900e              STR      r0,[sp,#0x38]         ;164
                  |L1.1490|
0005d2  980e              LDR      r0,[sp,#0x38]         ;164
0005d4  f7fffffe          BL       __aeabi_f2d
0005d8  4606              MOV      r6,r0                 ;164
0005da  2200              MOVS     r2,#0                 ;164
0005dc  4b20              LDR      r3,|L1.1632|
0005de  f7fffffe          BL       __aeabi_cdrcmple
0005e2  f4ffaf4b          BCC      |L1.1148|
                  |L1.1510|
0005e6  9810              LDR      r0,[sp,#0x40]         ;161
0005e8  f7fffffe          BL       __aeabi_f2d
0005ec  4681              MOV      r9,r0                 ;161
0005ee  2200              MOVS     r2,#0                 ;161
0005f0  f04f4380          MOV      r3,#0x40000000        ;161
0005f4  f7fffffe          BL       __aeabi_dadd
0005f8  4606              MOV      r6,r0                 ;161
0005fa  f7fffffe          BL       __aeabi_d2f
0005fe  9010              STR      r0,[sp,#0x40]         ;161
                  |L1.1536|
000600  9810              LDR      r0,[sp,#0x40]         ;161
000602  f7fffffe          BL       __aeabi_f2d
000606  4606              MOV      r6,r0                 ;161
000608  2200              MOVS     r2,#0                 ;161
00060a  4b16              LDR      r3,|L1.1636|
00060c  f7fffffe          BL       __aeabi_cdcmple
000610  f4ffaf31          BCC      |L1.1142|
;;;189    				}
;;;190    				else {
;;;191    					// color the floor a different color. Not used in this scenario
;;;192    				}
;;;193    			}
;;;194    		}
;;;195    		
;;;196    		UART_Send(LPC_USART0, sendPositions, count, BLOCKING);	// sends x,y pairs
000614  2301              MOVS     r3,#1
000616  462a              MOV      r2,r5
000618  4641              MOV      r1,r8
00061a  4813              LDR      r0,|L1.1640|
00061c  f7fffffe          BL       UART_Send
;;;197    		//UART_Send(LPC_USART0, sendPositions, count, BLOCKING);	// sends only the y distance
;;;198    		count = 0;
000620  2500              MOVS     r5,#0
;;;199    		
;;;200    		// Byte packing for processing script
;;;201    		/*
;;;202    		for(uint16_t y = 0; y < RES_HEIGHT/2; y += 1) {
;;;203    			for (uint16_t x = 0; x < RES_WIDTH/2; x += 8) {
;;;204    		*/
;;;205    		
;;;206    	/*		// Checkerboard for configuring things
;;;207    				if(y&1) 
;;;208    					frameloc[y*20 + x/8] = 0x55;
;;;209    				else
;;;210    					frameloc[y*20 + x/8] = 0xAA;
;;;211    	*/
;;;212    	/*
;;;213    					frameloc[y*(RES_WIDTH/16) + x/8] = (frameloc[(y*2+1)*RES_WIDTH + (2*(x+0)+1)] & 0x80) | 
;;;214    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+1)+1)] & 0x40) |
;;;215    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+2)+1)] & 0x20) |
;;;216    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+3)+1)] & 0x10) |
;;;217    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+4)+1)] & 0x08) |
;;;218    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+5)+1)] & 0x04) |
;;;219    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+6)+1)] & 0x02) |
;;;220    																					(frameloc[(y*2+1)*RES_WIDTH + (2*(x+7)+1)] & 0x01); 
;;;221    
;;;222    			}
;;;223    		}
;;;224    		*/
;;;225    				
;;;226    		// UART_Send(LPC_USART0, frameloc, 16000, BLOCKING);   // Send the frame to see it in tera term. NO BYTE PACK
;;;227    		// frame[0] = 'A';																		 // key byte
;;;228    		// UART_Send(LPC_USART0, frameloc, 2001, BLOCKING);		 // Send the frame byte packed to see it in processing
;;;229    		
;;;230    		//UART_Send(LPC_USART0, sendPositions, (RES_WIDTH - 2*POS_OFFSET)>>1, BLOCKING);
;;;231    		
;;;232    		// clear array
;;;233    		for(uint8_t x = 0; x < 240; x++) {
000622  2000              MOVS     r0,#0
000624  e004              B        |L1.1584|
                  |L1.1574|
;;;234    			sendPositions[x] = 255;
000626  21ff              MOVS     r1,#0xff
000628  f8081000          STRB     r1,[r8,r0]
00062c  1c41              ADDS     r1,r0,#1              ;233
00062e  b2c8              UXTB     r0,r1                 ;233
                  |L1.1584|
000630  28f0              CMP      r0,#0xf0              ;233
000632  dbf8              BLT      |L1.1574|
;;;235    		}
;;;236    		
;;;237    		toggleLED();
000634  f7fffffe          BL       _Z9toggleLEDv ; toggleLED()
;;;238    		
;;;239    	}
000638  bf00              NOP      
                  |L1.1594|
00063a  e50b              B        |L1.84|
;;;240    }
;;;241    
                          ENDP

                  |L1.1596|
                          DCD      0x43440000
                  |L1.1600|
                          DCD      0x40690000
                  |L1.1604|
                          DCD      0x3d70a3d7
                  |L1.1608|
                          DCD      0x3fdbd70a
                  |L1.1612|
                          DCD      0xcccccccd
                  |L1.1616|
                          DCD      0x4000cccc
                  |L1.1620|
                          DCD      0x400f3333
                  |L1.1624|
                          DCD      0x40740000
                  |L1.1628|
                          DCD      0x407a1000
                  |L1.1632|
                          DCD      0x40100000
                  |L1.1636|
                          DCD      0x4073c000
                  |L1.1640|
                          DCD      0x40081000

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  toggle
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "edgedetect.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_edgedetect_cpp_d813bcf6___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___14_edgedetect_cpp_d813bcf6___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_edgedetect_cpp_d813bcf6___Z7__REVSHi|
#line 144
|__asm___14_edgedetect_cpp_d813bcf6___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
